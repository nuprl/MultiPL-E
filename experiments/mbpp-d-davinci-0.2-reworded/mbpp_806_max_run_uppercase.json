{
  "name": "mbpp_806_max_run_uppercase",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\n*/\nlong max_run_uppercase(string test_str) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_run_uppercase;\n\n    assert(candidate(\"GeMKSForGERksISBESt\") == 5L);\n    assert(candidate(\"PrECIOusMOVemENTSYT\") == 6L);\n    assert(candidate(\"GooGLEFluTTER\") == 4L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tmax_run = max(max_run, current_run);\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(isupper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong cur_run = 0;\n\tfor (size_t i = 0; i < test_str.length; ++i)\n\t{\n\t\tif (isupper(test_str[i]))\n\t\t{\n\t\t\t++cur_run;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, cur_run);\n\t\t\tcur_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, cur_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong cur_run = 0;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcur_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, cur_run);\n\t\t\tcur_run = 0;\n\t\t}\n\t}\n\t\n\treturn max(max_run, cur_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\t\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tmax_run = max(max_run, current_run);\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (long i = 0; i < test_str.length; i++) {\n\t\tif (isupper(test_str[i])) {\n\t\t\tcurrent_run++;\n\t\t\tmax_run = max(max_run, current_run);\n\t\t} else {\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\trun++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, run);\n\t\t\trun = 0;\n\t\t}\n\t}\n\tmax_run = max(max_run, run);\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\t\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\t\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tfor (int i = 0; i < test_str.length; i++) \n\t{\n\t\tif (isupper(test_str[i])) \n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\tmax_run = max(max_run, current_run);\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(char c; test_str)\n\t{\n\t\tif(c.isUpper)\n\t\t{\n\t\t\tcurrent_run++;\n\t\t\tmax_run = max(max_run, current_run);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(ch; test_str)\n\t{\n\t\tif(isUpper(ch))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, current_run);\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max(max_run, current_run);\n}",
    "{\n\tlong max_run = 0;\n\tlong run = 0;\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\trun++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_run = max(max_run, run);\n\t\t\trun = 0;\n\t\t}\n\t}\n\treturn max(max_run, run);\n}",
    "{\n\tlong max_run = 0;\n\tlong current_run = 0;\n\t\n\tforeach(c; test_str)\n\t{\n\t\tif(isUpper(c))\n\t\t{\n\t\t\tcurrent_run++;\n\t\t\tmax_run = max(max_run, current_run);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_run = 0;\n\t\t}\n\t}\n\treturn max_run;\n}"
  ]
}