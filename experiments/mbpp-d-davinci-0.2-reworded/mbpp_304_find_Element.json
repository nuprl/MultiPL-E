{
  "name": "mbpp_304_find_Element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find element at a given index after number of rotations.\n\t\n*/\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Element;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong size = arr.length;\n\tlong[] new_arr = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong[] temp = new long[end - start + 1];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\ttemp[k - start] = new_arr[k];\n\t\t\t}\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = temp[(k - start + 1) % temp.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = range[0] + ((index - range[0]) + rotations) % (range[1] - range[0] + 1);\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] temp_arr = new long[arr.length];\n\tlong[] temp_arr2 = new long[arr.length];\n\tlong[] temp_arr3 = new long[arr.length];\n\tlong[] temp_arr4 = new long[arr.length];\n\tlong[] temp_arr5 = new long[arr.length];\n\tlong[] temp_arr6 = new long[arr.length];\n\tlong[] temp_arr7 = new long[arr.length];\n\tlong[] temp_arr8 = new long[arr.length];\n\tlong[] temp_arr9 = new long[arr.length];\n\tlong[] temp_arr10 = new long[arr.length];\n\tlong[] temp_arr11 = new long[arr.length];\n\tlong[] temp_arr12 = new long[arr.length];\n\tlong[] temp_arr13 = new long[arr.length];\n\tlong[] temp_arr14 = new long[arr.length];\n\tlong[] temp_arr15 = new long[arr.length];\n\tlong[] temp_arr16 = new long[arr.length];\n\tlong[] temp_arr17 = new long[arr.length];\n\tlong[] temp_arr18 = new long[arr.length];\n\tlong[] temp_arr19 = new long[arr.length];\n\tlong[] temp_arr20 = new long[arr.length];\n\tlong[] temp_arr21 = new long[arr.length];\n\tlong[] temp_arr22 = new long[arr.length];\n\tlong[] temp_arr23 = new long[arr.length];\n\tlong[] temp_arr24 = new long[arr.length];\n\tlong[] temp_arr25 = new long[arr.length];\n\tlong[] temp_arr26 = new long[arr.length];\n\tlong[] temp_arr27 = new long[arr.length];\n\tlong[] temp_arr28 = new long[arr.length];\n\tlong[] temp_arr29 = new long[arr.length];\n\tlong[] temp_arr30 = new long[arr.length];\n\tlong[] temp_arr31 = new long[arr.length];\n\tlong[] temp_arr32 = new long[arr.length",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[temp.length - 1..$];\n\t\tnew_arr[start + temp.length..end] = temp[0..temp.length - 1];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = temp[temp.length - 1..$];\n\tnew_arr[rotations..$] = temp[0..temp.length - 1];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong offset = index - start;\n\tlong new_index = (offset % len) + start;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tlong i = 0;\n\t\tforeach(elem; arr[range[0]..range[1]])\n\t\t{\n\t\t\ttemp[i] = elem;\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlong rot = rotations % temp.length;\n\t\t\n\t\tforeach(elem; arr[range[0]..range[1]])\n\t\t{\n\t\t\tnew_arr[range[0] + (elem + rot) % temp.length] = elem;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[temp_arr.length-1..$];\n\t\tnew_arr[start+temp_arr.length..end] = temp_arr[0..temp_arr.length-1];\n\t}\n\treturn new_arr[(index+rotations)%arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\tforeach(i, val; arr)\n\t{\n\t\tnew_arr[(i + rotations) % arr.length] = val;\n\t}\n\tforeach(i, val; ranges)\n\t{\n\t\tnew_ranges[(i + rotations) % ranges.length] = val;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_index = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(long i, long j; zip(arr, new_arr))\n\t{\n\t\tnew_arr[j] = i;\n\t}\n\tforeach(long i, long j; zip(index, new_index))\n\t{\n\t\tnew_index[j] = i;\n\t}\n\tforeach(long[] i, long j; zip(ranges, new_ranges))\n\t{\n\t\tnew_ranges[j] = i[0];\n\t}\n\t\n\tforeach(long i; 0 .. rotations)\n\t{\n\t\tlong temp = new_arr[new_ranges[0]];\n\t\tforeach(long j; 0 .. new_ranges.length - 1)\n\t\t{\n\t\t\tnew_arr[new_ranges[j]] = new_arr[new_ranges[j + 1]];\n\t\t}\n\t\tnew_arr[new_ranges[new_ranges.length - 1]] = temp;\n\t}\n\t\n\treturn new_arr[new_index[0]];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\ttemp[start..end] = temp_arr[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\ttemp = temp[rotations..$] ~ temp[0..rotations-1];\n\treturn temp[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(rotations == 0)\n\t\t\treturn arr[index];\n\t\telse\n\t\t{\n\t\t\tif(range[0] == 0)\n\t\t\t{\n\t\t\t\tif(index < range[1])\n\t\t\t\t{\n\t\t\t\t\tif(index + rotations > range[1])\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index + rotations - range[1] - 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index + rotations;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tindex = index - range[1] - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(index > range[0])\n\t\t\t\t{\n\t\t\t\t\tif(index - rotations < range[0])\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index - rotations + range[0] + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index - rotations;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tindex = index + range[0] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % range[1] - range[0] + 1;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[end];\n\t\tfor(long i = end; i > start; i--)\n\t\t{\n\t\t\tarr[i] = arr[i-1];\n\t\t}\n\t\tarr[start] = temp;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\ttemp[ranges[i][0]] = arr[ranges[i][1]];\n\t\ttemp[ranges[i][1]] = arr[ranges[i][0]];\n\t}\n\t\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong temp1 = temp[0];\n\t\tforeach(j; 0 .. temp.length-1)\n\t\t{\n\t\t\ttemp[j] = temp[j+1];\n\t\t}\n\t\ttemp[temp.length-1] = temp1;\n\t}\n\t\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}"
  ]
}