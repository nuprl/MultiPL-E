{
  "name": "mbpp_304_find_Element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to find element at a given index after number of rotations.\n\t\n*/\nlong find_Element(long[] arr, long[][] ranges, long rotations, long index) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = find_Element;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [[0L, 2L], [0L, 3L]], 2L, 1L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L], [[0L, 1L], [0L, 2L]], 1L, 2L) == 3L);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L], [[0L, 1L], [0L, 2L]], 1L, 1L) == 1L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong size = arr.length;\n\tlong[] new_arr = new long[size];\n\tforeach(i; 0..size)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong[] temp = new long[end - start + 1];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\ttemp[k - start] = new_arr[k];\n\t\t\t}\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = temp[(k - start + 1) % temp.length];\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = range[0] + ((index - range[0]) + rotations) % (range[1] - range[0] + 1);\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] temp_arr = new long[arr.length];\n\tlong[] temp_arr2 = new long[arr.length];\n\tlong[] temp_arr3 = new long[arr.length];\n\tlong[] temp_arr4 = new long[arr.length];\n\tlong[] temp_arr5 = new long[arr.length];\n\tlong[] temp_arr6 = new long[arr.length];\n\tlong[] temp_arr7 = new long[arr.length];\n\tlong[] temp_arr8 = new long[arr.length];\n\tlong[] temp_arr9 = new long[arr.length];\n\tlong[] temp_arr10 = new long[arr.length];\n\tlong[] temp_arr11 = new long[arr.length];\n\tlong[] temp_arr12 = new long[arr.length];\n\tlong[] temp_arr13 = new long[arr.length];\n\tlong[] temp_arr14 = new long[arr.length];\n\tlong[] temp_arr15 = new long[arr.length];\n\tlong[] temp_arr16 = new long[arr.length];\n\tlong[] temp_arr17 = new long[arr.length];\n\tlong[] temp_arr18 = new long[arr.length];\n\tlong[] temp_arr19 = new long[arr.length];\n\tlong[] temp_arr20 = new long[arr.length];\n\tlong[] temp_arr21 = new long[arr.length];\n\tlong[] temp_arr22 = new long[arr.length];\n\tlong[] temp_arr23 = new long[arr.length];\n\tlong[] temp_arr24 = new long[arr.length];\n\tlong[] temp_arr25 = new long[arr.length];\n\tlong[] temp_arr26 = new long[arr.length];\n\tlong[] temp_arr27 = new long[arr.length];\n\tlong[] temp_arr28 = new long[arr.length];\n\tlong[] temp_arr29 = new long[arr.length];\n\tlong[] temp_arr30 = new long[arr.length];\n\tlong[] temp_arr31 = new long[arr.length];\n\tlong[] temp_arr32 = new long[arr.length",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[temp.length - 1..$];\n\t\tnew_arr[start + temp.length..end] = temp[0..temp.length - 1];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = temp[temp.length - 1..$];\n\tnew_arr[rotations..$] = temp[0..temp.length - 1];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong offset = index - start;\n\tlong new_index = (offset % len) + start;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tlong i = 0;\n\t\tforeach(elem; arr[range[0]..range[1]])\n\t\t{\n\t\t\ttemp[i] = elem;\n\t\t\ti++;\n\t\t}\n\t\t\n\t\tlong rot = rotations % temp.length;\n\t\t\n\t\tforeach(elem; arr[range[0]..range[1]])\n\t\t{\n\t\t\tnew_arr[range[0] + (elem + rot) % temp.length] = elem;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[temp_arr.length-1..$];\n\t\tnew_arr[start+temp_arr.length..end] = temp_arr[0..temp_arr.length-1];\n\t}\n\treturn new_arr[(index+rotations)%arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\tforeach(i, val; arr)\n\t{\n\t\tnew_arr[(i + rotations) % arr.length] = val;\n\t}\n\tforeach(i, val; ranges)\n\t{\n\t\tnew_ranges[(i + rotations) % ranges.length] = val;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_index = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(long i, long j; zip(arr, new_arr))\n\t{\n\t\tnew_arr[j] = i;\n\t}\n\tforeach(long i, long j; zip(index, new_index))\n\t{\n\t\tnew_index[j] = i;\n\t}\n\tforeach(long[] i, long j; zip(ranges, new_ranges))\n\t{\n\t\tnew_ranges[j] = i[0];\n\t}\n\t\n\tforeach(long i; 0 .. rotations)\n\t{\n\t\tlong temp = new_arr[new_ranges[0]];\n\t\tforeach(long j; 0 .. new_ranges.length - 1)\n\t\t{\n\t\t\tnew_arr[new_ranges[j]] = new_arr[new_ranges[j + 1]];\n\t\t}\n\t\tnew_arr[new_ranges[new_ranges.length - 1]] = temp;\n\t}\n\t\n\treturn new_arr[new_index[0]];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\ttemp[start..end] = temp_arr[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\ttemp = temp[rotations..$] ~ temp[0..rotations-1];\n\treturn temp[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(rotations == 0)\n\t\t\treturn arr[index];\n\t\telse\n\t\t{\n\t\t\tif(range[0] == 0)\n\t\t\t{\n\t\t\t\tif(index < range[1])\n\t\t\t\t{\n\t\t\t\t\tif(index + rotations > range[1])\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index + rotations - range[1] - 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index + rotations;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tindex = index - range[1] - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(index > range[0])\n\t\t\t\t{\n\t\t\t\t\tif(index - rotations < range[0])\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index - rotations + range[0] + 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tindex = index - rotations;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tindex = index + range[0] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % range[1] - range[0] + 1;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[end];\n\t\tfor(long i = end; i > start; i--)\n\t\t{\n\t\t\tarr[i] = arr[i-1];\n\t\t}\n\t\tarr[start] = temp;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\ttemp[ranges[i][0]] = arr[ranges[i][1]];\n\t\ttemp[ranges[i][1]] = arr[ranges[i][0]];\n\t}\n\t\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong temp1 = temp[0];\n\t\tforeach(j; 0 .. temp.length-1)\n\t\t{\n\t\t\ttemp[j] = temp[j+1];\n\t\t}\n\t\ttemp[temp.length-1] = temp1;\n\t}\n\t\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tlong j = 0;\n\t\tfor(long i = range[0]; i <= range[1]; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = range[0]; i <= range[1]; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(r; ranges)\n\t{\n\t\tlong[] range = r;\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong mid = (start + end) / 2;\n\t\tlong temp = new_arr[start];\n\t\tnew_arr[start] = new_arr[mid];\n\t\tnew_arr[mid] = temp;\n\t}\n\tlong[] rot_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\trot_arr[(i + rotations) % arr.length] = new_arr[i];\n\t}\n\treturn rot_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] temp_arr = new long[arr.length];\n\tlong[] temp_arr2 = new long[arr.length];\n\tlong[] temp_arr3 = new long[arr.length];\n\tlong[] temp_arr4 = new long[arr.length];\n\tlong[] temp_arr5 = new long[arr.length];\n\t\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tfor(long i = 0; i < ranges.length; i++)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\t\n\t\tfor(long j = start; j <= end; j++)\n\t\t{\n\t\t\ttemp_arr[j] = new_arr[j];\n\t\t}\n\t\t\n\t\tlong k = 0;\n\t\tfor(long j = end + 1; j < new_arr.length; j++)\n\t\t{\n\t\t\ttemp_arr2[k] = new_arr[j];\n\t\t\tk++;\n\t\t}\n\t\t\n\t\tfor(long j = 0; j <= start - 1; j++)\n\t\t{\n\t\t\ttemp_arr3[j] = new_arr[j];\n\t\t}\n\t\t\n\t\tfor(long j = 0; j < temp_arr2.length; j++)\n\t\t{\n\t\t\ttemp_arr4[j] = temp_arr2[j];\n\t\t}\n\t\t\n\t\tfor(long j = 0; j < temp_arr.length; j++)\n\t\t{\n\t\t\ttemp_arr5[j] = temp_arr[j];\n\t\t}\n\t\t\n\t\tfor(long j = 0; j < temp_arr4.length; j++)\n\t\t{\n\t\t\tnew_arr[j] = temp_arr4[j];\n\t\t}\n\t\t\n\t\tfor(long j = 0; j < temp_arr5.length; j++)\n",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong diff = end - start;\n\tlong new_index = (index + diff) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{ \n    long n = arr.length; \n    long[] new_index = new long[n]; \n    long[] temp = new long[n]; \n    long[] temp2 = new long[n]; \n    long[] temp3 = new long[n]; \n    long[] temp4 = new long[n]; \n    long[] temp5 = new long[n]; \n    long[] temp6 = new long[n]; \n    long[] temp7 = new long[n]; \n    long[] temp8 = new long[n]; \n    long[] temp9 = new long[n]; \n    long[] temp10 = new long[n]; \n    long[] temp11 = new long[n]; \n    long[] temp12 = new long[n]; \n    long[] temp13 = new long[n]; \n    long[] temp14 = new long[n]; \n    long[] temp15 = new long[n]; \n    long[] temp16 = new long[n]; \n    long[] temp17 = new long[n]; \n    long[] temp18 = new long[n]; \n    long[] temp19 = new long[n]; \n    long[] temp20 = new long[n]; \n    long[] temp21 = new long[n]; \n    long[] temp22 = new long[n]; \n    long[] temp23 = new long[n]; \n    long[] temp24 = new long[n]; \n    long[] temp25 = new long[n]; \n    long[] temp26 = new long[n]; \n    long[] temp27 = new long[n]; \n    long[] temp28 = new long[n]; \n    long[] temp29 = new long[n]; \n    long[] temp30 = new long[n]; \n    long[] temp31 = new long[n]; \n    long[] temp32 = new long[n]; \n    long[] temp33 = new long[n]; \n    long[] temp34 = new long[n]; \n    long[] temp35 = new long[n]; \n    long[] temp36 = new long[n]; \n    long[] temp37 = new long[n]; \n    long[] temp",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1..$] = temp[0..1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong len = end - start + 1;\n\t\tlong[] temp = new long[len];\n\t\tforeach(j, arr_index; start .. end)\n\t\t{\n\t\t\ttemp[j - start] = arr[arr_index];\n\t\t}\n\t\tlong[] rotated_temp = rotate(temp, rotations % len);\n\t\tforeach(j, arr_index; start .. end)\n\t\t{\n\t\t\tnew_arr[arr_index] = rotated_temp[j - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\tauto [l, r] = range;\n\t\trotations = rotations % (r - l + 1);\n\t\tif(index >= l && index <= r)\n\t\t{\n\t\t\tif(index + rotations > r)\n\t\t\t{\n\t\t\t\tindex = l + (index + rotations - r - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex += rotations;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tlong[] temp_arr2 = arr[end+1..$];\n\t\tnew_arr = temp_arr2 ~ temp_arr;\n\t\tarr = new_arr;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = new_arr[$-rotations..$];\n\tnew_arr[$-rotations..$] = temp;\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = temp[$-1..0];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\ttemp[j - start] = new_arr[j];\n\t\t}\n\t\tforeach(j; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[j] = temp[(j - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations % ranges.length];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (index + length - start) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong offset = index - start;\n\tlong new_index = (start + offset) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[temp.length-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\trotations = (rotations - r[1]) % arr.length;\n\t\trotations = (rotations + arr.length) % arr.length;\n\t}\n\treturn arr[(int)((index + rotations) % arr.length)];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = (index + rotations) % arr.length;\n\t\t\treturn arr[index];\n\t\t}\n\t}\n\treturn -1;\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = index - start;\n\tlong new_index_mod = new_index % length;\n\tlong new_index_mod_abs = abs(new_index_mod);\n\tlong new_index_mod_abs_mod = new_index_mod_abs % length;\n\tlong new_index_mod_abs_mod_abs = abs(new_index_mod_abs_mod);\n\tlong new_index_mod_abs_mod_abs_mod = new_index_mod_abs_mod_abs % length;\n\tlong new_index_mod_abs_mod_abs_mod_abs = abs(new_index_mod_abs_mod_abs_mod);\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod = new_index_mod_abs_mod_abs_mod_abs % length;\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod_abs = abs(new_index_mod_abs_mod_abs_mod_abs_mod);\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod = new_index_mod_abs_mod_abs_mod_abs_mod_abs % length;\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs = abs(new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod);\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs_mod = new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs % length;\n\tlong new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs = abs(new_index_mod_abs_mod_abs_mod_abs_mod_abs_mod_abs_mod);\n\tlong new_index_mod_abs_mod_abs_",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i+1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong diff = end - start;\n\tlong new_index = (index - start) % diff;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[temp.length-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range;\n\tlong range_start;\n\tlong range_end;\n\tlong range_size;\n\tlong range_index;\n\tlong range_rotations;\n\tlong range_rotations_mod;\n\tlong range_rotations_div;\n\tlong range_rotations_rem;\n\tlong range_rotations_rem_mod;\n\tlong range_rotations_rem_div;\n\tlong range_rotations_rem_rem;\n\tlong range_rotations_rem_rem_mod;\n\tlong range_rotations_rem_rem_div;\n\tlong range_rotations_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_div;\n\tlong range_rotations_rem_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_rem_div;\n\tlong range_rotations_rem_rem_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_rem_rem_div;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_div;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem_div;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem_rem;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem_rem_mod;\n\tlong range_rotations_rem_rem_rem_rem_rem_rem_rem_rem_div;\n\tlong range_rotations_",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\tnew_arr = new_arr[$-rotations..$] ~ new_arr[0..$-rotations];\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index - start) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong index_ = index - start;\n\tlong index_rotated = (index_ + len - rotations) % len;\n\treturn arr[index_rotated];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (index - start + length) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong new_index = (i + rotations) % arr.length;\n\t\tnew_arr[new_index] = arr[i];\n\t}\n\t\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = new_arr[start];\n\t\tnew_arr[start] = new_arr[end];\n\t\tnew_arr[end] = temp;\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] newArr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tlong j = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tj = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnewArr[i] = temp[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn newArr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[$-1..0];\n\t\tnew_arr[$-1..0] = temp[0..$-1];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index - start + length) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong[] temp_arr = new long[range[1] - range[0] + 1];\n\t\tlong j = 0;\n\t\tfor(long i = range[0]; i <= range[1]; i++)\n\t\t{\n\t\t\ttemp_arr[j] = arr[i];\n\t\t\tj++;\n\t\t}\n\t\ttemp_arr = rotate(temp_arr, rotations);\n\t\tj = 0;\n\t\tfor(long i = range[0]; i <= range[1]; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp_arr[j];\n\t\t\tj++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[end];\n\t\t\tfor(long k = end; k > start; k--)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k - 1];\n\t\t\t}\n\t\t\tnew_arr[start] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\tlong[] temp = arr[rotations .. $];\n\t\tarr = arr[0 .. rotations];\n\t\tarr ~= temp;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong len = arr.length;\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong diff = end - start + 1;\n\t\tlong rot = rotations % diff;\n\t\t\n\t\tif(index >= start && index <= end)\n\t\t{\n\t\t\tif(index + rot <= end)\n\t\t\t{\n\t\t\t\tindex = index + rot;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex = start + (rot - (end - index) - 1);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[1]) % arr.length;\n\t}\n\treturn arr[(rotations + index) % arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] sub_arr = arr[start..end];\n\t\tlong[] sub_arr_rotated = sub_arr[1..sub_arr.length] ~ sub_arr[0..1];\n\t\tnew_arr[start..end] = sub_arr_rotated;\n\t}\n\t\n\tlong[] final_arr = new_arr;\n\tforeach(i; 0..rotations)\n\t{\n\t\tfinal_arr = final_arr[1..final_arr.length] ~ final_arr[0..1];\n\t}\n\treturn final_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tforeach(long i; 0..temp.length)\n\t\t{\n\t\t\tnew_arr[start+i] = temp[(temp.length-1+i)%temp.length];\n\t\t}\n\t}\n\treturn new_arr[(index+rotations)%new_arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tfor(long j = 0; j < ranges.length; j++)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp_start = temp[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\ttemp[k] = temp[k+1];\n\t\t\t}\n\t\t\ttemp[end] = temp_start;\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tauto range = ranges[rotations];\n\tauto start = range[0];\n\tauto end = range[1];\n\tauto len = arr.length;\n\tauto offset = index - start;\n\tif (offset < 0)\n\t\toffset = len + offset;\n\treturn arr[offset];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp_start = temp[start];\n\t\t\tlong temp_end = temp[end];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tif(k == start)\n\t\t\t\t{\n\t\t\t\t\ttemp[k] = temp_end;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp[k] = temp[k-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = temp[$-1..0];\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tforeach(i; range[0]..range[1])\n\t\t{\n\t\t\tnew_arr[i] = arr[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(range; ranges)\n\t\t{\n\t\t\tlong temp = new_arr[range[0]];\n\t\t\tforeach(j; range[0]..range[1])\n\t\t\t{\n\t\t\t\tnew_arr[j] = new_arr[j+1];\n\t\t\t}\n\t\t\tnew_arr[range[1]] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = new_arr[rotations..$];\n\tnew_arr[rotations..$] = temp;\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, j; ranges)\n\t{\n\t\tnew_arr[i] = arr[j];\n\t}\n\t\n\tlong[] rot_arr = new long[arr.length];\n\tforeach(i, j; ranges)\n\t{\n\t\trot_arr[j] = new_arr[i];\n\t}\n\t\n\treturn rot_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\treturn new_arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] rot_arr = new_arr[rotations..$];\n\trot_arr ~= new_arr[0..rotations];\n\treturn rot_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(long[] range; ranges) \n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] subarr = arr[start..end];\n\t\tlong[] temp_subarr = temp[start..end];\n\t\ttemp_subarr[] = subarr[0..subarr.length];\n\t\ttemp_subarr[] = subarr[subarr.length..$];\n\t}\n\t\n\trotations = rotations % arr.length;\n\tlong[] temp_arr = temp[0..rotations];\n\ttemp[0..rotations] = temp[rotations..$];\n\ttemp[rotations..$] = temp_arr[];\n\treturn temp[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong[] temp = arr[range[0]..range[1] + 1];\n\t\tnew_arr[range[0]..range[1] + 1] = temp[temp.length - 1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..new_arr.length - 1];\n\t\tnew_arr[0..new_arr.length - 1] = temp[temp.length - 1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tfor(long i = 0; i < temp.length; i++)\n\t\t{\n\t\t\ttemp[i] = arr[range[0] + i];\n\t\t}\n\t\ttemp = rotate(temp, rotations);\n\t\tfor(long i = 0; i < temp.length; i++)\n\t\t{\n\t\t\tnew_arr[range[0] + i] = temp[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[end-start..0];\n\t}\n\t\n\tlong[] final_arr = new long[arr.length];\n\tforeach(i; 0..rotations)\n\t{\n\t\tfinal_arr[i] = new_arr[arr.length-rotations+i];\n\t}\n\t\n\tforeach(i; rotations..arr.length)\n\t{\n\t\tfinal_arr[i] = new_arr[i-rotations];\n\t}\n\t\n\treturn final_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations %= range[1] - range[0] + 1;\n\t\tif(rotations == 0)\n\t\t\treturn arr[index];\n\t\telse if(rotations > 0)\n\t\t{\n\t\t\tif(index >= range[0] && index <= range[1])\n\t\t\t{\n\t\t\t\tif(index + rotations <= range[1])\n\t\t\t\t\tindex += rotations;\n\t\t\t\telse\n\t\t\t\t\tindex = range[0] + (index + rotations - range[1]) - 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(index >= range[0] && index <= range[1])\n\t\t\t{\n\t\t\t\tif(index + rotations >= range[0])\n\t\t\t\t\tindex += rotations;\n\t\t\t\telse\n\t\t\t\t\tindex = range[1] + (index + rotations - range[0]) + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations % ranges.length];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (index + length) % arr.length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + start) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1..$] = temp[0..1];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tfor(long i = 0; i < arr.length; i++)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tfor(long j = range[0]; j <= range[1]; j++)\n\t\t{\n\t\t\ttemp[j - range[0]] = new_arr[j];\n\t\t}\n\t\t\n\t\tfor(long j = range[0]; j <= range[1]; j++)\n\t\t{\n\t\t\tnew_arr[j] = temp[(j - range[0] + 1) % temp.length];\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_arr[range[0]] = arr[range[1]];\n\t\tnew_arr[range[1]] = arr[range[0]];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tnew_arr = rotate_arr(new_arr);\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tfor(long i = range[0]; i <= range[1]; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i];\n\t\t}\n\t\trotate(new_arr[range[0]..range[1] + 1]);\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges) {\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[1..$];\n\t\tnew_arr[end] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tforeach(i; 0 .. length)\n\t\t{\n\t\t\ttemp[i] = new_arr[start + i];\n\t\t}\n\t\tforeach(i; 0 .. length)\n\t\t{\n\t\t\tnew_arr[start + i] = temp[(i + rotations) % length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; start .. end + 1)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\tforeach(i; start .. end + 1)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (index + length) % arr.length;\n\treturn arr[newIndex];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = new_arr[start];\n\t\tfor(long j = start; j < end; j++)\n\t\t{\n\t\t\tnew_arr[j] = new_arr[j + 1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(rotation; 0 .. rotations)\n\t{\n\t\tauto range = ranges[rotation];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(index >= start && index <= end)\n\t\t{\n\t\t\tif(index == start)\n\t\t\t\tindex = end;\n\t\t\telse\n\t\t\t\tindex -= 1;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i+1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\t\n\tlong rotations_left = rotations % arr.length;\n\tlong[] temp = new_arr[0..rotations_left];\n\tnew_arr[0..rotations_left] = new_arr[rotations_left..$];\n\tnew_arr[rotations_left..$] = temp;\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tfor(long i = 0; i < length; i++)\n\t\t{\n\t\t\ttemp[i] = arr[start + i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = 0; i < length; i++)\n\t\t{\n\t\t\tnew_arr[start + i] = temp[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tnew_arr[j] = arr[(j + ranges[i][0]) % arr.length];\n\t\t}\n\t\t\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tnew_ranges[j] = ranges[(j + ranges[i][1]) % ranges.length];\n\t\t}\n\t\t\n\t\tarr = new_arr;\n\t\tranges = new_ranges;\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong[] range = r;\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] rot_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\trot_arr[r[0]] = arr[r[1]];\n\t\trot_arr[r[1]] = arr[r[0]];\n\t}\n\treturn rot_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\t\n\tforeach(i; 0..ranges.length)\n\t{\n\t\ttemp = arr[ranges[i][0]..ranges[i][1]];\n\t\ttemp2 = arr[ranges[i][1]+1..$];\n\t\ttemp3 = arr[0..ranges[i][0]-1];\n\t\ttemp4 = temp2 ~ temp ~ temp3;\n\t\tarr = temp4;\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[$-1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..new_arr.length-1];\n\t\tnew_arr[0..new_arr.length-1] = temp[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = temp[$-1..0];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tarr[i] = arr[i+1];\n\t\t}\n\t\tarr[end] = temp;\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tforeach(i; range[0] .. range[1] + 1)\n\t\t{\n\t\t\tnew_arr[i] = arr[i];\n\t\t}\n\t\trotate(new_arr[range[0] .. range[1] + 1]);\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\tnew_arr = new_arr[$-rotations..$] ~ new_arr[0..$-rotations];\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tforeach(i; range[0] .. range[1] + 1)\n\t\t{\n\t\t\tnew_arr[i] = arr[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tlong temp = new_arr[0];\n\t\tforeach(j; 0 .. new_arr.length - 1)\n\t\t{\n\t\t\tnew_arr[j] = new_arr[j + 1];\n\t\t}\n\t\tnew_arr[new_arr.length - 1] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong[] temp_arr = arr[range[0]..range[1] + 1];\n\t\tnew_arr[range[0]..range[1] + 1] = temp_arr[temp_arr.length - 1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong temp = new_arr[0];\n\t\tnew_arr[0..new_arr.length - 1] = new_arr[1..new_arr.length];\n\t\tnew_arr[new_arr.length - 1] = temp;\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] range = new long[2];\n\tlong[] range_index = new long[2];\n\tlong[] range_length = new long[2];\n\tlong[] range_rotations = new long[2];\n\tlong[] range_rotations_index = new long[2];\n\tlong[] range_rotations_index_length = new long[2];\n\tlong[] range_rotations_index_length_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index_length = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index_length_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index_length_index_rotations = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index_length_index_rotations_index = new long[2];\n\tlong[] range_rotations_index_length_index_rotations_index_length_index_rotations_index_length_index_rotations_index_length = new long[2];\n\tlong[] range_rotations_index_length_index_rotations",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong newIndex = (index - start + length) % length;\n\treturn arr[newIndex];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\tindex = (index + r[1]) % arr.length;\n\t}\n\treturn arr[(rotations + index) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\tlong[] new_index = new long[index.length];\n\t\n\tforeach(i; 0..rotations)\n\t{\n\t\tnew_arr = rotate(arr, ranges[i][0], ranges[i][1]);\n\t}\n\t\n\tforeach(i; 0..index.length)\n\t{\n\t\tnew_index[i] = new_arr[index[i]];\n\t}\n\t\n\treturn new_index;\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = arr.length;\n\tlong diff = end - start;\n\tlong new_index = (index + diff) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tlong temp = new_arr[0];\n\t\tnew_arr = new_arr[1..$];\n\t\tnew_arr ~= temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong diff = end - start;\n\tlong new_index = (index + diff) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] rotated_arr = new long[arr.length];\n\tlong[] temp_arr = new long[arr.length];\n\tlong[] temp_arr2 = new long[arr.length];\n\t\n\tforeach(r; ranges)\n\t{\n\t\ttemp_arr[r[0]] = r[1];\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(temp_arr[i] == 0)\n\t\t{\n\t\t\ttemp_arr[i] = arr[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. rotations)\n\t{\n\t\ttemp_arr2 = temp_arr[1 .. $];\n\t\ttemp_arr2 ~= temp_arr[0];\n\t\ttemp_arr = temp_arr2;\n\t}\n\t\n\treturn temp_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\ttemp[i] = new_arr[range[0] + i];\n\t\t}\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\tnew_arr[range[0] + i] = temp[(i + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong pos = (index + len) % arr.length;\n\treturn arr[pos];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tauto n = arr.length;\n\tauto m = ranges.length;\n\tauto r = rotations % n;\n\t\n\tforeach(i; 0 .. m)\n\t{\n\t\tif(ranges[i][0] <= index && index <= ranges[i][1])\n\t\t{\n\t\t\tauto diff = ranges[i][1] - ranges[i][0] + 1;\n\t\t\tauto new_index = (index - ranges[i][0] + r) % diff + ranges[i][0];\n\t\t\treturn arr[new_index];\n\t\t}\n\t}\n\t\n\treturn arr[(index + r) % n];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start..end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp_start = temp[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\ttemp[k] = temp[k + 1];\n\t\t\t}\n\t\t\ttemp[end] = temp_start;\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tnew_arr[start..end] = temp_arr[$-1..0];\n\t}\n\t\n\tlong[] final_arr = new_arr;\n\tforeach(long i; 0..rotations)\n\t{\n\t\tfinal_arr = new_arr;\n\t\tforeach(long[] range; ranges)\n\t\t{\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong[] temp_arr = final_arr[start..end];\n\t\t\tnew_arr[start..end] = temp_arr[$-1..0];\n\t\t}\n\t}\n\t\n\treturn final_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index - start + length) % length + start;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_ranges ~= range;\n\t}\n\t\n\tforeach(long i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\t\n\tforeach(long i; 0 .. rotations)\n\t{\n\t\tforeach(long[] range; new_ranges)\n\t\t{\n\t\t\tlong[] temp_arr = new long[range[1] - range[0] + 1];\n\t\t\t\n\t\t\tforeach(long j; 0 .. temp_arr.length)\n\t\t\t{\n\t\t\t\ttemp_arr[j] = new_arr[range[0] + j];\n\t\t\t}\n\t\t\t\n\t\t\tforeach(long j; 0 .. temp_arr.length)\n\t\t\t{\n\t\t\t\tnew_arr[range[0] + j] = temp_arr[(j + 1) % temp_arr.length];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[temp.length-1..0];\n\t}\n\t\n\trotations = rotations % new_arr.length;\n\tlong[] temp = new_arr[0..rotations];\n\tnew_arr[0..rotations] = new_arr[rotations..new_arr.length];\n\tnew_arr[rotations..new_arr.length] = temp;\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i+1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] final_arr = new long[arr.length];\n\tforeach(long i; 0..rotations)\n\t{\n\t\tforeach(long j; 0..new_arr.length)\n\t\t{\n\t\t\tfinal_arr[j] = new_arr[(j+1) % new_arr.length];\n\t\t}\n\t\tnew_arr = final_arr;\n\t}\n\treturn final_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong size = arr.length;\n\tlong diff = end - start;\n\tlong new_index = (index + diff) % size;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_ranges = new long[ranges.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[(i + rotations) % arr.length] = arr[i];\n\t}\n\t\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tnew_ranges[i] = ranges[i];\n\t\tnew_ranges[i][0] = (ranges[i][0] + rotations) % arr.length;\n\t\tnew_ranges[i][1] = (ranges[i][1] + rotations) % arr.length;\n\t}\n\t\n\tlong[] range_sum = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\trange_sum[i] = 0;\n\t}\n\t\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\trange_sum[new_ranges[i][0]] += 1;\n\t\tif(new_ranges[i][1] + 1 < arr.length)\n\t\t{\n\t\t\trange_sum[new_ranges[i][1] + 1] -= 1;\n\t\t}\n\t}\n\t\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\trange_sum[i] += range_sum[i - 1];\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] *= range_sum[i];\n\t}\n\t\n\tlong sum = 0;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tsum += new_arr[i];\n\t}\n\t\n\treturn sum;\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\trotations = (rotations - range[1]) % arr.length;\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong temp = arr[start];\n\t\tfor(long i = start; i < end; i++)\n\t\t{\n\t\t\tnew_arr[i] = arr[i+1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[i - start] = arr[i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[i - start];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\trotations = rotations % arr.length;\n\t\n\tnew_arr = new_arr[$-rotations..$] ~ new_arr[0..$-rotations];\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp_arr = arr[start..end];\n\t\tlong[] temp_arr2 = arr[end+1..$];\n\t\tnew_arr = temp_arr2 ~ temp_arr;\n\t\tarr = new_arr;\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tif(index + rotations > range[1])\n\t\t\t{\n\t\t\t\tindex = range[0] + (index + rotations - range[1] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex = index + rotations;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\tindex = (index + r[1]) % arr.length;\n\t}\n\treturn arr[(rotations + index) % arr.length];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\ttemp[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong start = ranges[j][0];\n\t\t\tlong end = ranges[j][1];\n\t\t\tlong temp_start = temp[start];\n\t\t\tlong temp_end = temp[end];\n\t\t\ttemp[start] = temp_end;\n\t\t\ttemp[end] = temp_start;\n\t\t}\n\t}\n\treturn temp[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(index < range[0])\n\t\t{\n\t\t\tindex = index + rotations;\n\t\t}\n\t\telse if(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tindex = (index + rotations) % (range[1] - range[0] + 1) + range[0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tindex = index - rotations;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_index = new long[index.length];\n\tforeach(i; 0 .. index.length)\n\t{\n\t\tnew_index[i] = index[i] + rotations[i];\n\t\tif(new_index[i] > arr.length)\n\t\t{\n\t\t\tnew_index[i] = new_index[i] % arr.length;\n\t\t}\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong start = ranges[i][0];\n\t\tlong end = ranges[i][1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(j; start .. end)\n\t\t{\n\t\t\ttemp[j - start] = new_arr[j];\n\t\t}\n\t\tforeach(j; start .. end)\n\t\t{\n\t\t\tnew_arr[j] = temp[end - j];\n\t\t}\n\t}\n\treturn new_arr[new_index];\n}",
    "{\n\tforeach(rotation; 0..rotations)\n\t{\n\t\tauto [start, end] = ranges[rotation];\n\t\tauto len = end - start + 1;\n\t\tauto mid = start + len / 2;\n\t\t\n\t\tif(index >= start && index <= mid)\n\t\t{\n\t\t\tindex = end - (mid - index);\n\t\t}\n\t\telse if(index >= mid && index <= end)\n\t\t{\n\t\t\tindex = start + (index - mid);\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong i = 0;\n\tlong j = 0;\n\tlong k = 0;\n\tlong temp = 0;\n\tlong temp2 = 0;\n\tlong temp3 = 0;\n\tlong temp4 = 0;\n\tlong temp5 = 0;\n\tlong temp6 = 0;\n\tlong temp7 = 0;\n\tlong temp8 = 0;\n\tlong temp9 = 0;\n\tlong temp10 = 0;\n\tlong temp11 = 0;\n\tlong temp12 = 0;\n\tlong temp13 = 0;\n\tlong temp14 = 0;\n\tlong temp15 = 0;\n\tlong temp16 = 0;\n\tlong temp17 = 0;\n\tlong temp18 = 0;\n\tlong temp19 = 0;\n\tlong temp20 = 0;\n\tlong temp21 = 0;\n\tlong temp22 = 0;\n\tlong temp23 = 0;\n\tlong temp24 = 0;\n\tlong temp25 = 0;\n\tlong temp26 = 0;\n\tlong temp27 = 0;\n\tlong temp28 = 0;\n\tlong temp29 = 0;\n\tlong temp30 = 0;\n\tlong temp31 = 0;\n\tlong temp32 = 0;\n\tlong temp33 = 0;\n\tlong temp34 = 0;\n\tlong temp35 = 0;\n\tlong temp36 = 0;\n\tlong temp37 = 0;\n\tlong temp38 = 0;\n\tlong temp39 = 0;\n\tlong temp40 = 0;\n\tlong temp41 = 0;\n\tlong temp42 = 0;\n\tlong temp43 = 0;\n\tlong temp44 = 0;\n\tlong temp45 = 0;\n\tlong temp46 = 0;\n\tlong temp47 = 0;\n\tlong temp48 = 0;\n\tlong temp49 = 0;\n\tlong temp50 = 0;\n\tlong temp51 = 0;\n\tlong temp52 = 0;\n\tlong temp53 = 0;\n\tlong temp54 = 0;\n\tlong temp55 = 0;\n\tlong temp56 = 0;\n\tlong temp57 = 0;\n\tlong temp58 = 0;\n\tlong temp59 = 0;\n\tlong temp60 = 0;\n\tlong temp61 = 0;\n\t",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tforeach(i; r[0] .. r[1] + 1)\n\t\t{\n\t\t\tnew_arr[i] = arr[r[0] + r[1] - i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] rot_arr = new long[arr.length];\n\tlong[] rot_arr2 = new long[arr.length];\n\tlong[] rot_arr3 = new long[arr.length];\n\tlong[] rot_arr4 = new long[arr.length];\n\tlong[] rot_arr5 = new long[arr.length];\n\tlong[] rot_arr6 = new long[arr.length];\n\tlong[] rot_arr7 = new long[arr.length];\n\tlong[] rot_arr8 = new long[arr.length];\n\tlong[] rot_arr9 = new long[arr.length];\n\tlong[] rot_arr10 = new long[arr.length];\n\tlong[] rot_arr11 = new long[arr.length];\n\tlong[] rot_arr12 = new long[arr.length];\n\tlong[] rot_arr13 = new long[arr.length];\n\tlong[] rot_arr14 = new long[arr.length];\n\tlong[] rot_arr15 = new long[arr.length];\n\tlong[] rot_arr16 = new long[arr.length];\n\tlong[] rot_arr17 = new long[arr.length];\n\tlong[] rot_arr18 = new long[arr.length];\n\tlong[] rot_arr19 = new long[arr.length];\n\tlong[] rot_arr20 = new long[arr.length];\n\tlong[] rot_arr21 = new long[arr.length];\n\tlong[] rot_arr22 = new long[arr.length];\n\tlong[] rot_arr23 = new long[arr.length];\n\tlong[] rot_arr24 = new long[arr.length];\n\tlong[] rot_arr25 = new long[arr.length];\n\tlong[] rot_arr26 = new long[arr.length];\n\tlong[] rot_arr27 = new long[arr.length];\n\tlong[] rot_arr28 = new long[arr.length];\n\tlong[] rot_arr29 = new long[arr.length];\n\tlong[] rot_arr30 = new long[arr.length];\n\tlong[] rot_arr31 = new long[arr.length];",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0..rotations)\n\t{\n\t\tforeach(j; 0..ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tfor(long k = start; k < end; k++)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k+1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tforeach(j; 0 .. ranges.length)\n\t\t{\n\t\t\tlong[] range = ranges[j];\n\t\t\tlong start = range[0];\n\t\t\tlong end = range[1];\n\t\t\tlong temp = new_arr[start];\n\t\t\tforeach(k; start .. end)\n\t\t\t{\n\t\t\t\tnew_arr[k] = new_arr[k + 1];\n\t\t\t}\n\t\t\tnew_arr[end] = temp;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong new_index = (index + len) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; start..end)\n\t\t{\n\t\t\ttemp[i - start] = new_arr[i];\n\t\t}\n\t\tforeach(i; start..end)\n\t\t{\n\t\t\tnew_arr[i] = temp[(i - start + rotations) % temp.length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\tindex = (index + r[1]) % arr.length;\n\t}\n\t\n\treturn arr[(rotations + index) % arr.length];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % arr.length;\n\t\tif(rotations > 0)\n\t\t{\n\t\t\tarr = arr[arr.length - rotations .. $] ~ arr[0 .. arr.length - rotations];\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tauto range = ranges[rotations];\n\tauto start = range[0];\n\tauto end = range[1];\n\tauto length = end - start;\n\tauto new_index = (start + index) % length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tlong k = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\ttemp[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tk = 0;\n\t\tfor(long i = start; i <= end; i++)\n\t\t{\n\t\t\tnew_arr[i] = temp[k];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tforeach(i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[$-1..0];\n\t\tnew_arr[0..$-1] = temp[1..$];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[1] - range[0] + 1) % arr.length;\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = (rotations + range[0]) % arr.length;\n\t\trotations = (rotations - range[1]) % arr.length;\n\t}\n\t\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tauto range = ranges[rotations];\n\tauto start = range[0];\n\tauto end = range[1];\n\tauto len = end - start + 1;\n\tauto new_index = (start + index) % len;\n\treturn arr[new_index];\n}",
    "{\n\tforeach(r; ranges)\n\t{\n\t\trotations = (rotations + r[0]) % arr.length;\n\t\tlong temp = arr[r[1]];\n\t\tarr[r[1]] = arr[r[0]];\n\t\tarr[r[0]] = temp;\n\t}\n\treturn arr[(index + rotations) % arr.length];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong len = end - start + 1;\n\tlong new_index = (index - start + len) % len;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tnew_arr[range[0]] = arr[range[1]];\n\t\tnew_arr[range[1]] = arr[range[0]];\n\t}\n\t\n\tforeach(long i; 0 .. rotations)\n\t{\n\t\tlong temp = new_arr[0];\n\t\tforeach(long j; 1 .. new_arr.length)\n\t\t{\n\t\t\tnew_arr[j-1] = new_arr[j];\n\t\t}\n\t\tnew_arr[new_arr.length-1] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tforeach(i; 0 .. rotations)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(index >= start && index <= end)\n\t\t{\n\t\t\tauto diff = end - index;\n\t\t\tindex = start + diff;\n\t\t}\n\t}\n\t\n\treturn arr[index];\n}",
    "{\n\tforeach(range; ranges)\n\t{\n\t\trotations = rotations % (range[1] - range[0] + 1);\n\t\tif(rotations == 0)\n\t\t\tbreak;\n\t\t\n\t\tif(index >= range[0] && index <= range[1])\n\t\t{\n\t\t\tif(index + rotations > range[1])\n\t\t\t{\n\t\t\t\tindex = range[0] + (index + rotations - range[1]) - 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tindex = index + rotations;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn arr[index];\n}",
    "{\n\tlong[] temp = new long[arr.length];\n\tlong[] temp2 = new long[arr.length];\n\tlong[] temp3 = new long[arr.length];\n\tlong[] temp4 = new long[arr.length];\n\tlong[] temp5 = new long[arr.length];\n\tlong[] temp6 = new long[arr.length];\n\tlong[] temp7 = new long[arr.length];\n\tlong[] temp8 = new long[arr.length];\n\tlong[] temp9 = new long[arr.length];\n\tlong[] temp10 = new long[arr.length];\n\tlong[] temp11 = new long[arr.length];\n\tlong[] temp12 = new long[arr.length];\n\tlong[] temp13 = new long[arr.length];\n\tlong[] temp14 = new long[arr.length];\n\tlong[] temp15 = new long[arr.length];\n\tlong[] temp16 = new long[arr.length];\n\tlong[] temp17 = new long[arr.length];\n\tlong[] temp18 = new long[arr.length];\n\tlong[] temp19 = new long[arr.length];\n\tlong[] temp20 = new long[arr.length];\n\tlong[] temp21 = new long[arr.length];\n\tlong[] temp22 = new long[arr.length];\n\tlong[] temp23 = new long[arr.length];\n\tlong[] temp24 = new long[arr.length];\n\tlong[] temp25 = new long[arr.length];\n\tlong[] temp26 = new long[arr.length];\n\tlong[] temp27 = new long[arr.length];\n\tlong[] temp28 = new long[arr.length];\n\tlong[] temp29 = new long[arr.length];\n\tlong[] temp30 = new long[arr.length];\n\tlong[] temp31 = new long[arr.length];\n\tlong[] temp32 = new long[arr.length];\n\tlong[] temp33 = new long[arr.length];\n\tlong[] temp34 = new long[arr.length];\n\tlong[] temp35 = new long[arr.length];\n\tlong[] temp36 = new long[arr.length];\n\tlong[] temp37 =",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tnew_arr = new_arr[$-1..0];\n\t}\n\t\n\treturn new_arr[index];\n}",
    "{\n\tlong[] range = ranges[rotations];\n\tlong start = range[0];\n\tlong end = range[1];\n\tlong length = end - start + 1;\n\tlong new_index = (index + length) % arr.length;\n\treturn arr[new_index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tlong[] new_index = new long[arr.length];\n\t\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong[] temp = arr[range[0]..range[1]];\n\t\tnew_arr[range[0]..range[1]] = temp[temp.length - 1..0];\n\t}\n\t\n\tforeach(long i, long j; arr)\n\t{\n\t\tnew_index[j] = i;\n\t}\n\t\n\tforeach(long i; 0..rotations)\n\t{\n\t\tlong[] temp = new_arr[0..new_arr.length - 1];\n\t\tnew_arr[0..new_arr.length - 1] = temp[temp.length - 1..0];\n\t\t\n\t\tlong[] temp_index = new_index[0..new_index.length - 1];\n\t\tnew_index[0..new_index.length - 1] = temp_index[temp_index.length - 1..0];\n\t}\n\t\n\treturn new_arr[new_index[index]];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[temp.length-1..0];\n\t}\n\t\n\trotations = rotations % new_arr.length;\n\tnew_arr = new_arr[new_arr.length-rotations..new_arr.length] ~ new_arr[0..new_arr.length-rotations-1];\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong[] temp = new long[range[1] - range[0] + 1];\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\ttemp[i] = arr[range[0] + i];\n\t\t}\n\t\ttemp = temp.rotate(rotations);\n\t\tforeach(i; 0 .. temp.length)\n\t\t{\n\t\t\tnew_arr[range[0] + i] = temp[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\ttemp = temp.dup.reverse;\n\t\tnew_arr[start..end+1] = temp;\n\t}\n\t\n\tlong[] temp = new_arr.dup;\n\tfor(long i = 0; i < rotations; i++)\n\t{\n\t\tlong[] temp2 = temp.dup;\n\t\ttemp2[0..temp2.length-1] = temp2[1..temp2.length];\n\t\ttemp2[temp2.length-1] = temp[0];\n\t\ttemp = temp2.dup;\n\t}\n\t\n\treturn temp[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(r; ranges)\n\t{\n\t\tlong start = r[0];\n\t\tlong end = r[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[1..$];\n\t\tnew_arr[end+1] = temp[0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tlong[] temp2 = arr[end+1..$];\n\t\tnew_arr[start..end] = temp2;\n\t\tnew_arr[end+1..$] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\t\n\tlong[] final_arr = new long[arr.length];\n\tforeach(i; 0..rotations)\n\t{\n\t\tfinal_arr[i..$] = new_arr[0..$-i];\n\t\tfinal_arr[0..i] = new_arr[$-i..$];\n\t}\n\t\n\treturn final_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0..arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = new long[end - start + 1];\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\ttemp[i] = new_arr[start + i];\n\t\t}\n\t\tforeach(i; 0..temp.length)\n\t\t{\n\t\t\tnew_arr[end - i] = temp[i];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong[] temp = arr[range[0]..range[1] + 1];\n\t\tnew_arr[range[1] + 1 .. range[0]] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tnew_arr[i] = arr[i];\n\t}\n\tforeach(i; 0 .. ranges.length)\n\t{\n\t\tlong[] range = ranges[i];\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong length = end - start + 1;\n\t\tlong[] temp = new long[length];\n\t\tforeach(j; 0 .. length)\n\t\t{\n\t\t\ttemp[j] = new_arr[start + j];\n\t\t}\n\t\tforeach(j; 0 .. length)\n\t\t{\n\t\t\tnew_arr[start + j] = temp[(j + rotations) % length];\n\t\t}\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(i, j; ranges)\n\t{\n\t\tlong start = i[0];\n\t\tlong end = i[1];\n\t\tlong temp = arr[start];\n\t\tfor(long k = start; k < end; k++)\n\t\t{\n\t\t\tnew_arr[k] = arr[k + 1];\n\t\t}\n\t\tnew_arr[end] = temp;\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tauto len = arr.length;\n\tauto range_len = ranges.length;\n\t\n\tforeach(i; 0 .. range_len)\n\t{\n\t\tauto range = ranges[i];\n\t\tauto start = range[0];\n\t\tauto end = range[1];\n\t\t\n\t\tif(index >= start && index <= end)\n\t\t{\n\t\t\tauto diff = end - start;\n\t\t\tauto new_index = (index - start + rotations) % diff;\n\t\t\treturn arr[new_index];\n\t\t}\n\t}\n\t\n\treturn -1;\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(long[] range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end+1];\n\t\tnew_arr[start..end+1] = temp[$-1..0];\n\t}\n\treturn new_arr[index];\n}",
    "{\n\tlong[] new_arr = new long[arr.length];\n\tforeach(range; ranges)\n\t{\n\t\tlong start = range[0];\n\t\tlong end = range[1];\n\t\tlong[] temp = arr[start..end];\n\t\tnew_arr[start..end] = temp[$-1..0];\n\t}\n\treturn new_arr[(index + rotations) % arr.length];\n}"
  ]
}