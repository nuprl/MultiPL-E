{
  "name": "mbpp_468_max_product",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], v * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_product *= elem;\n\t\t\tmax_product_so_far = max(max_product_so_far, max_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = 1;\n\t\t}\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n    long[] max_product = new long[arr.length];\n    max_product[0] = arr[0];\n    long result = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        max_product[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                max_product[i] = max(max_product[i], max_product[j] * arr[i]);\n            }\n        }\n        result = max(result, max_product[i]);\n    }\n    return result;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(max(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t\tmin_product[i] = min(min(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t}\n\t\n\treturn max(max_product);\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = 0;\n\tlong min_element = 0;\n\t\n\tforeach(element; arr)\n\t{\n\t\tif(element > 0)\n\t\t{\n\t\t\tproduct *= element;\n\t\t\tmax_element = max(max_element, element);\n\t\t}\n\t\telse if(element == 0)\n\t\t{\n\t\t\tmax_product = max(max_product, product);\n\t\t\tproduct = 1;\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = max(max_product, product / min_element * element);\n\t\t\tproduct = product / min_element * element;\n\t\t\tmin_element = min(min_element, element);\n\t\t}\n\t}\n\t\n\tmax_product = max(max_product, product);\n\t\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[j] < arr[i])\n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}",
    "{\n    long max = 0;\n    long product = 1;\n    long[] dp = new long[arr.length];\n    dp[0] = 1;\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[i] > arr[j])\n            {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    for (int i = 0; i < arr.length; i++)\n    {\n        product = 1;\n        for (int j = i; j < arr.length; j++)\n        {\n            if (dp[j] == dp[i])\n            {\n                product *= arr[j];\n            }\n        }\n        max = max(max, product);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(product > max_product)\n\t\t\t{\n\t\t\t\tmax_product = product;\n\t\t\t}\n\t\t\tproduct = 1;\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\t\n\tif(product > max_product)\n\t{\n\t\tmax_product = product;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(current_product > max_product)\n\t\t\t{\n\t\t\t\tmax_product = current_product;\n\t\t\t}\n\t\t\tcurrent_product = 1;\n\t\t\tcurrent_max = i;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > max_element)\n\t\t{\n\t\t\tmax_element = elem;\n\t\t}\n\t\tproduct *= elem;\n\t\tif(product > max_product)\n\t\t{\n\t\t\tmax_product = product;\n\t\t}\n\t\tif(product == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max(max_product, max_element);\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_num = 0;\n\tlong min_num = 0;\n\t\n\tforeach(num; arr)\n\t{\n\t\tif(num > 0)\n\t\t{\n\t\t\tmax_num = max(max_num * num, num);\n\t\t\tmin_num = min(min_num * num, num);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_num;\n\t\t\tmax_num = max(min_num * num, num);\n\t\t\tmin_num = min(temp * num, num);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_num);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong maxProduct = 1;\n\tlong[] maxProductArr = new long[arr.length];\n\tlong[] minProductArr = new long[arr.length];\n\t\n\tmaxProductArr[0] = arr[0];\n\tminProductArr[0] = arr[0];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tmaxProductArr[i] = max(maxProductArr[i-1] * v, minProductArr[i-1] * v, v);\n\t\tminProductArr[i] = min(maxProductArr[i-1] * v, minProductArr[i-1] * v, v);\n\t\t\n\t\tif(maxProductArr[i] > maxProduct)\n\t\t\tmaxProduct = maxProductArr[i];\n\t}\n\t\n\treturn maxProduct;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\t\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\t\n\tlong result = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax[i] = max(arr[i], max[i-1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], min[i-1] * arr[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax[i] = max(arr[i], min[i-1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], max[i-1] * arr[i]);\n\t\t}\n\t\t\n\t\tresult = max(result, max[i]);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_ending_here = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tmax_product_ending_here *= i;\n\t\tmax_product = max(max_product, max_product_ending_here);\n\t\tif(max_product_ending_here == 0)\n\t\t\tmax_product_ending_here = 1;\n\t}\n\t\n\tmax_product_ending_here = 1;\n\tforeach_reverse(i; arr)\n\t{\n\t\tmax_product_ending_here *= i;\n\t\tmax_product = max(max_product, max_product_ending_here);\n\t\tif(max_product_ending_here == 0)\n\t\t\tmax_product_ending_here = 1;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] products = new long[arr.length];\n\tproducts[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_val = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\t\n\t\tmax_val = max(max_val, max_prod[i]);\n\t}\n\t\n\treturn max_val;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tlong max = 0;\n\t\tforeach(j, u; arr[0..i])\n\t\t{\n\t\t\tif(u < v)\n\t\t\t{\n\t\t\t\tmax = max(max, products[j]);\n\t\t\t}\n\t\t}\n\t\tproducts[i] = max * v;\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_temp = new long[arr.length];\n\tlong[] max_product_temp = new long[arr.length];\n\tlong[] max_product_temp_index = new long[arr.length];\n\tlong[] max_product_temp_index_temp = new long[arr.length];\n\tlong max_product_temp_index_temp_max = 0;\n\tlong max_product_temp_index_temp_max_index = 0;\n\tlong max_product_temp_index_temp_max_index_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n\tlong max_product_temp_index_temp_max_index_temp_temp_temp_temp_",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tlong max_product_so_far = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product[i] = max_product_so_far;\n\t}\n\t\n\treturn max(max_product);\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 0;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor(int j = 0; j < i; j++) \n\t\t{\n\t\t\tif(arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tlong product = 1;\n\t\tforeach(j; i .. arr.length)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tmax = max(max, product);\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max)\n\t\t\tmax = products[i];\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n    long max_product = 1;\n    long current_product = 1;\n    foreach(i; arr) \n    {\n        current_product *= i;\n        if (current_product > max_product) \n        {\n            max_product = current_product;\n        }\n        if (current_product == 0) \n        {\n            current_product = 1;\n        }\n    }\n    return max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 0;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor(int i=1;i<arr.length;i++)\n\t{\n\t\tmax_product[i] = max(arr[i],max(max_product[i-1]*arr[i],min_product[i-1]*arr[i]));\n\t\tmin_product[i] = min(arr[i],min(max_product[i-1]*arr[i],min_product[i-1]*arr[i]));\n\t\tmax = max(max,max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max_product_value = max_product[0];\n\tlong max_product_value_index = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_value_index = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_neg = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here * i;\n\t\t\tmax_product_ending_here_neg = max_product_ending_here_neg * i;\n\t\t}\n\t\telse if(i < 0)\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max_product_ending_here_neg * i;\n\t\t\tmax_product_ending_here_neg = temp * i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_neg = 0;\n\t\t}\n\t\t\n\t\tif(max_product_ending_here < 0)\n\t\t\tmax_product_ending_here = 0;\n\t\t\n\t\tif(max_product_ending_here_neg < 0)\n\t\t\tmax_product_ending_here_neg = 0;\n\t\t\n\t\tif(max_product_ending_here > max_product_so_far)\n\t\t\tmax_product_so_far = max_product_ending_here;\n\t\t\n\t\tif(max_product_ending_here_neg > max_product_so_far)\n\t\t\tmax_product_so_far = max_product_ending_here_neg;\n\t}\n\t\n\treturn max_product_so_far;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        long max_product = 0;\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                max_product = max(max_product, dp[j] * arr[i]);\n            }\n        }\n        dp[i] = max_product;\n        max = max(max, max_product);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far = max_so_far * i;\n\t\t\tmin_so_far = min(min_so_far * i, 1);\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\t\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = arr[0];\n\tlong min = arr[0];\n\tlong result = arr[0];\n\t\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tif(arr[i] < 0)\n\t\t{\n\t\t\tswap(max, min);\n\t\t}\n\t\t\n\t\tmax = max(arr[i], max * arr[i]);\n\t\tmin = min(arr[i], min * arr[i]);\n\t\t\n\t\tresult = max(result, max);\n\t}\n\t\n\treturn result;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\tproduct = 1;\n\t\tfor (int j = 0; j <= i; j++) \n\t\t{\n\t\t\tif (dp[j] == dp[i]) \n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_prod = 1;\n\tlong curr_prod = 1;\n\tlong prev_prod = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tcurr_prod *= elem;\n\t\t\tprev_prod = min(prev_prod, 1);\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tcurr_prod = 1;\n\t\t\tprev_prod = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = curr_prod;\n\t\t\tcurr_prod = max(prev_prod * elem, 1);\n\t\t\tprev_prod = temp * elem;\n\t\t}\n\t\t\n\t\tmax_prod = max(max_prod, curr_prod);\n\t}\n\t\n\treturn max_prod;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(i, element; arr)\n\t{\n\t\tif(element > 0)\n\t\t{\n\t\t\tmax_product_so_far = max_product_so_far * element;\n\t\t\tmin_product_so_far = min(min_product_so_far * element, 1);\n\t\t}\n\t\telse if(element == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * element, 1);\n\t\t\tmin_product_so_far = temp * element;\n\t\t}\n\t\t\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[j] * arr[i] > max_product[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product[i] > max_product_value)\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) {\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong last_max = 1;\n\t\n\tforeach(n; arr)\n\t{\n\t\tif(n > 0)\n\t\t{\n\t\t\tproduct *= n;\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse if(n == 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t\tlast_max = max_product;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct *= n;\n\t\t\tif(product < 0)\n\t\t\t{\n\t\t\t\tmax_product = max(max_product, product / last_max);\n\t\t\t\tlast_max = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmax_product = max(max_product, product);\n\t\t\t\tlast_max = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tforeach(long i; arr)\n\t{\n\t\tmax_product_so_far *= i;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t\tif(max_product_so_far == 0)\n\t\t\tmax_product_so_far = 1;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_products[i] = v;\n\t}\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n    long max = 1;\n    long[] dp = new long[arr.length];\n    dp[0] = 1;\n    for (int i = 0; i < arr.length; i++) \n    {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax_product = max(max_product, product);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], arr[i] * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 1;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t\tif(product == 0)\n\t\t\tproduct = 1;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmin[i] = min(arr[i], min(arr[i] * max[i - 1], arr[i] * min[i - 1]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t\tmax_product = max_product_so_far;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\tlong[] max_product_prev_index_index = new long[arr.length];\n\t\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_prev_index_value = 0;\n\tlong max_product_prev_index_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev_index[0] = 0;\n\tmax_product_prev_index_index[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev_index[i] = i;\n\t\tmax_product_prev_index_index[i] = i;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = i;\n\t\t\t\t\tmax_product_prev_index[i] = j;\n\t\t\t\t\tmax_product_prev_index_index[i] = max_product_prev_index_index[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong max_product_ending_here = 1;\n\tlong min_product_ending_here = 1;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here * arr[i];\n\t\t\tmin_product_ending_here = min(min_product_ending_here * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_ending_here = 1;\n\t\t\tmin_product_ending_here = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max(min_product_ending_here * arr[i], 1);\n\t\t\tmin_product_ending_here = temp * arr[i];\n\t\t}\n\t\t\n\t\tif(max_product_so_far < max_product_ending_here)\n\t\t{\n\t\t\tmax_product_so_far = max_product_ending_here;\n\t\t}\n\t}\n\t\n\treturn max_product_so_far;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_products = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_products[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong last_product = 1;\n\tlong last_number = 0;\n\tlong current_number = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tcurrent_number = i;\n\t\tif(current_number > last_number)\n\t\t{\n\t\t\tlast_product = current_product;\n\t\t\tcurrent_product = current_product * current_number;\n\t\t\tlast_number = current_number;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcurrent_product = last_product * current_number;\n\t\t\tlast_product = last_product * last_number;\n\t\t\tlast_number = current_number;\n\t\t}\n\t\t\n\t\tif(current_product > max_product)\n\t\t\tmax_product = current_product;\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_so_far *= arr[i];\n\t\t\tmin_product_so_far = min(min_product_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * arr[i], 1);\n\t\t\tmin_product_so_far = temp * arr[i];\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tint n = arr.length;\n\tint[] dp = new int[n];\n\tdp[0] = 1;\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tmax_product = max(max_product, arr[i] * dp[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = arr[0];\n\tlong min_element = arr[0];\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_element = max(max_element, elem);\n\t\t\tmin_element = min(min_element, elem);\n\t\t\tproduct = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_element;\n\t\t\tmax_element = max(min_element * elem, elem);\n\t\t\tmin_element = min(temp * elem, elem);\n\t\t\tproduct *= elem;\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_prev = new long[arr.length];\n\tlong[] max_product_prev_index = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_prev[0] = -1;\n\tmax_product_prev_index[0] = -1;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_prev[i] = -1;\n\t\tmax_product_prev_index[i] = -1;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = i;\n\t\t\t\tmax_product_prev[i] = j;\n\t\t\t\tmax_product_prev_index[i] = max_product_index[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tlong max_index = 0;\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\t//std.stdio.writeln(max_product);\n\t//std.stdio.writeln(max_product_index);\n\t//std.stdio.writeln(max_product_prev);\n\t//std.stdio.writeln",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tif (product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong current_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tcurrent_product = arr[i];\n\t\tfor(int j = i + 1; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[j] > arr[i])\n\t\t\t{\n\t\t\t\tcurrent_product *= arr[j];\n\t\t\t}\n\t\t}\n\t\tproducts[i] = current_product;\n\t}\n\t\n\tmax_product = products[0];\n\tfor(int i = 1; i < products.length; i++)\n\t{\n\t\tif(products[i] > max_product)\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_val = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_val = max(max_val, dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tdp[i] = max_val;\n\t\tmax = max(max, max_val);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_negative = 0;\n\t\n\tforeach(long i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max(max_product_ending_here * i, i);\n\t\t\tmax_product_ending_here_negative = max_product_ending_here_negative * i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_negative = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max(max_product_ending_here_negative * i, i);\n\t\t\tmax_product_ending_here_negative = temp * i;\n\t\t}\n\t\t\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t}\n\t\n\treturn max_product_so_far;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n    long[] max_product = new long[arr.length];\n    long[] max_product_index = new long[arr.length];\n    long max_product_value = 0;\n    long max_product_index_value = 0;\n    for (long i = 0; i < arr.length; i++) \n    {\n        max_product[i] = arr[i];\n        max_product_index[i] = i;\n        for (long j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n            {\n                max_product[i] = max_product[j] * arr[i];\n                max_product_index[i] = j;\n            }\n        }\n        if (max_product_value < max_product[i]) \n        {\n            max_product_value = max_product[i];\n            max_product_index_value = i;\n        }\n    }\n    return max_product_value;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\treturn product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max_product_so_far = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product[i]);\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_rev = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_rev[arr.length-1] = arr[arr.length-1];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = max(arr[i], arr[i]*max_product_arr[i-1]);\n\t}\n\t\n\tfor(int i = arr.length-2; i >= 0; i--)\n\t{\n\t\tmax_product_arr_rev[i] = max(arr[i], arr[i]*max_product_arr_rev[i+1]);\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]*max_product_arr_rev[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tint i = 0;\n\twhile(i < arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tproduct *= arr[i];\n\t\t\tmax_product = max(max_product, product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong current_max = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tif(i > current_max)\n\t\t{\n\t\t\tcurrent_max = i;\n\t\t\tcurrent_product = 1;\n\t\t}\n\t\tcurrent_product *= i;\n\t\tmax_product = max(max_product, current_product);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max_product_so_far)\n\t\t{\n\t\t\tmax_product_so_far = product;\n\t\t}\n\t\telse if(product < 0)\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n    long max_product = 0;\n    long product = 1;\n    long[] max_arr = new long[arr.length];\n    max_arr[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        if (arr[i] > max_arr[i - 1]) \n        {\n            max_arr[i] = arr[i];\n        } \n        else \n        {\n            max_arr[i] = max_arr[i - 1];\n        }\n    }\n    for (int i = 0; i < arr.length; i++) \n    {\n        product *= max_arr[i];\n        if (product > max_product) \n        {\n            max_product = product;\n        }\n    }\n    return max_product;\n}",
    "{\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tlong max = dp[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_ending_here = new long[arr.length];\n\tlong[] min_product_ending_here = new long[arr.length];\n\t\n\tmax_product_ending_here[0] = arr[0];\n\tmin_product_ending_here[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here[i] = max(arr[i], max(arr[i] * max_product_ending_here[i - 1], arr[i] * min_product_ending_here[i - 1]));\n\t\tmin_product_ending_here[i] = min(arr[i], min(arr[i] * max_product_ending_here[i - 1], arr[i] * min_product_ending_here[i - 1]));\n\t\t\n\t\tmax_product = max(max_product, max_product_ending_here[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, item; arr)\n\t{\n\t\tmax_product_arr[i] = item;\n\t\tforeach(j, item2; arr[0..i])\n\t\t{\n\t\t\tif(item2 < item)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], item2 * item);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_arr = new long[arr.length];\n\tlong[] min_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tmin_arr[0] = arr[0];\n\tmax_product_arr[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(arr[i], max(arr[i] * max_arr[i - 1], arr[i] * min_arr[i - 1]));\n\t\tmin_arr[i] = min(arr[i], min(arr[i] * max_arr[i - 1], arr[i] * min_arr[i - 1]));\n\t\tmax_product_arr[i] = max(max_product_arr[i - 1], max_arr[i]);\n\t}\n\treturn max_product_arr[arr.length - 1];\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i - 1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproduct = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tproduct *= arr[j];\n\t\t\tproducts[j] = product;\n\t\t}\n\t}\n\t\n\tmax = products[0];\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tif (products[i] > max)\n\t\t{\n\t\t\tmax = products[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n    long max = 1;\n    long min = 1;\n    long result = 1;\n    foreach(i; arr) \n    {\n        if(i > 0) \n        {\n            max *= i;\n            min *= i;\n        }\n        if(i < 0) \n        {\n            long temp = max;\n            max = max(min * i, 1);\n            min = min(temp * i, 1);\n        }\n        if(i == 0) \n        {\n            max = 1;\n            min = 1;\n        }\n        result = max(result, max);\n    }\n    return result;\n}",
    "{\n\tlong max_product = 1;\n\tlong min_product = 1;\n\tlong result = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product *= i;\n\t\t\tmin_product *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product = 1;\n\t\t\tmin_product = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product;\n\t\t\tmax_product = max(min_product * i, 1);\n\t\t\tmin_product = temp * i;\n\t\t}\n\t\tif(max_product > result)\n\t\t\tresult = max_product;\n\t}\n\treturn result;\n}",
    "{\n    long max_product = 1;\n    long max_product_so_far = 1;\n    long max_product_so_far_neg = 1;\n    long max_product_so_far_neg_last = 1;\n    long max_product_so_far_last = 1;\n    long max_product_so_far_neg_last_last = 1;\n    long max_product_so_far_last_last = 1;\n    long max_product_so_far_neg_last_last_last = 1;\n    long max_product_so_far_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_last_last_last_last_last_last_last_last_last = 1;\n    long max_product_so_far_neg_last_last_last_last_last_last_last_last_last_last = 1;\n    long max_product",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_arr[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\tlong max_product_ending_here_negative = 0;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_ending_here = max_product_ending_here == 0 ? i : max_product_ending_here * i;\n\t\t\tmax_product_ending_here_negative = max_product_ending_here_negative == 0 ? i : max_product_ending_here_negative * i;\n\t\t}\n\t\telse if(i < 0)\n\t\t{\n\t\t\tlong temp = max_product_ending_here;\n\t\t\tmax_product_ending_here = max_product_ending_here_negative == 0 ? i : max_product_ending_here_negative * i;\n\t\t\tmax_product_ending_here_negative = temp == 0 ? i : temp * i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product_ending_here = 0;\n\t\t\tmax_product_ending_here_negative = 0;\n\t\t}\n\t\t\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t}\n\t\n\treturn max_product_so_far;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif(max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tlong result = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > 0) \n\t\t{\n\t\t\tmax[i] = max(arr[i], max[i - 1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], min[i - 1] * arr[i]);\n\t\t} \n\t\telse \n\t\t{\n\t\t\tmax[i] = max(arr[i], min[i - 1] * arr[i]);\n\t\t\tmin[i] = min(arr[i], max[i - 1] * arr[i]);\n\t\t}\n\t\tresult = max(result, max[i]);\n\t}\n\treturn result;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, val; arr)\n\t{\n\t\tmax_product_arr[i] = val;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong[] max_product_arr_index = new long[arr.length];\n\tlong max_product = 0;\n\t\n\tmax_product_arr[0] = arr[0];\n\tmax_product_arr_index[0] = 0;\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tmax_product_arr_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t\tmax_product_arr_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max(max_arr[i], max_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_length = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\tlong max_length = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_length[i] = 1;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t\tmax_product_length[i] = max_product_length[j] + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (max < max_product[i])\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t\tmax_length = max_product_length[i];\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(product > max)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(arr[i] > 0)\n\t\t{\n\t\t\tmax_product_so_far *= arr[i];\n\t\t\tmin_product_so_far = min(min_product_so_far * arr[i], 1);\n\t\t}\n\t\telse if(arr[i] == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * arr[i], 1);\n\t\t\tmin_product_so_far = temp * arr[i];\n\t\t}\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    long max = dp[0];\n    for (int i = 1; i < arr.length; i++) {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[i] > arr[j]) {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], v2 * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t\tmax_product_arr[i] = arr[i];\n\t\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long max_product = 1;\n    long[] products = new long[arr.length];\n    for (int i = 0; i < arr.length; i++) \n    {\n        max_product = max_product * arr[i];\n        products[i] = max_product;\n        if (arr[i] > max) \n        {\n            max = arr[i];\n        }\n    }\n    long min_product = 1;\n    for (int i = arr.length - 1; i >= 0; i--) \n    {\n        max_product = max_product / arr[i];\n        products[i] = max_product;\n        if (arr[i] < min_product) \n        {\n            min_product = arr[i];\n        }\n    }\n    long result = max;\n    for (int i = 0; i < arr.length; i++) \n    {\n        if (products[i] > result) \n        {\n            result = products[i];\n        }\n    }\n    return result;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = 1;\n\t\n\tforeach(i,v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j,w; arr[0..i])\n\t\t{\n\t\t\tif(v > w)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * v);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(arr[i], max_product[i-1] * arr[i]);\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tlong[] min_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tmin_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_arr[i] = max(max_arr[i - 1] * arr[i], min_arr[i - 1] * arr[i], arr[i]);\n\t\tmin_arr[i] = min(max_arr[i - 1] * arr[i], min_arr[i - 1] * arr[i], arr[i]);\n\t\tmax_product = max(max_product, max_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tproducts[i] = 1;\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && products[i] < products[j] * arr[i])\n\t\t\t{\n\t\t\t\tproducts[i] = products[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(max_product < products[i])\n\t\t{\n\t\t\tmax_product = products[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = 0;\n\t\t\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product_arr[i] = max_product_so_far * arr[i];\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_at_index = new long[arr.length];\n\tmax_product_at_index[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_at_index[i] = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_at_index[i] = max(max_product_at_index[i], max_product_at_index[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_at_index[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tlong[] min_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tmin_products[0] = arr[0];\n\tforeach(i, val; arr)\n\t{\n\t\tif(i == 0) continue;\n\t\tmax_products[i] = max(max(max_products[i-1]*val, min_products[i-1]*val), val);\n\t\tmin_products[i] = min(min(max_products[i-1]*val, min_products[i-1]*val), val);\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\tlong min_product_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_product_so_far *= i;\n\t\t\tmin_product_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_product_so_far = 1;\n\t\t\tmin_product_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_product_so_far;\n\t\t\tmax_product_so_far = max(min_product_so_far * i, 1);\n\t\t\tmin_product_so_far = temp * i;\n\t\t}\n\t\tif(max_product_so_far > max_product)\n\t\t{\n\t\t\tmax_product = max_product_so_far;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_value_index = 0;\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max = new long[arr.length];\n\tlong[] min = new long[arr.length];\n\tlong max_product = arr[0];\n\tmax[0] = arr[0];\n\tmin[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax[i] = max(arr[i], max(max[i - 1] * arr[i], min[i - 1] * arr[i]));\n\t\tmin[i] = min(arr[i], min(max[i - 1] * arr[i], min[i - 1] * arr[i]));\n\t\tmax_product = max(max_product, max[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong[] products = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tcurrent_product = 1;\n\t\tfor (int j = i; j < arr.length; j++)\n\t\t{\n\t\t\tcurrent_product *= arr[j];\n\t\t\tproducts[j] = max(products[j], current_product);\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < products.length; i++)\n\t{\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn max(max_product);\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max = 0;\n\tlong max_index = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax = 0;\n\t\tmax_index = 0;\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[j] > max)\n\t\t\t{\n\t\t\t\tmax = max_product[j];\n\t\t\t\tmax_index = j;\n\t\t\t}\n\t\t}\n\t\tmax_product[i] = max * arr[i];\n\t\tmax_product_index[i] = max_index;\n\t}\n\t\n\tmax = 0;\n\tmax_index = 0;\n\tfor (long i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product[i] > max)\n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong max_product_so_far = 0;\n\tlong max_product_ending_here = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here = max(arr[i], max_product_ending_here * arr[i]);\n\t\tmax_product_so_far = max(max_product_so_far, max_product_ending_here);\n\t\t\n\t\tif (arr[i] > 0) \n\t\t{\n\t\t\tmax_product = max(max_product, max_product * arr[i]);\n\t\t}\n\t\telse if (arr[i] == 0) \n\t\t{\n\t\t\tmax_product = max(max_product, 0);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tmax_product = max(max_product, max_product_so_far);\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_reverse[arr.length-1] = arr.length-1;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong max = max_product[0];\n\tint max_index = 0;\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (max < max_product[i]) \n\t\t{\n\t\t\tmax = max_product[i];\n\t\t\tmax_index = i;\n\t\t}\n\t}\n\t\n\tint index = max_index;\n\tint count = 0;\n\t\n\twhile (index != max_product_index[index]) \n\t{\n\t\tmax_product_index_reverse[count] = index;\n\t\tindex = max_product_index[index];\n\t\tcount++;\n\t}\n\t\n\tmax_product_index_reverse[count] = index;\n\t\n\tfor (int i = 0; i <= count/2; i++) \n\t{\n\t\tlong temp = max_product_index_reverse[i];\n\t\tmax_product_index_reverse[i] = max_product_index",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = new long[arr.length];\n\tlong[] max_product_index_index_index_index_index_index_index_index_index_index_index_",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\tlong max_prod = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = max(arr[i], max(arr[i] * max_product[i - 1], arr[i] * min_product[i - 1]));\n\t\tmin_product[i] = min(arr[i], min(arr[i] * max_product[i - 1], arr[i] * min_product[i - 1]));\n\t\tmax_prod = max(max_prod, max_product[i]);\n\t}\n\treturn max_prod;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_prev = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_prev_value = 0;\n\tlong max_product_value_final = 0;\n\tlong max_product_index_value_final = 0;\n\tlong max_product_index_prev_value_final = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\tmax_product_index_prev[0] = 0;\n\t\n\tfor (long i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_value = 0;\n\t\tmax_product_index_value = 0;\n\t\tmax_product_index_prev_value = 0;\n\t\t\n\t\tfor (long j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tif (max_product_value < max_product[j])\n\t\t\t\t{\n\t\t\t\t\tmax_product_value = max_product[j];\n\t\t\t\t\tmax_product_index_value = j;\n\t\t\t\t\tmax_product_index_prev_value = max_product_index_prev[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax_product[i] = max_product_value * arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_prev[i] = max_product_index_value;\n\t\t\n\t\tif (max_product_value_final < max_product[i])\n\t\t{\n\t\t\tmax_product_value_final = max_product[i];\n\t\t\tmax_product_index_value_final = i;\n\t\t\tmax_product_index",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\t\n\tforeach(i;0..arr.length)\n\t{\n\t\tmax_arr[i] = arr[i];\n\t}\n\t\n\tforeach(i;1..arr.length)\n\t{\n\t\tforeach(j;0..i)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_arr[i] < max_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_arr[i] = max_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tforeach(i;0..arr.length)\n\t{\n\t\tif(max_product < max_arr[i])\n\t\t{\n\t\t\tmax_product = max_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_arr[i] > max_product)\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i])\n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tif (max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= arr[i];\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = 0;\n\tlong min_element = 0;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tproduct *= elem;\n\t\t\tmax_element = max(max_element, elem);\n\t\t}\n\t\telse if(elem == 0)\n\t\t{\n\t\t\tmax_product = max(max_product, 0);\n\t\t\tproduct = 1;\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = product;\n\t\t\tproduct = max(product * elem, min_element * elem);\n\t\t\tmin_element = min(temp * elem, min_element * elem);\n\t\t}\n\t\t\n\t\tmax_product = max(max_product, product);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n    long maxProduct = 1;\n    long[] maxProductArr = new long[arr.length];\n    long[] minProductArr = new long[arr.length];\n    maxProductArr[0] = arr[0];\n    minProductArr[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        if (arr[i] > 0) \n        {\n            maxProductArr[i] = max(arr[i], maxProductArr[i - 1] * arr[i]);\n            minProductArr[i] = min(arr[i], minProductArr[i - 1] * arr[i]);\n        } \n        else \n        {\n            maxProductArr[i] = max(arr[i], minProductArr[i - 1] * arr[i]);\n            minProductArr[i] = min(arr[i], maxProductArr[i - 1] * arr[i]);\n        }\n        maxProduct = max(maxProduct, maxProductArr[i]);\n    }\n    return maxProduct;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tif(max < product)\n\t\t\tmax = product;\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong[] max_arr = new long[arr.length];\n\tmax_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tif (arr[i] > max_arr[i - 1]) \n\t\t{\n\t\t\tmax_arr[i] = arr[i];\n\t\t} \n\t\telse \n\t\t{\n\t\t\tmax_arr[i] = max_arr[i - 1];\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproduct *= max_arr[i];\n\t\tif (product > max_product) \n\t\t{\n\t\t\tmax_product = product;\n\t\t}\n\t}\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max_prod = 0;\n\tlong[] max_prod_arr = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_prod_arr[i] = arr[i];\n\t}\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_prod_arr[i] = max(max_prod_arr[i], max_prod_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_prod = max(max_prod, max_prod_arr[i]);\n\t}\n\treturn max_prod;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = max_product[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] products = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tproducts[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tproducts[i] = max(products[i], products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\tlong max_prod_so_far = arr[0];\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_prod[i] = max(max(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmin_prod[i] = min(min(max_prod[i-1] * arr[i], min_prod[i-1] * arr[i]), arr[i]);\n\t\tmax_prod_so_far = max(max_prod_so_far, max_prod[i]);\n\t}\n\treturn max_prod_so_far;\n}",
    "{\n\tlong max_product = 1;\n\tlong current_product = 1;\n\tlong last_number = 0;\n\tlong current_number = 0;\n\t\n\tforeach(number; arr)\n\t{\n\t\tcurrent_number = number;\n\t\tif(current_number > last_number)\n\t\t{\n\t\t\tcurrent_product *= current_number;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = max(max_product, current_product);\n\t\t\tcurrent_product = current_number;\n\t\t}\n\t\tlast_number = current_number;\n\t}\n\t\n\treturn max(max_product, current_product);\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\t\n\tmax_product[0] = arr[0];\n\tmax_product_index[0] = 0;\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\tmax_product_index[i] = j;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(max_product_value < max_product[i])\n\t\t{\n\t\t\tmax_product_value = max_product[i];\n\t\t\tmax_product_index_value = i;\n\t\t}\n\t}\n\t\n\treturn max_product_value;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && max_product[i] < max_product[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn max_product[arr.length - 1];\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\t\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tdp[i] = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tproduct = 1;\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j] && dp[j] == dp[i] - 1)\n\t\t\t{\n\t\t\t\tproduct *= arr[j];\n\t\t\t}\n\t\t}\n\t\t\n\t\tmax = max(max, product * arr[i]);\n\t}\n\t\n\treturn max;\n}",
    "{\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tlong max_product = arr[0];\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tlong max_product_so_far = arr[i];\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[j] < arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] max_product_index = new long[arr.length];\n\tlong[] max_product_index_reverse = new long[arr.length];\n\tlong max_product_value = 0;\n\tlong max_product_index_value = 0;\n\tlong max_product_index_reverse_value = 0;\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tmax_product_index[i] = i;\n\t\tmax_product_index_reverse[i] = i;\n\t}\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = arr.length - 2; i >= 0; i--) \n\t{\n\t\tfor (int j = arr.length - 1; j > i; j--) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tif (max_product[i] < max_product[j] * arr[i]) \n\t\t\t\t{\n\t\t\t\t\tmax_product[i] = max_product[j] * arr[i];\n\t\t\t\t\tmax_product_index_reverse[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tif (",
    "{\n\tlong max_product = arr[0];\n\tlong[] max_product_ending_here = new long[arr.length];\n\tmax_product_ending_here[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product_ending_here[i] = max(max_product_ending_here[i - 1] * arr[i], arr[i]);\n\t\tmax_product = max(max_product, max_product_ending_here[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\t\n\t\tfor(int j = 0; j < i; j++)\n\t\t{\n\t\t\tif(arr[i] > arr[j] && max_product_arr[i] < max_product_arr[j] * arr[i])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max_product_arr[j] * arr[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tif(max_product < max_product_arr[i])\n\t\t{\n\t\t\tmax_product = max_product_arr[i];\n\t\t}\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}"
  ]
}