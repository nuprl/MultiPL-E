{
  "name": "mbpp_468_max_product",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\n*/\nlong max_product(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = max_product;\n\n    assert(candidate([3L, 100L, 4L, 5L, 150L, 6L]) == 3000L);\n    assert(candidate([4L, 42L, 55L, 68L, 80L]) == 50265600L);\n    assert(candidate([10L, 22L, 9L, 33L, 21L, 50L, 41L, 60L]) == 2460L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong max_product = 1;\n\tlong[] max_products = new long[arr.length];\n\tmax_products[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_products[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_products[i] = max(max_products[i], max_products[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_products[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_so_far = 1;\n\tlong min_so_far = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tmax_so_far *= i;\n\t\t\tmin_so_far *= i;\n\t\t}\n\t\telse if(i == 0)\n\t\t{\n\t\t\tmax_so_far = 1;\n\t\t\tmin_so_far = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlong temp = max_so_far;\n\t\t\tmax_so_far = max(min_so_far * i, 1);\n\t\t\tmin_so_far = temp * i;\n\t\t}\n\t\tif(max_so_far > max_product)\n\t\t\tmax_product = max_so_far;\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\t\n\tforeach(i, v; arr)\n\t{\n\t\tmax_product_arr[i] = v;\n\t\tforeach(j, v2; arr[0..i])\n\t\t{\n\t\t\tif(v2 < v)\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], v * max_product_arr[j]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\t\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tlong max_product_so_far = 1;\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[j] < arr[i]) \n\t\t\t{\n\t\t\t\tmax_product_so_far = max(max_product_so_far, max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product_arr[i] = max_product_so_far;\n\t\tmax_product = max(max_product, max_product_so_far);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong max_product_so_far = 1;\n\t\n\tforeach(elem; arr)\n\t{\n\t\tif(elem > 0)\n\t\t{\n\t\t\tmax_product *= elem;\n\t\t\tmax_product_so_far = max(max_product_so_far, max_product);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = 1;\n\t\t}\n\t}\n\treturn max_product_so_far;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tlong[] dp = new long[arr.length];\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n    long[] max_product = new long[arr.length];\n    max_product[0] = arr[0];\n    long result = arr[0];\n    for (int i = 1; i < arr.length; i++) \n    {\n        max_product[i] = arr[i];\n        for (int j = 0; j < i; j++) \n        {\n            if (arr[i] > arr[j]) \n            {\n                max_product[i] = max(max_product[i], max_product[j] * arr[i]);\n            }\n        }\n        result = max(result, max_product[i]);\n    }\n    return result;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tif(i > 0)\n\t\t{\n\t\t\tproduct *= i;\n\t\t\tif(product > max)\n\t\t\t\tmax = product;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tproduct = 1;\n\t\t}\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tlong[] min_product = new long[arr.length];\n\t\n\tmax_product[0] = arr[0];\n\tmin_product[0] = arr[0];\n\t\n\tfor(int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product[i] = max(max(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t\tmin_product[i] = min(min(max_product[i-1] * arr[i], min_product[i-1] * arr[i]), arr[i]);\n\t}\n\t\n\treturn max(max_product);\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max_product = 0;\n\tlong[] max_product_arr = new long[arr.length];\n\tmax_product_arr[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++)\n\t{\n\t\tmax_product_arr[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++)\n\t\t{\n\t\t\tif (arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tmax_product_arr[i] = max(max_product_arr[i], max_product_arr[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax_product = max(max_product, max_product_arr[i]);\n\t}\n\treturn max_product;\n}",
    "{\n\tlong max_product = 1;\n\tlong product = 1;\n\tlong max_element = 0;\n\tlong min_element = 0;\n\t\n\tforeach(element; arr)\n\t{\n\t\tif(element > 0)\n\t\t{\n\t\t\tproduct *= element;\n\t\t\tmax_element = max(max_element, element);\n\t\t}\n\t\telse if(element == 0)\n\t\t{\n\t\t\tmax_product = max(max_product, product);\n\t\t\tproduct = 1;\n\t\t\tmax_element = 0;\n\t\t\tmin_element = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmax_product = max(max_product, product / min_element * element);\n\t\t\tproduct = product / min_element * element;\n\t\t\tmin_element = min(min_element, element);\n\t\t}\n\t}\n\t\n\tmax_product = max(max_product, product);\n\t\n\treturn max_product;\n}",
    "{\n    long max = 0;\n    long[] dp = new long[arr.length];\n    dp[0] = arr[0];\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = arr[i];\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[j] < arr[i])\n            {\n                dp[i] = max(dp[i], dp[j] * arr[i]);\n            }\n        }\n        max = max(max, dp[i]);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tforeach(i; 1 .. arr.length)\n\t{\n\t\tdp[i] = arr[i];\n\t\tforeach(j; 0 .. i)\n\t\t{\n\t\t\tif(arr[i] > arr[j])\n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong[] dp = new long[arr.length];\n\tdp[0] = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tdp[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tdp[i] = max(dp[i], dp[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, dp[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_prod = new long[arr.length];\n\tlong[] min_prod = new long[arr.length];\n\t\n\tmax_prod[0] = arr[0];\n\tmin_prod[0] = arr[0];\n\t\n\tlong max_so_far = arr[0];\n\t\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_prod[i] = max(arr[i], max(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\tmin_prod[i] = min(arr[i], min(arr[i] * max_prod[i - 1], arr[i] * min_prod[i - 1]));\n\t\t\n\t\tmax_so_far = max(max_so_far, max_prod[i]);\n\t}\n\t\n\treturn max_so_far;\n}",
    "{\n    long max = 0;\n    long product = 1;\n    long[] dp = new long[arr.length];\n    dp[0] = 1;\n    for (int i = 1; i < arr.length; i++)\n    {\n        dp[i] = 1;\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[i] > arr[j])\n            {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    for (int i = 0; i < arr.length; i++)\n    {\n        product = 1;\n        for (int j = i; j < arr.length; j++)\n        {\n            if (dp[j] == dp[i])\n            {\n                product *= arr[j];\n            }\n        }\n        max = max(max, product);\n    }\n    return max;\n}",
    "{\n\tlong max = 0;\n\tlong product = 1;\n\tforeach(i; arr)\n\t{\n\t\tproduct *= i;\n\t\tmax = max(max, product);\n\t}\n\treturn max;\n}",
    "{\n\tlong[] max_product = new long[arr.length];\n\tmax_product[0] = arr[0];\n\tlong max = arr[0];\n\tfor (int i = 1; i < arr.length; i++) \n\t{\n\t\tmax_product[i] = arr[i];\n\t\tfor (int j = 0; j < i; j++) \n\t\t{\n\t\t\tif (arr[i] > arr[j]) \n\t\t\t{\n\t\t\t\tmax_product[i] = max(max_product[i], max_product[j] * arr[i]);\n\t\t\t}\n\t\t}\n\t\tmax = max(max, max_product[i]);\n\t}\n\treturn max;\n}",
    "{\n\tlong max = 0;\n\tlong max_product = 0;\n\tlong product = 1;\n\t\n\tforeach(i; arr)\n\t{\n\t\tif(i > max)\n\t\t{\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(product > max_product)\n\t\t\t{\n\t\t\t\tmax_product = product;\n\t\t\t}\n\t\t\tproduct = 1;\n\t\t\tmax = i;\n\t\t\tproduct *= i;\n\t\t}\n\t}\n\t\n\tif(product > max_product)\n\t{\n\t\tmax_product = product;\n\t}\n\t\n\treturn max_product;\n}"
  ]
}