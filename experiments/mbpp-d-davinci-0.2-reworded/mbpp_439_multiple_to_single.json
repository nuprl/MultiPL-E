{
  "name": "mbpp_439_multiple_to_single",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to join an array of multiple integers into a single integer.\n\t\n*/\nlong multiple_to_single(long[] L) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = multiple_to_single;\n\n    assert(candidate([11L, 33L, 50L]) == 113350L);\n    assert(candidate([-1L, 2L, 3L, 4L, 5L, 6L]) == -123456L);\n    assert(candidate([10L, 15L, 20L, 25L]) == 10152025L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(long i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; 0 .. L.length)\n\t{\n\t\tresult += L[i] * pow(10, L.length - i - 1);\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(int i; L)\n\t{\n\t\tresult += i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach (i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(long i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult += i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(long i; L) \n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(int i; L)\n\t{\n\t\tresult += i;\n\t}\n\treturn result;\n}",
    "{\n\tlong result = 0;\n\tforeach(i; L)\n\t{\n\t\tresult = result * 10 + i;\n\t}\n\treturn result;\n}"
  ]
}