{
  "name": "mbpp_92_is_undulating",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = second_last_digit > last_digit;\n\t\n\twhile (n > 0)\n\t{\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (second_last_digit < last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (second_last_digit > last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6q3ugbkg.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp6q3ugbkg.__unittest_L42_C1() [0x427ae8]\n??:? void tmp6q3ugbkg.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tauto odd = true;\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (odd)\n\t\t{\n\t\t\tif (digits[i] != digits[i + 2]) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] == digits[i + 2]) return false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpf3_on4va.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3_on4va.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto digits_len = digits.length;\n\t\n\tif (digits_len < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits_len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpuirjg_v1.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuirjg_v1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint prev_digit = n % 10;\n\tn /= 10;\n\tint cur_digit = n % 10;\n\tn /= 10;\n\t\n\twhile (n > 0)\n\t{\n\t\tint next_digit = n % 10;\n\t\tif (prev_digit != cur_digit && cur_digit != next_digit)\n\t\t\treturn false;\n\t\tprev_digit = cur_digit;\n\t\tcur_digit = next_digit;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplv4tsf9y.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmplv4tsf9y.__unittest_L30_C1() [0x427ac4]\n??:? void tmplv4tsf9y.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpv_pspj4p.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv_pspj4p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i < digits.length - 1)\n\t\t{\n\t\t\tdiffs[i] = abs(digits[i] - digits[i + 1]);\n\t\t}\n\t}\n\t\n\treturn diffs.all!(a => a == 1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp4jshl5hq.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmp4jshl5hq.d(20): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jshl5hq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint odd = 0;\n\tint even = 0;\n\tint last_digit = 0;\n\tint curr_digit = 0;\n\t\n\twhile(n > 0) \n\t{\n\t\tcurr_digit = n % 10;\n\t\tif(last_digit != 0) \n\t\t{\n\t\t\tif(curr_digit > last_digit) \n\t\t\t{\n\t\t\t\todd++;\n\t\t\t}\n\t\t\telse if(curr_digit < last_digit) \n\t\t\t{\n\t\t\t\teven++;\n\t\t\t}\n\t\t}\n\t\tlast_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\t\n\treturn (odd == even);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq17pd3g4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpq17pd3g4.__unittest_L35_C1() [0x427abb]\n??:? void tmpq17pd3g4.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\tauto odd = digits.filter!(a => a % 2 == 1);\n\tauto even = digits.filter!(a => a % 2 == 0);\n\tif (odd.length == 0 || even.length == 0)\n\t\treturn false;\n\treturn odd.sum == even.sum;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpr3c8vgsf.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr3c8vgsf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++) {\n\t\tif (digits[i] == digits[i + 1]) {\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpdpu0tzv_.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpu0tzv_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong[] digits = to!(long[])(n.to!string.map!(a => a.to!long));\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpcegr1t0e.d(10): Error: template instance `to!(long[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcegr1t0e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\").map!(a => a.to!long).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tauto is_increasing = digits[0] < digits[1];\n\t\n\tforeach (i, d; digits)\n\t{\n\t\tif (i == 0 || i == digits.length - 1)\n\t\t\tcontinue;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (d > digits[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (d < digits[i - 1])\n\t\t\t\tis_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (d < digits[i + 1])\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (d > digits[i - 1])\n\t\t\t\tis_increasing = true;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp_7rxyy2o.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_7rxyy2o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3) \n\t\treturn false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor (size_t i = 1; i < digits.length - 1; i++) \n\t{\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1]) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1]) \n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpjxaurbqs.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjxaurbqs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (even) \n\t\t{\n\t\t\tif (digits[i] > digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (digits[i] < digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp6ma3yzjs.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ma3yzjs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpy62w41ng.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy62w41ng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tint len = digits.length;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp7lsv0203.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lsv0203.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(immutable(int[]))(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] % 2 == 0 && digits[i + 1] % 2 == 0)\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] % 2 == 1 && digits[i + 1] % 2 == 1)\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (abs(digits[i] - digits[i + 1]) != abs(digits[i + 1] - digits[i + 2]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpitl1qtwt.d(13): Error: template instance `to!(immutable(int[]))` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpitl1qtwt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) return false;\n\t\n\tauto digits = to!(immutable(int))(n);\n\t\n\tint prev = digits[0];\n\tint curr = digits[1];\n\t\n\tbool increasing = curr > prev;\n\t\n\tfor (int i = 2; i < digits.length; i++) \n\t{\n\t\tprev = curr;\n\t\tcurr = digits[i];\n\t\t\n\t\tif (increasing) \n\t\t{\n\t\t\tif (curr < prev) \n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\telse if (curr == prev) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (curr > prev) \n\t\t\t{\n\t\t\t\tincreasing = true;\n\t\t\t}\n\t\t\telse if (curr == prev) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmp7vbgeomy.d(12): Error: template instance `to!(immutable(int))` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vbgeomy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\tint last_digit = 0;\n\tint current_digit = 0;\n\tint count = 0;\n\t\n\twhile(n != 0)\n\t{\n\t\tcurrent_digit = n % 10;\n\t\tif(last_digit != 0)\n\t\t{\n\t\t\tif(last_digit > current_digit)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(last_digit < current_digit)\n\t\t\t{\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\tlast_digit = current_digit;\n\t\tn /= 10;\n\t}\n\t\n\tif(count == 0)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp268v40nj.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427d75]\n??:? void tmp268v40nj.__unittest_L40_C1() [0x427ac3]\n??:? void tmp268v40nj.__modtest() [0x427af8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a92e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a905]\n??:? runModuleUnitTests [0x42b871]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281c4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto d = digits.length;\n\t\n\tif (d < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < d - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmplgp_em_a.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplgp_em_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, d; digits) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tif (d >= digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (d <= digits[i + 1]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1665517310,
      "stdout": "",
      "stderr": "/tmp/tmpo53ixds0.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo53ixds0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tbool is_undulating = true;\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\tis_undulating = false;\n\t\telse if(digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tis_undulating = false;\n\t\telse if(digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tis_undulating = false;\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpbcqwuh0j.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcqwuh0j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = second_last_digit > last_digit;\n\t\n\twhile (n > 0)\n\t{\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (second_last_digit > last_digit)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (second_last_digit < last_digit)\n\t\t\t\tis_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (second_last_digit < last_digit)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (second_last_digit > last_digit)\n\t\t\t\tis_increasing = true;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9xb1oqm8.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmp9xb1oqm8.__unittest_L46_C1() [0x427b1b]\n??:? void tmp9xb1oqm8.__modtest() [0x427b50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i; 0 .. digits.length - 1)\n\t{\n\t\tdiffs[i] = digits[i] - digits[i + 1];\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpvvisktqy.d(10): Error: no property `toString` for type `long`\n/tmp/tmpvvisktqy.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvisktqy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tint len = digits.length;\n\t\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len-2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp64q9fvao.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64q9fvao.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tforeach (i, d; digits)\n\t{\n\t\tif (i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] == digits[i - 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp5kmp80kg.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5kmp80kg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpi5nj831m.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5nj831m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.to!string.split(\"\").map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i > 0)\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\tforeach (i, d; diffs)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tif (diffs[i] * diffs[i - 1] > 0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp53lcd97x.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp53lcd97x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] == '0')\n\t\t\tcontinue;\n\t\tif(digits[i] % 2 == 0)\n\t\t{\n\t\t\tif(even)\n\t\t\t\teven = false;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(even)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\teven = true;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp5la64cek.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5la64cek.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tint next_digit;\n\tint last_diff = 0;\n\tint diff;\n\t\n\twhile (n > 0)\n\t{\n\t\tn /= 10;\n\t\tnext_digit = n % 10;\n\t\tdiff = next_digit - last_digit;\n\t\tif (diff == last_diff)\n\t\t\treturn false;\n\t\tlast_diff = diff;\n\t\tlast_digit = next_digit;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzifeblgx.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpzifeblgx.__unittest_L27_C1() [0x427a9c]\n??:? void tmpzifeblgx.__modtest() [0x427af0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.split(\"\").map!(a => a.to!long).array;\n\tauto evens = digits.filter!(a => a % 2 == 0).array;\n\tauto odds = digits.filter!(a => a % 2 != 0).array;\n\treturn evens.length == odds.length && evens.length > 0;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp_dotvvgu.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_dotvvgu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpuiwfn_74.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuiwfn_74.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpjyz7x01v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyz7x01v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpdu72n5mz.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu72n5mz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i; 0 .. diffs.length)\n\t{\n\t\tdiffs[i] = digits[i] - digits[i + 1];\n\t}\n\treturn diffs.all!(a => a == 0) || diffs.all!(a => a != 0);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpyhm3wrl0.d(10): Error: no property `toString` for type `long`\n/tmp/tmpyhm3wrl0.d(16): Error: no property `all` for type `int[]`\n/tmp/tmpyhm3wrl0.d(16): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyhm3wrl0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string);\n\tint len = digits.length;\n\tbool is_undulating = true;\n\tfor (int i = 0; i < len - 1; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpnw2v7r3v.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpnw2v7r3v.d(11): Error: cannot implicitly convert expression `digits.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnw2v7r3v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\tlong last_digit = 0;\n\tlong current_digit = 0;\n\tlong next_digit = 0;\n\t\n\twhile (n > 0)\n\t{\n\t\tlast_digit = current_digit;\n\t\tcurrent_digit = next_digit;\n\t\tnext_digit = n % 10;\n\t\t\n\t\tif (last_digit == 0)\n\t\t{\n\t\t\tlast_digit = next_digit;\n\t\t\tnext_digit = 0;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (current_digit == 0)\n\t\t{\n\t\t\tcurrent_digit = next_digit;\n\t\t\tnext_digit = 0;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (next_digit == 0)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tif (last_digit > current_digit && current_digit < next_digit)\n\t\t{\n\t\t\tis_undulating = true;\n\t\t}\n\t\telse if (last_digit < current_digit && current_digit > next_digit)\n\t\t{\n\t\t\tis_undulating = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122563,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp1beijacj.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1beijacj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach (i, j; zip(digits[0..$-1], digits[1..$]))\n\t{\n\t\tif (i[0] == i[1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpsjrrf10i.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpsjrrf10i.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsjrrf10i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp5km8a_e0.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5km8a_e0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\t\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < len - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmplt0u52nz.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplt0u52nz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t{\n\t\td = digits[i] - digits[i + 1];\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp9ssl23m9.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmp9ssl23m9.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ssl23m9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpnst1hvbn.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnst1hvbn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i; 0 .. diffs.length)\n\t\tdiffs[i] = digits[i] - digits[i + 1];\n\t\n\treturn diffs.all!(a => a == 0) || diffs.all!(a => a != 0);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpuapvinav.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpuapvinav.d(15): Error: no property `all` for type `int[]`\n/tmp/tmpuapvinav.d(15): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuapvinav.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tstring s = to!string(n);\n\tint len = s.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile (i < len - 2)\n\t{\n\t\tif (s[i] == s[i+2])\n\t\t\treturn true;\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpbmtlnt3x.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpbmtlnt3x.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmtlnt3x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] > digits[i+1])\n\t\t{\n\t\t\tif(digits[i+1] > digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i+1] < digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpqtmj3pby.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtmj3pby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpey6ieiik.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpey6ieiik.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\twhile (n > 0) {\n\t\tint current_digit = n % 10;\n\t\tif (current_digit != last_digit && current_digit != second_last_digit)\n\t\t\treturn false;\n\t\t\n\t\tsecond_last_digit = last_digit;\n\t\tlast_digit = current_digit;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppx05vhye.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427d95]\n??:? void tmppx05vhye.__unittest_L30_C1() [0x427ac4]\n??:? void tmppx05vhye.__modtest() [0x427b18]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42babb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a94e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a925]\n??:? runModuleUnitTests [0x42b891]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281e4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\t\n\tfor(size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpbsky84c3.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsky84c3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong temp = n;\n\tint digit_count = 0;\n\twhile (temp > 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigit_count++;\n\t}\n\t\n\ttemp = n;\n\tint last_digit = temp % 10;\n\ttemp /= 10;\n\tint current_digit = temp % 10;\n\t\n\tbool is_increasing = last_digit < current_digit;\n\t\n\tfor (int i = 2; i < digit_count; i++) \n\t{\n\t\tlast_digit = current_digit;\n\t\tcurrent_digit = temp % 10;\n\t\ttemp /= 10;\n\t\t\n\t\tif (is_increasing) \n\t\t{\n\t\t\tif (last_digit < current_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (last_digit > current_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpp0ksm5ek.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpp0ksm5ek.__unittest_L51_C1() [0x427b00]\n??:? void tmpp0ksm5ek.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tauto even = true;\n\tfor (int i = 0; i < len - 1; i++) {\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\tif (even) {\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t} else {\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp35ph24di.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp35ph24di.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpor8g_p47.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpor8g_p47.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpbn46jgga.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbn46jgga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\twhile (n > 0) \n\t{\n\t\tint current_digit = n % 10;\n\t\tif (current_digit != second_last_digit)\n\t\t\treturn false;\n\t\t\n\t\tn /= 10;\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = current_digit;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuqy7zf3z.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427d8d]\n??:? void tmpuqy7zf3z.__unittest_L31_C1() [0x427ab8]\n??:? void tmpuqy7zf3z.__modtest() [0x427b0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bab3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a946]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a91d]\n??:? runModuleUnitTests [0x42b889]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281dc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif (n < 100)\n\t\treturn is_undulating;\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif (last_digit == second_last_digit)\n\t\treturn is_undulating;\n\t\n\tif (last_digit > second_last_digit)\n\t\tis_undulating = true;\n\t\n\twhile (n > 0)\n\t{\n\t\tint next_digit = (n / 10) % 10;\n\t\t\n\t\tif (is_undulating)\n\t\t{\n\t\t\tif (next_digit >= last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (next_digit <= last_digit)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tlast_digit = next_digit;\n\t\tn /= 10;\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpxp7v2mj9.d(49): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpxp7v2mj9.__unittest_L45_C1() [0x427ae8]\n??:? void tmpxp7v2mj9.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tforeach(i; 0..digits.length-2)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpakeitnjv.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpakeitnjv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpvuojwzg1.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvuojwzg1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif (n < 10)\n\t\treturn is_undulating;\n\t\n\tlong last_digit = n % 10;\n\tlong next_digit = 0;\n\tlong next_last_digit = 0;\n\t\n\twhile (n > 0)\n\t{\n\t\tnext_digit = n % 10;\n\t\t\n\t\tif (next_digit == last_digit)\n\t\t\treturn is_undulating;\n\t\t\t\n\t\tif (next_last_digit != 0)\n\t\t{\n\t\t\tif (next_digit != next_last_digit)\n\t\t\t\treturn is_undulating;\n\t\t}\n\t\t\n\t\tnext_last_digit = last_digit;\n\t\tlast_digit = next_digit;\n\t\tn /= 10;\n\t}\n\t\n\tis_undulating = true;\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2i33vaww.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp2i33vaww.__unittest_L41_C1() [0x427ad8]\n??:? void tmp2i33vaww.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) \n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpox8ga_o2.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox8ga_o2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 1; i < len - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i-1] || digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmptpwz92df.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpwz92df.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmph5ariug6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5ariug6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tif (digits.length < 3) return false;\n\t\n\tauto first = digits[0];\n\tauto second = digits[1];\n\tauto third = digits[2];\n\t\n\tauto first_diff = abs(first - second);\n\tauto second_diff = abs(second - third);\n\t\n\treturn first_diff == second_diff;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmppjtrz_ml.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppjtrz_ml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach (i, digit; digits)\n\t{\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (digit > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digit < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpus7igoga.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus7igoga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto digits_count = digits.length;\n\t\n\tif (digits_count < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits_count - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmptyq8oyol.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptyq8oyol.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string);\n\tint[] undulating = [0,1,2,3,4,5,6,7,8,9,0,9,8,7,6,5,4,3,2,1,0];\n\t\n\tif (digits.length != undulating.length)\n\t\treturn false;\n\t\n\tforeach (i, d; digits)\n\t\tif (d != undulating[i])\n\t\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpzcl7xl9o.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzcl7xl9o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpltx25nbj.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltx25nbj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp6owma0x9.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6owma0x9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digit < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digit > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmprpapwuwy.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprpapwuwy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpispnnd7y.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpispnnd7y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\tauto is_odd = len % 2;\n\t\n\tauto first_half = digits[0 .. len / 2];\n\tauto second_half = digits[len / 2 .. $];\n\t\n\tif (is_odd) \n\t{\n\t\tsecond_half = digits[len / 2 + 1 .. $];\n\t}\n\t\n\tauto first_half_sum = 0;\n\tauto second_half_sum = 0;\n\t\n\tforeach(i, d; first_half) \n\t{\n\t\tfirst_half_sum += d - '0';\n\t}\n\t\n\tforeach(i, d; second_half) \n\t{\n\t\tsecond_half_sum += d - '0';\n\t}\n\t\n\treturn first_half_sum == second_half_sum;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpizj0i4ev.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizj0i4ev.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i == 0) continue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpe3hqdi0s.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpe3hqdi0s.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe3hqdi0s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 10)\n\t\treturn result;\n\t\n\tint prev = n % 10;\n\tn /= 10;\n\t\n\twhile(n > 0)\n\t{\n\t\tint curr = n % 10;\n\t\t\n\t\tif(prev == curr)\n\t\t\treturn result;\n\t\t\n\t\tprev = curr;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto odd = true;\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (odd)\n\t\t{\n\t\t\tif (digits[i] != digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] == digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpiaahn10k.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiaahn10k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto undulating = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t{\n\t\t\tundulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgm8wvyxq.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgm8wvyxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = n.to!string.length;\n\t\n\tif (digits == 2) \n\t\treturn n[0] == n[1];\n\t\n\tif (digits == 3) \n\t\treturn n[0] == n[2];\n\t\n\tif (digits == 4) \n\t\treturn n[0] == n[3] && n[1] == n[2];\n\t\n\tif (digits == 5) \n\t\treturn n[0] == n[4] && n[1] == n[3];\n\t\n\tif (digits == 6) \n\t\treturn n[0] == n[5] && n[1] == n[4] && n[2] == n[3];\n\t\n\tif (digits == 7) \n\t\treturn n[0] == n[6] && n[1] == n[5] && n[2] == n[4];\n\t\n\tif (digits == 8) \n\t\treturn n[0] == n[7] && n[1] == n[6] && n[2] == n[5] && n[3] == n[4];\n\t\n\tif (digits == 9) \n\t\treturn n[0] == n[8] && n[1] == n[7] && n[2] == n[6] && n[3] == n[5];\n\t\n\tif (digits == 10) \n\t\treturn n[0] == n[9] && n[1] == n[8] && n[2] == n[7] && n[3] == n[6] && n[4] == n[5];\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpj4ap0g7r.d(13): Error: no property `to` for type `long`\n/tmp/tmpj4ap0g7r.d(16): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(16): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(19): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(19): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(22): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(22): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(22): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(22): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(25): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(25): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(25): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(25): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(28): Error: only one index allowed to index `long`\n/tmp/tmpj4ap0g7r.d(28): Error: only one index allo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tbool is_undulating = true;\n\tfor (int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpo2u57ok_.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo2u57ok_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (odd)\n\t\t{\n\t\t\tif (digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpnzmvj7ud.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnzmvj7ud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpx4iapdzc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4iapdzc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong[] digits = n.toString().map!(a => a.to!long)().array();\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpvhm_gfwi.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvhm_gfwi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpkirjfazf.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkirjfazf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp38r3svzk.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38r3svzk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string;\n\tif (digits.length < 3) return false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++) {\n\t\tif (digits[i] == digits[i+1] || digits[i+1] == digits[i+2]) return false;\n\t\tif (digits[i] > digits[i+1] && digits[i+1] > digits[i+2]) return false;\n\t\tif (digits[i] < digits[i+1] && digits[i+1] < digits[i+2]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpjx92ur1l.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjx92ur1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int())();\n\tint[] undulating = new int[digits.length];\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tundulating[i] = d;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tundulating[i] = -d;\n\t\t}\n\t}\n\t\n\tint sum = undulating.sum;\n\t\n\treturn sum % 11 == 0;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpa135ow30.d(10): Error: no property `toString` for type `long`\n/tmp/tmpa135ow30.d(25): Error: no property `sum` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa135ow30.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong n_copy = n;\n\tlong last_digit = n % 10;\n\tlong second_last_digit = 0;\n\tlong count = 0;\n\twhile (n_copy != 0) \n\t{\n\t\tsecond_last_digit = n_copy % 10;\n\t\tif (last_digit != second_last_digit) \n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tlast_digit = second_last_digit;\n\t\tn_copy /= 10;\n\t}\n\treturn count == 2;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpblap0v6q.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427d6d]\n??:? void tmpblap0v6q.__unittest_L26_C1() [0x427a98]\n??:? void tmpblap0v6q.__modtest() [0x427aec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]\n??:? runModuleUnitTests [0x42b869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281bc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tstring s = to!string(n);\n\tbool result = true;\n\tfor(int i = 0; i < s.length - 2; i += 2)\n\t{\n\t\tif(s[i] != s[i+2])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpltl_pl4o.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltl_pl4o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString());\n\t\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp_hfpvddz.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_hfpvddz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach (i, d; digits)\n\t{\n\t\tif (i > 0)\n\t\t\tdiffs[i - 1] = abs(d - digits[i - 1]);\n\t}\n\treturn diffs.all!(a => a == 1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpf91tshfq.d(10): Error: no property `toString` for type `long`\n/tmp/tmpf91tshfq.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf91tshfq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpw2b4hvkm.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2b4hvkm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif(n < 10)\n\t\treturn result;\n\t\n\tint prev_digit = n % 10;\n\tn /= 10;\n\t\n\twhile(n > 0)\n\t{\n\t\tint curr_digit = n % 10;\n\t\t\n\t\tif(prev_digit == curr_digit)\n\t\t\treturn result;\n\t\t\n\t\tprev_digit = curr_digit;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpcq3jbnhe.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpcq3jbnhe.d(18): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcq3jbnhe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tforeach(i, j; zip(digits[0 .. $ - 1], digits[1 .. $]))\n\t{\n\t\tif(i[0] == i[1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpmlsebn4g.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpmlsebn4g.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmlsebn4g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i; 0..digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpt5_pswrb.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt5_pswrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\tif (n < 10)\n\t\treturn false;\n\telse\n\t{\n\t\tint last_digit = n % 10;\n\t\tn /= 10;\n\t\tint second_last_digit = n % 10;\n\t\tn /= 10;\n\t\twhile (n > 0)\n\t\t{\n\t\t\tint third_last_digit = n % 10;\n\t\t\tif (last_digit == second_last_digit || second_last_digit == third_last_digit)\n\t\t\t\treturn false;\n\t\t\tif (last_digit > second_last_digit && second_last_digit < third_last_digit)\n\t\t\t\tresult = true;\n\t\t\telse if (last_digit < second_last_digit && second_last_digit > third_last_digit)\n\t\t\t\tresult = true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t\tlast_digit = second_last_digit;\n\t\t\tsecond_last_digit = third_last_digit;\n\t\t\tn /= 10;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++) {\n\t\tif (odd && digits[i] > digits[i + 1])\n\t\t\treturn false;\n\t\tif (!odd && digits[i] < digits[i + 1])\n\t\t\treturn false;\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgrpowhrm.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrpowhrm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t\td = digits[i] - digits[i + 1];\n\t\n\treturn diffs.all!(a => a == 0 || abs(a) == 1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpi29mrr7_.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpi29mrr7_.d(15): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi29mrr7_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpx99dceub.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx99dceub.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif(digits[i] != digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpb46bh3yd.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb46bh3yd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpftchc777.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftchc777.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong n1 = n;\n\tlong n2 = n;\n\tlong n3 = n;\n\tlong n4 = n;\n\tlong n5 = n;\n\tlong n6 = n;\n\tlong n7 = n;\n\tlong n8 = n;\n\tlong n9 = n;\n\tlong n10 = n;\n\tlong n11 = n;\n\tlong n12 = n;\n\tlong n13 = n;\n\tlong n14 = n;\n\tlong n15 = n;\n\tlong n16 = n;\n\tlong n17 = n;\n\tlong n18 = n;\n\tlong n19 = n;\n\tlong n20 = n;\n\tlong n21 = n;\n\tlong n22 = n;\n\tlong n23 = n;\n\tlong n24 = n;\n\tlong n25 = n;\n\tlong n26 = n;\n\tlong n27 = n;\n\tlong n28 = n;\n\tlong n29 = n;\n\tlong n30 = n;\n\tlong n31 = n;\n\tlong n32 = n;\n\tlong n33 = n;\n\tlong n34 = n;\n\tlong n35 = n;\n\tlong n36 = n;\n\tlong n37 = n;\n\tlong n38 = n;\n\tlong n39 = n;\n\tlong n40 = n;\n\tlong n41 = n;\n\tlong n42 = n;\n\tlong n43 = n;\n\tlong n44 = n;\n\tlong n45 = n;\n\tlong n46 = n;\n\tlong n47 = n;\n\tlong n48 = n;\n\tlong n49 = n;\n\tlong n50 = n;\n\tlong n51 = n;\n\tlong n52 = n;\n\tlong n53 = n;\n\tlong n54 = n;\n\tlong n55 = n;\n\tlong n56 = n;\n\tlong n57 = n;\n\tlong n58 = n;\n\tlong n59 = n;\n\tlong n60 = n;\n\tlong n61 = n;\n\tlong n62 = n;\n\tlong n63 = n;\n\tlong n64 =\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpzkueb22s.d(74): Error: expression expected, not `unittest`\n/tmp/tmpzkueb22s.d(75): Error: semicolon expected, not `{`\n/tmp/tmpzkueb22s.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkueb22s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString());\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp50spd57l.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50spd57l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i; 0 .. diffs.length) {\n\t\tdiffs[i] = digits[i] - digits[i + 1];\n\t}\n\t\n\treturn diffs.all!(a => a == 0) || diffs.all!(a => a == 1) || diffs.all!(a => a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmphb8s0ycw.d(10): Error: no property `toString` for type `long`\n/tmp/tmphb8s0ycw.d(16): Error: no property `all` for type `int[]`\n/tmp/tmphb8s0ycw.d(16): Error: no property `all` for type `int[]`\n/tmp/tmphb8s0ycw.d(16): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb8s0ycw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpvo5ssogu.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvo5ssogu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array();\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t\t}\n\t}\n\t\n\tbool is_undulating = true;\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i != 0)\n\t\t{\n\t\t\tif(d * diffs[i - 1] > 0)\n\t\t\t{\n\t\t\t\tis_undulating = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp6o788xr0.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6o788xr0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i; 0 .. digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpseaslb7v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseaslb7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int())().array();\n\t\n\tforeach(i; 0..digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpyj4rmrfo.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyj4rmrfo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tauto is_increasing = digits[0] < digits[1];\n\t\n\tfor(int i = 1; i < digits.length - 1; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp3_gf4jv8.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3_gf4jv8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor (int i = 0; i < digits.length - 2; i += 2) \n\t{\n\t\tif (digits[i] != digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpzug9wi2n.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzug9wi2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\tbool is_undulating = true;\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tif(d == diffs[i - 1])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpihxkhijr.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpihxkhijr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd = true;\n\tfor(int i = 0; i < digits.length; i++) {\n\t\tif(odd) {\n\t\t\tif(digits[i] < digits[i+1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\tif(digits[i] > digits[i+1]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\todd = !odd;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpksj1d3eh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpksj1d3eh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tbool is_undulating = true;\n\tfor(int i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif(digits[i] != digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp78c41ev4.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp78c41ev4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{ \n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] != digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmploeukrtc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmploeukrtc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_odd = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif(is_odd)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t{\n\t\t\t\tis_odd = false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t{\n\t\t\t\tis_odd = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpfpgy5swm.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfpgy5swm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tauto prev = digits[0];\n\tforeach(i, c; digits[1 .. $])\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(c > prev)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(c < prev)\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t\tprev = c;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpk5fox7to.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk5fox7to.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto evens = digits.filter!(a => a.isEven);\n\tauto odds = digits.filter!(a => a.isOdd);\n\treturn evens.sum == odds.sum;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp0iwbiq33.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0iwbiq33.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool is_undulating = false;\n\t\n\tif (n < 10)\n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpoqogrvpi.d(15): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqogrvpi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\tint last_digit = 0;\n\tint current_digit = 0;\n\tint count = 0;\n\twhile (n > 0)\n\t{\n\t\tcurrent_digit = n % 10;\n\t\tif (last_digit == 0)\n\t\t{\n\t\t\tlast_digit = current_digit;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (last_digit == current_digit)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (count > 0)\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tlast_digit = current_digit;\n\t\t}\n\t\tn = n / 10;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl1e68qjl.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpl1e68qjl.__unittest_L41_C1() [0x427aa8]\n??:? void tmpl1e68qjl.__modtest() [0x427afc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tint len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 1; i < len - 1; i++) \n\t{\n\t\tif (digits[i - 1] == digits[i + 1]) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp2p_g8uxm.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2p_g8uxm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint prev_diff = 0;\n\tint curr_diff = 0;\n\t\n\tint prev_digit = n % 10;\n\tn /= 10;\n\tint curr_digit = n % 10;\n\tn /= 10;\n\t\n\twhile (n > 0) {\n\t\tprev_diff = curr_diff;\n\t\tcurr_diff = curr_digit - prev_digit;\n\t\t\n\t\tif (prev_diff == curr_diff)\n\t\t\treturn false;\n\t\t\n\t\tprev_digit = curr_digit;\n\t\tcurr_digit = n % 10;\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfc7fwonm.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmpfc7fwonm.__unittest_L35_C1() [0x427ae7]\n??:? void tmpfc7fwonm.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpmp_jsngc.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmp_jsngc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2]) return false;\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2]) return false;\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2]) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpa_zm2o9s.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_zm2o9s.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i < digits.length - 1)\n\t\t\tdiffs[i] = digits[i + 1] - d;\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgtdy_bmc.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpgtdy_bmc.d(18): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgtdy_bmc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = false;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif((digits[i] == digits[i+2]) && (digits[i] != digits[i+1]))\n\t\t{\n\t\t\tis_undulating = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpg1sj3g2g.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1sj3g2g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint len = digits.length;\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\telse if (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpo7go3cys.d(10): Error: no property `toString` for type `long`\n/tmp/tmpo7go3cys.d(11): Error: cannot implicitly convert expression `digits.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7go3cys.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int() - '0'.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tif(d == diffs[i - 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp_zb7dtey.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_zb7dtey.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] % 2 == 0 && digits[i + 1] % 2 == 0)\n\t\t{\n\t\t\tif (abs(digits[i] - digits[i + 1]) != 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmphmdodt4b.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphmdodt4b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmpjyz7x01v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjyz7x01v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpnonm_9_6.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnonm_9_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] != digits[i + 2]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpirv43uli.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpirv43uli.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto odd_digits = digits[0 .. $/2];\n\tauto even_digits = digits[$/2 .. $];\n\t\n\tif (odd_digits.length != even_digits.length)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < odd_digits.length; i++)\n\t{\n\t\tif (odd_digits[i] != even_digits[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpxiop_2yw.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxiop_2yw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp5v52xuqb.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v52xuqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif(n < 100) return false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tint i = 0;\n\twhile(i < digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t{\n\t\t\ti += 3;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpop7180zx.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpop7180zx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n).map!(a => a.to!int()).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\t\n\tfor (int i = 2; i < digits.length; i++)\n\t{\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (digits[i] > digits[i - 1])\n\t\t\t\treturn false;\n\t\t\telse if (digits[i] < digits[i - 1])\n\t\t\t\tis_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i - 1])\n\t\t\t\treturn false;\n\t\t\telse if (digits[i] > digits[i - 1])\n\t\t\t\tis_increasing = true;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpiug94jp_.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiug94jp_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif(n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!string(n);\n\t\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmph_xrstl9.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph_xrstl9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tint len = digits.length;\n\t\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] > digits[i + 1])\n\t\t{\n\t\t\tif(digits[i + 1] > digits[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i + 1] < digits[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgdgh_4gp.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgdgh_4gp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif(even && digits[i] > digits[i+1])\n\t\t\treturn false;\n\t\tif(!even && digits[i] < digits[i+1])\n\t\t\treturn false;\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgrnt8217.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgrnt8217.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\tfor (size_t i = 1; i < len - 1; i++) {\n\t\tif (digits[i - 1] == digits[i + 1]) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpzkuoyty3.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzkuoyty3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp43oo1dsw.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp43oo1dsw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\t\n\tif(digits.length < 3)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile(i < digits.length - 2)\n\t{\n\t\tif(digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\t\n\t\tif(digits[i] < digits[i+1])\n\t\t{\n\t\t\tif(digits[i+1] > digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i+1] < digits[i+2])\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpphsd41xr.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphsd41xr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto digits_len = digits.length;\n\t\n\tif (digits_len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits_len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] > digits[i + 1])\n\t\t{\n\t\t\tif (digits[i + 1] > digits[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i + 1] < digits[i + 2])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpxep4h8v8.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxep4h8v8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i; 0 .. digits.length - 2) \n\t{\n\t\tif(digits[i] == digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp7egb1bt5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7egb1bt5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif (last_digit == second_last_digit) \n\t\treturn false;\n\t\n\tbool increasing = last_digit > second_last_digit;\n\t\n\twhile (n > 0) \n\t{\n\t\tsecond_last_digit = last_digit;\n\t\tlast_digit = n % 10;\n\t\t\n\t\tif (last_digit == second_last_digit) \n\t\t\treturn false;\n\t\t\n\t\tif (increasing) \n\t\t{\n\t\t\tif (last_digit > second_last_digit) \n\t\t\t\treturn false;\n\t\t\t\n\t\t\tincreasing = false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (last_digit < second_last_digit) \n\t\t\t\treturn false;\n\t\t\t\n\t\t\tincreasing = true;\n\t\t}\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdpisug8i.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdpisug8i.__unittest_L49_C1() [0x427af0]\n??:? void tmpdpisug8i.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digit > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digit < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpomhgz778.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpomhgz778.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(digits[i] == '0')\n\t\t\tcontinue;\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] % 2 != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] % 2 == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpecotktru.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpecotktru.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\t\n\tauto is_odd = true;\n\t\n\tforeach (i, d; digits) \n\t{\n\t\tif (i == 0) \n\t\t\tcontinue;\n\t\t\n\t\tif (is_odd) \n\t\t{\n\t\t\tif (d <= digits[i - 1]) \n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (d >= digits[i - 1]) \n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tis_odd = !is_odd;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpux9l9d6f.d(13): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpux9l9d6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor (int i = 0; i < digits.length; i++)\n\t{\n\t\tif (digits[i] == digits[i+1])\n\t\t\treturn false;\n\t\tif (even)\n\t\t{\n\t\t\tif (digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp94k_htgz.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94k_htgz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString.map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i > 0)\n\t\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp8y_pg4f3.d(10): Error: no property `toString` for type `long`\n/tmp/tmp8y_pg4f3.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8y_pg4f3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpcvrk5rbh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvrk5rbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif (last_digit == second_last_digit) \n\t\treturn false;\n\t\n\tbool is_increasing = last_digit > second_last_digit;\n\t\n\twhile (n > 0) \n\t{\n\t\tsecond_last_digit = last_digit;\n\t\tlast_digit = n % 10;\n\t\t\n\t\tif (last_digit == second_last_digit) \n\t\t\treturn false;\n\t\t\n\t\tif (is_increasing && last_digit > second_last_digit) \n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && last_digit < second_last_digit) \n\t\t\treturn false;\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmqklkuka.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpmqklkuka.__unittest_L40_C1() [0x427aec]\n??:? void tmpmqklkuka.__modtest() [0x427b40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\t\n\t\tif (digits[i] < digits[i + 1] && digits[i + 1] > digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] > digits[i + 1] && digits[i + 1] < digits[i + 2])\n\t\t\tcontinue;\n\t\t\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp844fgakg.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp844fgakg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool result = true;\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] != digits[i + 2]) \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp36dice6d.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36dice6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(int i = 0; i < digits.length; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpgl6jnpbo.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl6jnpbo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpzrxqn5t7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrxqn5t7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\tauto digits = to!(string[])(n);\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpuncq2b0m.d(11): Error: template instance `to!(string[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuncq2b0m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool is_undulating = true;\n\tfor (size_t i = 0; i < digits.length - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) \n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpv54whcok.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv54whcok.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\tint last_digit = n % 10;\n\tint current_digit = 0;\n\tint next_digit = 0;\n\t\n\twhile (n != 0) \n\t{\n\t\tcurrent_digit = n % 10;\n\t\tn /= 10;\n\t\tnext_digit = n % 10;\n\t\t\n\t\tif (last_digit == current_digit)\n\t\t\treturn false;\n\t\t\n\t\tif (last_digit > current_digit && current_digit < next_digit)\n\t\t\tresult = true;\n\t\telse if (last_digit < current_digit && current_digit > next_digit)\n\t\t\tresult = true;\n\t\telse\n\t\t\treturn false;\n\t\t\n\t\tlast_digit = current_digit;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprz9y78h4.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmprz9y78h4.__unittest_L36_C1() [0x427ad0]\n??:? void tmprz9y78h4.__modtest() [0x427b24]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tauto digits = to!(immutable(int)[])(n);\n\t\n\tforeach (i, ref d; digits)\n\t{\n\t\tif (i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif (i % 2 == 0)\n\t\t{\n\t\t\tif (d != digits[i - 1] - 1)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (d != digits[i - 1] + 1)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpsdxjre6u.d(13): Error: template instance `to!(immutable(int)[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdxjre6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t\td = digits[i] - digits[i + 1];\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpzarjh88o.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpzarjh88o.d(14): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzarjh88o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100) \n\t\treturn false;\n\t\n\tauto digits = to!(string)(n);\n\t\n\tforeach (i, digit; digits) \n\t{\n\t\tif (i == 0) \n\t\t\tcontinue;\n\t\t\n\t\tif (digits[i] == digits[i - 1]) \n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpbtwedv06.d(13): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtwedv06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpi6dnht7v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6dnht7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tauto even = true;\n\t\n\tfor(int i = 0; i < len - 1; i++)\n\t{\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i+1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpnib602ia.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnib602ia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array();\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t{\n\t\td = digits[i] - digits[i+1];\n\t}\n\treturn diffs.all!(d => d == 0 || d == 1 || d == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpm9tg1scy.d(10): Error: no property `toString` for type `long`\n/tmp/tmpm9tg1scy.d(16): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm9tg1scy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0) continue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmppckjjd7f.d(10): Error: no property `toString` for type `long`\n/tmp/tmppckjjd7f.d(17): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppckjjd7f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto even = true;\n\tfor(int i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif(digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t\tif(even)\n\t\t{\n\t\t\tif(digits[i] > digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] < digits[i + 1])\n\t\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpu25bxcrg.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu25bxcrg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] != digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp9sx8dcyf.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sx8dcyf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif (n < 100)\n\t\treturn result;\n\t\n\tint prev_digit = n % 10;\n\tn /= 10;\n\tint cur_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = prev_digit > cur_digit;\n\t\n\twhile (n > 0)\n\t{\n\t\tprev_digit = cur_digit;\n\t\tcur_digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (prev_digit == cur_digit)\n\t\t\tcontinue;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (prev_digit < cur_digit)\n\t\t\t\treturn result;\n\t\t\tis_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (prev_digit > cur_digit)\n\t\t\t\treturn result;\n\t\t\tis_increasing = true;\n\t\t}\n\t}\n\t\n\tresult = true;\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpt0as0j40.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427dcd]\n??:? void tmpt0as0j40.__unittest_L48_C1() [0x427af8]\n??:? void tmpt0as0j40.__modtest() [0x427b4c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baf3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a986]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb19]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a95d]\n??:? runModuleUnitTests [0x42b8c9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42821c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint prev = n % 10;\n\tn /= 10;\n\twhile (n) \n\t{\n\t\tint curr = n % 10;\n\t\tif (prev == curr)\n\t\t\treturn false;\n\t\tprev = curr;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpbvuctjzu.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvuctjzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tif (n < 100)\n\t\treturn false;\n\t\n\tint last_digit = n % 10;\n\tn /= 10;\n\tint second_last_digit = n % 10;\n\tn /= 10;\n\t\n\tbool is_increasing = last_digit > second_last_digit;\n\t\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tn /= 10;\n\t\t\n\t\tif (is_increasing && digit > second_last_digit)\n\t\t\treturn false;\n\t\t\n\t\tif (!is_increasing && digit < second_last_digit)\n\t\t\treturn false;\n\t\t\n\t\tsecond_last_digit = digit;\n\t\tis_increasing = !is_increasing;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5k7qgymo.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp5k7qgymo.__unittest_L37_C1() [0x427af0]\n??:? void tmp5k7qgymo.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.toString().map!(a => a.to!int()));\n\tint len = digits.length;\n\tbool result = true;\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmprltyk3hi.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmprltyk3hi.d(11): Error: cannot implicitly convert expression `digits.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprltyk3hi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tlong prev = n % 10;\n\tn /= 10;\n\tlong curr;\n\tbool increasing = true;\n\twhile (n > 0) \n\t{\n\t\tcurr = n % 10;\n\t\tif (curr == prev)\n\t\t\treturn false;\n\t\tif (increasing) \n\t\t{\n\t\t\tif (curr > prev)\n\t\t\t\treturn false;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tif (curr < prev)\n\t\t\t\treturn false;\n\t\t}\n\t\tincreasing = !increasing;\n\t\tprev = curr;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg41t1zfz.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpg41t1zfz.__unittest_L35_C1() [0x427ae4]\n??:? void tmpg41t1zfz.__modtest() [0x427b38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tforeach(i; 1..digits.length-1)\n\t{\n\t\tif(digits[i-1] == digits[i])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp0_qb3_z0.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_qb3_z0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.toString().map!(a => a.to!int).array;\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tif(i == 0 || i == digits.length - 1)\n\t\t\tcontinue;\n\t\t\n\t\tif(digits[i] == digits[i - 1] || digits[i] == digits[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp2e3uxjya.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2e3uxjya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpscp_bc3t.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscp_bc3t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tif(digits.length < 3) return false;\n\t\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp4nq9qwhx.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4nq9qwhx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (size_t i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i+2]) return true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp672h2fr7.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp672h2fr7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, ref d; diffs)\n\t{\n\t\td = digits[i] - digits[i + 1];\n\t}\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpg7bapymh.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpg7bapymh.d(16): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7bapymh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpjl1f267u.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjl1f267u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tif(digits.length < 3) return false;\n\t\n\tbool is_increasing = digits[0] < digits[1];\n\tfor(size_t i = 2; i < digits.length; i++)\n\t{\n\t\tif(is_increasing)\n\t\t{\n\t\t\tif(digits[i-1] > digits[i])\n\t\t\t{\n\t\t\t\tis_increasing = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i-1] < digits[i])\n\t\t\t{\n\t\t\t\tis_increasing = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpajyunl05.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpajyunl05.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmp5v52xuqb.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5v52xuqb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\t\n\tif (digits.length < 3)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile (i < digits.length - 2)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t\ti++;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpemx5h0fr.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpemx5h0fr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint last_digit = n % 10;\n\tn /= 10;\n\tbool increasing = true;\n\twhile (n > 0) \n\t{\n\t\tint digit = n % 10;\n\t\tif (increasing) \n\t\t{\n\t\t\tif (digit > last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (digit < last_digit) \n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (digit < last_digit) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (digit > last_digit) \n\t\t\t{\n\t\t\t\tincreasing = true;\n\t\t\t}\n\t\t}\n\t\tlast_digit = digit;\n\t\tn /= 10;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnabfh4wi.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427da5]\n??:? void tmpnabfh4wi.__unittest_L43_C1() [0x427ad4]\n??:? void tmpnabfh4wi.__modtest() [0x427b28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bacb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a95e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a935]\n??:? runModuleUnitTests [0x42b8a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281f4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = to!(int[])(n.to!string).map!(a => a.to!int).array;\n\tint[] diff = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiff[i - 1] = d - digits[i - 1];\n\t}\n\treturn diff.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpexal376r.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\n/tmp/tmpexal376r.d(18): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexal376r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122548,
      "stdout": "",
      "stderr": "/tmp/tmp1beijacj.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1beijacj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array();\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\tforeach(i, d; diffs)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tif(d == diffs[i - 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp7hwigr9e.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7hwigr9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i+2]) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpy3n14hcy.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy3n14hcy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool is_undulating = true;\n\tfor(size_t i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i+1] || digits[i+1] == digits[i+2] || digits[i] == digits[i+2])\n\t\t{\n\t\t\tis_undulating = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_undulating;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpf3kkdp1j.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf3kkdp1j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto is_even = true;\n\tfor (size_t i = 0; i < digits.length; i++)\n\t{\n\t\tif (digits[i] % 2 == 0)\n\t\t{\n\t\t\tif (!is_even)\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (is_even)\n\t\t\t\treturn false;\n\t\t}\n\t\tis_even = !is_even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpl8dvlf5o.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl8dvlf5o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++) \n\t{\n\t\tif (digits[i] == digits[i + 2]) return true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122549,
      "stdout": "",
      "stderr": "/tmp/tmpcvrk5rbh.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvrk5rbh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tbool result = false;\n\t\n\tif (n < 100) \n\t{\n\t\treturn result;\n\t}\n\t\n\tint last_digit = n % 10;\n\tint second_last_digit = (n / 10) % 10;\n\t\n\tif (last_digit == second_last_digit) \n\t{\n\t\treturn result;\n\t}\n\t\n\twhile (n > 0) \n\t{\n\t\tint current_digit = n % 10;\n\t\t\n\t\tif (last_digit == second_last_digit) \n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tlast_digit = second_last_digit;\n\t\tsecond_last_digit = current_digit;\n\t\t\n\t\tn /= 10;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6bqhps8g.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427d9d]\n??:? void tmp6bqhps8g.__unittest_L47_C1() [0x427ac8]\n??:? void tmp6bqhps8g.__modtest() [0x427b1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bac3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a956]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fae9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]\n??:? runModuleUnitTests [0x42b899]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281ec]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tint[] digits = n.toString().map!(a => a.to!int()).array;\n\tint[] diffs = new int[digits.length - 1];\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\tdiffs[i - 1] = d - digits[i - 1];\n\t}\n\t\n\treturn diffs.all!(a => a == 0 || a == 1 || a == -1);\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmp72ehxfef.d(10): Error: no property `toString` for type `long`\n/tmp/tmp72ehxfef.d(19): Error: no property `all` for type `int[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ehxfef.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tbool increasing = true;\n\tfor (size_t i = 0; i < digits.length - 1; i++)\n\t{\n\t\tif (increasing)\n\t\t{\n\t\t\tif (digits[i] > digits[i + 1])\n\t\t\t{\n\t\t\t\tincreasing = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i + 1])\n\t\t\t{\n\t\t\t\tincreasing = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpqv322nqe.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqv322nqe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string.map!(a => a.to!int).array;\n\t\n\tforeach(i, d; digits)\n\t{\n\t\tif(i == 0)\n\t\t\tcontinue;\n\t\t\n\t\tif(i % 2 == 0)\n\t\t{\n\t\t\tif(digits[i] >= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(digits[i] <= digits[i - 1])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpowuqhhmd.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowuqhhmd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len - 2; i++)\n\t{\n\t\tif(digits[i] == digits[i + 2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmphe6buz0u.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphe6buz0u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tstring s = to!string(n);\n\tint len = s.length;\n\t\n\tif(len < 3)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len - 2; i++)\n\t{\n\t\tif(s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpjqax9ro5.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpjqax9ro5.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqax9ro5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto even = true;\n\tfor (size_t i = 0; i < digits.length; i++) \n\t{\n\t\tif (digits[i] == digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (even && digits[i] > digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (!even && digits[i] < digits[i + 1]) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\teven = !even;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmps71mwzwq.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps71mwzwq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = n.to!string().map!(a => a.to!int()).array;\n\t\n\tif (digits.length < 3) return false;\n\t\n\tauto is_increasing = true;\n\t\n\tforeach (i, digit; digits)\n\t{\n\t\tif (i == 0) continue;\n\t\t\n\t\tif (is_increasing)\n\t\t{\n\t\t\tif (digits[i] > digits[i - 1]) continue;\n\t\t\telse is_increasing = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (digits[i] < digits[i - 1]) continue;\n\t\t\telse return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpl64mhdhh.d(10): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl64mhdhh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\t\n\tforeach(i, digit; digits)\n\t{\n\t\tauto next = digits[i + 1];\n\t\tif(digit == next)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpwb1zy55l.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwb1zy55l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto s = to!string(n);\n\tif (s.length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 0; i < s.length - 2; i++)\n\t{\n\t\tif (s[i] == s[i+2])\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpobgpk7o9.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobgpk7o9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\tif (len < 3) return false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpg4s0qv6d.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg4s0qv6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!string(n);\n\tauto len = digits.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len - 2; i++)\n\t{\n\t\tif (digits[i] == digits[i + 1] || digits[i + 1] == digits[i + 2] || digits[i] == digits[i + 2])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpi6dnht7v.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi6dnht7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is undulating or not.\n\t\n*/\nbool is_undulating(long n) \n{\n\tauto digits = to!(string)(n);\n\tbool result = true;\n\tfor(int i = 0; i < digits.length - 2; i++)\n\t{\n\t\tif(digits[i] != digits[i+2])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = is_undulating;\n\n    assert(candidate(1212121L) == true);\n    assert(candidate(1991L) == false);\n    assert(candidate(121L) == true);\n}\nvoid main(){}",
      "timestamp": 1666122550,
      "stdout": "",
      "stderr": "/tmp/tmpnysuu2rp.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnysuu2rp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}