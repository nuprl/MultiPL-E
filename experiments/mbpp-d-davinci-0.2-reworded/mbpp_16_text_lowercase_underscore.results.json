{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsp2ghbw7.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpsp2ghbw7.__unittest_L35_C1() [0x427b1c]\n??:? void tmpsp2ghbw7.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tif(text.length == 1)\n\t\treturn islower(text[0]);\n\t\n\tif(text[0] == '_')\n\t\treturn false;\n\t\n\tif(!islower(text[0]))\n\t\treturn false;\n\t\n\tfor(int i = 1; i < text.length; i++)\n\t{\n\t\tif(!islower(text[i]) && text[i] != '_')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpbzsnx84m.d(13): Error: undefined identifier `islower`\n/tmp/tmpbzsnx84m.d(18): Error: undefined identifier `islower`\n/tmp/tmpbzsnx84m.d(23): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbzsnx84m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' ||\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp0nn3z9jy.d(32): Error: expression expected, not `unittest`\n/tmp/tmp0nn3z9jy.d(33): Error: found `{` when expecting `)`\n/tmp/tmp0nn3z9jy.d(40): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp0nn3z9jy.d(40): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0nn3z9jy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif (len == 0)\n\t\treturn false;\n\t\t\n\tif (text[i] == '_')\n\t\treturn false;\n\t\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == len - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == ' ')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\t')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\n')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\r')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\0')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\v')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\f')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\b')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\a')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\e')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\x1b')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i+1] == '\\x1f')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpk4nqx_9e.d(55): Error: undefined escape sequence \\e\n/tmp/tmpk4nqx_9e.d(65): Error: found `unittest` when expecting `,`\n/tmp/tmpk4nqx_9e.d(73): Error: found `void` when expecting `,`\n/tmp/tmpk4nqx_9e.d(73): Error: found `{` when expecting `,`\n/tmp/tmpk4nqx_9e.d(73): Error: expression expected, not `}`\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `,`\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `]`\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `)`\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` instead of statement\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpk4nqx_9e.d(73): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk4nqx_9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool result = true;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool underscore = false;\n\tbool lowercase = false;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn underscore && lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg8ijzjz0.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpg8ijzjz0.__unittest_L26_C1() [0x427b08]\n??:? void tmpg8ijzjz0.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (is_lowercase(text[i]))\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\treturn (underscore_count == lowercase_count - 1);\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmprkgndc_c.d(18): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprkgndc_c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeyvbrh0f.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpeyvbrh0f.__unittest_L33_C1() [0x427b10]\n??:? void tmpeyvbrh0f.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpju3907ub.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpju3907ub.__unittest_L33_C1() [0x427b10]\n??:? void tmpju3907ub.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i - 1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (i == len - 1)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i + 1] == '_')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == ' ')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] == '\\t')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i] == '\\n')\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (text[i] == '\\r')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp8kcnf3xl.d(73): Error: found `unittest` instead of statement\n/tmp/tmp8kcnf3xl.d(81): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8kcnf3xl.d(81): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8kcnf3xl.d(81): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8kcnf3xl.d(81): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp8kcnf3xl.d(81): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kcnf3xl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tif(text[0] < 'a' || text[0] > 'z')\n\t\treturn false;\n\t\n\tfor(int i = 1; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i + 1 < text.length)\n\t\t\t{\n\t\t\t\tif(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\treturn false;\n\t\t\tif(!islower(text[i-1]) || !islower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isalpha(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz9vqd8zh.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpz9vqd8zh.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpz9vqd8zh.d(17): Error: undefined identifier `isalpha`\n/tmp/tmpz9vqd8zh.d(19): Error: undefined identifier `islower`\n/tmp/tmpz9vqd8zh.d(19): Error: undefined identifier `islower`\n/tmp/tmpz9vqd8zh.d(22): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9vqd8zh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool result = false;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmp1o7v308d.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp1o7v308d.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp1o7v308d.d(22): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1o7v308d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_') continue;\n\t\tif(c >= 'a' && c <= 'z') continue;\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len-1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(text[i-1] == '_' || text[i+1] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isalpha(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!islower(text[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpozz0utfi.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpozz0utfi.d(32): Error: undefined identifier `isalpha`\n/tmp/tmpozz0utfi.d(39): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpozz0utfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (is_underscore) return false;\n\t\t\tis_underscore = true;\n\t\t\tis_lowercase = false;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (is_lowercase) return false;\n\t\t\tis_lowercase = true;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmphyb2nes3.d(22): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphyb2nes3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_lowercase_underscore = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\t\n\t\tif (is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase_underscore = true;\n\t\t}\n\t}\n\t\n\treturn is_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp7xt8d7tm.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xt8d7tm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (isalpha(text[i]))\n\t\t\t{\n\t\t\t\tif (isupper(text[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpoaq976a_.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpoaq976a_.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpoaq976a_.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpoaq976a_.d(37): Error: undefined identifier `isalpha`\n/tmp/tmpoaq976a_.d(39): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoaq976a_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif(i+1 < len && text[i+1] == '_')\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpx4mk7_vb.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4mk7_vb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isalpha(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp25c5pv5y.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp25c5pv5y.d(23): Error: undefined identifier `isalpha`\n/tmp/tmp25c5pv5y.d(23): Error: undefined identifier `isalpha`\n/tmp/tmp25c5pv5y.d(32): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25c5pv5y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\t\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0ipqfwt6.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp0ipqfwt6.__unittest_L35_C1() [0x427b10]\n??:? void tmp0ipqfwt6.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp63i7cw2b.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp63i7cw2b.d(23): Error: undefined identifier `isLower`\n/tmp/tmp63i7cw2b.d(23): Error: undefined identifier `isLower`\n/tmp/tmp63i7cw2b.d(32): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63i7cw2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjf3azgnd.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpjf3azgnd.__unittest_L24_C1() [0x427b08]\n??:? void tmpjf3azgnd.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\ti++;\n\t\t\twhile(i < len && text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(i < len && text[i] == '_')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpzpcjnlsh.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpcjnlsh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool underscore = false;\n\tbool lowercase = false;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn underscore && lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpok1f2lxi.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpok1f2lxi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif(len == 0) return false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(is_lowercase)\n\t\t{\n\t\t\tif(text[i] == '_')\n\t\t\t{\n\t\t\t\tis_underscore = true;\n\t\t\t\tis_lowercase = false;\n\t\t\t}\n\t\t\telse if(!is_lowercase)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(is_underscore)\n\t\t{\n\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t\tis_underscore = false;\n\t\t\t}\n\t\t\telse if(!is_lowercase)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp1z4yc6lm.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1z4yc6lm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(text[i-1] == '_' || text[i+1] == '_')\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpd5fzupay.d(26): Error: undefined identifier `isLower`\n/tmp/tmpd5fzupay.d(26): Error: undefined identifier `isLower`\n/tmp/tmpd5fzupay.d(35): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd5fzupay.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpm0_p40ts.d(10): Error: no property `length` for type `string`\n/tmp/tmpm0_p40ts.d(22): Error: undefined identifier `isLower`\n/tmp/tmpm0_p40ts.d(22): Error: undefined identifier `isLower`\n/tmp/tmpm0_p40ts.d(30): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm0_p40ts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpsye7td_m.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsye7td_m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1 && uppercase_count == 0 && digit_count == 0 && other_count == 0)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplt7nisb9.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmplt7nisb9.__unittest_L48_C1() [0x427be0]\n??:? void tmplt7nisb9.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]\n??:? runModuleUnitTests [0x42ba35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428388]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint count = 0;\n\tint count_underscore = 0;\n\tint count_lowercase = 0;\n\tint count_uppercase = 0;\n\tint count_numbers = 0;\n\tint count_symbols = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tcount_underscore++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tcount_lowercase++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tcount_uppercase++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tcount_numbers++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcount_symbols++;\n\t\t}\n\t}\n\t\n\tif (count_underscore == count_lowercase - 1 && count_uppercase == 0 && count_numbers == 0 && count_symbols == 0)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb5gcrdu2.d(52): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpb5gcrdu2.__unittest_L48_C1() [0x427be0]\n??:? void tmpb5gcrdu2.__modtest() [0x427c48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc5f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaf2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc85]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430134]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc11]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac9]\n??:? runModuleUnitTests [0x42ba35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428388]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpdjluci08.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdjluci08.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (isupper(text[i - 1]) || isupper(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!isalpha(text[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpmf0v5j3g.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpmf0v5j3g.d(19): Error: undefined identifier `isalpha`\n/tmp/tmpmf0v5j3g.d(22): Error: undefined identifier `isupper`\n/tmp/tmpmf0v5j3g.d(22): Error: undefined identifier `isupper`\n/tmp/tmpmf0v5j3g.d(25): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmf0v5j3g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if (c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif (lowercase) return false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t\telse return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc2b64kbw.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpc2b64kbw.__unittest_L33_C1() [0x427af8]\n??:? void tmpc2b64kbw.__modtest() [0x427b60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tint uppercase = 0;\n\tint digit = 0;\n\tint other = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother++;\n\t\t}\n\t}\n\t\n\tif(underscore == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(lowercase == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(uppercase > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(digit > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(other > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprvwg14_k.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmprvwg14_k.__unittest_L33_C1() [0x427c2a]\n??:? void tmprvwg14_k.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc57]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43012c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]\n??:? runModuleUnitTests [0x42ba2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428380]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(is_lowercase)\n\t\t\t\tis_underscore = true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse if(is_lowercase)\n\t\t\treturn false;\n\t\telse if(is_underscore)\n\t\t\treturn false;\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t\tis_lowercase = true;\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn is_lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn9jq6s6j.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpn9jq6s6j.__unittest_L41_C1() [0x427b6c]\n??:? void tmpn9jq6s6j.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa59]\n??:? runModuleUnitTests [0x42b9c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428318]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!islower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp38smvlzu.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp38smvlzu.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp38smvlzu.d(22): Error: undefined identifier `isalpha`\n/tmp/tmp38smvlzu.d(28): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp38smvlzu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpre4coctg.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre4coctg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!(text[i - 1] >= 'a' && text[i - 1] <= 'z') || !(text[i + 1] >= 'a' && text[i + 1] <= 'z'))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!(text[i] >= 'a' && text[i] <= 'z'))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp5jz9bs96.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5jz9bs96.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tif(underscore && lowercase)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp91i6iulp.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp91i6iulp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif(len == 0)\n\t\treturn false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(is_underscore)\n\t\t\t\treturn false;\n\t\t\tis_underscore = true;\n\t\t\tis_lowercase = false;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif(is_lowercase)\n\t\t\t\treturn false;\n\t\t\tis_lowercase = true;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpkh0g2oso.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkh0g2oso.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the first character is lowercase\n\tif (text[0] < 'a' || text[0] > 'z')\n\t\treturn false;\n\t\n\t// Check if the rest of the characters are lowercase or underscore\n\tfor (int i = 1; i < text.length; i++)\n\t{\n\t\tif (text[i] != '_' && (text[i] < 'a' || text[i] > 'z'))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tbool result = false;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif(isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(isalpha(text[i]))\n\t\t\t{\n\t\t\t\tif(islower(text[i]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpjohaatpo.d(10): Error: no property `length` for type `string`\n/tmp/tmpjohaatpo.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpjohaatpo.d(18): Error: undefined identifier `isalpha`\n/tmp/tmpjohaatpo.d(36): Error: undefined identifier `isalpha`\n/tmp/tmpjohaatpo.d(38): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjohaatpo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if(text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if(text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tcontinue;\n\t\telse if(!isLower(c))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp4peifmqa.d(13): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4peifmqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp72ouady6.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp72ouady6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length();\n\tbool result = true;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpgs_4lb1m.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgs_4lb1m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(text.length == 1) return false;\n\t\t\tif(text.length == 2) return text[1] == '_';\n\t\t\tif(text[$-1] == '_') return false;\n\t\t}\n\t\telse if(!isLower(c)) return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpdnz90tvl.d(19): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdnz90tvl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(c)) return false;\n\t\t\tunderscore = false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpbkj9e7go.d(23): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbkj9e7go.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpai44fluu.d(19): Error: undefined identifier `isLower`\n/tmp/tmpai44fluu.d(19): Error: undefined identifier `isLower`\n/tmp/tmpai44fluu.d(22): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpai44fluu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the text is empty\n\tif (text.length == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is lowercase\n\tif (!is_lowercase(text[0]))\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the last character is lowercase\n\tif (!is_lowercase(text[text.length - 1]))\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if there are any characters that are not lowercase or underscore\n\tfor (uint i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (!is_lowercase(text[i]) && text[i] != '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Check if there are any consecutive underscores\n\tfor (uint i = 0; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == '_' && text[i + 1] == '_')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpbtypr4pb.d(16): Error: undefined identifier `is_lowercase`\n/tmp/tmpbtypr4pb.d(22): Error: undefined identifier `is_lowercase`\n/tmp/tmpbtypr4pb.d(30): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbtypr4pb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_first_char = true;\n\t\n\twhile (i < len)\n\t{\n\t\tif (is_first_char)\n\t\t{\n\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] == '_')\n\t\t\t{\n\t\t\t\tif (is_underscore)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tis_underscore = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t{\n\t\t\t\tif (is_lowercase)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tis_lowercase = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpyloh2e9t.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyloh2e9t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tbool flag = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tflag = true;\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tflag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpxha7my6a.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxha7my6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (underscore)\n\t\t\t{\n\t\t\t\tunderscore = false;\n\t\t\t\tlowercase = false;\n\t\t\t}\n\t\t\t\n\t\t\tif (lowercase)\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t\t\t\tlowercase = true;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\tif (lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\tif (uppercase_count > 0)\n\t{\n\t\treturn false;\n\t}\n\tif (digit_count > 0)\n\t{\n\t\treturn false;\n\t}\n\tif (other_count > 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore++;\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tlowercase++;\n\t\t}\n\t}\n\t\n\treturn underscore == lowercase - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8vj1dkmy.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427dad]\n??:? void tmp8vj1dkmy.__unittest_L26_C1() [0x427ac4]\n??:? void tmp8vj1dkmy.__modtest() [0x427b2c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bad3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a966]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42faf9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a93d]\n??:? runModuleUnitTests [0x42b8a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281fc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length(); i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpiweeeyw5.d(12): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiweeeyw5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_4punt20.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp_4punt20.__unittest_L28_C1() [0x427b10]\n??:? void tmp_4punt20.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_tca0v5_.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp_tca0v5_.__unittest_L33_C1() [0x427b10]\n??:? void tmp_tca0v5_.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\tif(!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!is_lowercase(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpnolo20h0.d(16): Error: undefined identifier `is_lowercase`\n/tmp/tmpnolo20h0.d(16): Error: undefined identifier `is_lowercase`\n/tmp/tmpnolo20h0.d(19): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnolo20h0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = true;\n\tint length = text.length;\n\tint i = 0;\n\twhile (i < length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp9tal3y44.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9tal3y44.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint length = text.length;\n\twhile (i < length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp3qvvp0jn.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3qvvp0jn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpdknfzmqu.d(44): Error: expression expected, not `unittest`\n/tmp/tmpdknfzmqu.d(45): Error: found `{` when expecting `)`\n/tmp/tmpdknfzmqu.d(52): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpdknfzmqu.d(52): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdknfzmqu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if (is_lowercase(text[i]))\n\t\t{\n\t\t\tif (lowercase)\n\t\t\t\treturn false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpxmlx9xrz.d(24): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmlx9xrz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tbool result = false;\n\t\n\tfor (i = 0; i < text.length; i++)\n\t{\n\t\tif (isalpha(text[i]) && islower(text[i]))\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp96jj54f7.d(14): Error: undefined identifier `isalpha`\n/tmp/tmp96jj54f7.d(14): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96jj54f7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tbool underscore_found = false;\n\tbool lowercase_found = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t\tunderscore_found = true;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t\tlowercase_found = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunderscore_found = false;\n\t\t\tlowercase_found = false;\n\t\t}\n\t\t\n\t\tif(underscore_found && lowercase_found)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpsunwtjjc.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x427e15]\n??:? void tmpsunwtjjc.__unittest_L40_C1() [0x427b59]\n??:? void tmpsunwtjjc.__modtest() [0x427b98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbaf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa42]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbd5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430084]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb61]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa19]\n??:? runModuleUnitTests [0x42b985]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text[i] == 'm')\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpd7wegkgl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpd7wegkgl.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7wegkgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpzaxprs_t.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzaxprs_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' && text[i + 1] == '_')\n\t\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp50cix9ax.d(62): Error: found `unittest` instead of statement\n/tmp/tmp50cix9ax.d(70): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp50cix9ax.d(70): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50cix9ax.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint count = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\tif (count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp0m_xp7k6.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0m_xp7k6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\t\n\tfor(int i = 0; i < length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(underscore_count == 1 && lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if(underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpflbclmq2.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflbclmq2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif (underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmup9bgwb.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmpmup9bgwb.__unittest_L36_C1() [0x427b1c]\n??:? void tmpmup9bgwb.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text[i] == 'm')\n\t\t{\n\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpbgctpzqt.d(82): Error: found `unittest` instead of statement\n/tmp/tmpbgctpzqt.d(90): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbgctpzqt.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbgctpzqt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z' || text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpg1h34xh4.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg1h34xh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tint uppercase = 0;\n\tint digit = 0;\n\tint other = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tunderscore++;\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t\tlowercase++;\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\tuppercase++;\n\t\telse if(c >= '0' && c <= '9')\n\t\t\tdigit++;\n\t\telse\n\t\t\tother++;\n\t}\n\t\n\tif(underscore == 0)\n\t\treturn false;\n\telse if(lowercase == 0)\n\t\treturn false;\n\telse if(uppercase != 0)\n\t\treturn false;\n\telse if(digit != 0)\n\t\treturn false;\n\telse if(other != 0)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\t\n\tif (len == 0)\n\t\treturn false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpgox29de0.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgox29de0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tunderscore_count++;\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t\tlowercase_count++;\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\tuppercase_count++;\n\t\telse if(c >= '0' && c <= '9')\n\t\t\tdigit_count++;\n\t\telse\n\t\t\tother_count++;\n\t}\n\t\n\treturn (underscore_count > 0 && lowercase_count > 0 && uppercase_count == 0 && digit_count == 0 && other_count == 0);\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t\tunderscore_count++;\n\t\telse if (c >= 'a' && c <= 'z')\n\t\t\tlowercase_count++;\n\t\telse if (c >= 'A' && c <= 'Z')\n\t\t\tuppercase_count++;\n\t\telse if (c >= '0' && c <= '9')\n\t\t\tdigit_count++;\n\t\telse\n\t\t\tother_count++;\n\t}\n\t\n\treturn (underscore_count == 1 && lowercase_count > 0 && uppercase_count == 0 && digit_count == 0 && other_count == 0);\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text[i] == 'm')\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpd7wegkgl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpd7wegkgl.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7wegkgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\t\n\tif(len == 0)\n\t\treturn false;\n\t\n\tif(text[0] == '_')\n\t\treturn false;\n\t\n\tif(text[len-1] == '_')\n\t\treturn false;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp6wykp7ge.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6wykp7ge.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpwqm7mnwu.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqm7mnwu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgwqfo4b5.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpgwqfo4b5.__unittest_L30_C1() [0x427b10]\n??:? void tmpgwqfo4b5.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(text[i+1] >= 'a' && text[i+1] <= 'z')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnmomca0s.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpnmomca0s.__unittest_L25_C1() [0x427b56]\n??:? void tmpnmomca0s.__modtest() [0x427b6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tfor (int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (text[i] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (i == text.length - 1)\n\t\t\t{\n\t\t\t\tif (text[i] == '_')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] == '_')\n\t\t\t\t{\n\t\t\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdr0s7ann.d(63): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpdr0s7ann.__unittest_L57_C1() [0x427c42]\n??:? void tmpdr0s7ann.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab02]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430144]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]\n??:? runModuleUnitTests [0x42ba45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428398]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\twhile (i < text.length) \n\t{\n\t\tif (text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_' && text[i] != '_\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp9pxp1wy5.d(12): Error: unterminated character constant\n/tmp/tmp9pxp1wy5.d(13): Error: found `unittest` when expecting `)`\n/tmp/tmp9pxp1wy5.d(21): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp9pxp1wy5.d(21): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9pxp1wy5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z') \n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == lowercase_count - 1) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9hrzcsa7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp9hrzcsa7.__unittest_L31_C1() [0x427b10]\n??:? void tmp9hrzcsa7.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif(len == 0)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif(!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!is_lowercase(text[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpcg7uhjxf.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpcg7uhjxf.d(19): Error: undefined identifier `is_lowercase`\n/tmp/tmpcg7uhjxf.d(19): Error: undefined identifier `is_lowercase`\n/tmp/tmpcg7uhjxf.d(22): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcg7uhjxf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(isalpha(text[i - 1]) && isalpha(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(isalpha(text[i]))\n\t\t\t{\n\t\t\t\tif(isupper(text[i]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmphauz7onc.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmphauz7onc.d(23): Error: undefined identifier `isalpha`\n/tmp/tmphauz7onc.d(23): Error: undefined identifier `isalpha`\n/tmp/tmphauz7onc.d(35): Error: undefined identifier `isalpha`\n/tmp/tmphauz7onc.d(37): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphauz7onc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tint uppercase = 0;\n\tint digit = 0;\n\tint other = 0;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t\tunderscore++;\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t\tlowercase++;\n\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\tuppercase++;\n\t\telse if(c >= '0' && c <= '9')\n\t\t\tdigit++;\n\t\telse\n\t\t\tother++;\n\t}\n\t\n\tif(underscore == 0)\n\t\treturn false;\n\t\t\n\tif(lowercase == 0)\n\t\treturn false;\n\t\n\tif(uppercase != 0)\n\t\treturn false;\n\t\t\n\tif(digit != 0)\n\t\treturn false;\n\t\t\n\tif(other != 0)\n\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tif(is_lowercase && !is_underscore)\n\t\t\t{\n\t\t\t\tis_underscore = true;\n\t\t\t\tis_lowercase = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tif(!is_lowercase && !is_underscore)\n\t\t\t{\n\t\t\t\tis_lowercase = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn is_lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuhwa8fow.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpuhwa8fow.__unittest_L47_C1() [0x427b0c]\n??:? void tmpuhwa8fow.__modtest() [0x427b74]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb1b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb41]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42fff0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42facd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a985]\n??:? runModuleUnitTests [0x42b8f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428244]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_lowercase_underscore = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t\tis_lowercase = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_lowercase = false;\n\t\t\tis_underscore = false;\n\t\t}\n\t\t\n\t\tif (is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_lowercase_underscore = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn is_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpnxssrk6h.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxssrk6h.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (isalpha(text[i]))\n\t\t{\n\t\t\tif (islower(text[i]))\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp1srflr6c.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp1srflr6c.d(14): Error: undefined identifier `isalpha`\n/tmp/tmp1srflr6c.d(16): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1srflr6c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\tint length = text.length;\n\twhile(i < length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpc07kamn9.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc07kamn9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool flag = false;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(flag)\n\t{\n\t\tstring[] words = text.split(\"_\");\n\t\tint j = 0;\n\t\twhile(j < words.length)\n\t\t{\n\t\t\tif(words[j].length == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\twhile(k < words[j].length)\n\t\t\t{\n\t\t\t\tif(!isLower(words[j][k]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpsb_xysty.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpsb_xysty.d(23): Error: no property `split` for type `string`\n/tmp/tmpsb_xysty.d(34): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsb_xysty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"/^[a-z_]+$/\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp3ybnbt12.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ybnbt12.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif(!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif(!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isalpha(text[i]))\n\t\t\treturn false;\n\t\telse if(!islower(text[i]))\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmph2m8nx6y.d(22): Error: undefined identifier `isalpha`\n/tmp/tmph2m8nx6y.d(22): Error: undefined identifier `isalpha`\n/tmp/tmph2m8nx6y.d(25): Error: undefined identifier `islower`\n/tmp/tmph2m8nx6y.d(25): Error: undefined identifier `islower`\n/tmp/tmph2m8nx6y.d(28): Error: undefined identifier `isalpha`\n/tmp/tmph2m8nx6y.d(30): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph2m8nx6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\tif (!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!isalpha(text[i]))\n\t\t\treturn false;\n\t\telse if (!islower(text[i]))\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpycw_7hj0.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpycw_7hj0.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpycw_7hj0.d(24): Error: undefined identifier `isalpha`\n/tmp/tmpycw_7hj0.d(26): Error: undefined identifier `islower`\n/tmp/tmpycw_7hj0.d(26): Error: undefined identifier `islower`\n/tmp/tmpycw_7hj0.d(29): Error: undefined identifier `isalpha`\n/tmp/tmpycw_7hj0.d(31): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycw_7hj0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(isalpha(text[i]))\n\t\t{\n\t\t\tif(!islower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(text[i] == '_')\n\t\t\t{\n\t\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(!isalpha(text[i-1]) || !isalpha(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp70txw4ml.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp70txw4ml.d(15): Error: undefined identifier `isalpha`\n/tmp/tmp70txw4ml.d(17): Error: undefined identifier `islower`\n/tmp/tmp70txw4ml.d(29): Error: undefined identifier `isalpha`\n/tmp/tmp70txw4ml.d(29): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70txw4ml.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!is_lowercase(text[i]))\n\t\t\treturn false;\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpf4fu_gdy.d(20): Error: undefined identifier `is_lowercase`\n/tmp/tmpf4fu_gdy.d(20): Error: undefined identifier `is_lowercase`\n/tmp/tmpf4fu_gdy.d(23): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf4fu_gdy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpv06c_xzm.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv06c_xzm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool found_underscore = false;\n\tbool found_lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (found_underscore) return false;\n\t\t\tfound_underscore = true;\n\t\t}\n\t\telse if (isalpha(text[i]))\n\t\t{\n\t\t\tif (found_lowercase) return false;\n\t\t\tfound_lowercase = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn found_underscore && found_lowercase;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpnlxuhfhb.d(21): Error: undefined identifier `isalpha`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnlxuhfhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tint uppercase = 0;\n\tint digit = 0;\n\tint other = 0;\n\tint len = text.length;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother++;\n\t\t}\n\t}\n\t\n\tif (underscore == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (digit > 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (other > 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpr4og1bfl.d(14): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr4og1bfl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\t\n\tif(len == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if(text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpbdcw2xn_.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdcw2xn_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (isalpha(text[i]) && islower(text[i]))\n\t\t{\n\t\t\ti++;\n\t\t\twhile (i < len && text[i] == '_')\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tif (i < len && isalpha(text[i]) && islower(text[i]))\n\t\t\t\t{\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp64688v_a.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp64688v_a.d(13): Error: undefined identifier `isalpha`\n/tmp/tmp64688v_a.d(13): Error: undefined identifier `islower`\n/tmp/tmp64688v_a.d(19): Error: undefined identifier `isalpha`\n/tmp/tmp64688v_a.d(19): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp64688v_a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tif (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmphoklg1gv.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoklg1gv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpol_hysj8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpol_hysj8.__unittest_L33_C1() [0x427b10]\n??:? void tmpol_hysj8.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool result = true;\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!isLower(text[i]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmp63i7cw2b.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp63i7cw2b.d(23): Error: undefined identifier `isLower`\n/tmp/tmp63i7cw2b.d(23): Error: undefined identifier `isLower`\n/tmp/tmp63i7cw2b.d(32): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp63i7cw2b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore)\n\t\t\t\treturn false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (lowercase)\n\t\t\t\treturn false;\n\t\t\tlowercase = true;\n\t\t}\n\t\telse\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi1vr0ugb.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpi1vr0ugb.__unittest_L35_C1() [0x427b3c]\n??:? void tmpi1vr0ugb.__modtest() [0x427ba4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa29]\n??:? runModuleUnitTests [0x42b995]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpt3jcrwg3.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3jcrwg3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tforeach (c; text) \n\t{\n\t\tif (c == '_') \n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (underscore) \n\t\t\t{\n\t\t\t\tif (!isLower(c)) return false;\n\t\t\t\tunderscore = false;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (!isLower(c)) return false;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpcxnd7vhh.d(25): Error: undefined identifier `isLower`\n/tmp/tmpcxnd7vhh.d(30): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcxnd7vhh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0)\n\t\treturn false;\n\tfor (int i = 0; i < len; i++) {\n\t\tif (text[i] == '_') {\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp3spy1bah.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3spy1bah.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!isLower(text[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp3c4n32e7.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp3c4n32e7.d(16): Error: undefined identifier `isLower`\n/tmp/tmp3c4n32e7.d(16): Error: undefined identifier `isLower`\n/tmp/tmp3c4n32e7.d(19): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c4n32e7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\t\n\tif (len == 0) return false;\n\t\n\tif (text[0] < 'a' || text[0] > 'z') return false;\n\t\n\tfor (i = 1; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == len - 1) return false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z') return false;\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z') return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpr73p7p9m.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr73p7p9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) return false;\n\t\t\tif (!is_lowercase(text[i - 1]) || !is_lowercase(text[i + 1])) return false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!is_lowercase(text[i])) return false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpnr6izijw.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmpnr6izijw.d(17): Error: undefined identifier `is_lowercase`\n/tmp/tmpnr6izijw.d(21): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr6izijw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\t\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif(text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif(text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmphml7a6co.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphml7a6co.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tfor (i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z') \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_first_char = true;\n\t\n\twhile (i < len)\n\t{\n\t\tif (is_first_char)\n\t\t{\n\t\t\tif (is_lowercase)\n\t\t\t{\n\t\t\t\tis_first_char = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (is_underscore)\n\t\t\t{\n\t\t\t\tif (is_lowercase)\n\t\t\t\t{\n\t\t\t\t\tis_underscore = false;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (is_lowercase)\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (text[i] == '_')\n\t\t\t\t\t{\n\t\t\t\t\t\tis_underscore = true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpb6aam5l7.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6aam5l7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0) return false;\n\t\n\tbool underscore = false;\n\tbool lowercase = false;\n\t\n\tfor(int i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(underscore) return false;\n\t\t\tunderscore = true;\n\t\t\tlowercase = false;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif(lowercase) return false;\n\t\t\tlowercase = true;\n\t\t\tunderscore = false;\n\t\t}\n\t\telse return false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpq9g0hmiy.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpq9g0hmiy.__unittest_L33_C1() [0x427b44]\n??:? void tmpq9g0hmiy.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa31]\n??:? runModuleUnitTests [0x42b99d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp3vqtb_u0.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3vqtb_u0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool result = false;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_' && text[i+3] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_' && text[i+3] == '_' && text[i+4] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_' && text[i+3] == '_' && text[i+4] == '_' && text[i+5] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+2] == '_' && text[i+3] == '_' && text[i+4] == '_' && text[i+5] == '_' && text[i+6] == '_')\n\t\t{\n\t\t\tresult = false;\n\t\t}\n\t\telse if(text[i] == '_' && text[i+1] == '_' && text[i+\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpd7zjfj15.d(44): Error: expression expected, not `unittest`\n/tmp/tmpd7zjfj15.d(45): Error: found `{` when expecting `,`\n/tmp/tmpd7zjfj15.d(46): Error: expression expected, not `alias`\n/tmp/tmpd7zjfj15.d(46): Error: found `candidate` when expecting `,`\n/tmp/tmpd7zjfj15.d(46): Error: expression expected, not `=`\n/tmp/tmpd7zjfj15.d(46): Error: found `text_lowercase_underscore` when expecting `,`\n/tmp/tmpd7zjfj15.d(46): Error: expression expected, not `;`\n/tmp/tmpd7zjfj15.d(48): Error: found `assert` when expecting `,`\n/tmp/tmpd7zjfj15.d(48): Error: found `;` when expecting `,`\n/tmp/tmpd7zjfj15.d(49): Error: found `;` when expecting `,`\n/tmp/tmpd7zjfj15.d(50): Error: found `;` when expecting `,`\n/tmp/tmpd7zjfj15.d(51): Error: expression expected, not `}`\n/tmp/tmpd7zjfj15.d(52): Error: found `void` when expecting `,`\n/tmp/tmpd7zjfj15.d(52): Error: found `{` when expecting `,`\n/tmp/tmpd7zjfj15.d(52): Error: expression expected, not `}`\n/tmp/tmpd7zjfj15.d(52): Error: found `End of File` when expecting `,`\n/tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\tif (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\tif (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\tif (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\tif (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\tif (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\tif (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\tif (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\tif (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\tif (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\tif (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\tif (text[i] == 'l')\n\t\t{\n\t\t\tl = 1;\n\t\t}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp5ovlngsn.d(80): Error: found `unittest` instead of statement\n/tmp/tmp5ovlngsn.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ovlngsn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp4v06sxlv.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4v06sxlv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++) \n\t{\n\t\tif (text[i] == '_') \n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z') \n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z') \n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9') \n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase_count == 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (digit_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse if (other_count > 0) \n\t{\n\t\treturn false;\n\t}\n\telse \n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool result = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (text[i - 1] >= 'a' && text[i - 1] <= 'z' && text[i + 1] >= 'a' && text[i + 1] <= 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpc5u24guo.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc5u24guo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeyvbrh0f.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpeyvbrh0f.__unittest_L33_C1() [0x427b10]\n??:? void tmpeyvbrh0f.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\t\n\tfor(int i = 0; i < length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpid57pwot.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid57pwot.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint count = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\tif (count == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpqxuhtvjz.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxuhtvjz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i;\n\tint len = text.length();\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp7nvolito.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7nvolito.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\t\n\tif(len == 0)\n\t\treturn false;\n\t\n\tif(text[0] == '_')\n\t\treturn false;\n\t\n\tif(text[len-1] == '_')\n\t\treturn false;\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(text[i+1] == '_')\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tif(text[i+1] == '\\0')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp3dpldm52.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3dpldm52.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tbool result = false;\n\tbool result2 = false;\n\tbool result3 = false;\n\t\n\tif(len == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor(i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t}\n\t\n\tfor(j = 0; j < len; j++)\n\t{\n\t\tif(text[j] >= 'a' && text[j] <= 'z')\n\t\t{\n\t\t\tresult2 = true;\n\t\t}\n\t}\n\t\n\tfor(k = 0; k < len; k++)\n\t{\n\t\tif(text[k] >= 'A' && text[k] <= 'Z')\n\t\t{\n\t\t\tresult3 = true;\n\t\t}\n\t}\n\t\n\tif(result == true && result2 == true && result3 == false)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpcamaef9y.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcamaef9y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i + 1] == '_')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse if (text[i] < 'a' || text[i] > 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp8_eqf0gc.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_eqf0gc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile (i < text.length)\n\t{\n\t\tif (isalpha(text[i]) && islower(text[i]))\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == '_')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpmvribegd.d(13): Error: undefined identifier `isalpha`\n/tmp/tmpmvribegd.d(13): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvribegd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tbool result = false;\n\tbool is_underscore = false;\n\t\n\tforeach (c; text)\n\t{\n\t\tif (c == '_')\n\t\t{\n\t\t\tif (is_underscore) return false;\n\t\t\tis_underscore = true;\n\t\t}\n\t\telse if (is_underscore)\n\t\t{\n\t\t\tif (c >= 'a' && c <= 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tis_underscore = false;\n\t\t\t}\n\t\t\telse return false;\n\t\t}\n\t\telse if (c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t\telse return false;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_valid = false;\n\t\n\tif (len == 0)\n\t\treturn false;\n\t\n\twhile (i < len)\n\t{\n\t\tis_lowercase = (text[i] >= 'a' && text[i] <= 'z');\n\t\tis_underscore = (text[i] == '_');\n\t\t\n\t\tif (is_lowercase || is_underscore)\n\t\t{\n\t\t\tis_valid = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_valid = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_valid;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpgisbqdkv.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgisbqdkv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(c >= 'a' && c <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi82z06gv.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427db5]\n??:? void tmpi82z06gv.__unittest_L33_C1() [0x427acc]\n??:? void tmpi82z06gv.__modtest() [0x427b34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42badb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a96e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a945]\n??:? runModuleUnitTests [0x42b8b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428204]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t\treturn false;\n\t\t\tif (i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool is_lowercase = false;\n\tbool is_underscore = false;\n\tbool is_text_lowercase_underscore = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tis_lowercase = true;\n\t\t\tis_underscore = false;\n\t\t}\n\t\telse if(text[i] == '_')\n\t\t{\n\t\t\tis_underscore = true;\n\t\t\tis_lowercase = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tis_text_lowercase_underscore = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(is_lowercase && is_underscore)\n\t\t{\n\t\t\tis_text_lowercase_underscore = false;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\ti++;\n\t}\n\t\n\treturn is_text_lowercase_underscore;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpowx9rem_.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpowx9rem_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0) return false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1) return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] == '\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp4_oue_ko.d(31): Error: unterminated character constant\n/tmp/tmp4_oue_ko.d(32): Error: found `unittest` when expecting `)`\n/tmp/tmp4_oue_ko.d(40): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4_oue_ko.d(40): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp4_oue_ko.d(40): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4_oue_ko.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tif (len == 0) return false;\n\t\n\tbool underscore = false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (underscore) return false;\n\t\t\tunderscore = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!underscore) return false;\n\t\t\tunderscore = false;\n\t\t\tif (!is_lowercase(text[i])) return false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpc05veqlm.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpc05veqlm.d(25): Error: undefined identifier `is_lowercase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc05veqlm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn0y3w9_2.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpn0y3w9_2.__unittest_L33_C1() [0x427b10]\n??:? void tmpn0y3w9_2.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\t\n\tfor (i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl = 1;\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpovha09wj.d(79): Error: found `unittest` instead of statement\n/tmp/tmpovha09wj.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpovha09wj.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovha09wj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tbool result = true;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmphf1iz3l0.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphf1iz3l0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\tif (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\tif (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\tif (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\tif (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\tif (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\tif (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\tif (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\tif (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\tif (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\tif (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\tif (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\tif (text[i] == 'm')\n\t\t{\n\t\t\tm++;\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp1kpotra6.d(84): Error: found `unittest` instead of statement\n/tmp/tmp1kpotra6.d(92): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp1kpotra6.d(92): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1kpotra6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if (text[i] == 'm')\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123368,
      "stdout": "",
      "stderr": "/tmp/tmpd7wegkgl.d(81): Error: found `unittest` instead of statement\n/tmp/tmpd7wegkgl.d(89): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7wegkgl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif (underscore_count == lowercase_count - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp27d0g__1.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmp27d0g__1.__unittest_L33_C1() [0x427b10]\n??:? void tmp27d0g__1.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t// Check if the string is empty\n\tif (text.length == 0)\n\t\treturn false;\n\t\n\t// Check if the string is only lowercase letters\n\tif (text.is_lowercase)\n\t\treturn true;\n\t\n\t// Check if the string is only lowercase letters and underscores\n\tif (text.is_lowercase_underscore)\n\t\treturn true;\n\t\n\t// Check if the string is only lowercase letters and underscores with a single underscore at the beginning\n\tif (text.is_lowercase_underscore_begin)\n\t\treturn true;\n\t\n\t// Check if the string is only lowercase letters and underscores with a single underscore at the end\n\tif (text.is_lowercase_underscore_end)\n\t\treturn true;\n\t\n\t// Check if the string is only lowercase letters and underscores with a single underscore at the beginning and end\n\tif (text.is_lowercase_underscore_begin_end)\n\t\treturn true;\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpk0e0y49_.d(14): Error: no property `is_lowercase` for type `string`\n/tmp/tmpk0e0y49_.d(18): Error: no property `is_lowercase_underscore` for type `string`\n/tmp/tmpk0e0y49_.d(22): Error: no property `is_lowercase_underscore_begin` for type `string`\n/tmp/tmpk0e0y49_.d(26): Error: no property `is_lowercase_underscore_end` for type `string`\n/tmp/tmpk0e0y49_.d(30): Error: no property `is_lowercase_underscore_begin_end` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0e0y49_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg8ijzjz0.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmpg8ijzjz0.__unittest_L26_C1() [0x427b08]\n??:? void tmpg8ijzjz0.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length();\n\tbool result = true;\n\twhile (i < len)\n\t{\n\t\tif (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tif (i == len - 1)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tif (text[i + 1] == '_')\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpjsb4l_u_.d(10): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjsb4l_u_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len-1)\n\t\t\t\treturn false;\n\t\t\tif(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpf_egp97n.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpf_egp97n.d(16): Error: undefined identifier `isLower`\n/tmp/tmpf_egp97n.d(16): Error: undefined identifier `isLower`\n/tmp/tmpf_egp97n.d(19): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_egp97n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (digit_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (other_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool result = true;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(text[i-1] == '_' || text[i+1] == '_')\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpujbthp09.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpujbthp09.d(27): Error: undefined identifier `isLower`\n/tmp/tmpujbthp09.d(27): Error: undefined identifier `isLower`\n/tmp/tmpujbthp09.d(33): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpujbthp09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t\tunderscore_count++;\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t\tlowercase_count++;\n\t}\n\t\n\treturn underscore_count == lowercase_count - 1;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph5k26p5g.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427ded]\n??:? void tmph5k26p5g.__unittest_L22_C1() [0x427b08]\n??:? void tmph5k26p5g.__modtest() [0x427b70]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43005c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f1]\n??:? runModuleUnitTests [0x42b95d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = true;\n\tint i = 0;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tif(i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(!isLower(text[i - 1]) || !isLower(text[i + 1]))\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(!isLower(text[i]))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpdht7ht5a.d(20): Error: undefined identifier `isLower`\n/tmp/tmpdht7ht5a.d(20): Error: undefined identifier `isLower`\n/tmp/tmpdht7ht5a.d(26): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdht7ht5a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint uppercase_count = 0;\n\tint digit_count = 0;\n\tint other_count = 0;\n\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\telse if (text[i] >= 'A' && text[i] <= 'Z')\n\t\t{\n\t\t\tuppercase_count++;\n\t\t}\n\t\telse if (text[i] >= '0' && text[i] <= '9')\n\t\t{\n\t\t\tdigit_count++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tother_count++;\n\t\t}\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (lowercase_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (uppercase_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (digit_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse if (other_count != 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\t\n\tfor(i = 0; i < text.length; i++)\n\t{\n\t\tif(text[i] == 'a')\n\t\t{\n\t\t\ta++;\n\t\t}\n\t\telse if(text[i] == 'b')\n\t\t{\n\t\t\tb++;\n\t\t}\n\t\telse if(text[i] == 'c')\n\t\t{\n\t\t\tc++;\n\t\t}\n\t\telse if(text[i] == 'd')\n\t\t{\n\t\t\td++;\n\t\t}\n\t\telse if(text[i] == 'e')\n\t\t{\n\t\t\te++;\n\t\t}\n\t\telse if(text[i] == 'f')\n\t\t{\n\t\t\tf++;\n\t\t}\n\t\telse if(text[i] == 'g')\n\t\t{\n\t\t\tg++;\n\t\t}\n\t\telse if(text[i] == 'h')\n\t\t{\n\t\t\th++;\n\t\t}\n\t\telse if(text[i] == 'i')\n\t\t{\n\t\t\ti++;\n\t\t}\n\t\telse if(text[i] == 'j')\n\t\t{\n\t\t\tj++;\n\t\t}\n\t\telse if(text[i] == 'k')\n\t\t{\n\t\t\tk++;\n\t\t}\n\t\telse if(text[i] == 'l')\n\t\t{\n\t\t\tl++;\n\t\t}\n\t\telse if(text[i] == 'm')\n\t\t{\n\t\t\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpkxu4pcea.d(82): Error: found `unittest` instead of statement\n/tmp/tmpkxu4pcea.d(90): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpkxu4pcea.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkxu4pcea.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint underscore = 0;\n\tint length = text.length;\n\t\n\tfor (int i = 0; i < length; i++)\n\t{\n\t\tif (text[i] == 'a')\n\t\t{\n\t\t\ta = 1;\n\t\t}\n\t\telse if (text[i] == 'b')\n\t\t{\n\t\t\tb = 1;\n\t\t}\n\t\telse if (text[i] == 'c')\n\t\t{\n\t\t\tc = 1;\n\t\t}\n\t\telse if (text[i] == 'd')\n\t\t{\n\t\t\td = 1;\n\t\t}\n\t\telse if (text[i] == 'e')\n\t\t{\n\t\t\te = 1;\n\t\t}\n\t\telse if (text[i] == 'f')\n\t\t{\n\t\t\tf = 1;\n\t\t}\n\t\telse if (text[i] == 'g')\n\t\t{\n\t\t\tg = 1;\n\t\t}\n\t\telse if (text[i] == 'h')\n\t\t{\n\t\t\th = 1;\n\t\t}\n\t\telse if (text[i] == 'i')\n\t\t{\n\t\t\ti = 1;\n\t\t}\n\t\telse if (text[i] == 'j')\n\t\t{\n\t\t\tj = 1;\n\t\t}\n\t\telse if (text[i] == 'k')\n\t\t{\n\t\t\tk = 1;\n\t\t}\n\t\telse if (text[i] == 'l')\n\t\t{\n\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmptzgksj2f.d(79): Error: found `unittest` instead of statement\n/tmp/tmptzgksj2f.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmptzgksj2f.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzgksj2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint i = 0;\n\t\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn lowercase_count > underscore_count;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpuyhbvk70.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dfd]\n??:? void tmpuyhbvk70.__unittest_L35_C1() [0x427b3d]\n??:? void tmpuyhbvk70.__modtest() [0x427b7c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb97]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbbd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43006c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb49]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa01]\n??:? runModuleUnitTests [0x42b96d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!isLower(text[i-1]) || !isLower(text[i+1]))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!isLower(text[i]))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp7ee3qwq4.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp7ee3qwq4.d(21): Error: undefined identifier `isLower`\n/tmp/tmp7ee3qwq4.d(21): Error: undefined identifier `isLower`\n/tmp/tmp7ee3qwq4.d(29): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ee3qwq4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0) return false;\n\t\n\tint i = 0;\n\twhile (i < text.length) {\n\t\tif (text[i] == '_') {\n\t\t\tif (i == 0) return false;\n\t\t\tif (i == text.length - 1) return false;\n\t\t\tif (text[i - 1] == '_') return false;\n\t\t\tif (text[i + 1] == '_') return false;\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z') return false;\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z') return false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqzrh52mj.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427ee5]\n??:? void tmpqzrh52mj.__unittest_L25_C1() [0x427c4e]\n??:? void tmpqzrh52mj.__modtest() [0x427c64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc7f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab12]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fca5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430154]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc31]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aae9]\n??:? runModuleUnitTests [0x42ba55]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore = 0;\n\tint lowercase = 0;\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tunderscore++;\n\t\t}\n\t\telse if (text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase++;\n\t\t}\n\t}\n\tif (underscore == lowercase - 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpprkb39vy.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpprkb39vy.__unittest_L31_C1() [0x427b10]\n??:? void tmpprkb39vy.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif (text.length == 0)\n\t\treturn false;\n\t\t\n\tfor (int i = 0; i < text.length; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i - 1] == '_' || text[i + 1] == '_')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i - 1] < 'a' || text[i - 1] > 'z')\n\t\t\t\treturn false;\n\t\t\t\t\n\t\t\tif (text[i + 1] < 'a' || text[i + 1] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z_]+$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpz2eje4yz.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2eje4yz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\t//return text.match(\"[a-z]_[a-z]\");\n\treturn text.match(\"[a-z]_[a-z]\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpm4dlfbtb.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4dlfbtb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tif(text.length == 0)\n\t\treturn false;\n\t\n\tbool result = true;\n\t\n\tforeach(c; text)\n\t{\n\t\tif(!isLower(c) && c != '_')\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmptwbroona.d(16): Error: undefined identifier `isLower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwbroona.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint len = text.length;\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == '_')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t\treturn false;\n\t\t\tif (!isalpha(text[i - 1]) || !isalpha(text[i + 1]))\n\t\t\t\treturn false;\n\t\t\tif (!islower(text[i - 1]) || !islower(text[i + 1]))\n\t\t\t\treturn false;\n\t\t}\n\t\telse if (!islower(text[i]))\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmp126dcrw6.d(9): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp126dcrw6.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp126dcrw6.d(16): Error: undefined identifier `isalpha`\n/tmp/tmp126dcrw6.d(18): Error: undefined identifier `islower`\n/tmp/tmp126dcrw6.d(18): Error: undefined identifier `islower`\n/tmp/tmp126dcrw6.d(21): Error: undefined identifier `islower`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp126dcrw6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tint underscore_count = 0;\n\tint lowercase_count = 0;\n\tint length = text.length;\n\t\n\tfor(int i = 0; i < length; i++)\n\t{\n\t\tif(text[i] == '_')\n\t\t{\n\t\t\tunderscore_count++;\n\t\t}\n\t\telse if(text[i] >= 'a' && text[i] <= 'z')\n\t\t{\n\t\t\tlowercase_count++;\n\t\t}\n\t}\n\t\n\tif(underscore_count == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tif(underscore_count == lowercase_count)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123369,
      "stdout": "",
      "stderr": "/tmp/tmpr8zksgtg.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8zksgtg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tresult = true;\n\t\t\n\t\tfor (int i = 0; i < text.length; i++)\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (text[i] != '_')\n\t\t\t\t{\n\t\t\t\t\tif (text[i] < 'a' || text[i] > 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\n*/\nbool text_lowercase_underscore(string text) \n{\n\treturn text.match(\"^[a-z]+(_[a-z]+)*$\");\n}\nunittest\n{\n    alias candidate = text_lowercase_underscore;\n\n    assert(candidate(\"aab_cbbbc\") == true);\n    assert(candidate(\"aab_Abbbc\") == false);\n    assert(candidate(\"Aaab_abbbc\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517653,
      "stdout": "",
      "stderr": "/tmp/tmpi5doqbb8.d(9): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5doqbb8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}