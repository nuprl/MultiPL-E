{
  "name": "mbpp_760_unique_Element",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmp3l56cg7r.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3l56cg7r.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3l56cg7r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphbnn8piu.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmphbnn8piu.__unittest_L24_C1() [0x427e28]\n??:? void tmphbnn8piu.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp9im9qt3o.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmp9im9qt3o.__unittest_L23_C1() [0x427e28]\n??:? void tmp9im9qt3o.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i;1..arr_copy.length)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i-1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmp8gj0nkwc.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8gj0nkwc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tresult = result ^ arr[i];\n\t}\n\treturn result == 0;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtn3_e4x.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmpbtn3_e4x.__unittest_L17_C1() [0x427e00]\n??:? void tmpbtn3_e4x.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428608]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint len = arr.length;\n\tint count = 0;\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tfor(int j = 0; j < len; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmp8ul1o9mr.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8ul1o9mr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!result)\n\t\t\tbreak;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5vl85grg.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp5vl85grg.__unittest_L29_C1() [0x427e3c]\n??:? void tmp5vl85grg.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphbnn8piu.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmphbnn8piu.__unittest_L24_C1() [0x427e28]\n??:? void tmphbnn8piu.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr[];\n\ttemp.sort;\n\treturn temp.length == temp.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpyu709oie.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpyu709oie.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyu709oie.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tfor (int i = 0; i < temp.length; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmp0yivd33e.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0yivd33e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t\n\tforeach(i;arr)\n\t{\n\t\tif(arr.count(i)>1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmprrdlisc8.d(13): Error: no property `count` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrdlisc8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2ryckz9p.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp2ryckz9p.__unittest_L26_C1() [0x427e40]\n??:? void tmp2ryckz9p.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpfjlkbdcm.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjlkbdcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpm3gp8z4m.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3gp8z4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcnl_lo4g.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpcnl_lo4g.__unittest_L27_C1() [0x427e34]\n??:? void tmpcnl_lo4g.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i, elem; arr_copy)\n\t{\n\t\tif(i < arr_copy.length - 1)\n\t\t{\n\t\t\tif(elem == arr_copy[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmppuqh_f4w.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppuqh_f4w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == 0) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvfbvchyh.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmpvfbvchyh.__unittest_L30_C1() [0x427e10]\n??:? void tmpvfbvchyh.__modtest() [0x427ed4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b041]\n??:? runModuleUnitTests [0x42bfad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i;arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmp9bt1b7hc.d(13): Error: incompatible types for `(i) in (unique_arr)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bt1b7hc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpi2vzqy6q.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2vzqy6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\tfor(i = 0; i < arr.length; i++)\n\t{\n\t\tfor(j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp07r2ucqq.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmp07r2ucqq.__unittest_L30_C1() [0x427e20]\n??:? void tmp07r2ucqq.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43020d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430199]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b051]\n??:? runModuleUnitTests [0x42bfbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428628]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i = 0;\n\tint j = 0;\n\tbool flag = true;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35ww0yqt.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmp35ww0yqt.__unittest_L26_C1() [0x427e0c]\n??:? void tmp35ww0yqt.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto n = arr.length;\n\tint i;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqbd2ce6d.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpqbd2ce6d.__unittest_L24_C1() [0x427e0c]\n??:? void tmpqbd2ce6d.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i, j; zip(arr_copy[0 .. $ - 1], arr_copy[1 .. $]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpm4wfet51.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpm4wfet51.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm4wfet51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpvbythc8y.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbythc8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t//return arr.length == arr.sort.uniq.length;\n\treturn arr.length == arr.sort.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp_s0jbf_4.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_s0jbf_4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl8tnf8o2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpl8tnf8o2.__unittest_L25_C1() [0x427e30]\n??:? void tmpl8tnf8o2.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 1)\n\t\treturn true;\n\t\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcu7mutvz.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpcu7mutvz.__unittest_L23_C1() [0x427e30]\n??:? void tmpcu7mutvz.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(!unique_arr.canFind(i))\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpz9o1o9g1.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9o1o9g1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpmqwg1fvw.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqwg1fvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpp9mvqg4x.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9mvqg4x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tsort(arr);\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp06x9nrim.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp06x9nrim.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06x9nrim.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(i; 1..arr.length)\n\t{\n\t\tif (first != arr[i])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tif (n == 1)\n\t\treturn true;\n\t\n\tsort(arr);\n\t\n\tfor (int i = 1; i < n; i++)\n\t\tif (arr[i] == arr[i - 1])\n\t\t\treturn false;\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp06x9nrim.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\n/tmp/tmp06x9nrim.d(14): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp06x9nrim.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\treturn temp[0] == temp[$-1];\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp_1djpvqx.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_1djpvqx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i = 0;\n\tint j = 0;\n\tint count = 0;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwe2q1u9a.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpwe2q1u9a.__unittest_L29_C1() [0x427e18]\n??:? void tmpwe2q1u9a.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1df]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b072]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430205]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430191]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b049]\n??:? runModuleUnitTests [0x42bfb5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428620]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = arr[0];\n\tforeach(i; arr)\n\t{\n\t\tresult = result ^ i;\n\t}\n\treturn result == 0;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpnftj20kh.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpnftj20kh.__unittest_L17_C1() [0x427e9b]\n??:? void tmpnftj20kh.__modtest() [0x427eb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1af]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b042]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301d5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430684]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430161]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b019]\n??:? runModuleUnitTests [0x42bf85]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.length = unique.length.uniq;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp0a689_ld.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp0a689_ld.d(12): Error: no property `uniq` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0a689_ld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpq2vk_vww.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2vk_vww.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgb1jrrpn.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpgb1jrrpn.__unittest_L16_C1() [0x427dfc]\n??:? void tmpgb1jrrpn.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpp4a7vvoh.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4a7vvoh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tcount = 0;\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2_mj521o.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmp2_mj521o.__unittest_L28_C1() [0x427e20]\n??:? void tmp2_mj521o.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool[] check = new bool[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(check[i] == true)\n\t\t\treturn false;\n\t\tcheck[i] = true;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmu7ucxlv.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmpmu7ucxlv.__unittest_L19_C1() [0x427fba]\n??:? void tmpmu7ucxlv.__modtest() [0x42802c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b25e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430998]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430475]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b235]\n??:? runModuleUnitTests [0x42c1a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428770]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 0)\n\t\treturn false;\n\t\n\tlong first = arr[0];\n\t\n\tforeach(element; arr)\n\t{\n\t\tif(element != first)\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy2tjnptf.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpy2tjnptf.__unittest_L21_C1() [0x427dd8]\n??:? void tmpy2tjnptf.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430151]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430600]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af95]\n??:? runModuleUnitTests [0x42bf01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tlong[] unique_arr = arr.dup;\n\tunique_arr = unique_arr.sort;\n\tunique_arr = unique_arr.uniq;\n\tif (unique_arr.length == 1) \n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpc3c2leny.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmpc3c2leny.d(13): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc3c2leny.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpfjlkbdcm.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjlkbdcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\t\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\t\n\tfor (int i = 0; i < temp.length - 1; i++)\n\t{\n\t\tif (temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpbo68vrzz.d(14): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbo68vrzz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpz4f34sqp.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4f34sqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqyy061s6.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpqyy061s6.__unittest_L24_C1() [0x427e2c]\n??:? void tmpqyy061s6.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 1..arr.length-1)\n\t\t{\n\t\t\tif (arr[i] != arr[0])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t\treturn false;\n\t\telse\n\t\t\tunique_arr ~= i;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpauxv2dfj.d(13): Error: incompatible types for `(i) in (unique_arr)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpauxv2dfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tlong[] sorted = arr.dup.sort();\n\tforeach(i, v; sorted)\n\t{\n\t\tif(i != 0 && v == sorted[i - 1])\n\t\t{\n\t\t\tisUnique = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp7lcw1e7e.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lcw1e7e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpm3gp8z4m.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3gp8z4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tunique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn unique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpcnl_lo4g.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpcnl_lo4g.__unittest_L27_C1() [0x427e34]\n??:? void tmpcnl_lo4g.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; i+1..arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpg7slxivn.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpg7slxivn.__unittest_L24_C1() [0x427e28]\n??:? void tmpg7slxivn.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tfor(int i = 0; i < arr_copy.length; i++)\n\t{\n\t\tif(arr_copy[i] == arr_copy[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpvdyekkng.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvdyekkng.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = false;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = i + 1; j < arr.length; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbdjlz7kq.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpbdjlz7kq.__unittest_L24_C1() [0x427e5a]\n??:? void tmpbdjlz7kq.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7y74epn_.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmp7y74epn_.__unittest_L25_C1() [0x427e6a]\n??:? void tmp7y74epn_.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res ^= arr[i]; \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdr_q6nrf.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpdr_q6nrf.__unittest_L16_C1() [0x427dd0]\n??:? void tmpdr_q6nrf.__modtest() [0x427e94]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c197]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43066c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430149]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b001]\n??:? runModuleUnitTests [0x42bf6d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif(arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach(i; 0..arr.length)\n\t\t{\n\t\t\tforeach(j; 0..arr.length)\n\t\t\t{\n\t\t\t\tif(i != j)\n\t\t\t\t{\n\t\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp43lc50om.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp43lc50om.__unittest_L28_C1() [0x427e40]\n??:? void tmp43lc50om.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    if (arr.length == 1)\n        return true;\n    else\n    {\n        long[] temp = arr.dup;\n        temp.sort;\n        for (int i = 0; i < temp.length - 1; i++)\n        {\n            if (temp[i] == temp[i + 1])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpfx11lqow.d(15): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfx11lqow.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp4vq4757x.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp4vq4757x.__unittest_L27_C1() [0x427e34]\n??:? void tmp4vq4757x.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = new Set!long();\n\tforeach(i; arr)\n\t{\n\t\tset.insert(i);\n\t}\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp3a4j61n3.d(10): Error: template instance `Set!long` template `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a4j61n3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto a = arr.dup;\n\ta.sort;\n\tforeach(i;0..a.length-1)\n\t{\n\t\tif(a[i]==a[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmplr23h38y.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplr23h38y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n    return (res == 0); \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpirhrsl3x.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpirhrsl3x.__unittest_L16_C1() [0x427dd4]\n??:? void tmpirhrsl3x.__modtest() [0x427e98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c197]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43066c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430149]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b001]\n??:? runModuleUnitTests [0x42bf6d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. arr.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpluk754rb.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpluk754rb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i;arr)\n\t{\n\t\tif(unique_arr.length == 0)\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach(j;unique_arr)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbpdmaqra.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x4281cd]\n??:? void tmpbpdmaqra.__unittest_L31_C1() [0x427e8c]\n??:? void tmpbpdmaqra.__modtest() [0x427f50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42cbc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ba5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4304ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43095c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430439]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ba31]\n??:? runModuleUnitTests [0x42c99d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42861c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] count = new int[arr.length];\n\tint i = 0;\n\tforeach(long a; arr)\n\t{\n\t\tcount[i] = 0;\n\t\tforeach(long b; arr)\n\t\t{\n\t\t\tif(a == b)\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tforeach(int c; count)\n\t{\n\t\tif(c > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpne1_7jrk.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4284d5]\n??:? void tmpne1_7jrk.__unittest_L33_C1() [0x428194]\n??:? void tmpne1_7jrk.__modtest() [0x428258]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c797]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d64]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430841]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c56d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428998]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tauto len = arr.length;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tfor (int j = i + 1; j < len; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwyycxrae.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpwyycxrae.__unittest_L25_C1() [0x427e0c]\n??:? void tmpwyycxrae.__modtest() [0x427ed0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tisUnique = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp9wv_f6c5.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9wv_f6c5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgzsh966e.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpgzsh966e.__unittest_L26_C1() [0x427e34]\n??:? void tmpgzsh966e.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > 1) \n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpf817uamr.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf817uamr.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i!=j)\n\t\t\t{\n\t\t\t\tif(arr[i]==arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpzrjdw88d.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpzrjdw88d.__unittest_L26_C1() [0x427e34]\n??:? void tmpzrjdw88d.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptvqm68vp.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmptvqm68vp.__unittest_L28_C1() [0x427e20]\n??:? void tmptvqm68vp.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430199]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430648]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430125]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b4]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpky_9amna.d(12): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky_9amna.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0..arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpp9mvqg4x.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9mvqg4x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi59_7kes.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpi59_7kes.__unittest_L27_C1() [0x427e18]\n??:? void tmpi59_7kes.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tif (arr.length == 1)\n\t\treturn true;\n\telse\n\t{\n\t\tforeach (i; 0 .. arr.length)\n\t\t{\n\t\t\tforeach (j; 0 .. arr.length)\n\t\t\t{\n\t\t\t\tif (i != j)\n\t\t\t\t{\n\t\t\t\t\tif (arr[i] == arr[j])\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0a2hdo9e.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp0a2hdo9e.__unittest_L28_C1() [0x427e40]\n??:? void tmp0a2hdo9e.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c207]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b09a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43022d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b071]\n??:? runModuleUnitTests [0x42bfdd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp7s397hzv.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7s397hzv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] arr2 = arr.dup;\n    arr2.sort;\n    return arr2.length == arr2.uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp4lkjk9t4.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp4lkjk9t4.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lkjk9t4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2q591y7l.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp2q591y7l.__unittest_L26_C1() [0x427e34]\n??:? void tmp2q591y7l.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(i in unique_arr)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp3bxxb58m.d(13): Error: incompatible types for `(i) in (unique_arr)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3bxxb58m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool isUnique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tisUnique = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn isUnique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpu9ma1sfm.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpu9ma1sfm.__unittest_L26_C1() [0x427e34]\n??:? void tmpu9ma1sfm.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] count = new int[arr.length];\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp3g5eszgg.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4284ad]\n??:? void tmp3g5eszgg.__unittest_L30_C1() [0x428168]\n??:? void tmp3g5eszgg.__modtest() [0x42822c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c76f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b602]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43088d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d3c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430819]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d9]\n??:? runModuleUnitTests [0x42c545]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428970]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp_y2bv_2n.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_y2bv_2n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpz4f34sqp.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4f34sqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpmqwg1fvw.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqwg1fvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] unique_arr;\n    foreach(elem; arr)\n    {\n        if(elem in unique_arr)\n        {\n            return false;\n        }\n        else\n        {\n            unique_arr ~= elem;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp7stexdy3.d(13): Error: incompatible types for `(elem) in (unique_arr)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7stexdy3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp_j_tvbfi.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j_tvbfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tint[] count = new int[arr.length];\n\tfor(int i = 0; i < arr.length; i++)\n\t{\n\t\tfor(int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < count.length; i++)\n\t{\n\t\tif(count[i] > 1)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpns27qs8x.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428485]\n??:? void tmpns27qs8x.__unittest_L32_C1() [0x428140]\n??:? void tmpns27qs8x.__modtest() [0x428204]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c747]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430865]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d14]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307f1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c51d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428948]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpi3nr77r1.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi3nr77r1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp_j_tvbfi.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j_tvbfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(element; arr)\n\t{\n\t\tif(element != arr[0])\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.uniq;\n\treturn arr.length == unique_arr.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpa68r8jrh.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpa68r8jrh.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa68r8jrh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i;0..arr.length)\n\t{\n\t\tforeach(j;0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp2q591y7l.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp2q591y7l.__unittest_L26_C1() [0x427e34]\n??:? void tmp2q591y7l.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgb1jrrpn.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpgb1jrrpn.__unittest_L16_C1() [0x427dfc]\n??:? void tmpgb1jrrpn.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!result)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaqofnss_.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpaqofnss_.__unittest_L31_C1() [0x427e3c]\n??:? void tmpaqofnss_.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpszqcd9ia.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpszqcd9ia.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszqcd9ia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,j; zip(arr2[0..$-1], arr2[1..$]))\n\t{\n\t\tif(i == j)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpfrehhkfz.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpfrehhkfz.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfrehhkfz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] distinct_arr = arr.dup;\n\tdistinct_arr.sort;\n\tdistinct_arr.unique;\n\treturn distinct_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpq9chgchp.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpq9chgchp.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq9chgchp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr = unique_arr.uniq;\n\tif (unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpy0iv4pdc.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpy0iv4pdc.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0iv4pdc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpvbythc8y.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbythc8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().unique;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp565g4j5b.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp565g4j5b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = [];\n\tforeach(i; arr)\n\t{\n\t\tif(!unique_arr.canFind(i))\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpzso4hpo6.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzso4hpo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] distinct_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(!distinct_arr.canFind(i))\n\t\t{\n\t\t\tdistinct_arr ~= i;\n\t\t}\n\t}\n\treturn distinct_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpepht_n67.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpepht_n67.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint len = arr.length;\n\tint i, j;\n\tfor (i = 0; i < len; i++) \n\t{\n\t\tfor (j = 0; j < len; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpz9e5yx_g.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9e5yx_g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i;\n\tint j;\n\tint n = arr.length;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tfor (j = 0; j < n; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpky_9amna.d(12): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpky_9amna.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = false;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == true)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8lt_dp6j.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmp8lt_dp6j.__unittest_L31_C1() [0x427e8e]\n??:? void tmp8lt_dp6j.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr1 = arr.dup;\n\tarr1.sort;\n\tforeach(i; 0 .. arr1.length - 1)\n\t{\n\t\tif(arr1[i] == arr1[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpg_0l2w_t.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg_0l2w_t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto arr_set = arr.sort().uniq;\n\treturn arr_set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpz92oyjkp.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz92oyjkp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl8tnf8o2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpl8tnf8o2.__unittest_L25_C1() [0x427e30]\n??:? void tmpl8tnf8o2.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t\treturn false;\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmjp4qkbf.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpmjp4qkbf.__unittest_L19_C1() [0x427dd8]\n??:? void tmpmjp4qkbf.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430151]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430600]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af95]\n??:? runModuleUnitTests [0x42bf01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphbnn8piu.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmphbnn8piu.__unittest_L24_C1() [0x427e28]\n??:? void tmphbnn8piu.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\tif(unique_arr.length == 1)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpnxdzraj5.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpnxdzraj5.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnxdzraj5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n\tbool flag = true;\n\tforeach(i; 0..arr.length)\n\t{\n\t\tforeach(j; 0..arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpn7l9a0yz.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpn7l9a0yz.__unittest_L27_C1() [0x427e34]\n??:? void tmpn7l9a0yz.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tlong[] distinct_arr = arr.dup;\n\tdistinct_arr.sort;\n\tdistinct_arr.unique;\n\tif (arr.length == distinct_arr.length)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpdzxz2g0w.d(12): Error: no property `sort` for type `long[]`\n/tmp/tmpdzxz2g0w.d(13): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdzxz2g0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp_j_tvbfi.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j_tvbfi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] temp = arr.dup;\n    temp.sort;\n    for (int i = 0; i < temp.length - 1; i++) \n    {\n        if (temp[i] == temp[i + 1]) \n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpegqwtrat.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpegqwtrat.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort();\n\tforeach(i; 1..temp.length)\n\t{\n\t\tif(temp[i] == temp[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp6ye000xs.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6ye000xs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint[] count = new int[arr.length];\n\tfor (int i = 0; i < arr.length; i++)\n\t{\n\t\tfor (int j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif (arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount[i]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < count.length; i++)\n\t{\n\t\tif (count[i] > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmptdlsmwzj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42847d]\n??:? void tmptdlsmwzj.__unittest_L30_C1() [0x42813c]\n??:? void tmptdlsmwzj.__modtest() [0x428200]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43085d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d0c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307e9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c515]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428940]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tfor (int i = 0; i < arr.length; i++) \n\t{\n\t\tfor (int j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (i != j) \n\t\t\t{\n\t\t\t\tif (arr[i] == arr[j]) \n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph59fn00h.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmph59fn00h.__unittest_L27_C1() [0x427e14]\n??:? void tmph59fn00h.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b041]\n??:? runModuleUnitTests [0x42bfad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozy6p_gi.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpozy6p_gi.__unittest_L23_C1() [0x427e24]\n??:? void tmpozy6p_gi.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43020d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430199]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b051]\n??:? runModuleUnitTests [0x42bfbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428628]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpi2vzqy6q.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi2vzqy6q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t//int[] arr = [1,2,3,4,5,6,7,8,9,10];\n\tint[] arr2 = [1,2,3,4,5,6,7,8,9,10,1];\n\tint[] arr3 = [1,2,3,4,5,6,7,8,9,10,1,2];\n\tint[] arr4 = [1,2,3,4,5,6,7,8,9,10,1,2,3];\n\tint[] arr5 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4];\n\tint[] arr6 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5];\n\tint[] arr7 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6];\n\tint[] arr8 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7];\n\tint[] arr9 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8];\n\tint[] arr10 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9];\n\tint[] arr11 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10];\n\tint[] arr12 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1];\n\tint[] arr13 = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp39yrf85g.d(23): Error: expression expected, not `unittest`\n/tmp/tmp39yrf85g.d(24): Error: comma expected separating array initializers, not `{`\n/tmp/tmp39yrf85g.d(31): Error: comma expected separating array initializers, not `void`\n/tmp/tmp39yrf85g.d(31): Error: semicolon expected, not `main`\n/tmp/tmp39yrf85g.d(31): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp39yrf85g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpy2tjnptf.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpy2tjnptf.__unittest_L21_C1() [0x427dd8]\n??:? void tmpy2tjnptf.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430151]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430600]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af95]\n??:? runModuleUnitTests [0x42bf01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpm3gp8z4m.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3gp8z4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = arr[0];\n\tforeach(i; 1..arr.length)\n\t{\n\t\tresult = result ^ arr[i];\n\t}\n\treturn result == 0;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbtn3_e4x.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428145]\n??:? void tmpbtn3_e4x.__unittest_L17_C1() [0x427e00]\n??:? void tmpbtn3_e4x.__modtest() [0x427ec4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b05a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43069c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430179]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b031]\n??:? runModuleUnitTests [0x42bf9d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428608]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpvbythc8y.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbythc8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpz4f34sqp.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4f34sqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpmqwg1fvw.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqwg1fvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.sort().uniq.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpvbythc8y.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbythc8y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwl36jkvq.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwl36jkvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i; 0 .. arr2.length-1)\n\t{\n\t\tif(arr2[i] == arr2[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp9irvdin5.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9irvdin5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup.sort.uniq;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp9n9l8f03.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9n9l8f03.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpi59_7kes.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmpi59_7kes.__unittest_L27_C1() [0x427e18]\n??:? void tmpi59_7kes.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkpty3yyt.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmpkpty3yyt.__unittest_L16_C1() [0x427dd4]\n??:? void tmpkpty3yyt.__modtest() [0x427e98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c197]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43066c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430149]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b001]\n??:? runModuleUnitTests [0x42bf6d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwl36jkvq.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwl36jkvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc1z2bj2t.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpc1z2bj2t.__unittest_L24_C1() [0x427e2c]\n??:? void tmpc1z2bj2t.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpwl36jkvq.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwl36jkvq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tforeach(j; arr)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp7euu4xfy.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x42815d]\n??:? void tmp7euu4xfy.__unittest_L30_C1() [0x427e18]\n??:? void tmp7euu4xfy.__modtest() [0x427edc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c16b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42affe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430191]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430640]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43011d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afd5]\n??:? runModuleUnitTests [0x42bf41]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285ac]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool flag = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag == false)\n\t\t\tbreak;\n\t}\n\treturn flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpie42b1d8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpie42b1d8.__unittest_L29_C1() [0x427e3c]\n??:? void tmpie42b1d8.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b092]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430225]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301b1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b069]\n??:? runModuleUnitTests [0x42bfd5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; i+1 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpozy6p_gi.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpozy6p_gi.__unittest_L23_C1() [0x427e24]\n??:? void tmpozy6p_gi.__modtest() [0x427ee8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43020d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430199]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b051]\n??:? runModuleUnitTests [0x42bfbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428628]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = arr[0]; \n    for (long i = 1; i < n; i++) \n        res = res ^ arr[i]; \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgb1jrrpn.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpgb1jrrpn.__unittest_L16_C1() [0x427dfc]\n??:? void tmpgb1jrrpn.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b052]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430694]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430171]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b029]\n??:? runModuleUnitTests [0x42bf95]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr = unique_arr.dup.removeDuplicates;\n\tif (unique_arr.length == 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmprrzro_bo.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmprrzro_bo.d(12): Error: no property `removeDuplicates` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprrzro_bo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i!=0 && e==arr2[i-1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmps996u0p_.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps996u0p_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique = arr.dup;\n\tunique.sort;\n\tunique.unique;\n\treturn unique.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp0ewc9dno.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp0ewc9dno.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ewc9dno.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(arr[i] == arr[j] && i != j)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpznjsv4ac.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpznjsv4ac.__unittest_L24_C1() [0x427e2c]\n??:? void tmpznjsv4ac.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i; 0 .. temp.length - 1)\n\t{\n\t\tif(temp[i] == temp[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpmqwg1fvw.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqwg1fvw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(arr[0] == i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count == arr.length)\n\t{\n\t\tresult = true;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\tforeach(i,e;arr2)\n\t{\n\t\tif(i+1 < arr2.length)\n\t\t{\n\t\t\tif(arr2[i] == arr2[i+1])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpfjlkbdcm.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfjlkbdcm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    if (n == 1) \n        return true; \n    sort(arr); \n    for (int i = 1; i < n; i++) \n        if (arr[i] == arr[i - 1]) \n            return false; \n    return true; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmpsio1hon8.d(13): Error: undefined identifier `sort`, did you mean function `sqrt`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsio1hon8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t//long[] arr = [1,2,3,4,5,6,7,8,9,10];\n\tlong[] arr_copy = arr.dup;\n\tarr_copy.sort;\n\tforeach(i,j; arr_copy)\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpap960zkk.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpap960zkk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] arr_copy = arr.dup;\n    arr_copy.sort;\n    foreach(i,j; zip(arr_copy[0..$-1], arr_copy[1..$]))\n    {\n        if(i == j)\n        {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpi75d7qlt.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpi75d7qlt.d(12): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi75d7qlt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto hash = new HashSet!(long)();\n\tforeach(i;arr)\n\t{\n\t\tif(hash.insert(i))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpizwm5pby.d(10): Error: template instance `HashSet!long` template `HashSet` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpizwm5pby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp03cs2ryb.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp03cs2ryb.__unittest_L26_C1() [0x427e34]\n??:? void tmp03cs2ryb.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp35pggyyr.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp35pggyyr.__unittest_L27_C1() [0x427e34]\n??:? void tmp35pggyyr.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        for (long j = 0; j < n; j++) \n        { \n            if (arr[i] == arr[j]) \n                count++; \n        } \n        if (count > 1) \n            return false; \n        count = 0; \n    } \n    return true; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpfwzpepel.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpfwzpepel.__unittest_L25_C1() [0x427e28]\n??:? void tmpfwzpepel.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjwhjtwxy.d(16): unittest failure\n----------------\n??:? _d_unittestp [0x4280b5]\n??:? void tmpjwhjtwxy.__unittest_L12_C1() [0x427d74]\n??:? void tmpjwhjtwxy.__modtest() [0x427e38]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c0c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42af56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4300e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430598]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430075]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af2d]\n??:? runModuleUnitTests [0x42be99]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428504]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    bool flag = true;\n    for (int i = 0; i < arr.length; i++) \n    {\n        for (int j = i + 1; j < arr.length; j++) \n        {\n            if (arr[i] == arr[j]) \n            {\n                flag = false;\n                break;\n            }\n        }\n    }\n    return flag;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpa8wj3qlm.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42814d]\n??:? void tmpa8wj3qlm.__unittest_L24_C1() [0x427e08]\n??:? void tmpa8wj3qlm.__modtest() [0x427ecc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b062]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430181]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b039]\n??:? runModuleUnitTests [0x42bfa5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428610]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j)\n\t\t\t{\n\t\t\t\tif(arr[i] == arr[j])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpl8tnf8o2.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpl8tnf8o2.__unittest_L25_C1() [0x427e30]\n??:? void tmpl8tnf8o2.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.toSet();\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1665517407,
      "stdout": "",
      "stderr": "/tmp/tmpm3gp8z4m.d(10): Error: no property `toSet` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3gp8z4m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = new Set!long();\n\tforeach(i; arr)\n\t{\n\t\tset.insert(i);\n\t}\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123132,
      "stdout": "",
      "stderr": "/tmp/tmp3a4j61n3.d(10): Error: template instance `Set!long` template `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3a4j61n3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc1z2bj2t.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpc1z2bj2t.__unittest_L24_C1() [0x427e2c]\n??:? void tmpc1z2bj2t.__modtest() [0x427ef0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n    long n = arr.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n        res = res ^ arr[i]; \n  \n    return res == 0; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp5_hivubm.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428115]\n??:? void tmp5_hivubm.__unittest_L17_C1() [0x427dd4]\n??:? void tmp5_hivubm.__modtest() [0x427e98]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c197]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b02a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43066c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430149]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b001]\n??:? runModuleUnitTests [0x42bf6d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285d8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.unique;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmp3g1nk6v6.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp3g1nk6v6.d(12): Error: no property `unique` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3g1nk6v6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong count = 0; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tfor (long j = 0; j < n; j++) \n\t\t{ \n\t\t\tif (arr[i] == arr[j]) \n\t\t\t\tcount++; \n\t\t} \n\t\tif (count > 1) \n\t\t\treturn false; \n\t\tcount = 0; \n\t} \n\treturn true; \n} \nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpw2dm87kk.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x42816d]\n??:? void tmpw2dm87kk.__unittest_L25_C1() [0x427e28]\n??:? void tmpw2dm87kk.__modtest() [0x427eec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1ef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b082]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430215]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b059]\n??:? runModuleUnitTests [0x42bfc5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428630]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = false;\n\tif (arr.length == 1) \n\t{\n\t\tresult = true;\n\t}\n\telse \n\t{\n\t\tlong[] temp = arr.dup;\n\t\ttemp.sort();\n\t\tfor (int i = 0; i < temp.length - 1; i++) \n\t\t{\n\t\t\tif (temp[i] == temp[i + 1]) \n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp254g3yq0.d(18): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp254g3yq0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool unique = true;\n\tforeach(i; 0 .. arr.length)\n\t{\n\t\tforeach(j; 0 .. arr.length)\n\t\t{\n\t\t\tif(i != j && arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tunique = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!unique)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn unique;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp1laf78xe.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp1laf78xe.__unittest_L28_C1() [0x427e34]\n??:? void tmp1laf78xe.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1f7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b08a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43021d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306cc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301a9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b061]\n??:? runModuleUnitTests [0x42bfcd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\treturn arr.length == arr.distinct.length;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmphasyobh0.d(10): Error: no property `distinct` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphasyobh0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint i, j;\n\tfor (i = 0; i < arr.length; i++) \n\t{\n\t\tfor (j = 0; j < arr.length; j++) \n\t\t{\n\t\t\tif (i != j && arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpf7hjeqir.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x428155]\n??:? void tmpf7hjeqir.__unittest_L23_C1() [0x427e14]\n??:? void tmpf7hjeqir.__modtest() [0x427ed8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1d7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b06a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4301fd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430189]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b041]\n??:? runModuleUnitTests [0x42bfad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428618]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto set = arr.sort().uniq;\n\treturn set.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpz4f34sqp.d(10): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz4f34sqp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tbool result = true;\n\tforeach(i,j; zip(arr[0..$-1], arr[1..$]))\n\t{\n\t\tif(i == j)\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123131,
      "stdout": "",
      "stderr": "/tmp/tmpq2vk_vww.d(11): Error: undefined identifier `zip`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq2vk_vww.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n    long[] unique_arr = arr.dup;\n    unique_arr.sort;\n    unique_arr = unique_arr.dup.uniq;\n    if(unique_arr.length == 1)\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp6kthwct_.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmp6kthwct_.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kthwct_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr;\n\tforeach(i; arr)\n\t{\n\t\tif(unique_arr.length == 0)\n\t\t{\n\t\t\tunique_arr ~= i;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbool found = false;\n\t\t\tforeach(j; unique_arr)\n\t\t\t{\n\t\t\t\tif(i == j)\n\t\t\t\t{\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!found)\n\t\t\t{\n\t\t\t\tunique_arr ~= i;\n\t\t\t}\n\t\t}\n\t}\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tforeach(i; arr)\n\t{\n\t\tif(count > 1)\n\t\t\treturn false;\n\t\tcount = count + 1;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmjp4qkbf.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x42811d]\n??:? void tmpmjp4qkbf.__unittest_L19_C1() [0x427dd8]\n??:? void tmpmjp4qkbf.__modtest() [0x427e9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430151]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430600]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4300dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af95]\n??:? runModuleUnitTests [0x42bf01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42856c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] temp = arr.dup;\n\ttemp.sort;\n\tforeach(i;0..temp.length-1)\n\t{\n\t\tif(temp[i] == temp[i+1])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpspj0w0gz.d(11): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspj0w0gz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tauto result = true;\n\tauto set = new Set!(long)();\n\tforeach(i; arr)\n\t{\n\t\tif(!set.insert(i))\n\t\t{\n\t\t\tresult = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmptaadp1mo.d(11): Error: template instance `Set!long` template `Set` is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptaadp1mo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint n = arr.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = 0; j < n; j++) \n\t\t{\n\t\t\tif (arr[i] == arr[j]) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\tif (count == n) \n\t{\n\t\treturn true;\n\t}\n\telse \n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpz3y8p37z.d(10): Error: cannot implicitly convert expression `arr.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz3y8p37z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tforeach(i; 0 .. arr2.length - 1)\n\t{\n\t\tif(arr2[i] == arr2[i + 1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmp0_svo0vo.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0_svo0vo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\t\n\tlong[] arr2 = arr.dup;\n\tarr2.sort;\n\t\n\tforeach(i; 0 .. arr2.length)\n\t{\n\t\tif(i == arr2.length - 1)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\tif(arr2[i] == arr2[i+1])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmptzic9axl.d(12): Error: no property `sort` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptzic9axl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tlong[] unique_arr = arr.dup;\n\tunique_arr.sort;\n\tunique_arr.uniq;\n\treturn unique_arr.length == 1;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "/tmp/tmpa752fitd.d(11): Error: no property `sort` for type `long[]`\n/tmp/tmpa752fitd.d(12): Error: no property `uniq` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa752fitd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether an array of numbers contains only one distinct element or not.\n\t\n*/\nbool unique_Element(long[] arr) \n{\n\tint count = 0;\n\tint i = 0;\n\tint j = 0;\n\t\n\tfor(i = 0; i < arr.length; i++)\n\t{\n\t\tfor(j = 0; j < arr.length; j++)\n\t\t{\n\t\t\tif(arr[i] == arr[j])\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = unique_Element;\n\n    assert(candidate([1L, 1L, 1L]) == true);\n    assert(candidate([1L, 2L, 1L, 2L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L]) == false);\n}\nvoid main(){}",
      "timestamp": 1666123133,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdhwxmf2b.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpdhwxmf2b.__unittest_L31_C1() [0x427e20]\n??:? void tmpdhwxmf2b.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c1e7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b07a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43020d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306bc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430199]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b051]\n??:? runModuleUnitTests [0x42bfbd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428628]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}