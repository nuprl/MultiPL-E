{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\tfor (; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found)\n\t{\n\t\tfor (; i < len; i++)\n\t\t{\n\t\t\tif (text[i] == ' ')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (text[i] != 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\t\n\twhile (i < text_length) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i > 0 && i < text_length - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint length = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == length - 1)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}",
    "{\n\tauto words = text.split();\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1 .. $ - 1].contains(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}",
    "{\n\tbool result = false;\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j > i)\n\t{\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\t\n\treturn result;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\tif (i == 0 || i == len - 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}",
    "{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tbool found = false;\n\tint len = text.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}",
    "{\n\tbool result = false;\n\tint start = 0;\n\tint end = text.length;\n\t\n\tif (text.length > 0)\n\t{\n\t\tif (text[0] == 'z')\n\t\t{\n\t\t\tstart = 1;\n\t\t}\n\t\t\n\t\tif (text[text.length - 1] == 'z')\n\t\t{\n\t\t\tend = text.length - 1;\n\t\t}\n\t\t\n\t\tfor (int i = start; i < end; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\treturn found;\n}",
    "{\n\tint i;\n\tbool found = false;\n\t\n\tfor (i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn found;\n}",
    "{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\tint text_length_minus_two = text_length - 2;\n\t\n\tif (text_length < 3)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}",
    "{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tint len = text.length;\n\t\n\tbool result = false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}",
    "{\n\treturn text.canFind(\"z\");\n}",
    "{\n\tint i = 0;\n\tint len = text.length;\n\tbool found_z = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound_z = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z;\n}"
  ]
}