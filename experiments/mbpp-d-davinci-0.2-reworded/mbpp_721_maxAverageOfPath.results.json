{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] average = new float[n][n];\n\taverage[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\taverage[0][i] = average[0][i - 1] + cost[0][i];\n\t\taverage[i][0] = average[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\taverage[i][j] = max(average[i - 1][j], average[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn average[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpltm7cwjn.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpltm7cwjn.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpltm7cwjn.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltm7cwjn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint N = cost.length;\n\tfloat[][] dp = new float[N][N];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < N; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < N; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < N; i++)\n\t\tfor (int j = 1; j < N; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[N - 1][N - 1] / (2 * N - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpnm8eo8qb.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpnm8eo8qb.d(10): Error: variable `N` cannot be read at compile time\n/tmp/tmpnm8eo8qb.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnm8eo8qb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; ++i) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; ++i) \n\t{\n\t\tfor (int j = 1; j < n; ++j) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmphd1kfp8m.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmphd1kfp8m.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmphd1kfp8m.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphd1kfp8m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpsyko9i2q.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpsyko9i2q.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpsyko9i2q.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyko9i2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tfloat[][] dp = new float[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpl_w5dja9.d(9): Error: variable `cost` cannot be read at compile time\n/tmp/tmpl_w5dja9.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_w5dja9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpup5mvc8p.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpup5mvc8p.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpup5mvc8p.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpup5mvc8p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) {\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) {\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpsyko9i2q.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpsyko9i2q.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpsyko9i2q.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsyko9i2q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++) \n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++) \n\t\tfor (int j = 1; j < n; j++) \n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp13my7cw5.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp13my7cw5.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmp13my7cw5.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp13my7cw5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp49xqx2uq.d(23): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost.length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49xqx2uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost[0].length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < cost[0].length; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < cost.length; i++)\n\t\tfor (int j = 1; j < cost[0].length; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpvkf3ituy.d(9): Error: variable `cost` cannot be read at compile time\n/tmp/tmpvkf3ituy.d(17): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvkf3ituy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 3);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpiwg0lrkl.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpiwg0lrkl.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpiwg0lrkl.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiwg0lrkl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tint[][] dp = new int[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2.0 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpg7hsfnc0.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpg7hsfnc0.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpg7hsfnc0.d(11): Error: cannot implicitly convert expression `cost[0][0]` of type `long` to `int`\n/tmp/tmpg7hsfnc0.d(14): Error: cannot implicitly convert expression `cast(long)dp[0][cast(ulong)(i - 1)] + cost[0][cast(ulong)i]` of type `long` to `int`\n/tmp/tmpg7hsfnc0.d(15): Error: cannot implicitly convert expression `cast(long)dp[cast(ulong)(i - 1)][0] + cost[cast(ulong)i][0]` of type `long` to `int`\n/tmp/tmpg7hsfnc0.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg7hsfnc0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\t// Write your code here\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpssc3qrdu.d(10): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpssc3qrdu.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmpssc3qrdu.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssc3qrdu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp49xqx2uq.d(23): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost.length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49xqx2uq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tfloat[][] dp = new float[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\t\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpc9rnv9q2.d(9): Error: variable `cost` cannot be read at compile time\n/tmp/tmpc9rnv9q2.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9rnv9q2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost[0].length];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor (int i = 1; i < cost[0].length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\t\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost[0].length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn (float)dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmphoiptg5b.d(31): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost[0].length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphoiptg5b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpuycnr8wf.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpuycnr8wf.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpuycnr8wf.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuycnr8wf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpwpx4jrjc.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpwpx4jrjc.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpwpx4jrjc.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwpx4jrjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpteg18k58.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpteg18k58.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpteg18k58.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteg18k58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpteg18k58.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpteg18k58.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpteg18k58.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteg18k58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp2m1d9h1a.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp2m1d9h1a.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmp2m1d9h1a.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2m1d9h1a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpbubtzso1.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpbubtzso1.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpbubtzso1.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbubtzso1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpzpy2v5cn.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpzpy2v5cn.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpzpy2v5cn.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpy2v5cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tfor(int j = 1; j < cost.length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length-1][cost.length-1] / (2*cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpybj83dbz.d(23): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost.length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpybj83dbz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost[0].length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost[0].length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost[0].length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpnjv0t1w6.d(26): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost[0].length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnjv0t1w6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tlong[][] dp = new long[n][n];\n\tdp[0][0] = cost[0][0];\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn (float)dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpspezhgos.d(27): Error: C style cast illegal, use `cast(float)dp[n - 1][n - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpspezhgos.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; ++i)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int j = 1; j < n; ++j)\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j];\n\tfor (int i = 1; i < n; ++i)\n\t\tfor (int j = 1; j < n; ++j)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp_j0iwcbs.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp_j0iwcbs.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmp_j0iwcbs.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_j0iwcbs.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\t\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpvyqt8awk.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvyqt8awk.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvyqt8awk.d(24): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvyqt8awk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tint m = cost[0].length;\n\tfloat[][] dp = new float[n][m];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < m; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < m; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][m - 1] / (n + m - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmplc5qaw6d.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmplc5qaw6d.d(10): Error: cannot implicitly convert expression `cost[0].length` of type `ulong` to `int`\n/tmp/tmplc5qaw6d.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmplc5qaw6d.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplc5qaw6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpzpy2v5cn.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpzpy2v5cn.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpzpy2v5cn.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpy2v5cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpteg18k58.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpteg18k58.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpteg18k58.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteg18k58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\t// Write your code here\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp6g062qq8.d(10): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp6g062qq8.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmp6g062qq8.d(22): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g062qq8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpzpy2v5cn.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpzpy2v5cn.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpzpy2v5cn.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpy2v5cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tfor(int j = 1; j < cost.length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[cost.length-1][cost.length-1] / (cost.length * cost.length);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp7dj_5jsw.d(9): Error: variable `cost` cannot be read at compile time\n/tmp/tmp7dj_5jsw.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7dj_5jsw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpwpx4jrjc.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpwpx4jrjc.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpwpx4jrjc.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwpx4jrjc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpzpy2v5cn.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpzpy2v5cn.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpzpy2v5cn.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpy2v5cn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < cost.length; i++)\n\t{\n\t\tfor(int j = 1; j < cost.length; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn (float)dp[cost.length - 1][cost.length - 1] / (2 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp4i78bgin.d(23): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost.length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4i78bgin.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpjmyymoc7.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpjmyymoc7.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpjmyymoc7.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmyymoc7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpteg18k58.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpteg18k58.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpteg18k58.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteg18k58.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp2m1d9h1a.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp2m1d9h1a.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmp2m1d9h1a.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2m1d9h1a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp6uso200c.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmp6uso200c.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmp6uso200c.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6uso200c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpaoznzisx.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpaoznzisx.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpaoznzisx.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaoznzisx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n-1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpq223p7dm.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpq223p7dm.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpq223p7dm.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq223p7dm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpwp_26rs5.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpwp_26rs5.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpwp_26rs5.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwp_26rs5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmplilwkru2.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmplilwkru2.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmplilwkru2.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplilwkru2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int j = 1; j < n; j++)\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpq3igrggg.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpq3igrggg.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpq3igrggg.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq3igrggg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    long[][] dp = new long[cost.length][cost[0].length];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < cost.length; i++) \n    {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for (int i = 1; i < cost[0].length; i++) \n    {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (int i = 1; i < cost.length; i++) \n    {\n        for (int j = 1; j < cost[0].length; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return (float)dp[cost.length - 1][cost[0].length - 1] / (cost.length + cost[0].length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmp2xoklbvh.d(26): Error: C style cast illegal, use `cast(float)dp[cost.length - 1][cost[0].length - 1]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2xoklbvh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\t\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\t\n\tfor(int i = 1; i < n; i++)\n\t{\n\t\tfor(int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\t\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpa91bvu1l.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpa91bvu1l.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpa91bvu1l.d(23): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa91bvu1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tint m = cost[0].length;\n\tfloat[][] dp = new float[n][m];\n\tdp[0][0] = cost[0][0];\n\tfor(int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\tfor(int i = 1; i < m; i++)\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\tfor(int i = 1; i < n; i++)\n\t\tfor(int j = 1; j < m; j++)\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\treturn dp[n-1][m-1] / (n + m - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmphtyz2t6_.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmphtyz2t6_.d(10): Error: cannot implicitly convert expression `cost[0].length` of type `ulong` to `int`\n/tmp/tmphtyz2t6_.d(11): Error: variable `n` cannot be read at compile time\n/tmp/tmphtyz2t6_.d(19): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphtyz2t6_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpvi1r0ekh.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpvi1r0ekh.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpvi1r0ekh.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvi1r0ekh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpmpwt8qlw.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpmpwt8qlw.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpmpwt8qlw.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmpwt8qlw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\tfor (int i = 1; i < n; i++)\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\tfor (int i = 1; i < n; i++)\n\t\tfor (int j = 1; j < n; j++)\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpevq267h3.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpevq267h3.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpevq267h3.d(18): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpevq267h3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tlong[][] dp = new long[cost.length][cost.length];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < cost.length; i++) \n\t{\n\t\tfor (int j = 1; j < cost.length; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[cost.length - 1][cost.length - 1] / (2.0 * cost.length - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpbs5akv51.d(9): Error: variable `cost` cannot be read at compile time\n/tmp/tmpbs5akv51.d(20): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbs5akv51.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tdp[0][i] = dp[0][i-1] + cost[0][i];\n\t\tdp[i][0] = dp[i-1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++)\n\t{\n\t\tfor (int j = 1; j < n; j++)\n\t\t{\n\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n-1][n-1] / (2*n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpaoznzisx.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpaoznzisx.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpaoznzisx.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaoznzisx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n    int n = cost.length;\n    float[][] dp = new float[n][n];\n    dp[0][0] = cost[0][0];\n    for (int i = 1; i < n; i++) \n    {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for (int i = 1; i < n; i++) \n    {\n        for (int j = 1; j < n; j++) \n        {\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n        }\n    }\n    return dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1666124034,
      "stdout": "",
      "stderr": "/tmp/tmpovy09dv5.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpovy09dv5.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpovy09dv5.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpovy09dv5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tGiven a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\n*/\nfloat maxAverageOfPath(long[][] cost) \n{\n\tint n = cost.length;\n\tfloat[][] dp = new float[n][n];\n\tdp[0][0] = cost[0][0];\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tdp[0][i] = dp[0][i - 1] + cost[0][i];\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0];\n\t}\n\tfor (int i = 1; i < n; i++) \n\t{\n\t\tfor (int j = 1; j < n; j++) \n\t\t{\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j];\n\t\t}\n\t}\n\treturn dp[n - 1][n - 1] / (2 * n - 1);\n}\nunittest\n{\n    alias candidate = maxAverageOfPath;\n\n    assert(candidate([[1L, 2L, 3L], [6L, 5L, 4L], [7L, 3L, 9L]]) == 5.2);\n    assert(candidate([[2L, 3L, 4L], [7L, 6L, 5L], [8L, 4L, 10L]]) == 6.2);\n    assert(candidate([[3L, 4L, 5L], [8L, 7L, 6L], [9L, 5L, 11L]]) == 7.2);\n    assert(candidate([[1L, 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]]) == 5.8);\n}\nvoid main(){}",
      "timestamp": 1665517225,
      "stdout": "",
      "stderr": "/tmp/tmpxwht_kv9.d(9): Error: cannot implicitly convert expression `cost.length` of type `ulong` to `int`\n/tmp/tmpxwht_kv9.d(10): Error: variable `n` cannot be read at compile time\n/tmp/tmpxwht_kv9.d(21): Error: undefined identifier `max`, did you mean function `fmax`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxwht_kv9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}