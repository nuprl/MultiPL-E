{
  "name": "mbpp_61_count_Substrings",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate through all substrings \n    for (long i = 0; i < n; i++) \n        for (long j = i + 1; j <= n; j++) \n            if (sumDigits(s[i..j]) == j - i) \n                ans++; \n  \n    return ans; \n} \n  \n// Returns sum of digits in s[i..j] \nlong sumDigits(string s) \n{ \n    long sum = 0; \n    for (long i = 0; i < s.length; i++) \n        sum += s[i] - '0'; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpav0m5c1g.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav0m5c1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpav0m5c1g.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav0m5c1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tfor (long i = 0; i < s.length; i++) \n\t{\n\t\tlong sum = 0;\n\t\tfor (long j = i; j < s.length; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < s.length; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < s.length; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `immutable(char)`\n/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25iq32cg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64wpnegu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp64wpnegu.__unittest_L28_C1() [0x427b22]\n??:? void tmp64wpnegu.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long result = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting from each index \n    for (long i = 0; i < n; i++) \n    { \n        // Ending at each index \n        for (long j = i; j < n; j++) \n        { \n            // Counting substrings starting \n            // from i and ending at j \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // number of digits in substring \n            // then increase count \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sum_of_digits(s, i, len)) \n                res++; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprck3jfn2.d(18): Error: undefined identifier `sum_of_digits`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck3jfn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tint n = s.length;\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpsdbxcst5.d(10): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdbxcst5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n\tlong count = 0; \n\tint n = s.length; \n\tfor (int i = 0; i < n; i++) { \n\t\tint sum = 0; \n\t\tfor (int j = i; j < n; j++) { \n\t\t\tsum += (s[j] - '0'); \n\t\t\tif (sum == (j - i + 1)) \n\t\t\t\tcount++; \n\t\t} \n\t} \n\treturn count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpfum_vkt0.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfum_vkt0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate through all substrings of length 1 \n    for (long i = 0; i < n; i++) \n        if (s[i] - '0' == 1) \n            ans++; \n  \n    // Iterate through all substrings of length 2 \n    for (long i = 0; i < n - 1; i++) { \n        long sum = 0; \n        sum = (s[i] - '0') + (s[i + 1] - '0'); \n        if (sum == 2) \n            ans++; \n    } \n  \n    // Iterate through all substrings of length 3 and more \n    for (long len = 3; len <= n; len++) { \n        for (long i = 0; i < n - len + 1; i++) { \n            long sum = 0; \n            for (long j = i; j < i + len; j++) \n                sum += (s[j] - '0'); \n            if (sum == len) \n                ans++; \n        } \n    } \n    return ans; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking the sum of digits \n            // from index 'i' to 'j' \n            // is equal to length of \n            // substring or not \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpoz3jpo9v.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoz3jpo9v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp49e56ylk.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp49e56ylk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv4ifzzw9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv4ifzzw9.__unittest_L28_C1() [0x427b22]\n??:? void tmpv4ifzzw9.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor(int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor(int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif(sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpzdo4i7dq.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzdo4i7dq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!int - '0'.to!int)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6kb8o_yx.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kb8o_yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(s[i .. j].sum() == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6rqm2fre.d(15): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rqm2fre.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (int i = 0; i < n; i++)  \n    { \n        long sum = 0; \n        for (int j = i; j < n; j++)  \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (int i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (int j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tstring sub_str = s[i..j];\n\t\t\tint sum = 0;\n\t\t\tforeach (char c; sub_str) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub_str.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp11mksyo8.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp11mksyo8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!long - '0'.to!long)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpvafq2a9d.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvafq2a9d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n  \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv4ifzzw9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv4ifzzw9.__unittest_L28_C1() [0x427b22]\n??:? void tmpv4ifzzw9.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n\tlong n = s.length; \n\tlong result = 0; \n\tlong sum = 0; \n\tlong count = 0; \n\tlong i = 0; \n\twhile (i < n) \n\t{ \n\t\tif (s[i] == '1') \n\t\t{ \n\t\t\tsum = 1; \n\t\t\tcount = 1; \n\t\t\twhile (i + 1 < n && s[i + 1] == '1') \n\t\t\t{ \n\t\t\t\tcount++; \n\t\t\t\tsum = sum + count; \n\t\t\t\ti++; \n\t\t\t} \n\t\t\tresult += sum; \n\t\t} \n\t\ti++; \n\t} \n\treturn result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpvt6kjaj4.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x427df5]\n??:? void tmpvt6kjaj4.__unittest_L33_C1() [0x427b64]\n??:? void tmpvt6kjaj4.__modtest() [0x427b78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430064]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9f9]\n??:? runModuleUnitTests [0x42b965]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282b8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv4ifzzw9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv4ifzzw9.__unittest_L28_C1() [0x427b22]\n??:? void tmpv4ifzzw9.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp64wpnegu.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp64wpnegu.__unittest_L28_C1() [0x427b22]\n??:? void tmp64wpnegu.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++)  \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++)  \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong n = s.length;\n\tlong count = 0;\n\tforeach(i; 0 .. n) \n\t{\n\t\tforeach(j; i + 1 .. n + 1) \n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring (s[i..j]) \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment result \n            if (sum == j - i + 1) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpbpxotaia.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpxotaia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring (Ignore leading 0's) \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                if (s[k] != '0') \n                    sum = sum * 10 + (s[k] - '0'); \n  \n            // Update result if sum of digits \n            // is equal to length of substring \n            if (sum == j - i + 1) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpddocojfm.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpddocojfm.__unittest_L34_C1() [0x427b42]\n??:? void tmpddocojfm.__modtest() [0x427bac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa31]\n??:? runModuleUnitTests [0x42b99d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint len = s.length;\n\tforeach(i; 0..len)\n\t{\n\t\tforeach(j; i..len)\n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tint sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpo36ibjo1.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo36ibjo1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!int - '0'.to!int)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6kb8o_yx.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kb8o_yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i .. n)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(k; 0 .. sub.length)\n\t\t\t{\n\t\t\t\tsum += sub[k] - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpj4flsc2f.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj4flsc2f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint len = s.length;\n\tforeach(i; 0 .. len)\n\t{\n\t\tforeach(j; i .. len)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp841eqzfy.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp841eqzfy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) \n    { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Sum of digits in current substring \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If sum of digits is equal to length, \n            // then increment count \n            if (sum == len) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sum_of_digits(s, i, len)) \n                res++; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprck3jfn2.d(18): Error: undefined identifier `sum_of_digits`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck3jfn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!long - '0'.to!long)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpm64dxe_6.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm64dxe_6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0..s.length)\n\t{\n\t\tforeach(immutable j; i..s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i..j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprwe045su.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmprwe045su.__unittest_L28_C1() [0x427b22]\n??:? void tmprwe045su.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tlong n = s.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i .. n)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpkm61j2sy.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpkm61j2sy.__unittest_L30_C1() [0x427b52]\n??:? void tmpkm61j2sy.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbfd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa41]\n??:? runModuleUnitTests [0x42b9ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0xgqow52.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp0xgqow52.__unittest_L28_C1() [0x427b1a]\n??:? void tmp0xgqow52.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpav0m5c1g.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav0m5c1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint len = s.length;\n\tint sum = 0;\n\tforeach(i; 0 .. len)\n\t{\n\t\tsum = 0;\n\t\tforeach(j; i .. len)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif(sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6g8yq2gp.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6g8yq2gp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint len = s.length;\n\tint sum = 0;\n\tforeach(i; 0 .. len)\n\t{\n\t\tsum = 0;\n\t\tforeach(j; i .. len)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif(sum == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp8s67v3kh.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8s67v3kh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sum_of_digits(s, i, len)) \n                res++; \n  \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmprck3jfn2.d(18): Error: undefined identifier `sum_of_digits`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprck3jfn2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sumDigits(s, i, len)) \n                res++; \n  \n    return res; \n} \n  \n// A utility function to sum digits of a string \n// from i'th index to j'th index \nlong sumDigits(string s, long i, long j) \n{ \n    long sum = 0; \n    for (long k = i; k < i + j; k++) \n        sum += (s[k] - '0'); \n  \n    return sum; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpmqq6g875.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpmqq6g875.__unittest_L34_C1() [0x427b6a]\n??:? void tmpmqq6g875.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa59]\n??:? runModuleUnitTests [0x42b9c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428318]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpeukx64tj.d(19): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeukx64tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpbpxotaia.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpxotaia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long res = 0; \n    long n = s.length; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring (i, j) \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment result \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(k; 0 .. sub.length)\n\t\t\t{\n\t\t\t\tsum += sub[k] - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpdrm1a67b.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e2d]\n??:? void tmpdrm1a67b.__unittest_L27_C1() [0x427b46]\n??:? void tmpdrm1a67b.__modtest() [0x427bb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43009c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb79]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa31]\n??:? runModuleUnitTests [0x42b99d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // iterate over all substrings \n    for (long i = 0; i < n; i++) \n    { \n        // sum of digits in current substring \n        long sum = 0; \n  \n        // count number of substrings with sum of \n        // digits equal to their length \n        for (long j = i; j < n; j++) \n        { \n            // update sum of digits \n            sum += s[j] - '0'; \n  \n            // check if sum of digits is equal to \n            // length of substring \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n  \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\timmutable sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpkgp9zzyh.d(18): Error: cannot modify `immutable` expression `0`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgp9zzyh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    int n = s.length; \n  \n    // Pick starting point \n    for (int i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (int j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring \n            int sum = 0; \n            for (int k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment count \n            if (sum == j - i + 1) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpkqpaj9xb.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkqpaj9xb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring (i, j) \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment count \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp0xgqow52.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmp0xgqow52.__unittest_L28_C1() [0x427b1a]\n??:? void tmp0xgqow52.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Initialize sum of digits in current \n            // substring \n            long sum = 0; \n  \n            // Calculate sum of digits in current \n            // substring \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to length of \n            // substring, increase count \n            if (sum == j - i + 1) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) \n    { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Calculate sum of current substring. \n            long sum = 0; \n            for (long j = 0; j < len; j++) \n                sum += (s[i + j] - '0'); \n  \n            // Check if sum is equal to length. \n            if (sum == len) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\timmutable sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == (j - i))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmp6nsc_8wy.d(18): Error: cannot modify `immutable` expression `0`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6nsc_8wy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment result \n            if (sum == j - i + 1) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tfor (size_t i = 0; i < s.length; i++)\n\t{\n\t\tint sum = 0;\n\t\tfor (size_t j = i; j < s.length; j++)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking the sum of digits \n            // with length of substring \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate over all substrings \n    for (long i = 0; i < n; i++) { \n        // Count of substrings starting with s[i] \n        long cnt = 0; \n  \n        // Iterate over all lengths \n        for (long len = 1; len <= n - i; len++) { \n            // Calculate sum of current substring \n            long sum = 0; \n            for (long j = 0; j < len; j++) \n                sum += s[i + j] - '0'; \n  \n            // If sum is equal to length, then \n            // increase count \n            if (sum == len) \n                cnt++; \n        } \n  \n        // Add count of all substrings starting \n        // with s[i] \n        ans += cnt; \n    } \n  \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate over all substrings \n    for (long i = 0; i < n; i++) \n        for (long j = i + 1; j <= n; j++) \n            if (sumDigits(s[i..j]) == j - i) \n                ans++; \n  \n    return ans; \n} \n  \n// Function to find sum of digits of a string \nlong sumDigits(string s) \n{ \n    long sum = 0; \n    foreach (c; s) \n        sum += c - '0'; \n    return sum; \n} \n  \n// Driver code \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Calculating sum of digits \n            // in current substring. \n            long sum = 0; \n            for (long j = 0; j < len; j++) \n                sum += s[i + j] - '0'; \n  \n            // If current substring has sum \n            // equal to its length. \n            if (sum == len) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tint sum = 0;\n\t\t\tstring sub = s[i..j];\n\t\t\tforeach (c; sub) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmp8kbivzox.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8kbivzox.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tlong n = s.length;\n\tforeach(i; 0..n)\n\t{\n\t\tforeach(j; i..n)\n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpqmwdgoj2.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpqmwdgoj2.__unittest_L30_C1() [0x427b52]\n??:? void tmpqmwdgoj2.__modtest() [0x427bbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbfd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa41]\n??:? runModuleUnitTests [0x42b9ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428300]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n\tlong n = s.length; \n\tlong result = 0; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tlong sum = 0; \n\t\tfor (long j = i; j < n; j++) \n\t\t{ \n\t\t\tsum += s[j] - '0'; \n\t\t\tif (sum == (j - i + 1)) \n\t\t\t\tresult++; \n\t\t} \n\t} \n\treturn result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\timmutable sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpkgp9zzyh.d(18): Error: cannot modify `immutable` expression `0`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkgp9zzyh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpeukx64tj.d(19): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeukx64tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Calculating sum of digits \n            // in current substring. \n            long sum = 0; \n            for (long j = 0; j < len; j++) \n                sum += s[i + j] - '0'; \n  \n            // If current substring has sum \n            // equal to its length. \n            if (sum == len) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp_mndz4j8.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmp_mndz4j8.__unittest_L26_C1() [0x427b26]\n??:? void tmp_mndz4j8.__modtest() [0x427b90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i, len; iota(s.length))\n\t{\n\t\tforeach(j; i..s.length)\n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpgoigg5m9.d(11): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgoigg5m9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!int - '0'.to!int;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpvgaywii1.d(19): Error: no property `to` for type `immutable(char)`\n/tmp/tmpvgaywii1.d(19): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvgaywii1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1)) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpav0m5c1g.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpav0m5c1g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tif(sub.length == sub.sum!int)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpyh_qtbbp.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyh_qtbbp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) \n    { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking for sum of digits \n            // equal to length \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum!int)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpyvwukcb4.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyvwukcb4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgp80yr6j.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpgp80yr6j.__unittest_L29_C1() [0x427b5a]\n??:? void tmpgp80yr6j.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa72]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc05]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb91]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]\n??:? runModuleUnitTests [0x42b9b5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428308]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i, immutable c; s)\n\t{\n\t\timmutable sum = 0;\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif(sum == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpus7s271u.d(16): Error: cannot modify `immutable` expression `0`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpus7s271u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `immutable(char)`\n/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25iq32cg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach (i; 0 .. s.length)\n\t{\n\t\tforeach (j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach (c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif (sum == sub.length)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpbcrv0cnm.d(19): Error: no property `to` for type `immutable(char)`\n/tmp/tmpbcrv0cnm.d(19): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbcrv0cnm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(i; 0 .. s.length)\n\t{\n\t\tforeach(j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(c; sub)\n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpgxb23rh9.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e25]\n??:? void tmpgxb23rh9.__unittest_L29_C1() [0x427b3e]\n??:? void tmpgxb23rh9.__modtest() [0x427ba8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbbf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa52]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430094]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb71]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa29]\n??:? runModuleUnitTests [0x42b995]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282e8]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x42826f]\n??:? _d_run_main [0x4281da]\n??:? main [0x427bbb]\n??:? __libc_start_main [0x9e83a554]\n1/1 unittests FAILED\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tint n = s.length;\n\tint count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpyfctmi7v.d(10): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyfctmi7v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tstring sub_str = s[i..j];\n\t\t\tint sum = 0;\n\t\t\tforeach (c; sub_str) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub_str.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmp89o2y2d4.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp89o2y2d4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    for (int i = 0; i < s.length(); i++) \n    { \n        long sum = 0; \n        for (int j = i; j < s.length(); j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpz9eijsvn.d(11): Error: no property `length` for type `string`\n/tmp/tmpz9eijsvn.d(14): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9eijsvn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (int i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (int j = i; j < n; j++) \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!int - '0'.to!int)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6kb8o_yx.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kb8o_yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Starting from each index \n    for (long i = 0; i < n; i++) { \n  \n        // Ending at each index \n        for (long j = i; j < n; j++) { \n  \n            // Get the sum of digits in current substring \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // Check if sum is equal to its length \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n  \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i, immutable j; s.length)\n\t{\n\t\timmutable sum = 0;\n\t\tforeach(immutable k; i .. j)\n\t\t{\n\t\t\tsum += s[k] - '0';\n\t\t}\n\t\tif(sum == j - i)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpd9pra8vj.d(11): Error: invalid `foreach` aggregate `s.length`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd9pra8vj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    long sum = 0; \n  \n    // Traverse the string \n    foreach(i; 0 .. n) \n    { \n        // If current character is a digit \n        if (s[i] >= '0' && s[i] <= '9') \n            sum += s[i] - '0'; \n  \n        // If sum is equal to length of substring \n        // starting from index 0 \n        if (sum == i + 1) \n            res++; \n    } \n  \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmph5jlvfby.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e05]\n??:? void tmph5jlvfby.__unittest_L29_C1() [0x427b1a]\n??:? void tmph5jlvfby.__modtest() [0x427b84]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430074]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb51]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa09]\n??:? runModuleUnitTests [0x42b975]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint len = s.length;\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < len; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpobd9k2kw.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobd9k2kw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach (i; 0 .. s.length)\n\t{\n\t\tforeach (j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif (sub.length == sub.sum)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpkyxaezhj.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkyxaezhj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // Calculate sum of current \n            // substring (s[i..j]) \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment result \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n  \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum!(a => a - '0'))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmp9bcc18pk.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bcc18pk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum!int)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmp2tubd6h1.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2tubd6h1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tint n = s.length;\n\tlong count = 0;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmpsdbxcst5.d(10): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdbxcst5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Sum of digits in current substring \n            long sum = 0; \n  \n            // Find sum of digits in current substring \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If sum of digits is equal to length, \n            // then increment count \n            if (sum == len) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Iterate through all substrings \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Extract current substring \n            string sub_str = s[i..i+len]; \n  \n            // Check if sum of digits is equal to \n            // length of substring \n            long sum = 0; \n            foreach(c; sub_str) \n                sum += c - '0'; \n            if (sum == len) \n                ans++; \n        } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) \n    { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Calculating sum of digits \n            // in current substring. \n            long sum = 0; \n            for (long j = 0; j < len; j++) \n                sum += s[i + j] - '0'; \n  \n            // If current sum is equal to \n            // length, then increment result \n            if (sum == len) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tfor (int len = 1; len <= n - i; len++) \n\t\t{\n\t\t\tstring sub_str = s[i..i + len];\n\t\t\tint sum = 0;\n\t\t\tforeach (char c; sub_str) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == len) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp787zb_ro.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp787zb_ro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "/tmp/tmpeukx64tj.d(19): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeukx64tj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n        for (long j = i + 1; j <= n; j++) \n            if (sumDigits(s[i..j]) == j - i) \n                count++; \n    return count; \n} \n  \nlong sumDigits(string s) \n{ \n    long sum = 0; \n    foreach (c; s) \n        sum += c - '0'; \n    return sum; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // sum of digits in substring of \n            // length 'len' starting from index 'i' \n            long sum = 0; \n            for (long j = i; j < i + len; j++) \n                sum += s[j] - '0'; \n  \n            // If current length is equal to \n            // sum of digits. \n            if (sum == len) \n                ans++; \n        } \n    } \n  \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    for (int i = 0; i < s.length(); i++) { \n        int sum = 0; \n        for (int j = i; j < s.length(); j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpbnew15q1.d(11): Error: no property `length` for type `string`\n/tmp/tmpbnew15q1.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbnew15q1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    long n = s.length; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tlong n = s.length;\n\tforeach(i; 0 .. n)\n\t{\n\t\tforeach(j; i .. n)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sum(sub.map!(a => a - '0')))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpfzbhe92i.d(17): Error: undefined identifier `sum`, did you mean variable `sub`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfzbhe92i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tfor (int i = 0; i < n; i++) \n\t{\n\t\tint sum = 0;\n\t\tfor (int j = i; j < n; j++) \n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif (sum == (j - i + 1))\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmpbpxotaia.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbpxotaia.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long count = 0; \n    for (int i = 0; i < s.length(); i++) { \n        long sum = 0; \n        for (int j = i; j < s.length(); j++) { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpokzjtdxo.d(11): Error: no property `length` for type `string`\n/tmp/tmpokzjtdxo.d(13): Error: no property `length` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokzjtdxo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tif(sum(s[i .. j].map!(a => a.to!int - '0'.to!int)) == j - i + 1)\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122713,
      "stdout": "",
      "stderr": "/tmp/tmp6kb8o_yx.d(15): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6kb8o_yx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long - '0'.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517282,
      "stdout": "",
      "stderr": "/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `immutable(char)`\n/tmp/tmp25iq32cg.d(19): Error: no property `to` for type `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp25iq32cg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0..s.length)\n\t{\n\t\tforeach(immutable j; i..s.length)\n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable c; sub)\n\t\t\t{\n\t\t\t\tsum += c.to!long;\n\t\t\t}\n\t\t\tif(sum == sub.length)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmp22y4asam.d(19): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp22y4asam.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j + 1)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i + 1)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tlong n = s.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tfor (long j = i + 1; j <= n; j++) \n\t\t{\n\t\t\tstring sub = s[i..j];\n\t\t\tint sum = 0;\n\t\t\tforeach (char c; sub) \n\t\t\t{\n\t\t\t\tsum += c - '0';\n\t\t\t}\n\t\t\tif (sum == sub.length) \n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring substr = s[i .. j];\n\t\t\tif(substr.length == sum(substr.map!(a => a.to!int).map!(a => a - '0'.to!int)))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpfj769xkf.d(16): Error: undefined identifier `sum`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfj769xkf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long count = 0; \n    for (long i = 0; i < n; i++) \n    { \n        long sum = 0; \n        for (long j = i; j < n; j++) \n        { \n            sum += (s[j] - '0'); \n            if (sum == (j - i + 1)) \n                count++; \n        } \n    } \n    return count; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point in outer loop \n    // and lengths of different strings for \n    // a given starting point \n    for (long i = 0; i < n; i++) \n        for (long len = 1; len <= n - i; len++) \n            if (len * 9 >= sumOfDigits(s, i, len)) \n                res++; \n  \n    return res; \n} \n  \n// A utility function to find sum of digits \n// in a substring of s \nlong sumOfDigits(string s, long start, long len) \n{ \n    long sum = 0; \n    for (long i = start; i < start + len; i++) \n        sum += s[i] - '0'; \n    return sum; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmprder7e7q.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmprder7e7q.__unittest_L33_C1() [0x427b6a]\n??:? void tmprder7e7q.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbef]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa82]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc15]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fba1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa59]\n??:? runModuleUnitTests [0x42b9c5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428318]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) \n    { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) \n        { \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Sum of digits in current substring \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If sum of digits is equal to \n            // length, increment result \n            if (sum == len) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tstring sub = s[i .. j];\n\t\t\tif(sub.length == sub.sum!q{to!int(a)}())\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpl1g0kh9m.d(16): Error: no property `sum` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1g0kh9m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv4ifzzw9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv4ifzzw9.__unittest_L28_C1() [0x427b22]\n??:? void tmpv4ifzzw9.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n  \n    // Pick starting point \n    for (long i = 0; i < n; i++) \n    { \n        // Pick ending point \n        for (long j = i; j < n; j++) \n        { \n            // If current substring has sum of \n            // digits equal to its length. \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking for sum of digits equal to length \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    int n = s.length; \n    long result = 0; \n  \n    // Starting point of substring \n    for (int i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (int len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            int j = i + len - 1; \n  \n            // Checking for sum of digits \n            // equal to length \n            int sum = 0; \n            for (int k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            if (sum == len) \n                result++; \n        } \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmphrnjzzb3.d(10): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphrnjzzb3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1665517283,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpb81a80nf.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpb81a80nf.__unittest_L28_C1() [0x427b22]\n??:? void tmpb81a80nf.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i, immutable c; s)\n\t{\n\t\tif(c.isDigit)\n\t\t{\n\t\t\timmutable sum = c.to!long;\n\t\t\timmutable len = 1;\n\t\t\timmutable j = i + 1;\n\t\t\twhile(j < s.length && s[j].isDigit)\n\t\t\t{\n\t\t\t\tsum += s[j].to!long;\n\t\t\t\t++len;\n\t\t\t\t++j;\n\t\t\t}\n\t\t\tif(sum == len)\n\t\t\t\t++count;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpg5knhn40.d(13): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpg5knhn40.d(15): Error: no property `to` for type `immutable(char)`\n/tmp/tmpg5knhn40.d(18): Error: no property `isDigit` for type `immutable(char)`\n/tmp/tmpg5knhn40.d(20): Error: no property `to` for type `immutable(char)`\n/tmp/tmpg5knhn40.d(21): Error: cannot modify `immutable` expression `1`\n/tmp/tmpg5knhn40.d(22): Error: cannot modify `immutable` expression `j`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5knhn40.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tforeach(immutable i; 0 .. s.length)\n\t{\n\t\tforeach(immutable j; i .. s.length)\n\t\t{\n\t\t\tlong sum = 0;\n\t\t\tforeach(immutable k; i .. j)\n\t\t\t{\n\t\t\t\tsum += s[k] - '0';\n\t\t\t}\n\t\t\tif(sum == j - i)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpv4ifzzw9.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e0d]\n??:? void tmpv4ifzzw9.__unittest_L28_C1() [0x427b22]\n??:? void tmpv4ifzzw9.__modtest() [0x427b8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bba7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa3a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbcd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43007c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb59]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa11]\n??:? runModuleUnitTests [0x42b97d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282d0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{\n\tlong count = 0;\n\tint n = s.length;\n\tint[int] map;\n\tforeach(i; 0 .. n)\n\t{\n\t\tmap[i] = 0;\n\t}\n\tforeach(i; 0 .. n)\n\t{\n\t\tint sum = 0;\n\t\tforeach(j; i .. n)\n\t\t{\n\t\t\tsum += s[j] - '0';\n\t\t\tif(sum == (j - i + 1))\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(sum > (j - i + 1))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "/tmp/tmpv5pmdzcb.d(11): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv5pmdzcb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long res = 0; \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                res++; \n        } \n    } \n    return res; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long result = 0; \n  \n    for (long i = 0; i < n; i++) { \n        long sum = 0; \n        for (long j = i; j < n; j++) { \n            sum += s[j] - '0'; \n            if (sum == (j - i + 1)) \n                result++; \n        } \n    } \n    return result; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122714,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to count the number of substrings with the sum of digits equal to their length.\n\t\n*/\nlong count_Substrings(string s) \n{ \n    long n = s.length; \n    long ans = 0; \n  \n    // Starting point of substring \n    for (long i = 0; i < n; i++) { \n  \n        // Length of substring \n        for (long len = 1; len <= n - i; len++) { \n  \n            // Ending point of substring \n            long j = i + len - 1; \n  \n            // Checking the sum of digits \n            // from index i to j \n            long sum = 0; \n            for (long k = i; k <= j; k++) \n                sum += s[k] - '0'; \n  \n            // If sum is equal to length, \n            // then increment the count \n            if (sum == len) \n                ans++; \n        } \n    } \n    return ans; \n} \nunittest\n{\n    alias candidate = count_Substrings;\n\n    assert(candidate(\"112112\") == 6L);\n    assert(candidate(\"111\") == 6L);\n    assert(candidate(\"1101112\") == 12L);\n}\nvoid main(){}",
      "timestamp": 1666122715,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}