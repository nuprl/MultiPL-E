{
  "name": "mbpp_793_last",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to find the last position of an element in a sorted array.\n\t\n*/\nlong last(long[] arr, long x) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = last;\n\n    assert(candidate([1L, 2L, 3L], 1L) == 0L);\n    assert(candidate([1L, 1L, 1L, 2L, 3L, 4L], 1L) == 2L);\n    assert(candidate([2L, 3L, 2L, 3L, 6L, 8L, 9L], 3L) == 3L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tres = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn res;\n}",
    "{\n\tlong left = 0;\n\tlong right = arr.length - 1;\n\tlong result = -1;\n\twhile (left <= right) \n\t{\n\t\tlong mid = (left + right) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tleft = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tright = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t} \n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\tr = mid - 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong left = 0;\n\tlong right = arr.length;\n\t\n\twhile(left < right)\n\t{\n\t\tlong mid = (left + right) / 2;\n\t\t\n\t\tif(arr[mid] <= x)\n\t\t\tleft = mid + 1;\n\t\telse\n\t\t\tright = mid;\n\t}\n\t\n\tif(arr[left - 1] == x)\n\t\treturn left - 1;\n\telse\n\t\treturn -1;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile(l <= r)\n\t{\n\t\tlong mid = (l + r) / 2;\n\t\tif(arr[mid] == x)\n\t\t{\n\t\t\tresult = mid;\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse if(arr[mid] > x)\n\t\t{\n\t\t\tr = mid - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tl = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long low = 0; \n    long high = n - 1; \n    long result = -1; \n    while (low <= high) \n    { \n        long mid = (low + high) / 2; \n        if (arr[mid] == x) \n        { \n            result = mid; \n            low = mid + 1; \n        } \n        else if (arr[mid] > x) \n            high = mid - 1; \n        else\n            low = mid + 1; \n    } \n    return result; \n} ",
    "{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] < x) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = -1; \n    while (low <= high) { \n        long mid = (low + high) / 2; \n        if (arr[mid] <= x) { \n            result = mid; \n            low = mid + 1; \n        } \n        else\n            high = mid - 1; \n    } \n    return result; \n} ",
    "{\n\tlong l = 0;\n\tlong r = arr.length;\n\tlong m = 0;\n\twhile (l < r) \n\t{\n\t\tm = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m;\n\t\t}\n\t}\n\treturn l - 1;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tif (m == arr.length - 1 || arr[m + 1] != x)\n\t\t\t\treturn m;\n\t\t\telse\n\t\t\t\tl = m + 1;\n\t\t} \n\t\telse if (arr[m] > x)\n\t\t\tr = m - 1;\n\t\telse\n\t\t\tl = m + 1;\n\t}\n\treturn -1;\n}",
    "{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong result = -1;\n\twhile (low <= high) \n\t{\n\t\tlong mid = (low + high) / 2;\n\t\tif (arr[mid] == x) \n\t\t{\n\t\t\tresult = mid;\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse if (arr[mid] > x) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong n = arr.length;\n\tlong l = 0;\n\tlong r = n - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong result = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] <= x) \n\t\t{\n\t\t\tresult = m;\n\t\t\tl = m + 1;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tlong l = 0;\n\tlong r = arr.length - 1;\n\tlong res = -1;\n\twhile (l <= r) \n\t{\n\t\tlong m = (l + r) / 2;\n\t\tif (arr[m] == x) \n\t\t{\n\t\t\tres = m;\n\t\t\tl = m + 1;\n\t\t}\n\t\telse if (arr[m] < x) \n\t\t{\n\t\t\tl = m + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tr = m - 1;\n\t\t}\n\t}\n\treturn res;\n}"
  ]
}