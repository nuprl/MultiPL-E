{
  "name": "mbpp_474_replace_char",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpoz8hvo7k.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoz8hvo7k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpezggxjhv.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezggxjhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0wiewavk.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wiewavk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i = 0;\n\tstring str2 = \"\";\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmprx6iz93x.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx6iz93x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i;0..str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring result = \"\";\n\tfor(int i = 0; i < len; i++)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tresult ~= newch[0];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= str1[i];\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5q1rhokn.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5q1rhokn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach (c; str1)\n\t{\n\t\tif (c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpry6ilsn7.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpry6ilsn7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5aplqi9e.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aplqi9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tint len2 = ch.length;\n\tint len3 = newch.length;\n\tstring str2 = \"\";\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpn56c2b34.d(78): Error: no identifier for declarator `int`\n/tmp/tmpn56c2b34.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn56c2b34.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring ret;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tret ~= newch;\n\t\telse\n\t\t\tret ~= c;\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp6hi4jqh4.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6hi4jqh4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring newstr;\n\tforeach(i, c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tnewstr ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tnewstr ~= c;\n\t\t}\n\t}\n\treturn newstr;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp7w7hlqby.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7w7hlqby.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp74eh87_n.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74eh87_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach (c; str1) {\n\t\tif (c == ch) {\n\t\t\tresult ~= newch;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpxf3gu5xf.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxf3gu5xf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp74eh87_n.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74eh87_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n    string result;\n    foreach (c; str1) \n\t{\n        if (c == ch[0]) \n\t\t{\n            result ~= newch;\n        } \n\t\telse \n\t\t{\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif (c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp1l8ouspb.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l8ouspb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpezggxjhv.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezggxjhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmperb9es_p.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperb9es_p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tforeach(i, ch; str1)\n\t{\n\t\tif (str1[i] == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpmb4rpa8f.d(13): Error: variable `ch` is shadowing variable `tmpmb4rpa8f.replace_char.ch`\n/tmp/tmpmb4rpa8f.d(13): Error: variable `i` is shadowing variable `tmpmb4rpa8f.replace_char.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmb4rpa8f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5aplqi9e.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aplqi9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 += newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 += str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpc4j4wltk.d(16): Error: slice `str2` is not mutable\n/tmp/tmpc4j4wltk.d(20): Error: slice `str2` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc4j4wltk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5aplqi9e.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aplqi9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(i, c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpylo36pil.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpylo36pil.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp1l8ouspb.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l8ouspb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tint i = 0;\n\tstring result = \"\";\n\twhile (i < len)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tresult = result ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = result ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpzis6i3aw.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzis6i3aw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpezggxjhv.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezggxjhv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp1l8ouspb.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l8ouspb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmppysnifga.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppysnifga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0wiewavk.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wiewavk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1) {\n\t\tif (c == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\tstr2 = \"\";\n\tfor (i = 0; i < str1.length; i++) {\n\t\tif (str1[i] == ch) {\n\t\t\tstr2 = str2 ~ newch;\n\t\t} else {\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmphglm9jm6.d(14): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphglm9jm6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring ret;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tret ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret ~= c;\n\t\t}\n\t}\n\treturn ret;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpgpeopho3.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgpeopho3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++) \n\t{\n\t\tif (str1[i] == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpfdcvlqpm.d(14): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfdcvlqpm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpi14tnzsk.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi14tnzsk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (c; str1)\n\t{\n\t\tif (c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmppj921mud.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppj921mud.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp8bmwu8mn.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8bmwu8mn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmp0wiewavk.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0wiewavk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch[0]) \n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1) {\n\t\tif(c == ch) {\n\t\t\tresult ~= newch;\n\t\t} else {\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpmgwk_oiu.d(12): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmgwk_oiu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1) \n\t{\n\t\tif (c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpha5oxx14.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpha5oxx14.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i; 0 .. str1.length)\n\t{\n\t\tif(str1[i] == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5aplqi9e.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5aplqi9e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpd7or_aff.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7or_aff.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 = str2 ~ newch;\n\t\t} \n\t\telse \n\t\t{\n\t\t\tstr2 = str2 ~ str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmprx6iz93x.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprx6iz93x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result;\n\t\n\tforeach(char c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp1l8ouspb.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l8ouspb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tresult ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpu396b6qq.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu396b6qq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\t\n\tstr2 = \"\";\n\t\n\tfor (i = 0; i < str1.length; i++) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1) \n\t{\n\t\tif(c == ch) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmppysnifga.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppysnifga.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2;\n\t\n\tfor (i = 0; i < str1.length; i++)\n\t{\n\t\tif (str1[i] == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmptwxnzta8.d(15): Error: incompatible types for `(str1[cast(ulong)i]) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwxnzta8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (i; 0 .. str1.length)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i;\n\tstring str2 = \"\";\n\t\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\t\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp5bhqqvhe.d(13): Error: variable `i` is shadowing variable `tmp5bhqqvhe.replace_char.i`\n/tmp/tmp5bhqqvhe.d(15): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5bhqqvhe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpacdq7s9q.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpacdq7s9q.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= str1[i];\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmpml7g3ua0.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpml7g3ua0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpynijcd76.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpynijcd76.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach (c; str1)\n\t{\n\t\tif (c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp1l8ouspb.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1l8ouspb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch)\n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstr2 ~= c;\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "/tmp/tmpufa_3hj9.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpufa_3hj9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(i, c; str1)\n\t{\n\t\tif(c == ch)\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122395,
      "stdout": "",
      "stderr": "/tmp/tmp74eh87_n.d(13): Error: incompatible types for `(c) == (ch)`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp74eh87_n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint len = str1.length;\n\tstring str2 = \"\";\n\tfor (int i = 0; i < len; i++) \n\t{\n\t\tif (str1[i] == ch[0]) \n\t\t{\n\t\t\tstr2 ~= newch;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "/tmp/tmpd766uvtv.d(10): Error: cannot implicitly convert expression `str1.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd766uvtv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tint i = 0;\n\twhile (i < str1.length)\n\t{\n\t\tif (str1[i] == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= str1[i];\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2;\n\tint i;\n\tfor (i = 0; i < str1.length; i++) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring str2 = \"\";\n\tforeach(c; str1)\n\t{\n\t\tif(c == ch[0])\n\t\t\tstr2 ~= newch;\n\t\telse\n\t\t\tstr2 ~= c;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1665517343,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tstring result = \"\";\n\tforeach (c; str1)\n\t{\n\t\tif (c == ch[0])\n\t\t\tresult ~= newch;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to replace characters in a string.\n\t\n*/\nstring replace_char(string str1, string ch, string newch) \n{\n\tint i = 0;\n\tstring str2 = \"\";\n\twhile (i < str1.length) {\n\t\tif (str1[i] == ch[0]) {\n\t\t\tstr2 ~= newch;\n\t\t} else {\n\t\t\tstr2 ~= str1[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn str2;\n}\nunittest\n{\n    alias candidate = replace_char;\n\n    assert(candidate(\"polygon\", \"y\", \"l\") == \"pollgon\");\n    assert(candidate(\"character\", \"c\", \"a\") == \"aharaater\");\n    assert(candidate(\"python\", \"l\", \"a\") == \"python\");\n}\nvoid main(){}",
      "timestamp": 1666122396,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}