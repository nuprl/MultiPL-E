{
  "name": "mbpp_414_overlapping",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1) \n\t{\n\t\tif(list2.canFind(item)) \n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "/tmp/tmptwlve8e8.d(12): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptwlve8e8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1) \n\t{\n\t\tforeach(j; list2) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(l1; list1)\n\t{\n\t\tforeach(l2; list2)\n\t\t{\n\t\t\tif(l1 == l2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(list2.canFind(item))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmp_958l5hc.d(12): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_958l5hc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem1; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem1 == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t\tforeach(j; list2)\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1) \n\t{\n\t\tforeach(j; list2) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpngmjnjqa.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngmjnjqa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpffrdku09.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffrdku09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif (item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(list2.canFind(item))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpa5gbb893.d(12): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa5gbb893.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long x; list1)\n\t{\n\t\tforeach(long y; list2)\n\t\t{\n\t\t\tif(x == y)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n    foreach (item1; list1)\n    {\n        foreach (item2; list2)\n        {\n            if (item1 == item2)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(list2.canFind(item))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmp_958l5hc.d(12): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_958l5hc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1) \n\t{\n\t\tforeach(j; list2) \n\t\t{\n\t\t\tif(i == j) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach (i; list1) \n\t{\n\t\tforeach (j; list2) \n\t\t{\n\t\t\tif (i == j) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(item; list1)\n\t{\n\t\tif(list2.canFind(item))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpb0slrvm9.d(13): Error: no property `canFind` for type `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0slrvm9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpx40yxbre.d(13): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx40yxbre.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tif(item in list2)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmpffrdku09.d(12): Error: incompatible types for `(item) in (list2)`: `long` and `long[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpffrdku09.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(element; list1)\n\t{\n\t\tforeach(element2; list2)\n\t\t{\n\t\t\tif(element == element2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(elem1; list1)\n\t{\n\t\tforeach(elem2; list2)\n\t\t{\n\t\t\tif(elem1 == elem2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n    foreach(i; list1)\n    {\n        foreach(j; list2)\n        {\n            if(i == j)\n            {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tbool result = false;\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(long i; list1)\n\t{\n\t\tforeach(long j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(list1; i)\n\t{\n\t\tforeach(list2; j)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123204,
      "stdout": "",
      "stderr": "/tmp/tmp839h_jsj.d(10): Error: undefined identifier `i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp839h_jsj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item1 == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item; list1)\n\t{\n\t\tforeach(item2; list2)\n\t\t{\n\t\t\tif(item == item2)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(i; list1)\n\t{\n\t\tforeach(j; list2)\n\t\t{\n\t\t\tif(i == j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1665517352,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to check whether any value in a sequence exists in a sequence or not.\n\t\n*/\nbool overlapping(long[] list1, long[] list2) \n{\n\tforeach(item1; list1) \n\t{\n\t\tforeach(item2; list2) \n\t\t{\n\t\t\tif(item1 == item2) \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = overlapping;\n\n    assert(candidate([1L, 2L, 3L, 4L, 5L], [6L, 7L, 8L, 9L]) == false);\n    assert(candidate([1L, 2L, 3L], [4L, 5L, 6L]) == false);\n    assert(candidate([1L, 4L, 5L], [1L, 4L, 5L]) == true);\n}\nvoid main(){}",
      "timestamp": 1666123205,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}