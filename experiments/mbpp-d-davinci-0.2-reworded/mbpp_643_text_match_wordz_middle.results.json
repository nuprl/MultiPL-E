{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpfwtwzsfu.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfwtwzsfu.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\tfor (; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (found)\n\t{\n\t\tfor (; i < len; i++)\n\t\t{\n\t\t\tif (text[i] == ' ')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (text[i] != 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpkj5_yasl.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkj5_yasl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpv814lo1l.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv814lo1l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\t\n\twhile (i < text_length) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i > 0 && i < text_length - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpqxzpuc6d.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqxzpuc6d.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint length = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == length - 1)\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpf_ykm9lx.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_ykm9lx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split();\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1 .. $ - 1].contains(\"z\"))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "/tmp/tmpcy38vm06.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcy38vm06.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j > i)\n\t{\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpbl5uias5.d(12): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbl5uias5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpmdak_s2a.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdak_s2a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\tif (i == 0 || i == len - 1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp4c3yz6s0.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4c3yz6s0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp02mk87hj.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02mk87hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\tint len = text.length;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpchhsp_u2.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchhsp_u2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint start = 0;\n\tint end = text.length;\n\t\n\tif (text.length > 0)\n\t{\n\t\tif (text[0] == 'z')\n\t\t{\n\t\t\tstart = 1;\n\t\t}\n\t\t\n\t\tif (text[text.length - 1] == 'z')\n\t\t{\n\t\t\tend = text.length - 1;\n\t\t}\n\t\t\n\t\tfor (int i = start; i < end; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpsbe5ie1w.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpsbe5ie1w.d(23): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsbe5ie1w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp9lqg6ko8.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lqg6ko8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tbool found = false;\n\t\n\tfor (i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\tint text_length_minus_two = text_length - 2;\n\t\n\tif (text_length < 3)\n\t{\n\t\treturn false;\n\t}\n\t\n\tfor (int i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp0cafyoth.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cafyoth.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpbwdjjj8k.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwdjjj8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\t\n\tint len = text.length;\n\t\n\tbool result = false;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpz9bbx_2x.d(29): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpz9bbx_2x.d(33): Error: variable `i` is shadowing variable `tmpz9bbx_2x.text_match_wordz_middle.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz9bbx_2x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpf001hz8o.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf001hz8o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found_z = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound_z = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp31txztjk.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp31txztjk.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == j-1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpre7qechf.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpre7qechf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i != 0 && i != j - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpmj7206sd.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmj7206sd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2 && word.find(\"z\") != -1)\n\t\t{\n\t\t\tif(word[0] != 'z' && word[$-1] != 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp57rbu6iq.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57rbu6iq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpi9tpnkcl.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9tpnkcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tbool found_z = false;\n\tint i = 0;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound_z = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp8f3_3od9.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8f3_3od9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found) \n\t{\n\t\twhile (j > i) \n\t\t{\n\t\t\tif (text[j] == 'z') \n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpl1kvg6fn.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl1kvg6fn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tint z_count = 0;\n\tbool z_found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tz_found = true;\n\t\t\tz_count++;\n\t\t}\n\t\ti++;\n\t}\n\t\n\tif (z_found && z_count > 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpw0hfwrdb.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0hfwrdb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/^[^z]*z[^z]*$/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpmg5bovvh.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmg5bovvh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint x\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpw4s6mz2k.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpw4s6mz2k.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4s6mz2k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpq1d0pvg4.d(79): Error: no identifier for declarator `int`\n/tmp/tmpq1d0pvg4.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d0pvg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found = false;\n\t\n\tfor (i = 1; i < len - 1; i++) {\n\t\tif (text[i] == 'z') {\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp9fj386wa.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9fj386wa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 1)\n\t\t{\n\t\t\tif(word.indexOf(\"z\") > 0 && word.indexOf(\"z\") < word.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmplh4swtb2.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplh4swtb2.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found_z = false;\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tfound_z = true;\n\t\t}\n\t\tif (text[j] == 'z') \n\t\t{\n\t\t\tfound_z = true;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn found_z;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp6t3qz093.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6t3qz093.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tbool found = false;\n\t\n\tfor (i = 1; i < text.length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < j-1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp4lb8hje6.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4lb8hje6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t// TODO: implement\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphg3m7znm.d(17): unittest failure\n----------------\n??:? _d_unittestp [0x427d1d]\n??:? void tmphg3m7znm.__unittest_L13_C1() [0x427a34]\n??:? void tmphg3m7znm.__modtest() [0x427a9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ba43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a8d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fa69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff18]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42f9f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ad]\n??:? runModuleUnitTests [0x42b819]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42816c]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z' && text[i-1] != ' ' && text[i+1] != ' ') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpx6xvi99p.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx6xvi99p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpmdak_s2a.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdak_s2a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\t\n\tfor(int i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpbmmytmzx.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbmmytmzx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp_51dit18.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_51dit18.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tforeach(i, word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp0llkf84j.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0llkf84j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpbwdjjj8k.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwdjjj8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpc9jgvd8z.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc9jgvd8z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tbool found = false;\n\tfor(int i = 1; i < len - 1; i++)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpa92d6_sf.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa92d6_sf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != text.length - 1 && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp4n71rulp.d(10): Error: no property `find` for type `string`\n/tmp/tmp4n71rulp.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n71rulp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto text_length = text.length;\n\tauto text_length_minus_one = text_length - 1;\n\t\n\tfor (size_t i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i;\n\tint z_count = 0;\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tz_count++;\n\t\t}\n\t}\n\tif (z_count > 1)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpvnw9uouf.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvnw9uouf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\t\n\tfor (int i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpfh7e6nya.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfh7e6nya.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint len = text.length;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpuxihfztm.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuxihfztm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found = false;\n\tbool found_start = false;\n\tbool found_end = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tfound_start = true;\n\t\t\t}\n\t\t\telse if (i == len - 1)\n\t\t\t{\n\t\t\t\tfound_end = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn found && !found_start && !found_end;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpjrnbnj4b.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjrnbnj4b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length-1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp0y4iuz2v.d(10): Error: no property `find` for type `string`\n/tmp/tmp0y4iuz2v.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0y4iuz2v.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpxfukesld.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfukesld.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool match = false;\n\tint len = text.length;\n\tint i = 0;\n\t\n\twhile(i < len)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tmatch = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmatch = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn match;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpcvl826eq.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcvl826eq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpi9tpnkcl.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi9tpnkcl.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpolrhqzwh.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpolrhqzwh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif (i > 0 && i < j-1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp10zjq7og.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp10zjq7og.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word.find(\"z\") != 1 && word.find(\"z\") != word.length - 1)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp9j6pyrxv.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j6pyrxv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool result = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp7mcj7sj8.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mcj7sj8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found == false)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (i == 0 || i == j-1)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmplxtumykm.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplxtumykm.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\") && text.canFind(\"z\", text.length - 1) && text.canFind(\"z\", 1);\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpi716mo9n.d(10): Error: no property `canFind` for type `string`\n/tmp/tmpi716mo9n.d(10): Error: no property `canFind` for type `string`\n/tmp/tmpi716mo9n.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi716mo9n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfound = true;\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(immutable string word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpeumpvvxq.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeumpvvxq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word.indexOf(\"z\") != -1)\n\t\t{\n\t\t\tif(word.indexOf(\"z\") != 0 && word.indexOf(\"z\") != word.length - 1)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpsd4bvy3f.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsd4bvy3f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\tint text_length_minus_two = text_length - 2;\n\t\n\tfor(int i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp8zhg6pty.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8zhg6pty.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpxa90nf5x.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxa90nf5x.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word.contains(\"z\") && word[0] != 'z' && word[$-1] != 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpzvrb2fe_.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzvrb2fe_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_minus_one = text_length - 1;\n\tint text_length_minus_two = text_length - 2;\n\t\n\tfor (int i = 0; i < text_length; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length_minus_one)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp1vkn69d_.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1vkn69d_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint len = text.length;\n\tint i = 0;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpjdf8pltn.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdf8pltn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\twhile(i < text.length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpq1d0pvg4.d(79): Error: no identifier for declarator `int`\n/tmp/tmpq1d0pvg4.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d0pvg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool result = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpdu9xqu_o.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdu9xqu_o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp4iq6h9up.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4iq6h9up.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 0)\n\t{\n\t\tforeach (i, c; text)\n\t\t{\n\t\t\tif (c == 'z')\n\t\t\t{\n\t\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t\t{\n\t\t\t\t\tresult = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint length = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == length - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpoi0wsfjx.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoi0wsfjx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517610,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint len = text.length;\n\tint i = 0;\n\t\n\twhile (i < len) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i > 0 && i < len - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpsdgy026j.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsdgy026j.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpmdak_s2a.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmdak_s2a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tforeach(word; text.split) {\n\t\tif(word.length > 2 && word.contains(\"z\")) {\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp6zpx0eas.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6zpx0eas.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i;\n\tint j;\n\tbool found = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tif (found)\n\t{\n\t\tfor (j = i + 1; j < len; j++)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpmqjgbn6f.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmqjgbn6f.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\t\n\tif (len < 3)\n\t\treturn false;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmplugv5n4e.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplugv5n4e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpu5wjb0ws.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5wjb0ws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp8_9g02am.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_9g02am.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1..$-1].canFind(\"z\"))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpr8uclmfo.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr8uclmfo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpvlxn_9_b.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvlxn_9_b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words) {\n\t\tif (word.length > 2) {\n\t\t\tif (word[1..$-1].canFind(\"z\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpua714q1i.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpua714q1i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\tfor (i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif (i > 0 && i < len - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpmt31rte5.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmt31rte5.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto text_length = text.length;\n\t\n\tif (text_length < 3)\n\t\treturn false;\n\t\n\tfor (int i = 1; i < text_length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp4iq6h9up.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4iq6h9up.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpu5wjb0ws.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu5wjb0ws.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif (word.length > 2)\n\t\t{\n\t\t\tif (word[1..$-1].canFind(\"z\"))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpg0yr4c3c.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg0yr4c3c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i > 0 && i < len - 1) \n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp77myv50c.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp77myv50c.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool result = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpe5vo6d8l.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe5vo6d8l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i; 0 .. text.length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_len = text.length;\n\tfor (int i = 1; i < text_len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpexyfe0vo.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpexyfe0vo.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(string word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp70exm88n.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp70exm88n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp75ewmy6y.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75ewmy6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.match(\"/z/\");\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpisaoyfbe.d(11): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpisaoyfbe.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp0o0yw5h_.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0o0yw5h_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool found_z = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound_z = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmphb5qokbb.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphb5qokbb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp_x1pjbsi.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_x1pjbsi.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tint k = 0;\n\tbool found = false;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\tif(found)\n\t{\n\t\twhile(k < text.length)\n\t\t{\n\t\t\tif(text[k] == 'z' && k != i && k != j)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpmghb_6co.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmghb_6co.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\twhile (j > i) \n\t{\n\t\tif (text[j] == 'z') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpuoc4cmrb.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuoc4cmrb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t// check if the text is empty\n\tif (text.empty) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is a single character\n\tif (text.length == 1) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is two characters\n\tif (text.length == 2) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is three characters\n\tif (text.length == 3) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is four characters\n\tif (text.length == 4) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is five characters\n\tif (text.length == 5) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is six characters\n\tif (text.length == 6) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is seven characters\n\tif (text.length == 7) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is eight characters\n\tif (text.length == 8) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is nine characters\n\tif (text.length == 9) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is ten characters\n\tif (text.length == 10) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is eleven characters\n\tif (text.length == 11) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is twelve characters\n\tif (text.length == 12) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is thirteen characters\n\tif (text.length == 13) \n\t{\n\t\treturn false;\n\t}\n\t\n\t// check if the text is fourteen characters\n\tif (text.length == 14) \n\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpjmv9731z.d(97): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjmv9731z.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint A = 0;\n\tint B = 0;\n\tint C = 0;\n\tint D = 0;\n\tint E = 0;\n\tint F = 0;\n\tint G = 0;\n\tint H = 0;\n\tint I = 0;\n\tint J = 0;\n\tint K = 0;\n\tint L = 0;\n\tint M = 0;\n\tint N = 0;\n\tint O = 0;\n\tint P = 0;\n\tint Q = 0;\n\tint R = 0;\n\tint S = 0;\n\tint T = 0;\n\tint U = 0;\n\tint V = 0;\n\tint W = 0;\n\tint X = 0;\n\tint Y = 0;\n\tint Z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpahza05gn.d(82): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpahza05gn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\tif(text[j] == 'z')\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmphy1uk1p8.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphy1uk1p8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpi63vwj23.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi63vwj23.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == len - 1)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp6bb_og83.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6bb_og83.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\") && text.canFind(\"z\", text.find(\"z\") + 1);\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp4goycdc4.d(10): Error: no property `canFind` for type `string`\n/tmp/tmp4goycdc4.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4goycdc4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpa4b63290.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa4b63290.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tif (text_length < 3)\n\t\treturn false;\n\t\n\tint text_length_minus_1 = text_length - 1;\n\t\n\tfor (int i = 1; i < text_length_minus_1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpyp2f0w55.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyp2f0w55.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpbwdjjj8k.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwdjjj8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpbwdjjj8k.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbwdjjj8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpq1d0pvg4.d(79): Error: no identifier for declarator `int`\n/tmp/tmpq1d0pvg4.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d0pvg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif (i != 0 && i != text.length - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmphjxa5pdp.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphjxa5pdp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t//return text.find(\"z\") != text.length;\n\treturn text.find(\"z\") != text.length && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpfnv1m5tt.d(11): Error: no property `find` for type `string`\n/tmp/tmpfnv1m5tt.d(11): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfnv1m5tt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint len = text.length;\n\tint i = 0;\n\tint j = len - 1;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i != 0 && i != len - 1)\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpz2devcmw.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz2devcmw.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto words = text.split(\" \");\n\tforeach(word; words)\n\t{\n\t\tif(word.length > 2 && word[1..$-1].contains(\"z\"))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpo3y7ide1.d(10): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo3y7ide1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tbool found = false;\n\twhile (i < text.length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text.length - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found = false;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp8t3mnq5m.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t3mnq5m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpax31z6g9.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpax31z6g9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp0ek_i20t.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ek_i20t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_len = text.length;\n\tint i = 0;\n\tbool found_z = false;\n\tbool found_z_middle = false;\n\t\n\twhile (i < text_len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound_z = true;\n\t\t\tif (i > 0 && i < text_len - 1)\n\t\t\t{\n\t\t\t\tfound_z_middle = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t\n\treturn found_z && found_z_middle;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpjabk6kbg.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjabk6kbg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool found = false;\n\tint start = 0;\n\tint end = text.length;\n\tint middle = (start + end) / 2;\n\t\n\tif (text.length > 2)\n\t{\n\t\tfor (int i = 0; i < middle; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = middle; i < end; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpvwm3mor3.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvwm3mor3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint pos = 0;\n\t\n\twhile (pos < text.length)\n\t{\n\t\tif (text[pos] == 'z')\n\t\t{\n\t\t\tif (pos == 0 || pos == text.length - 1)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\treturn true;\n\t\t}\n\t\tpos++;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z' && text[j] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp7ryydg_9.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ryydg_9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\twhile(i < text_length)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp7lad73r7.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7lad73r7.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint len = text.length;\n\tint i = 0;\n\tint j = len - 1;\n\tint count = 0;\n\t\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\tif (text[j] == 'z')\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\t\n\tif (count > 1)\n\t{\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp0kxyplh3.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0kxyplh3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto text_length = text.length;\n\tauto text_length_minus_one = text_length - 1;\n\t\n\tfor (size_t i = 1; i < text_length_minus_one; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.length > 2 && text[1..$-1].canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpvd3_iuzd.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvd3_iuzd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2 && word.contains(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp4iq6h9up.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4iq6h9up.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp75ewmy6y.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75ewmy6y.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word.contains(\"z\"))\n\t\t\t{\n\t\t\t\tif(word[1..$-1].contains(\"z\"))\n\t\t\t\t{\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpirct19mt.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpirct19mt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint text_length_half = text_length / 2;\n\t\n\tint text_length_half_plus = text_length_half + 1;\n\t\n\tint text_length_half_minus = text_length_half - 1;\n\t\n\tint text_length_half_minus_plus = text_length_half_minus + 1;\n\t\n\tint text_length_half_minus_minus = text_length_half_minus - 1;\n\t\n\tif(text_length % 2 == 0)\n\t{\n\t\tif(text[text_length_half_minus] == 'z' && text[text_length_half_plus] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(text[text_length_half_minus_minus] == 'z' && text[text_length_half_minus_plus] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp6vfvkrlc.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vfvkrlc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\twhile (i < len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\tif (i == 0 || i == len - 1)\n\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp1t4rkgu_.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1t4rkgu_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(i, word; text.split)\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1..$-1].contains('z'))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp7vr855ts.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7vr855ts.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(word; text.split(\" \"))\n\t{\n\t\tif(word.length > 2 && word[1..$-1].canFind(\"z\"))\n\t\t{\n\t\t\tresult = true;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpzw03gkui.d(12): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzw03gkui.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpq1d0pvg4.d(79): Error: no identifier for declarator `int`\n/tmp/tmpq1d0pvg4.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d0pvg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpramsv3h8.d(10): Error: no property `find` for type `string`\n/tmp/tmpramsv3h8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpramsv3h8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpq1d0pvg4.d(79): Error: no identifier for declarator `int`\n/tmp/tmpq1d0pvg4.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq1d0pvg4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tint text_length = text.length;\n\t\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpl2mpk6zf.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl2mpk6zf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tbool match = false;\n\t\n\tfor (int i = 1; i < text_length - 1; i++) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tmatch = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn match;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpd6mjdsqv.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6mjdsqv.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(found)\n\t{\n\t\twhile(j > i)\n\t\t{\n\t\t\tif(text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp9n69ehog.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9n69ehog.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif (text.length > 2) \n\t{\n\t\tforeach (i, c; text[1 .. $ - 1]) \n\t\t{\n\t\t\tif (c == 'z') \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\t// Check if the string is empty\n\tif (text.empty)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the string is a single character\n\tif (text.length == 1)\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the first character is 'z'\n\tif (text[0] == 'z')\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the last character is 'z'\n\tif (text[text.length - 1] == 'z')\n\t{\n\t\treturn false;\n\t}\n\t\n\t// Check if the string contains 'z'\n\tif (text.find('z') == -1)\n\t{\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpebnvsq0w.d(11): Error: no property `empty` for type `string`\n/tmp/tmpebnvsq0w.d(35): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpebnvsq0w.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\n/tmp/tmp2y36gy99.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2y36gy99.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tif(text.length > 2)\n\t{\n\t\tfor(int i = 1; i < text.length - 1; i++)\n\t\t{\n\t\t\tif(text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\t\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\t\n\twhile (j > i) \n\t{\n\t\tif (text[j] == 'z') \n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\tj--;\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp7xbl4wu0.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xbl4wu0.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\t\n\tif (text_length < 3)\n\t\treturn false;\n\t\n\tint middle_length = text_length - 2;\n\t\n\tif (middle_length == 0)\n\t\treturn false;\n\t\n\tstring middle_text = text[1 .. $ - 1];\n\t\n\treturn middle_text.canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp_snz_bkz.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmp_snz_bkz.d(22): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_snz_bkz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != -1 && text.find(\"z\") != 0 && text.find(\"z\") != text.length-1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpq5jpgw5i.d(10): Error: no property `find` for type `string`\n/tmp/tmpq5jpgw5i.d(10): Error: no property `find` for type `string`\n/tmp/tmpq5jpgw5i.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq5jpgw5i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tif(i == 0 || i == j - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp0ek_i20t.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0ek_i20t.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tforeach(i, word; text.split())\n\t{\n\t\tif(word.length > 2)\n\t\t{\n\t\t\tif(word[1 .. $-1].contains(\"z\"))\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpycbni5va.d(11): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycbni5va.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tint i = 0;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\t// do nothing\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmp02mk87hj.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02mk87hj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpsia29xt4.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsia29xt4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint len = text.length;\n\tbool found = false;\n\t\n\twhile (i < len) {\n\t\tif (text[i] == 'z') {\n\t\t\tif (i == 0 || i == len - 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfound = true;\n\t\t}\n\t\ti++;\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpu_bulxsy.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu_bulxsy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_length - 1)\n\t\t\t{\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp9yr64q7b.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9yr64q7b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tbool result = false;\n\t\n\twhile (i < text_length) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i != 0 && i != text_length - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp9oi53twj.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9oi53twj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint text_length = text.length;\n\tif (text_length > 2)\n\t{\n\t\tfor (int i = 1; i < text_length - 1; i++)\n\t\t{\n\t\t\tif (text[i] == 'z')\n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpi02izq8k.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi02izq8k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint pos = text.find(\"z\");\n\tif (pos == 0 || pos == text.length - 1)\n\t\treturn false;\n\treturn true;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp9e95mg6r.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9e95mg6r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tfor (int i = 1; i < text_length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmplx2cvuem.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplx2cvuem.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = text.length;\n\t\n\twhile (i < j) \n\t{\n\t\tif (text[i] == 'z') \n\t\t{\n\t\t\tif (i > 0 && i < j - 1) \n\t\t\t{\n\t\t\t\tresult = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp2q0lcgtq.d(12): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2q0lcgtq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_len = text.length;\n\tint i = 0;\n\tbool found = false;\n\t\n\tif (text_len == 0)\n\t\treturn false;\n\t\n\twhile (i < text_len)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == 0 || i == text_len - 1)\n\t\t\t{\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp9lx1jhew.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lx1jhew.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile (i < j)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (found)\n\t{\n\t\twhile (j > i)\n\t\t{\n\t\t\tif (text[j] == 'z')\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpti6fewns.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti6fewns.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tauto text_length = text.length;\n\tif (text_length < 3)\n\t\treturn false;\n\t\n\tfor (size_t i = 1; i < text_length - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t\treturn true;\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\", 1, text.length - 1);\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp5f0amgks.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5f0amgks.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") != text.length - 1 && text.find(\"z\") != 0;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmp4n71rulp.d(10): Error: no property `find` for type `string`\n/tmp/tmp4n71rulp.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n71rulp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found = false;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp8t3mnq5m.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t3mnq5m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\t\n\tforeach(char c; text)\n\t{\n\t\tif(c == 'z')\n\t\t{\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn result;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbc3dq6r4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427d7d]\n??:? void tmpbc3dq6r4.__unittest_L23_C1() [0x427ac1]\n??:? void tmpbc3dq6r4.__modtest() [0x427b00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baa3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a936]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fac9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]\n??:? runModuleUnitTests [0x42b879]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281cc]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tbool result = false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint x\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmpw4s6mz2k.d(79): Error: semicolon expected, not `unittest`\n/tmp/tmpw4s6mz2k.d(79): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4s6mz2k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i;\n\tint len = text.length;\n\tbool found = false;\n\t\n\tfor (i = 1; i < len - 1; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmp8t3mnq5m.d(11): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8t3mnq5m.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.canFind(\"z\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1665517609,
      "stdout": "",
      "stderr": "/tmp/tmpf001hz8o.d(10): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf001hz8o.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint i = 0;\n\tint j = text.length - 1;\n\tbool found = false;\n\twhile(i < j)\n\t{\n\t\tif(text[i] == 'z')\n\t\t{\n\t\t\tfound = true;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif(found)\n\t{\n\t\twhile(j > i)\n\t\t{\n\t\t\tif(text[j] == 'z')\n\t\t\t{\n\t\t\t\tfound = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj--;\n\t\t}\n\t}\n\treturn found;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpxdvzbnf4.d(11): Error: cannot implicitly convert expression `text.length - 1LU` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdvzbnf4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint text_length = text.length;\n\tint i = 0;\n\tint z_count = 0;\n\tbool z_found = false;\n\twhile (i < text_length)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tz_found = true;\n\t\t\tz_count++;\n\t\t}\n\t\ti++;\n\t}\n\tif (z_found && z_count > 1)\n\t{\n\t\treturn true;\n\t}\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmp5dubm981.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5dubm981.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.find(\"z\") > 0 && text.find(\"z\") < text.length - 1;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "/tmp/tmpramsv3h8.d(10): Error: no property `find` for type `string`\n/tmp/tmpramsv3h8.d(10): Error: no property `find` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpramsv3h8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\tint len = text.length;\n\t\n\tif (len < 3) return false;\n\t\n\tint start = 0;\n\tint end = len - 1;\n\t\n\tfor (int i = 0; i < len; i++)\n\t{\n\t\tif (text[i] == 'z')\n\t\t{\n\t\t\tif (i == start || i == end)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "/tmp/tmpj86ww0l1.d(10): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj86ww0l1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\n*/\nbool text_match_wordz_middle(string text) \n{\n\treturn text.match(\"/z/\");\n}\nunittest\n{\n    alias candidate = text_match_wordz_middle;\n\n    assert(candidate(\"pythonzabc.\") == true);\n    assert(candidate(\"zxyabc.\") == false);\n    assert(candidate(\"  lang  .\") == false);\n}\nvoid main(){}",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "/tmp/tmptqblihx9.d(10): Error: no property `match` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptqblihx9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}