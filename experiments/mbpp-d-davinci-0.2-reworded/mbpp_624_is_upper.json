{
  "name": "mbpp_624_is_upper",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a dthon function to convert a given string to uppercase.\n\t\n*/\nstring is_upper(string string) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_upper;\n\n    assert(candidate(\"person\") == \"PERSON\");\n    assert(candidate(\"final\") == \"FINAL\");\n    assert(candidate(\"Valid\") == \"VALID\");\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\treturn to!string(toUpper(string));\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t\tresult ~= c.toUpper;\n\t\telse\n\t\t\tresult ~= c;\n\t}\n\treturn result;\n}",
    "{\n\treturn to!string(toUpper(string));\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\tstring upper = \"\";\n\tforeach(c; string) \n\t{\n\t\tupper ~= to!string(c).toUpper();\n\t}\n\treturn upper;\n}",
    "{\n\tstring result;\n\tforeach(char c; string)\n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tresult ~= to!string(c).toUpper();\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\treturn to!string(toUpper(string));\n}",
    "{\n\tstring upper_string = \"\";\n\tforeach(char c; string) \n\t{\n\t\tupper_string ~= toUpper(c);\n\t}\n\treturn upper_string;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(c; string)\n\t{\n\t\tif(c.isLower)\n\t\t{\n\t\t\tresult ~= c.toUpper;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult ~= c;\n\t\t}\n\t}\n\treturn result;\n}",
    "{\n\tstring result = \"\";\n\tforeach(char c; string)\n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\treturn to!string(toUpper(string));\n}",
    "{\n\treturn to!string(map!(toUpper)(string));\n}",
    "{\n\treturn to!string(toUpper(string));\n}",
    "{\n\tstring result;\n\tforeach (c; string) \n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}",
    "{\n\tstring result;\n\tforeach(c; string)\n\t{\n\t\tresult ~= toUpper(c);\n\t}\n\treturn result;\n}"
  ]
}