{
  "name": "mbpp_598_armstrong_number",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.toString().length;\n\tlong sum = 0;\n\tforeach(digit; number.toString())\n\t{\n\t\tsum += pow(digit.to!long, length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpcfnypfnf.d(10): Error: no property `toString` for type `long`\n/tmp/tmpcfnypfnf.d(12): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcfnypfnf.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint len = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; to!string(number))\n\t{\n\t\tsum += pow(to!int(digit), len);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpyq2eky1r.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpyq2eky1r.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq2eky1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpteg8n_f9.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteg8n_f9.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp1dz1xt3p.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1dz1xt3p.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp2gm1vor_.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gm1vor_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\t// convert number to string\n\tstring str = to!string(number);\n\t\n\t// calculate the power\n\tint power = str.length;\n\t\n\t// initialize sum\n\tlong sum = 0;\n\t\n\t// loop through all digits\n\tforeach (digit; str) \n\t{\n\t\t// add to sum\n\t\tsum += pow(to!int(digit), power);\n\t}\n\t\n\t// check if number is equal to sum\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpgvxmkquh.d(11): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpgvxmkquh.d(14): Error: cannot implicitly convert expression `str.length` of type `ulong` to `int`\n/tmp/tmpgvxmkquh.d(23): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgvxmkquh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\tint remainder = 0;\n\twhile (temp != 0) \n\t{\n\t\tremainder = temp % 10;\n\t\tsum = sum + pow(remainder, 3);\n\t\ttemp = temp / 10;\n\t}\n\tif (sum == number)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpuf6d8wtn.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuf6d8wtn.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.stringof.length;\n\tint sum = 0;\n\tforeach(d; number.stringof)\n\t{\n\t\tsum += pow(d.to!int, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp2fhnwlaa.d(14): Error: no property `to` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2fhnwlaa.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.toString().length;\n\tlong sum = 0;\n\tforeach(digit; number.toString())\n\t{\n\t\tsum += pow(digit.to!int, length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmplj8ed6vp.d(10): Error: no property `toString` for type `long`\n/tmp/tmplj8ed6vp.d(12): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj8ed6vp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpii0c7r3g.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpii0c7r3g.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong temp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tlong remainder = temp % 10;\n\t\tsum += pow(remainder, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpw716pqma.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw716pqma.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp) {\n\t\t++digits;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmp9s40mfqd.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9s40mfqd.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpfgje6qcz.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfgje6qcz.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\t// get the number of digits\n\tint digits = log10(number) + 1;\n\t\n\t// get the sum of the digits\n\tlong sum = 0;\n\tforeach(digit; digits(number))\n\t{\n\t\tsum += pow(digit, digits);\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpwfefi2vg.d(11): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\n/tmp/tmpwfefi2vg.d(15): Error: function expected before `()`, not `digits` of type `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwfefi2vg.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpbdrnokl3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdrnokl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpoxmscbzq.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoxmscbzq.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpjzd4wn1k.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\n/tmp/tmpjzd4wn1k.d(12): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzd4wn1k.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.length;\n\tint sum = 0;\n\tforeach(digit; number.toString)\n\t{\n\t\tsum += pow(digit.to!int, length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpeuwk9xu3.d(10): Error: no property `length` for type `long`\n/tmp/tmpeuwk9xu3.d(12): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeuwk9xu3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tforeach(digit; number)\n\t{\n\t\tsum += pow(digit, digits);\n\t\tnumber /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpazhvddpp.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\n/tmp/tmpazhvddpp.d(12): Error: invalid `foreach` aggregate `number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazhvddpp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tlength++;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpb2osjnmh.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2osjnmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tint sum = 0;\n\tforeach(digit; number.toString)\n\t{\n\t\tsum += pow(digit.to!int, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpalf_pr6a.d(10): Error: no property `length` for type `long`\n/tmp/tmpalf_pr6a.d(12): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpalf_pr6a.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp1qq1x9vy.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1qq1x9vy.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint number_of_digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnumber_of_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, number_of_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = number.toString().map!(a => a.to!int).array;\n\tauto sum = digits.map!(a => a ^^ digits.length).sum;\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpv07a5c5n.d(10): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv07a5c5n.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpbdrnokl3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdrnokl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tlength++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint len = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; to!string(number))\n\t{\n\t\tsum += pow(to!int(digit), len);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpyq2eky1r.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpyq2eky1r.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq2eky1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.stringof.length;\n\tint sum = 0;\n\tforeach(digit; number.stringof)\n\t{\n\t\tsum += pow(to!int(digit), length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp9lxowj0b.d(14): Error: template instance `to!int` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9lxowj0b.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpu2fyi192.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu2fyi192.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmp2gm1vor_.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gm1vor_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tlong digit = temp % 10;\n\t\tsum += pow(digit, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\t\n\tforeach(digit; number.digits)\n\t{\n\t\tsum += pow(digit, number.digits.length);\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp2ytaegf3.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ytaegf3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = to!string(number);\n\tauto sum = 0;\n\tforeach(digit; digits)\n\t{\n\t\tsum += pow(to!int(digit), digits.length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmplh3ytdmp.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplh3ytdmp.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpzooz7h0_.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzooz7h0_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = (int)log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmptpk0zvfj.d(10): Error: C style cast illegal, use `cast(int)log10(number)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptpk0zvfj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tint last_digit = temp % 10;\n\t\tsum += last_digit * last_digit * last_digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpkungab9i.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkungab9i.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile(temp) \n\t{\n\t\tnum_digits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong temp = number;\n\tlong sum = 0;\n\tint digits = 0;\n\t\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\t\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint number_of_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tnumber_of_digits++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, number_of_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tforeach(digit; number) \n\t{\n\t\tsum += pow(digit % 10, digits);\n\t\tnumber /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpx4nhakro.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\n/tmp/tmpx4nhakro.d(12): Error: invalid `foreach` aggregate `number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx4nhakro.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; number.digits)\n\t{\n\t\tsum += pow(digit, length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpxlgxnpyc.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpxlgxnpyc.d(12): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlgxnpyc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\t++num_digits;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpb2osjnmh.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2osjnmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tlength++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpbsi4mni3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbsi4mni3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += digit * digit * digit;\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpqg9h25d1.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqg9h25d1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; to!string(number))\n\t{\n\t\tsum += pow(to!int(digit), length);\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpx66xa3dt.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpx66xa3dt.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx66xa3dt.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tauto digits = number.toString().length;\n\tauto sum = 0;\n\t\n\tforeach(digit; number.toString())\n\t{\n\t\tsum += pow(digit.to!long, digits);\n\t}\n\t\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp3hue76tx.d(10): Error: no property `toString` for type `long`\n/tmp/tmp3hue76tx.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3hue76tx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tint remainder = temp % 10;\n\t\tsum += pow(remainder, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpiv1ycr7l.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiv1ycr7l.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tlength++;\n\t\ttemp /= 10;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, length);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpbdrnokl3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdrnokl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpbss_2ki3.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbss_2ki3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpl5o24eo6.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5o24eo6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = (int)log10(number) + 1;\n\tlong sum = 0;\n\t\n\tforeach(digit; number)\n\t{\n\t\tsum += pow(digit, num_digits);\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp27n23gkj.d(10): Error: C style cast illegal, use `cast(int)log10(number)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp27n23gkj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint len = to!string(number).length;\n\tlong sum = 0;\n\tforeach(digit; to!string(number))\n\t{\n\t\tsum += pow(to!int(digit), len);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpyq2eky1r.d(10): Error: template instance `to!string` template `to` is not defined, did you mean No?\n/tmp/tmpyq2eky1r.d(12): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyq2eky1r.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint[] digits = to!(int[])(number.toString());\n\tint sum = 0;\n\tforeach(digit; digits)\n\t{\n\t\tsum += pow(digit, digits.length);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp67lcsp6u.d(10): Error: template instance `to!(int[])` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp67lcsp6u.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tlong digit = temp % 10;\n\t\tsum += pow(digit, num_digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tint last_digit = temp % 10;\n\t\tsum += last_digit * last_digit * last_digit;\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp6rvjcua3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6rvjcua3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint length = number.toString().length;\n\tint sum = 0;\n\t\n\tforeach(digit; number.toString())\n\t{\n\t\tsum += pow(to!int(digit), length);\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp796egvl6.d(10): Error: no property `toString` for type `long`\n/tmp/tmp796egvl6.d(13): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp796egvl6.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpb2osjnmh.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2osjnmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpb2osjnmh.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb2osjnmh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tint digit = temp % 10;\n\t\tsum += pow(digit, digits);\n\t\ttemp /= 10;\n\t}\n\treturn (sum == number);\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpa_9q8d_e.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_9q8d_e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn (number == sum);\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpu96honhb.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu96honhb.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\t\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tint sum = 0;\n\tforeach(digit; number.toString())\n\t{\n\t\tsum += pow(digit.to!int, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp3x8c92fj.d(10): Error: no property `length` for type `long`\n/tmp/tmp3x8c92fj.d(12): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3x8c92fj.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tlong sum = 0;\n\tforeach(digit; number)\n\t{\n\t\tsum += pow(digit, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp2238mxx_.d(10): Error: no property `length` for type `long`\n/tmp/tmp2238mxx_.d(12): Error: invalid `foreach` aggregate `number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2238mxx_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\tdigits++;\n\t\ttemp /= 10;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpbdrnokl3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdrnokl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tint sum = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpi8egfumx.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi8egfumx.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517550,
      "stdout": "",
      "stderr": "/tmp/tmpukdhjahc.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpukdhjahc.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "/tmp/tmpbdrnokl3.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbdrnokl3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint num_digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tnum_digits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, num_digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = log10(number) + 1;\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tint remainder = temp % 10;\n\t\tsum += pow(remainder, digits);\n\t\ttemp /= 10;\n\t}\n\treturn (number == sum);\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpdf0ejk1e.d(10): Error: cannot implicitly convert expression `log10(cast(real)number) + 1.00000L` of type `real` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdf0ejk1e.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tint sum = 0;\n\tforeach(digit; number)\n\t{\n\t\tsum += pow(digit, n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmp1ahvefd8.d(10): Error: no property `length` for type `long`\n/tmp/tmp1ahvefd8.d(12): Error: invalid `foreach` aggregate `number`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1ahvefd8.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0)\n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0)\n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp > 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp > 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile (temp != 0) {\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\ttemp = number;\n\tlong sum = 0;\n\twhile (temp != 0) {\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint sum = 0;\n\tint temp = number;\n\twhile(temp > 0)\n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn number == sum;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpve0_i_bh.d(11): Error: cannot implicitly convert expression `number` of type `long` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpve0_i_bh.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile (temp != 0) \n\t{\n\t\tsum += pow(temp % 10, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint digits = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\ttemp /= 10;\n\t\tdigits++;\n\t}\n\t\n\ttemp = number;\n\tlong sum = 0;\n\twhile(temp != 0) \n\t{\n\t\tsum += pow(temp % 10, digits);\n\t\ttemp /= 10;\n\t}\n\t\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tint n = number.length;\n\tint sum = 0;\n\tforeach(i; 0 .. n)\n\t{\n\t\tsum += pow(number[i], n);\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "/tmp/tmpfs8dwuy4.d(10): Error: no property `length` for type `long`\n/tmp/tmpfs8dwuy4.d(14): Error: only one index allowed to index `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfs8dwuy4.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to check whether the given number is armstrong or not.\n\t\n*/\nbool armstrong_number(long number) \n{\n\tlong sum = 0;\n\tlong temp = number;\n\twhile(temp != 0) \n\t{\n\t\tlong digit = temp % 10;\n\t\tsum += pow(digit, 3);\n\t\ttemp /= 10;\n\t}\n\treturn sum == number;\n}\nunittest\n{\n    alias candidate = armstrong_number;\n\n    assert(candidate(153L) == true);\n    assert(candidate(259L) == false);\n    assert(candidate(4458L) == false);\n}\nvoid main(){}",
      "timestamp": 1666123056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}