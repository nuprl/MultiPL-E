{
  "name": "mbpp_59_is_octagonal",
  "language": "d",
  "prompt": "import std.typecons;\nimport std.math;\n/*\n\n\tWrite a function to find the nth octagonal number.\n\t\n*/\nlong is_octagonal(long n) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = is_octagonal;\n\n    assert(candidate(5L) == 65L);\n    assert(candidate(10L) == 280L);\n    assert(candidate(15L) == 645L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "completions": [
    "{\n\tlong a = (long)sqrt(n);\n\tif (a*a == n) {\n\t\tif ((1 + sqrt(1 + 24*a))/6 == (int)(1 + sqrt(1 + 24*a))/6) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\tif(a*a == n)\n\t\treturn a;\n\treturn 0;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a*a == n && (a & 1) == 1;\n}",
    "{\n\tlong a = (long) sqrt(n);\n\treturn a*a == n && (a % 3 == 2);\n}",
    "{\n\tlong i = 1;\n\twhile (i * (3 * i - 2) < n) \n\t{\n\t\ti++;\n\t}\n\treturn i * (3 * i - 2) == n;\n}",
    "{\n\tlong x = (sqrt(1 + 24 * n) + 1) / 6;\n\treturn x * (3 * x - 2) == n;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn (a*a == n && (a&1) == 1);\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn (a*a == n && (a & 3) == 3);\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a * a == n && (a & 3) == 1;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a*a == n && (a & 1) == 1;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a*a == n && (a & 3) == 3;\n}",
    "{\n\tlong a = (long) sqrt(n);\n\treturn a * a == n && (a & 3) == 3;\n}",
    "{\n\tlong a = (long) (1 + sqrt(1 + 24 * n)) / 6;\n\treturn a * (3 * a - 2) == n;\n}",
    "{\n\tlong a = (long) (sqrt(1 + 24 * n) + 1) / 6;\n\treturn a * (3 * a - 2) == n;\n}",
    "{\n\tlong x = (sqrt(1 + 24 * n) + 1) / 6;\n\treturn x * (3 * x - 2) == n;\n}",
    "{\n\tlong m = (long)sqrt(n);\n\treturn m * m == n && (m % 3 == 2);\n}",
    "{\n\tlong a = (long) sqrt(n);\n\treturn a*a == n && (a & 3) == 3;\n}",
    "{\n\tlong a = (long)sqrt(n);\n\treturn a*a == n && (a & 1) == 1;\n}",
    "{\n\tlong m = (long)sqrt(n);\n\treturn (m*m == n) && (m % 3 == 2);\n}",
    "{\n\tlong t = (long)sqrt(n);\n\treturn t*(3*t-2) == n;\n}"
  ]
}