{
  "name": "mbpp_802_count_rotation",
  "language": "d",
  "prompt": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "reworded",
  "tests": "unittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
  "stop_tokens": [
    "\n\n",
    "\nvoid",
    "\nbool",
    "\nint"
  ],
  "results": [
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (arr[i] < min)\n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp6tc5jzps.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp6tc5jzps.__unittest_L22_C1() [0x427dfb]\n??:? void tmp6tc5jzps.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong prev = 0;\n\tlong next = 0;\n\twhile (low <= high) \n\t{ \n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low; \n\t\tmid = (low + high) / 2; \n\t\tnext = (mid + 1) % n; \n\t\tprev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid; \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6e26r0r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpc6e26r0r.__unittest_L22_C1() [0x427dfb]\n??:? void tmpc6e26r0r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low)/2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] > arr[next] && arr[next] < arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] > arr[low]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpbt56qf43.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmpbt56qf43.__unittest_L35_C1() [0x427f13]\n??:? void tmpbt56qf43.__modtest() [0x42807c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c35b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430381]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43030d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]\n??:? runModuleUnitTests [0x42c131]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < arr.length; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppz9cq7ve.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281dd]\n??:? void tmppz9cq7ve.__unittest_L21_C1() [0x427df7]\n??:? void tmppz9cq7ve.__modtest() [0x427f60]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c23b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430261]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430710]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0a5]\n??:? runModuleUnitTests [0x42c011]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong count = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n - 1; i++) \n\t{\n\t\tif (arr[i] > arr[i + 1]) \n\t\t{\n\t\t\tcount = i + 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tlong n = arr.length;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp902nvm9e.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp902nvm9e.__unittest_L22_C1() [0x427dff]\n??:? void tmp902nvm9e.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length;\n\tlong low = 0, high = n - 1; \n\tlong result = 0; \n\twhile (low <= high) { \n\t\tif (arr[low] <= arr[high]) { \n\t\t\tresult = low; \n\t\t\tbreak; \n\t\t} \n\t\tlong mid = (low + high) / 2; \n\t\tlong next = (mid + 1) % n; \n\t\tlong prev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) { \n\t\t\tresult = mid; \n\t\t\tbreak; \n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn result; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n, prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp09pccvp8.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp09pccvp8.__unittest_L18_C1() [0x427dff]\n??:? void tmp09pccvp8.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low)/2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n    long n = arr.length;\n    long low = 0;\n    long high = n - 1;\n    while (low <= high) \n    {\n        if (arr[low] <= arr[high])\n            return low;\n        long mid = (low + high) / 2;\n        long next = (mid + 1) % n;\n        long prev = (mid + n - 1) % n;\n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n            return mid;\n        else if (arr[mid] <= arr[high])\n            high = mid - 1;\n        else if (arr[mid] >= arr[low])\n            low = mid + 1;\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8j4emejy.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp8j4emejy.__unittest_L22_C1() [0x427dfb]\n??:? void tmp8j4emejy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong count = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp620_xcau.d(17): Error: variable `mid` is shadowing variable `tmp620_xcau.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp620_xcau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp8j4emejy.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp8j4emejy.__unittest_L22_C1() [0x427dfb]\n??:? void tmp8j4emejy.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % arr.length;\n\t\tlong prev = (mid + arr.length - 1) % arr.length;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmpc81gw0g3.d(16): Error: variable `mid` is shadowing variable `tmpc81gw0g3.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc81gw0g3.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong i = 0;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (i = 0; i < n; i++) \n\t{\n\t\tif (min > arr[i]) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpni6n1ix_.d(27): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpni6n1ix_.__unittest_L23_C1() [0x427dff]\n??:? void tmpni6n1ix_.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong result = 0; \n\twhile (low <= high) { \n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low; \n\t\tlong mid = (low + high) / 2; \n\t\tlong next = (mid + 1) % n; \n\t\tlong prev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid; \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp90insfg_.d(17): Error: variable `mid` is shadowing variable `tmp90insfg_.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90insfg_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong min = arr[0]; \n\tlong min_index = -1; \n\tfor (long i = 0; i < arr.length; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwedc7b03.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpwedc7b03.__unittest_L21_C1() [0x427dff]\n??:? void tmpwedc7b03.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\t\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\t\t\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\t\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\t\n\t\tlong next = (low + 1) % n;\n\t\tlong prev = (high + n - 1) % n;\n\t\t\n\t\tif(arr[low] <= arr[mid]) \n\t\t{\n\t\t\tif(arr[mid] <= arr[high])\n\t\t\t\treturn mid;\n\t\t\telse\n\t\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tif(arr[mid] <= arr[high])\n\t\t\t\thigh = mid - 1;\n\t\t\telse if(arr[low] <= arr[prev])\n\t\t\t\thigh = prev;\n\t\t\telse if(arr[next] <= arr[high])\n\t\t\t\tlow = next;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min_index = 0;\n\tlong min_value = arr[0];\n\tlong i = 0;\n\twhile (i < n) \n\t{\n\t\tif (arr[i] < min_value) \n\t\t{\n\t\t\tmin_value = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpohq0d__i.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpohq0d__i.__unittest_L24_C1() [0x427e03]\n??:? void tmpohq0d__i.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong low = 0, high = n - 1; \n\tlong result = 0; \n\twhile (low <= high) \n\t{ \n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low; \n\t\tlong mid = (low + high) / 2; \n\t\tlong next = (mid + 1) % n; \n\t\tlong prev = (mid + n - 1) % n; \n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid; \n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1; \n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1; \n\t} \n\treturn -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[next] <= arr[high]) \n\t\t{\n\t\t\thigh = next - 1;\n\t\t}\n\t\telse if (arr[prev] >= arr[next]) \n\t\t{\n\t\t\tlow = next + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjtm8tc_r.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x42834d]\n??:? void tmpjtm8tc_r.__unittest_L36_C1() [0x427f67]\n??:? void tmpjtm8tc_r.__modtest() [0x4280d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3ab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b23e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303d1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430880]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43035d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b215]\n??:? runModuleUnitTests [0x42c181]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428810]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp620_xcau.d(17): Error: variable `mid` is shadowing variable `tmp620_xcau.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp620_xcau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp620_xcau.d(17): Error: variable `mid` is shadowing variable `tmp620_xcau.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp620_xcau.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\tlong next = 0;\n\tlong prev = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tnext = (mid + 1) % n;\n\t\tprev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaswngmng.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpaswngmng.__unittest_L19_C1() [0x427e03]\n??:? void tmpaswngmng.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp09pccvp8.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp09pccvp8.__unittest_L18_C1() [0x427dff]\n??:? void tmp09pccvp8.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n    long low = 0;\n    long high = arr.length - 1;\n    long mid = 0;\n    while (low <= high) \n    {\n        if (arr[low] <= arr[high]) \n        {\n            return low;\n        }\n        long next = (low + high) / 2;\n        long prev = (low + high + arr.length) / 2;\n        if (arr[prev] > arr[next]) \n        {\n            return next;\n        }\n        if (arr[mid] < arr[low]) \n        {\n            high = mid - 1;\n        } \n        else \n        {\n            low = mid + 1;\n        }\n    }\n    return -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmp699715te.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x428356]\n??:? long tmp699715te.count_rotation(long[]) [0x427db0]\n??:? void tmp699715te.__unittest_L35_C1() [0x427ea9]\n??:? void tmp699715te.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c303]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b196]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430329]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b16d]\n??:? runModuleUnitTests [0x42c0d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + next - 1) % n;\n\t\tif(arr[next] <= arr[prev])\n\t\t\treturn next;\n\t\tif(arr[low] <= arr[next])\n\t\t\tlow = next + 1;\n\t\telse\n\t\t\thigh = next - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp56pvt0af.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmp56pvt0af.__unittest_L28_C1() [0x42801e]\n??:? void tmp56pvt0af.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "/tmp/tmp90insfg_.d(17): Error: variable `mid` is shadowing variable `tmp90insfg_.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90insfg_.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp09pccvp8.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp09pccvp8.__unittest_L18_C1() [0x427dff]\n??:? void tmp09pccvp8.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n, prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high]) \n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low]) \n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123995,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong min = arr[0], min_index = -1; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpba8fs853.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpba8fs853.__unittest_L21_C1() [0x427e03]\n??:? void tmpba8fs853.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong result = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "/tmp/tmp6do675v1.d(17): Error: variable `mid` is shadowing variable `tmp6do675v1.count_rotation.mid`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6do675v1.d\", \"-I/tmp\"]\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n\tlong n = arr.length; \n\tlong min = arr[0], min_index = -1; \n\tfor (long i = 0; i < n; i++) \n\t{ \n\t\tif (min > arr[i]) \n\t\t{ \n\t\t\tmin = arr[i]; \n\t\t\tmin_index = i; \n\t\t} \n\t} \n\treturn min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpba8fs853.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmpba8fs853.__unittest_L21_C1() [0x427e03]\n??:? void tmpba8fs853.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong low = 0;\n\tlong high = arr.length - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (low + high + arr.length) / 2;\n\t\tif (arr[prev] >= arr[mid] && arr[mid] <= arr[next]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.RangeError@/tmp/tmpk8x9k9ij.d(20): Range violation\n----------------\n??:? _d_arrayboundsp [0x4283f6]\n??:? long tmpk8x9k9ij.count_rotation(long[]) [0x427db0]\n??:? void tmpk8x9k9ij.__unittest_L35_C1() [0x427f45]\n??:? void tmpk8x9k9ij.__modtest() [0x4280c4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b236]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430878]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430355]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b20d]\n??:? runModuleUnitTests [0x42c179]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++)\n\t{\n\t\tif (min > arr[i])\n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpwhqzldf4.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpwhqzldf4.__unittest_L22_C1() [0x427dfb]\n??:? void tmpwhqzldf4.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high)/2;\n\t\tlong next = (mid + 1)%n;\n\t\tlong prev = (mid + n - 1)%n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high])\n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low])\n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n, prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] > arr[next] && arr[next] < arr[high])\n\t\t\treturn next;\n\t\tif (arr[low] <= arr[next])\n\t\t\tlow = next + 1;\n\t\telse\n\t\t\thigh = next - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmphvp00yoi.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4282fd]\n??:? void tmphvp00yoi.__unittest_L28_C1() [0x427f13]\n??:? void tmphvp00yoi.__modtest() [0x42807c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c35b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430381]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430830]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43030d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1c5]\n??:? runModuleUnitTests [0x42c131]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    while (low <= high) { \n        if (arr[low] <= arr[high]) \n            return low; \n        long mid = (low + high) / 2; \n        long next = (mid + 1) % n, prev = (mid + n - 1) % n; \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n            return mid; \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n    return -1; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] >= arr[next] && arr[next] <= arr[high])\n\t\t\thigh = next;\n\t\telse\n\t\t\tlow = next + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmplescq1ra.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x42829d]\n??:? void tmplescq1ra.__unittest_L26_C1() [0x427eb7]\n??:? void tmplescq1ra.__modtest() [0x428020]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b18e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430321]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307d0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b165]\n??:? runModuleUnitTests [0x42c0d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428760]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpjvd8vflm.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpjvd8vflm.__unittest_L20_C1() [0x427dff]\n??:? void tmpjvd8vflm.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid;\n\twhile(low <= high)\n\t{\n\t\tif(arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if(arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if(arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n-1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long low = 0, high = n - 1; \n    long result = 0; \n  \n    // iterate till search space contains at-least one element \n    while (low <= high) { \n        // if the search space is already sorted, we are done \n        if (arr[low] <= arr[high]) { \n            result = low; \n            break; \n        } \n  \n        // Find mid \n        long mid = (low + high) / 2; \n  \n        // next and prev to mid \n        long next = (mid + 1) % n; \n        long prev = (mid + n - 1) % n; \n  \n        // if mid is less than both next and prev \n        // then mid is the minimum element \n        if (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) { \n            result = mid; \n            break; \n        } \n  \n        // if arr[mid..high] is sorted and mid is not the minimum element \n        else if (arr[mid] <= arr[high]) \n            high = mid - 1; \n  \n        // if arr[low..mid] is sorted and mid is not the minimum element \n        else if (arr[mid] >= arr[low]) \n            low = mid + 1; \n    } \n  \n    return result; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0]; \n    long min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmppdncwvut.d(23): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmppdncwvut.__unittest_L19_C1() [0x427dff]\n??:? void tmppdncwvut.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high)\n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long n = arr.length; \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < n; i++) \n    { \n        if (min > arr[i]) \n        { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp41t74c8e.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x4281ed]\n??:? void tmp41t74c8e.__unittest_L21_C1() [0x427e03]\n??:? void tmp41t74c8e.__modtest() [0x427f6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c24b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430271]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0b5]\n??:? runModuleUnitTests [0x42c021]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286b0]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6e26r0r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpc6e26r0r.__unittest_L22_C1() [0x427dfb]\n??:? void tmpc6e26r0r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (n + mid - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\t\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\t\n\t\tlong next = (low + 1) % n;\n\t\tlong prev = (high + n - 1) % n;\n\t\t\n\t\tmid = (low + high) / 2;\n\t\t\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\t\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpeh0g3dba.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428365]\n??:? void tmpeh0g3dba.__unittest_L42_C1() [0x4280d2]\n??:? void tmpeh0g3dba.__modtest() [0x4280e8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c3c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b256]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4303e9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430898]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430375]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]\n??:? runModuleUnitTests [0x42c199]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428828]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong min = arr[0];\n\tlong min_index = 0;\n\tfor (long i = 0; i < n; i++) \n\t{\n\t\tif (arr[i] < min) \n\t\t{\n\t\t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t}\n\t}\n\treturn min_index;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517162,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpc6e26r0r.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmpc6e26r0r.__unittest_L22_C1() [0x427dfb]\n??:? void tmpc6e26r0r.__modtest() [0x427f64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[next] <= arr[prev])\n\t\t\treturn next;\n\t\tif (arr[next] <= arr[high])\n\t\t\thigh = next - 1;\n\t\telse if (arr[next] >= arr[low])\n\t\t\tlow = next + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmpaxsksp75.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x428305]\n??:? void tmpaxsksp75.__unittest_L28_C1() [0x428072]\n??:? void tmpaxsksp75.__modtest() [0x428088]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c363]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430389]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430838]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430315]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1cd]\n??:? runModuleUnitTests [0x42c139]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4287c8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t} \n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t} \n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile(low <= high) \n\t{\n\t\tif(arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif(arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if(arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if(arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[prev] > arr[next] && arr[next] < arr[high]) \n\t\t{\n\t\t\treturn next;\n\t\t}\n\t\telse if (arr[low] <= arr[mid]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t\telse \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{ \n    long min = arr[0], min_index = -1; \n    for (long i = 0; i < arr.length; i++) { \n        if (min > arr[i]) { \n            min = arr[i]; \n            min_index = i; \n        } \n    } \n    return min_index; \n} \nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp09pccvp8.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4281e5]\n??:? void tmp09pccvp8.__unittest_L18_C1() [0x427dff]\n??:? void tmp09pccvp8.__modtest() [0x427f68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c243]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0d6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430269]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0ad]\n??:? runModuleUnitTests [0x42c019]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286a8]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0, high = n - 1;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong mid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tmid = low + (high - low) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev])\n\t\t\treturn mid;\n\t\telse if (arr[mid] <= arr[high])\n\t\t\thigh = mid - 1;\n\t\telse if (arr[mid] >= arr[low])\n\t\t\tlow = mid + 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high]) \n\t\t{\n\t\t\treturn low;\n\t\t}\n\t\tmid = (low + high) / 2;\n\t\tlong next = (mid + 1) % n;\n\t\tlong prev = (mid + n - 1) % n;\n\t\tif (arr[mid] <= arr[next] && arr[mid] <= arr[prev]) \n\t\t{\n\t\t\treturn mid;\n\t\t}\n\t\telse if (arr[mid] <= arr[high]) \n\t\t{\n\t\t\thigh = mid - 1;\n\t\t}\n\t\telse if (arr[mid] >= arr[low]) \n\t\t{\n\t\t\tlow = mid + 1;\n\t\t}\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1665517177,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import std.math;\n/*\n\n\tWrite a dthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\n*/\nlong count_rotation(long[] arr) \n{\n\tlong n = arr.length;\n\tlong low = 0;\n\tlong high = n - 1;\n\tlong mid = 0;\n\twhile (low <= high) \n\t{\n\t\tif (arr[low] <= arr[high])\n\t\t\treturn low;\n\t\tlong next = (low + high) / 2;\n\t\tlong prev = (next + n - 1) % n;\n\t\tif (arr[next] <= arr[prev])\n\t\t\treturn next;\n\t\tif (arr[low] <= arr[next])\n\t\t\tlow = next + 1;\n\t\telse\n\t\t\thigh = next - 1;\n\t}\n\treturn -1;\n}\nunittest\n{\n    alias candidate = count_rotation;\n\n    assert(candidate([3L, 2L, 1L]) == 1L);\n    assert(candidate([4L, 5L, 1L, 2L, 3L]) == 2L);\n    assert(candidate([7L, 8L, 9L, 1L, 2L, 3L]) == 3L);\n    assert(candidate([1L, 2L, 3L]) == 0L);\n    assert(candidate([1L, 3L, 2L]) == 2L);\n}\nvoid main(){}",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "core.exception.AssertError@/tmp/tmp40hzuyjs.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x4282b5]\n??:? void tmp40hzuyjs.__unittest_L28_C1() [0x42801e]\n??:? void tmp40hzuyjs.__modtest() [0x428034]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c313]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b1a6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430339]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307e8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4302c5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]\n??:? runModuleUnitTests [0x42c0e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428778]\n??:? void rt.dmain2._d_r",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}