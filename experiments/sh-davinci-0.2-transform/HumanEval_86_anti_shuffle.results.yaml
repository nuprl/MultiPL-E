language: sh
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local\
    \ -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i space\n    local -i ascii_value\n\
    \    local -i word_length\n    local -i word_index\n    local -i word_count\n\
    \    local -i char_index\n    local -i char_count\n    local -i char_ascii_value\n\
    \    local -i char_ascii_value_index\n    local -i char_ascii_value_count\n  \
    \  local -i char_ascii_value_count_index\n    local -i char_ascii_value_count_count\n\
    \    local -i char_ascii_value_count_count_index\n    local -i char_ascii_value_count_count_count\n\
    \    local -i char_ascii_value_count_count_count_index\n    local -i char_ascii_value_count_count_count_count\n\
    \    local -i char_ascii_value_count_count_count_count_index\n    local -i char_ascii_value_count_count_count_count_count\n\
    \    local -i char_ascii_value_count_count_count_count_count_index\n    local\
    \ -i char_ascii_value_count_count_count_count_count_count\n    local -i char_ascii_value_count_count_count_count_count_count_index\n\
    \    local -i char_ascii_value_count_count_count_count_count_count_count\n   \
    \ local -i char_ascii_value_count_count_count_count_count_count_count_index\n\
    \    local -i char_ascii_value_count\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local space=0\n\
    \    local exclamation=0\n    local question=0\n    local period=0\n    local\
    \ comma=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local quote=0\n    local left_paren=0\n    local right_paren=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local less_than=0\n    local greater_than=0\n  \
    \  local at=0\n    local backslash=0\n    local caret=0\n    local underscore=0\n\
    \    local backtick=0\n    local tilde=0\n    local hash=0\n    local dollar=0\n\
    \    local percent=0\n    local ampersand=0\n    local asterisk=0\n    local plus=0\n\
    \    local equal=0\n    local pipe=0\n    local backspace=0\n    local tab=0\n\
    \    local newline=0\n    local carriage_return=0\n    local form_feed=0\n   \
    \ local vertical_tab=0\n    local null=0\n    local other=0\n    local length=${#string}\n\
    \    local char_array=()\n    local char_array_length=0\n    local char_array_index=0\n\
    \    local char_array_index_2=0\n    local char_array_index_3=0\n    local char_array_index_4=0\n\
    \    local char_array_index_5=0\n    local char_array_index_6=0\n    local char_array\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local new_string=\"\"\n  local word=\"\
    \"\n  local char=\"\"\n  local ascii=\"\"\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local A=0\n\
    \  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local G=0\n\
    \  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local M=0\n\
    \  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local S=0\n\
    \  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local Y=0\n\
    \  local Z=0\n  local space=0\n  local exclamation=0\n  local question=0\n  local\
    \ period=0\n  local comma=0\n  local colon=0\n  local semicolon=0\n  local apostrophe=0\n\
    \  local dash=0\n \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local ret=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_str=${#str}\n    local ascii_val=0\n\
    \    local ascii_val_min=0\n    local ascii_val_min_idx=0\n    local ascii_val_min_char=\"\
    \"\n    local ascii_val_min_char_idx=0\n    local ascii_val_min_char_idx_tmp=0\n\
    \    local ascii_val_min_char_tmp=\"\"\n    local ascii_val_min_char_tmp_idx=0\n\
    \    local ascii_val_min_char_tmp_idx_tmp=0\n    local ascii_val_min_char_tmp_tmp=\"\
    \"\n    local ascii_val_min_char_tmp_tmp_idx=0\n    local ascii_val_min_char_tmp_tmp_idx_tmp=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp=\"\"\n    local ascii_val_min_char_tmp_tmp_tmp_idx=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_idx_tmp=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp=\"\
    \"\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_idx=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_idx_tmp=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp=\"\"\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_idx=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_idx_tmp=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_tmp=\"\
    \"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local -a words\n    local -a sorted_words\n\
    \    local -a result\n    local i\n    local j\n    local k\n    local word\n\
    \    local sorted_word\n    local result_str\n\n    IFS=' ' read -r -a words <<<\
    \ \"$str\"\n    for ((i = 0; i < ${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\
    \n        sorted_word=$(echo \"$word\" | grep -o . | sort | tr -d '\\n')\n   \
    \     sorted_words[$i]=\"$sorted_word\"\n    done\n\n    for ((i = 0; i < ${#words[@]};\
    \ i++)); do\n        word=\"${words[$i]}\"\n        sorted_word=\"${sorted_words[$i]}\"\
    \n        for ((j = 0; j < ${#word}; j++)); do\n            for ((k = 0; k < ${#sorted_word};\
    \ k++)); do\n                if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\"\
    \ ]]; then\n                    result[$i]=\"${result[$i]}${word:$j:1}\"\n   \
    \                 sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k + 1)):$((${#sorted_word}\
    \ - k - 1))}\"\n                    break\n                fi\n            done\n\
    \        done\n    done\n\n    result_str=\"${result[0]}\"\n    for ((i = 1; i\
    \ < ${#result[@]}; i++)); do\n        result_str=\"$result_str ${result[$i]}\"\
    \n    done\n\n    echo \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\
    \"\n    local char_list=\"\"\n    local char_ascii_list_sorted=\"\"\n    local\
    \ char_list_sorted=\"\"\n    local char_sorted=\"\"\n    local word_sorted=\"\"\
    \n    local word_sorted_list=\"\"\n    local word_sorted_list_joined=\"\"\n  \
    \  local word_sorted_list_joined_trimmed=\"\"\n    local word_sorted_list_joined_trimmed_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped=\"\"\n    local\
    \ word_sorted_list_joined_trimmed_replaced_escaped_replaced=\"\"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_trimmed_replaced_escaped_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced_replaced=\"\
    \"\n    local word_sorted_list_joined_\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local words=()\n    local word=\"\"\n\
    \    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local result=\"\
    \"\n    local char_array=()\n    local char_array_sorted=()\n    local char_array_sorted_str=\"\
    \"\n    local char_array_sorted_str_len=0\n    local char_array_sorted_str_len_minus_1=0\n\
    \    local char_array_sorted_str_len_minus_2=0\n    local char_array_sorted_str_len_minus_3=0\n\
    \    local char_array_sorted_str_len_minus_4=0\n    local char_array_sorted_str_len_minus_5=0\n\
    \    local char_array_sorted_str_len_minus_6=0\n    local char_array_sorted_str_len_minus_7=0\n\
    \    local char_array_sorted_str_len_minus_8=0\n    local char_array_sorted_str_len_minus_9=0\n\
    \    local char_array_sorted_str_len_minus_10=0\n    local char_array_sorted_str_len_minus_11=0\n\
    \    local char_array_sorted_str_len_minus_12=0\n    local char_array_sorted_str_len_minus_13=0\n\
    \    local char_array_sorted_str_len_minus_14=0\n    local char_array_sorted_str_len_minus_15=0\n\
    \    local char_array_sorted_str_len_minus_16=0\n    local char_array_sorted_str_len_minus_17=0\n\
    \    local char_array_s\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local -a word_chars\n  local -a words\n  local -a sorted_chars\n  local -a\
    \ sorted_words\n  local -a sorted_result\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i A=0\n  local -i B=0\n  local -i C=0\n  local -i D=0\n  local\
    \ -i E=0\n  local -i F=0\n  local -i G=0\n  local -i H=0\n  local -i I=0\n  local\
    \ -i J=0\n  local -i K=0\n  local -i L=0\n  local -i M=0\n  local -i N=0\n  local\
    \ -i O=0\n  local -i P=0\n  local -i Q=0\n  local -i R=0\n  local -i S=0\n  local\
    \ -i T=0\n  local -i U=0\n  local -i V=0\n  local -i W=0\n  local -i X=0\n  local\
    \ -i Y=0\n  local -i Z=0\n  local -i space=0\n  local -i exclamation=0\n  local\
    \ -i question=0\n  local -i period=0\n  local -i comma=0\n  local -i colon=0\n\
    \  local -i semicolon=0\n  local -i apostrophe=0\n  local -i dash=0\n  local -i\
    \ underscore=0\n  local -i plus=0\n  local -i equal=0\n  local -i\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word=\"\"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local space=0\n    local exclamation=0\n    local question=0\n    local period=0\n\
    \    local comma=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local underscore=0\n    local left_parenthesis=0\n    local\
    \ right_parenthesis=0\n    local left_bracket=0\n    local right_bracket=0\n \
    \   local left_brace=0\n    local right_brace=0\n    local left_angle=0\n    local\
    \ right_angle=0\n    local at=0\n    local backslash=0\n    local forward_slash=0\n\
    \    local backtick=0\n    local tilde=0\n    local pound=0\n    local dollar=0\n\
    \    local percent=0\n    local caret=0\n    local ampersand=0\n    local asterisk=0\n\
    \    local plus=0\n    local equals=0\n   \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local space=0\n\
    \    local length=${#str}\n    for ((i=0; i<length; i++)); do\n        char=${str:i:1}\n\
    \        if [[ \"$char\" == \" \" ]]; then\n            if [[ \"$word\" != \"\"\
    \ ]]; then\n                result+=\"$(echo -n \"$word\" | sort -n)\"\n     \
    \           word=\"\"\n            fi\n            result+=\" \"\n        else\n\
    \            word+=\"$char\"\n        fi\n    done\n    if [[ \"$word\" != \"\"\
    \ ]]; then\n        result+=\"$(echo -n \"$word\" | sort -n)\"\n    fi\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len2=0\n    local len3=0\n    local ascii=0\n    local ascii2=0\n\
    \    local ascii3=0\n    local tmp=\"\"\n    local tmp2=\"\"\n    local tmp3=\"\
    \"\n    local tmp4=\"\"\n    local tmp5=\"\"\n    local tmp6=\"\"\n    local tmp7=\"\
    \"\n    local tmp8=\"\"\n    local tmp9=\"\"\n    local tmp10=\"\"\n    local\
    \ tmp11=\"\"\n    local tmp12=\"\"\n    local tmp13=\"\"\n    local tmp14=\"\"\
    \n    local tmp15=\"\"\n    local tmp16=\"\"\n    local tmp17=\"\"\n    local\
    \ tmp18=\"\"\n    local tmp19=\"\"\n    local tmp20=\"\"\n    local tmp21=\"\"\
    \n    local tmp22=\"\"\n    local tmp23=\"\"\n    local tmp24=\"\"\n    local\
    \ tmp25=\"\"\n    local tmp26=\"\"\n    local tmp27=\"\"\n    local tmp28=\"\"\
    \n    local tmp29=\"\"\n    local tmp30=\"\"\n    local tmp31=\"\"\n    local\
    \ tmp32=\"\"\n    local tmp33=\"\"\n    local tmp34=\"\"\n    local tmp35=\"\"\
    \n    local tmp36=\"\"\n    local tmp37=\"\"\n    local tmp38=\"\"\n    local\
    \ tmp39=\"\"\n    local tmp40=\"\"\n    local tmp41=\"\"\n    local tmp42=\"\"\
    \n    local tmp43=\"\"\n    local tmp44=\"\"\n    local tmp45=\"\"\n    local\
    \ tmp46=\"\"\n    local tmp47=\"\"\n    local tmp48=\"\"\n    local tmp49=\"\"\
    \n    local tmp50=\"\"\n    local tmp51=\"\"\n    local tmp52=\"\"\n    local\
    \ tmp53=\"\"\n    local tmp54=\"\"\n    local tmp55=\"\"\n    local tmp56=\"\"\
    \n    local tmp57=\"\"\n    local tmp58=\"\"\n    local tmp59=\"\"\n    local\
    \ tmp60=\"\"\n    local tmp61=\"\"\n    local tmp62=\"\"\n    local tmp63=\"\"\
    \n    local tmp64=\"\"\n    local tmp65=\"\"\n    local tmp66=\"\"\n    local\
    \ tmp67=\"\"\n    local tmp68=\"\"\n    local tmp69=\"\"\n    local tmp70=\"\"\
    \n    local tmp71=\"\"\n   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort -n | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted\n    local -a result\n\
    \    local i=0\n    local j=0\n    local k=0\n    local word\n    local sorted_word\n\
    \    local result_word\n    local result_str\n\n    # Split string into words\n\
    \    IFS=' ' read -ra words <<< \"$1\"\n\n    # Sort each word\n    for word in\
    \ \"${words[@]}\"; do\n        sorted[$i]=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        ((i++))\n    done\n\n    # Build result string\n   \
    \ for word in \"${words[@]}\"; do\n        sorted_word=${sorted[$j]}\n       \
    \ result_word=\"\"\n        for ((k=0; k<${#word}; k++)); do\n            result_word+=\"\
    ${sorted_word:$k:1}\"\n        done\n        result[$j]=$result_word\n       \
    \ ((j++))\n    done\n\n    # Join result array into string\n    result_str=$(printf\
    \ \" %s\" \"${result[@]}\")\n    result_str=${result_str:1}\n    echo \"$result_str\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i word_count\n    local -i char_count\n\
    \    local -i word_length\n    local -i char_length\n    local -i char_ascii\n\
    \    local -i char_ascii_max\n    local -i char_ascii_min\n    local -i char_ascii_tmp\n\
    \    local -i char_ascii_tmp_max\n    local -i char_ascii_tmp_min\n    local -i\
    \ char_ascii_tmp_index\n    local -i char_ascii_tmp_index_max\n    local -i char_ascii_tmp_index_min\n\
    \    local -i char_ascii_index\n    local -i char_ascii_index_max\n    local -i\
    \ char_ascii_index_min\n    local -i char_ascii_index_tmp\n    local -i char_ascii_index_tmp_max\n\
    \    local -i char_ascii_index_tmp_min\n    local -i char_ascii_index_tmp_index\n\
    \    local -i char_ascii_index_tmp_index_max\n    local -i char_ascii_index_tmp_index_min\n\
    \    local -i char_ascii_index_tmp_index_tmp\n    local -i char_ascii_index_tmp_index_tmp_max\n\
    \    local -i char_ascii_index_tmp_index_tmp_min\n    local -i char_ascii_index_tmp_index_tmp_index\n\
    \    local -i char_ascii_index_tmp_index_tmp_index_max\n    local -i char_ascii_index_tmp_index_tmp_index_min\n\
    \    local -i char_ascii_index_tmp_index_tmp_index_tmp\n    local -i char_ascii_index_tmp_index_tmp_index_tmp_max\n\
    \    local -i char_ascii_index_tmp_index_tmp_index_tmp\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local word\n    local new_string=''\n\
    \    for word in $string; do\n        local chars=($(echo $word | grep -o .))\n\
    \        local sorted_chars=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n   \
    \     local sorted_word=$(printf \"%s\" \"${sorted_chars[@]}\")\n        new_string=\"\
    $new_string $sorted_word\"\n    done\n    echo $new_string\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n\n    words=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        sorted_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\"\
    )\n    done\n    for ((i = 0; i < ${#words[@]}; i++)); do\n        result+=(\"\
    ${sorted_words[$i]}\")\n        result+=(\"${words[$i]:${#sorted_words[$i]}}\"\
    )\n    done\n    echo \"${result[@]}\" | tr -d ' '\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local char\n    local sorted_char\n    local -i len\n    local\
    \ -i sorted_len\n    local -i word_count\n    local -i sorted_word_count\n   \
    \ local -i result_count\n    local -i char_count\n    local -i sorted_char_count\n\
    \    local -i char_index\n    local -i sorted_char_index\n    local -i sorted_word_index\n\
    \    local -i word_index\n    local -i result_index\n    local -i sorted_result_index\n\
    \    local -i sorted_result_count\n    local -i sorted_result_len\n    local -i\
    \ result_len\n    local -i sorted_result_word_count\n    local -i result_word_count\n\
    \    local -i sorted_result_word_index\n    local -i result_word_index\n    local\
    \ -i sorted_result_char_count\n    local -i result_char_count\n    local -i sorted_result_char_index\n\
    \    local -i result_char_index\n    local -i sorted_result_char_len\n    local\
    \ -i result_char_len\n    local -i sorted_result_char_word_count\n    local -i\
    \ result_char_word_count\n    local -i sorted_result_char_word_index\n    local\
    \ -i result_char_word_index\n    local -i sorted_result_char_word_len\n    local\
    \ -i result_char_word_len\n    local -i sorted_result_char_word_char_count\n \
    \   local -i result_char_word_char_count\n    local -i sorted_result_char_word_char_index\n\
    \    local -i result_char_word_char_index\n    local -i sorted_result_char_word_char_len\n\
    \    local -i result_char_word_char_len\n    local -i sorted_result_char_word_char_word_count\n\
    \    local -i result_char_word_char_word_count\n    local -i sorted_result\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local space\n    local\
    \ result_str\n    local str\n    local str_len\n    local char\n    local char_ascii\n\
    \    local char_ascii_prev\n    local char_ascii_next\n    local char_ascii_prev_str\n\
    \    local char_ascii_next_str\n    local char_ascii_str\n    local char_ascii_prev_len\n\
    \    local char_ascii_next_len\n    local char_ascii_len\n    local char_ascii_prev_len_diff\n\
    \    local char_ascii_next_len_diff\n    local char_ascii_len_diff\n    local\
    \ char_ascii_prev_len_diff_str\n    local char_ascii_next_len_diff_str\n    local\
    \ char_ascii_len_diff_str\n    local char_ascii_prev_len_diff_len\n    local char_ascii_next_len_diff_len\n\
    \    local char_ascii_len_diff_len\n    local char_ascii_prev_len_diff_len_str\n\
    \    local char_ascii_next_len_diff_len_str\n    local char_ascii_len_diff_len_str\n\
    \    local char_ascii_prev_len_diff_len_str_len\n    local char_ascii_next_len_diff_len_str_len\n\
    \    local char_ascii_len_diff_len_str_len\n    local char_ascii_prev_len_diff_len_str_len_str\n\
    \    local char_ascii_next_len_diff_len_str_len_str\n    local char\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    # You can use the following\
    \ command to sort a string:\n    # sorted=$(echo $string | grep -o . | sort |\
    \ tr -d '\\n')\n    # You can use the following command to replace a word in a\
    \ string:\n    # new_string=$(echo $string | sed \"s/old_word/new_word/g\")\n\
    \    #\n    # You can use the following command to replace a character in a string:\n\
    \    # new_string=$(echo $string | sed \"s/old_char/new_char/g\")\n    #\n   \
    \ # You can use the following command to get the length of a string:\n    # length=$(echo\
    \ $string | wc -c)\n    #\n    # You can use the following command to get the\
    \ nth character of a string:\n    # char=$(echo $string | cut -c $n)\n    #\n\
    \    # You can use the following command to get the first n characters of a string:\n\
    \    # first_n_chars=$(echo $string | cut -c -$n)\n    #\n    # You can use the\
    \ following command to get the last n characters of a string:\n    # last_n_chars=$(echo\
    \ $string | cut -c -$n)\n    #\n    # You can use the following command to get\
    \ the substring of a string:\n    # substring=$(echo $string | cut -c $start-$end)\n\
    \    #\n    # You can use the following command to get the first word of a string:\n\
    \    # first_word=$(echo $string | cut -d ' ' -f 1)\n    #\n    # You can use\
    \ the following command to get the last word of a string:\n    # last_word=$(echo\
    \ $string | cut -d ' ' -f $n)\n    #\n    # You can use the following command\
    \ to get the nth word of a string:\n    # nth_word=$(echo $string | cut -d ' '\
    \ -f $n)\n    #\n    # You can use the following command to get the substring\
    \ of a string:\n    # substring=$(echo $string | cut -d ' ' -f $start-$end)\n\
    \    #\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk9yw4qa2.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpk9yw4qa2.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local word\n    local result=\"\
    \"\n    for word in $string; do\n        result=\"$result $(echo $word | grep\
    \ -o . | sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  # Write your code here\n  # You can use the following command\
    \ to sort the characters in a word\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # You can use the following command to sort the characters\
    \ in a word\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You\
    \ can use the following command to sort the characters in a word\n  # echo \"\
    hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You can use the following command\
    \ to sort the characters in a word\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # You can use the following command to sort the characters\
    \ in a word\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You\
    \ can use the following command to sort the characters in a word\n  # echo \"\
    hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You can use the following command\
    \ to sort the characters in a word\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # You can use the following command to sort the characters\
    \ in a word\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You\
    \ can use the following command to sort the characters in a word\n  # echo \"\
    hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You can use the following command\
    \ to sort the characters in a word\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # You can use the following command to sort the characters\
    \ in a word\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You\
    \ can use the following command to sort the characters in a word\n  # echo \"\
    hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # You can use the following command\
    \ to sort the characters\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxp861hn8.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpxp861hn8.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a ordered_words\n    local -a\
    \ ordered_string\n    local word\n    local ordered_word\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local space\n   \
    \ local string\n    local ordered_string\n    local -i word_count\n    local -i\
    \ char_count\n    local -i char_count_max\n    local -i char_count_min\n    local\
    \ -i char_count_max_index\n    local -i char_count_min_index\n    local -i char_count_max_index_prev\n\
    \    local -i char_count_min_index_prev\n    local -i char_count_max_index_next\n\
    \    local -i char_count_min_index_next\n    local -i char_count_max_index_prev_prev\n\
    \    local -i char_count_min_index_prev_prev\n    local -i char_count_max_index_next_next\n\
    \    local -i char_count_min_index_next_next\n    local -i char_count_max_index_prev_prev_prev\n\
    \    local -i char_count_min_index_prev_prev_prev\n    local -i char_count_max_index_next_next_next\n\
    \    local -i char_count_min_index_next_next_next\n    local -i char_count_max_index_prev_prev_prev_prev\n\
    \    local -i char_count_min_index_prev_prev_prev_prev\n    local -i char_count_max_index_next_next_next_next\n\
    \    local -i char_count_min_index_next_next_next_next\n    local -i char_count_max_index_prev_prev_prev_prev_prev\n\
    \    local -i char_count_min_index_prev_prev_prev_prev_prev\n    local -i char_count_max_index_next_next_next\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n    local\
    \ c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n    local\
    \ C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n    local H=0\n\
    \    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local M=0\n \
    \   local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n  \
    \  local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n   \
    \ local X=0\n    local Y=0\n    local Z=0\n    local space=0\n    local exclam=0\n\
    \    local comma=0\n    local period=0\n    local question=0\n    local colon=0\n\
    \    local semicolon=0\n    local apostrophe=0\n    local dash=0\n    local underscore=0\n\
    \    local plus=0\n    local equal\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local word\n  local result=\"\"\n  local\
    \ -a words\n  local -a sorted_words\n  local -a sorted_chars\n  local -a sorted_chars_joined\n\
    \  local -a sorted_words_joined\n  local -a sorted_words_joined_string\n  local\
    \ -a sorted_words_joined_string_joined\n  local -a sorted_words_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined\n  local -a sorted_words_joined_string_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined\n  local\
    \ -a sorted_words_joined_string_joined_string_joined_string_joined_string\n  local\
    \ -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined_string_joined\n\
    \  local -a sorted_words_joined_string_joined_string_joined_string_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a new_words\n    local -i i\n\
    \    local -i j\n    local -i k\n    local -i len\n    local -i len_new\n    local\
    \ -i len_words\n    local -i len_new_words\n    local -i len_word\n    local -i\
    \ len_new_word\n    local -i len_char\n    local -i len_new_char\n    local -i\
    \ len_new_char_new\n    local -i len_char_new\n    local -i len_char_new_new\n\
    \    local -i len_char_new_new_new\n    local -i len_char_new_new_new_new\n  \
    \  local -i len_char_new_new_new_new_new\n    local -i len_char_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new\n    local -i len_char_new_new_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new_new_new\n    local -i len_char_new_new_new_new_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new_new_new_new_new\n    local\
    \ -i len_char_new_new_new_new_new_new_new_new_new_new_new_new\n    local -i len_char_new_new_new_new_new_new_new_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new_new_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new\n\
    \    local -i len_char_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local words=($(echo \"$str\" | tr\
    \ ' ' '\\n'))\n    local result=\"\"\n    for word in \"${words[@]}\"; do\n  \
    \      local chars=($(echo \"$word\" | grep -o .))\n        local sorted_chars=($(printf\
    \ \"%s\\n\" \"${chars[@]}\" | sort))\n        local sorted_word=$(printf \"%s\"\
    \ \"${sorted_chars[@]}\")\n        result+=\"$sorted_word \"\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i l\n    local -i m\n    local\
    \ -i n\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i space\n    local -i ascii_value\n\
    \    local -i word_length\n    local -i word_index\n    local -i word_count\n\
    \    local -i char_index\n    local -i char_count\n    local -i char_ascii_value\n\
    \    local -i char_ascii_value_index\n    local -i char_ascii_value_count\n  \
    \  local -i char_ascii_value_array_index\n    local -i char_ascii_value_array_count\n\
    \    local -i char_ascii_value_array_length\n    local -i char_ascii_value_array_length_index\n\
    \    local -i char_ascii_value_array_length_count\n    local -i char_ascii_value_array_length_array_index\n\
    \    local -i char_ascii_value_array_length_array_count\n    local -i char_ascii_value_array_length_array_length\n\
    \    local -i char_ascii_value_array_length_array_length_index\n    local -i char_ascii_value_array_length_array_length_count\n\
    \    local -i char_ascii_value_array_length_array_length_array_index\n    local\
    \ -i char_ascii_value_array_length_array_length_array_count\n    local -i char_ascii_value_array_length_array_length_array_length\n\
    \    local -i char_ascii_value_array_length_array_length_array_length_index\n\
    \    local -i char_as\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local words=()\n    local i=0\n  \
    \  local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n   \
    \ local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local\
    \ t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n\
    \    local z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n \
    \   local E=0\n    local F=0\n    local G=0\n    local H=0\n    local I=0\n  \
    \  local J=0\n    local K=0\n    local L=0\n    local M=0\n    local N=0\n   \
    \ local O=0\n    local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local\
    \ T=0\n    local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n\
    \    local Z=0\n    local space=0\n    local other=0\n    local new_word=\"\"\n\
    \    local new_str=\"\"\n    local word=\"\"\n    local char=\"\"\n    local len=0\n\
    \    local len_word=0\n    local len_new_word=0\n    local len_new_str=0\n   \
    \ local len_str=0\n    local len_words=0\n    local len_char=0\n    local len_chars=0\n\
    \    local len_chars_new_word=0\n    local len_chars_new_str=0\n    local len_chars_str=0\n\
    \    local len_chars_words=0\n    local len_chars_word=0\n    local len_chars_char=0\n\
    \    local len_chars_chars=0\n    local len_chars_chars_new_word=0\n    local\
    \ len_chars_chars_new_str=0\n    local len_chars_chars_str=0\n    local\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_char=0\n\
    \    local len_result=0\n    local char_arr=()\n    local word_arr=()\n    local\
    \ result_arr=()\n    local char_arr_len=0\n    local word_arr_len=0\n    local\
    \ result_arr_len=0\n    local char_arr_index=0\n    local word_arr_index=0\n \
    \   local result_arr_index=0\n    local char_arr_index_len=0\n    local word_arr_index_len=0\n\
    \    local result_arr_index_len=0\n    local char_arr_index_len_str=0\n    local\
    \ word_arr_index_len_str=0\n    local result_arr_index_len_str=0\n    local char_arr_index_len_str_len=0\n\
    \    local word_arr_index_len_str_len=0\n    local result_arr_index_len_str_len=0\n\
    \    local char_arr_index_len_str_len_len=0\n    local word_arr_index_len_str_len_len=0\n\
    \    local result_arr_index_len_str_len_len=0\n    local char_arr_index_len_str_len_len_len=0\n\
    \    local word_arr_index_len_str_len_len_len=0\n    local result_arr_index_len_str_len_len_len=0\n\
    \    local char_arr_index_len_str_len_len_len_len=0\n    local word_arr_index_len_str_len_len_len_len=0\n\
    \    local result_arr_index_len_str_len_len_len_len=0\n    local char_arr_index_len_str_len_len_len_len_len=0\n\
    \    local word_arr_index_len_str_len_len\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local word\n    local result=\"\"\n  \
    \  for word in $str; do\n        result=\"$result $(echo $word | grep -o . | sort\
    \ -n | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    #\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps6rs_0k7.sh: line 187: syntax error near unexpected token `}''

    /tmp/tmps6rs_0k7.sh: line 187: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_list=\"\"\n    local char_list_sorted=\"\
    \"\n    for word in $string; do\n        char_list=\"\"\n        for char in $(echo\
    \ $word | grep -o .); do\n            char_list=\"$char_list $char\"\n       \
    \ done\n        char_list_sorted=$(echo $char_list | tr \" \" \"\\n\" | sort |\
    \ tr \"\\n\" \" \")\n        new_string=\"$new_string $char_list_sorted\"\n  \
    \  done\n    echo $new_string\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local space\n    local\
    \ new_word\n    local new_string\n    local string=\"$1\"\n    # Split string\
    \ into words\n    IFS=' ' read -r -a words <<< \"$string\"\n    # Sort each word\n\
    \    for word in \"${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | fold\
    \ -w1 | sort | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n\
    \    # Replace each word with its sorted version\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        for ((j=0; j<${#words[$i]}; j++)); do\n            for ((k=0;\
    \ k<${#words[$i]}; k++)); do\n                for ((l=0; l<${#words[$i]}; l++));\
    \ do\n                    for ((m=0; m<${#words[$i]}; m++)); do\n            \
    \            for ((n=0; n<${#words[$i]}; n++)); do\n                         \
    \   for ((o=0; o<${#words[$i]}; o++)); do\n                                for\
    \ ((p=0; p<${#words[$i]}; p++)); do\n                                    for ((q=0;\
    \ q<${#words[$i]}; q++)); do\n                                        for ((r=0;\
    \ r<${#words[$i]}; r++)); do\n                                            for\
    \ ((s=0; s<${#words[$i]}; s++)); do\n                                        \
    \        for ((t=0; t<${#words[$i]}; t++)); do\n                             \
    \                       for ((u=0; u<${#words[$i]};\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkqdjatqk.sh: line 64: unexpected EOF while looking for matching
    `)''

    /tmp/tmpkqdjatqk.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local word\n  local result=\"\"\n  for\
    \ word in $str; do\n    result=\"$result $(echo $word | grep -o . | sort | tr\
    \ -d '\\n')\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local words=($(echo $str | tr ' ' '\\n'))\n\
    \  local result=\"\"\n  for word in \"${words[@]}\"; do\n    local chars=($(echo\
    \ $word | tr -d '\\n' | fold -w1))\n    local sorted=($(printf \"%s\\n\" \"${chars[@]}\"\
    \ | sort))\n    local sorted_word=$(printf \"%s\" \"${sorted[@]}\")\n    result+=\"\
    $sorted_word \"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    echo \"$1\" | tr ' ' '\\n' | while read word; do\n     \
    \   echo -n \"$(echo \"$word\" | grep -o . | sort | tr -d '\\n')\"\n    done\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_result=0\n    local len_string=${#string}\n\
    \    local char_ascii=0\n    local char_ascii_min=0\n    local char_ascii_min_index=0\n\
    \    local char_ascii_min_index_tmp=0\n    local char_ascii_tmp=0\n    local char_tmp=\"\
    \"\n    local char_tmp_index=0\n    local char_tmp_index_tmp=0\n    local char_tmp_ascii=0\n\
    \    local char_tmp_ascii_tmp=0\n    local char_tmp_ascii_min=0\n    local char_tmp_ascii_min_index=0\n\
    \    local char_tmp_ascii_min_index_tmp=0\n    local char_tmp_ascii_min_tmp=0\n\
    \    local char_tmp_ascii_min_index_tmp=0\n    local char_tmp_ascii_min_index_tmp_tmp=0\n\
    \    local char_tmp_ascii_min_index_tmp_tmp_tmp=0\n    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp=0\n\
    \    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp_tmp=0\n    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_tmp_ascii_min_index_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n  \
    \  local char_tmp_ascii_min_index_tmp_tmp_tmp_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local words=$(echo $string | tr \"\
    \ \" \"\\n\")\n    local result=\"\"\n    for word in $words; do\n        local\
    \ chars=$(echo $word | grep -o .)\n        local sorted=$(echo $chars | tr -s\
    \ \"\\n\" | sort | tr -s \"\\n\")\n        result=\"$result$sorted\"\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_new_str=0\n\
    \    local len_char=0\n    local ascii_char=0\n    local ascii_char_min=0\n  \
    \  local ascii_char_max=0\n    local ascii_char_min_index=0\n    local ascii_char_max_index=0\n\
    \    local ascii_char_min_index_tmp=0\n    local ascii_char_max_index_tmp=0\n\
    \    local ascii_char_min_tmp=0\n    local ascii_char_max_tmp=0\n    local ascii_char_tmp=0\n\
    \    local ascii_char_tmp_index=0\n    local ascii_char_tmp_index_min=0\n    local\
    \ ascii_char_tmp_index_max=0\n    local ascii_char_tmp_min=0\n    local ascii_char_tmp_max=0\n\
    \    local ascii_char_tmp_min_index=0\n    local ascii_char_tmp_max_index=0\n\
    \    local ascii_char_tmp_min_index_tmp=0\n    local ascii_char_tmp_max_index_tmp=0\n\
    \    local ascii_char_tmp_min_tmp=0\n    local ascii_char_tmp_max_tmp=0\n    local\
    \ ascii_char_tmp_min_tmp_index=0\n    local ascii_char_tmp_max_tmp_index=0\n \
    \   local ascii_char_tmp_min_tmp_index_tmp=0\n    local ascii_char_tmp_max_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_min_tmp_tmp=0\n    local ascii_char_tmp_max_tmp_tmp=0\n\
    \    local ascii_char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_str=${#str}\n  local len_word=0\n  local len_char=0\n  local char_arr=()\n\
    \  local word_arr=()\n  local str_arr=()\n  local char_arr_sorted=()\n  local\
    \ word_arr_sorted=()\n  local str_arr_sorted=()\n  local char_arr_sorted_str=\"\
    \"\n  local word_arr_sorted_str=\"\"\n  local str_arr_sorted_str=\"\"\n  local\
    \ char_arr_sorted_str_escaped=\"\"\n  local word_arr_sorted_str_escaped=\"\"\n\
    \  local str_arr_sorted_str_escaped=\"\"\n  local char_arr_sorted_str_escaped_quoted=\"\
    \"\n  local word_arr_sorted_str_escaped_quoted=\"\"\n  local str_arr_sorted_str_escaped_quoted=\"\
    \"\n  local char_arr_sorted_str_escaped_quoted_unquoted=\"\"\n  local word_arr_sorted_str_escaped_quoted_unquoted=\"\
    \"\n  local str_arr_sorted_str_escaped_quoted_unquoted=\"\"\n  local char_arr_sorted_str_escaped_quoted_unquoted_unescaped=\"\
    \"\n  local word_arr_sorted_str_escaped_quoted_unquoted_unescaped=\"\"\n  local\
    \ str_arr_sorted_str_escaped_quoted_unquoted_unescaped=\"\"\n  local char_arr_sorted_str_escaped_quoted_unquoted_unescaped_unquoted=\"\
    \"\n  local word_arr_sorted_str_escaped_quoted_unquoted_unescaped_unquoted=\"\"\
    \n  local str_arr_sorted_str_escaped_quoted_unquoted_unescaped_unquoted=\"\"\n\
    \  local char_arr_sorted_str_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local i\n    local j\n    local word\n    local sorted_word\n  \
    \  local result_string\n\n    # Split string into words\n    IFS=' ' read -ra\
    \ words <<< \"$1\"\n\n    # Sort each word\n    for i in \"${!words[@]}\"; do\n\
    \        word=\"${words[$i]}\"\n        sorted_word=$(echo \"$word\" | grep -o\
    \ . | sort | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n\
    \n    # Join words back into a string\n    for i in \"${!words[@]}\"; do\n   \
    \     word=\"${words[$i]}\"\n        sorted_word=\"${sorted_words[$i]}\"\n   \
    \     for ((j=0; j<${#word}; j++)); do\n            result+=(\"${sorted_word:$j:1}\"\
    )\n        done\n        result+=(\" \")\n    done\n\n    # Remove last space\n\
    \    unset 'result[${#result[@]}-1]'\n\n    # Join array into a string\n    result_string=$(printf\
    \ \"%s\" \"${result[@]}\")\n\n    echo \"$result_string\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local result=\"\"\n    local word=\"\"\n    for word in\
    \ $1; do\n        result=\"$result $(echo $word | grep -o . | sort | tr -d '\\\
    n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_result=0\n\
    \    local len_char=0\n    local len_result_new=0\n    local char_ascii=0\n  \
    \  local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local\
    \ char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n\
    \    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local\
    \ char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local\
    \ char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n\
    \    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local\
    \ char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local\
    \ char_ascii_min_tmp=0\n    local char_ascii_min_index_tmp=0\n    local char_ascii_min\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_str=${#str}\n  local len_word=0\n  local len_result=0\n  local is_word=0\n\
    \  local is_space=0\n  local is_punct=0\n  local is_digit=0\n  local is_upper=0\n\
    \  local is_lower=0\n  local is_newline=0\n  local is_tab=0\n  local is_backslash=0\n\
    \  local is_double_quote=0\n  local is_single_quote=0\n  local is_other=0\n  local\
    \ is_other_punct=0\n  local is_other_digit=0\n  local is_other_upper=0\n  local\
    \ is_other_lower=0\n  local is_other_newline=0\n  local is_other_tab=0\n  local\
    \ is_other_backslash=0\n  local is_other_double_quote=0\n  local is_other_single_quote=0\n\
    \  local is_other_other=0\n  local is_other_other_punct=0\n  local is_other_other_digit=0\n\
    \  local is_other_other_upper=0\n  local is_other_other_lower=0\n  local is_other_other_newline=0\n\
    \  local is_other_other_tab=0\n  local is_other_other_backslash=0\n  local is_other_other_double_quote=0\n\
    \  local is_other_other_single_quote=0\n  local is_other_other_other=0\n  local\
    \ is_other_other_other_punct=0\n  local is_other_other_other_digit=0\n  local\
    \ is_other_other_other_upper=0\n  local is_other_other_other_lower=0\n  local\
    \ is_other_other_other_newline=0\n  local is_other_other_other_tab=0\n  local\
    \ is_other_other_other_back\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_result=0\n\
    \    local char_array=()\n    local word_array=()\n    local result_array=()\n\
    \    for ((i=0; i<len_str; i++)); do\n        char=${str:$i:1}\n        if [[\
    \ \"$char\" != \" \" ]]; then\n            word+=$char\n        else\n       \
    \     word_array+=($word)\n            word=\"\"\n        fi\n    done\n    word_array+=($word)\n\
    \    len=${#word_array[@]}\n    for ((i=0; i<len; i++)); do\n        word=${word_array[$i]}\n\
    \        len_word=${#word}\n        for ((j=0; j<len_word; j++)); do\n       \
    \     char_array+=(${word:$j:1})\n        done\n        char_array=($(printf \"\
    %s\\n\" \"${char_array[@]}\" | sort))\n        len_result=${#char_array[@]}\n\
    \        for ((k=0; k<len_result; k++)); do\n            result+=${char_array[$k]}\n\
    \        done\n        result_array+=($result)\n        result=\"\"\n        char_array=()\n\
    \    done\n    len=${#result_array[@]}\n    for ((i=0; i<len; i++)); do\n    \
    \    result+=${result_array[$i]}\n        if [[ $i -lt $((len-1)) ]]; then\n \
    \           result+=\" \"\n        fi\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\
    \"\n    local char_ascii_list_sorted=\"\"\n    local char_ascii_list_sorted_array=()\n\
    \    local char_ascii_list_sorted_array_index=0\n    local char_ascii_list_sorted_array_length=0\n\
    \    local char_ascii_list_sorted_array_length_index=0\n    local char_ascii_list_sorted_array_length_index_char=\"\
    \"\n    local char_ascii_list_sorted_array_length_index_char_ascii=\"\"\n    local\
    \ char_ascii_list_sorted_array_length_index_char_ascii_list=\"\"\n    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted=\"\
    \"\n    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array=()\n\
    \    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_index=0\n\
    \    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_length=0\n\
    \    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_length_index=0\n\
    \    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_length_index_char=\"\
    \"\n    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_length_index_char_ascii=\"\
    \"\n    local char_ascii_list_sorted_array_length_index_char_ascii_list_sorted_array_length_index_char_ascii_list=\"\
    \"\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i len_words=0\n\
    \    local -i len_sorted_words=0\n    local -i len_word=0\n    local -i len_sorted_word=0\n\
    \    local -i len_diff=0\n    local -i len_diff_abs=0\n    local -i len_diff_abs_min=0\n\
    \    local -i len_diff_abs_min_index=0\n    local -i len_diff_abs_min_index_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev=0\n    local -i len_diff_abs_min_index_prev_prev_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev_prev_prev=0\n    local -i len_diff_abs_min_index_prev_prev_prev_prev_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \   local -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i len_diff_abs_min_index_prev_prev_prev\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_str=${#str}\n  local len_word=0\n  local len_char=0\n  local ascii_char=0\n\
    \  local ascii_char_min=0\n  local ascii_char_min_index=0\n  local ascii_char_min_index_tmp=0\n\
    \  local ascii_char_min_tmp=0\n  local ascii_char_min_tmp_index=0\n  local ascii_char_min_tmp_index_tmp=0\n\
    \  local ascii_char_min_tmp_tmp=0\n  local ascii_char_min_tmp_tmp_index=0\n  local\
    \ ascii_char_min_tmp_tmp_index_tmp=0\n  local ascii_char_min_tmp_tmp_tmp=0\n \
    \ local ascii_char_min_tmp_tmp_tmp_index=0\n  local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \  local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n  local ascii\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local -a char_array\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i len=0\n    local -i len_word=0\n    local\
    \ -i len_char=0\n    local -i len_char_array=0\n    local -i len_result=0\n  \
    \  local -i len_string=0\n    local -i len_word=0\n    local -i len_char=0\n \
    \   local -i len_char_array=0\n    local -i len_result=0\n    local -i len_string=0\n\
    \    local -i len_word=0\n    local -i len_char=0\n    local -i len_char_array=0\n\
    \    local -i len_result=0\n    local -i len_string=0\n    local -i len_word=0\n\
    \    local -i len_char=0\n    local -i len_char_array=0\n    local -i len_result=0\n\
    \    local -i len_string=0\n    local -i len_word=0\n    local -i len_char=0\n\
    \    local -i len_char_array=0\n    local -i len_result=0\n    local -i len_string=0\n\
    \    local -i len_word=0\n    local -i len_char=0\n    local -i len_char_array=0\n\
    \    local -i len_result=0\n    local -i len_string=0\n    local -i len_word=0\n\
    \    local -i len_char=0\n    local -i len_char_array=0\n    local -i len_result=0\n\
    \    local -i len_string=0\n    local -i len_word=0\n    local -i len_char=0\n\
    \    local -i len_char_array=0\n    local -i len_result=0\n    local -i len_string=0\n\
    \    local -i len_word=0\n    local -i len_char=0\n    local -i len_char_array=0\n\
    \    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n    local -i len_word=0\n\
    \    local -i len_sorted_word=0\n    local -i len_sorted_words=0\n    local -i\
    \ len_words=0\n    local -i len_str=0\n    local -i len_sorted_str=0\n    local\
    \ -i len_diff=0\n    local -i len_diff_words=0\n    local -i len_diff_sorted_words=0\n\
    \    local -i len_diff_str=0\n    local -i len_diff_sorted_str=0\n    local -i\
    \ len_diff_sorted_word=0\n    local -i len_diff_word=0\n    local -i len_diff_sorted_words_total=0\n\
    \    local -i len_diff_words_total=0\n    local -i len_diff_sorted_str_total=0\n\
    \    local -i len_diff_str_total=0\n    local -i len_diff_sorted_word_total=0\n\
    \    local -i len_diff_word_total=0\n    local -i len_diff_sorted_words_total_prev=0\n\
    \    local -i len_diff_words_total_prev=0\n    local -i len_diff_sorted_str_total_prev=0\n\
    \    local -i len_diff_str_total_prev=0\n    local -i len_diff_sorted_word_total_prev=0\n\
    \    local -i len_diff_word_total_prev=0\n    local -i len_diff_sorted_words_total_next=0\n\
    \    local -i len_diff_words_total_next=0\n    local -i len_diff_sorted_str_total_next=0\n\
    \    local -i len_diff_str_total_next=0\n    local -i len_diff_sorted_word_total_next=0\n\
    \    local -i len_diff_word_total_next=0\n    local\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local char_list=\"\"\n    local char_list_sorted=\"\
    \"\n    local char_list_sorted_len=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local space=0\n    local exclamation=0\n    local question=0\n    local period=0\n\
    \    local comma=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local underscore=0\n    local left_paren=0\n    local right_paren=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local left_angle=0\n    local right_angle=0\n  \
    \  local backslash=0\n    local forward_slash=0\n    local at=0\n    local pound=0\n\
    \    local dollar=0\n    local percent=0\n    local caret=0\n    local ampersand=0\n\
    \    local asterisk=0\n    local plus=0\n    local equals=0\n    local less_than=0\n\
    \    local greater_than=0\n    local single_quote=0\n    local double_quote=0\n\
    \    local backtick=0\n    local tilde=0\n    local pipe=0\n    local newline=0\n\
    \    local tab=0\n    local backspace=0\n    local vertical_tab=0\n    local form_feed=0\n\
    \    local carriage_return=0\n    local null=0\n    local space_count=0\n    local\
    \ exclamation_count=0\n    local question_count=0\n    local period_count=0\n\
    \    local comma_count=0\n    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local words=($str)\n    local new_str=\"\
    \"\n    for word in ${words[@]}; do\n        local chars=($(echo $word | grep\
    \ -o .))\n        local new_word=\"\"\n        for char in $(echo ${chars[@]}\
    \ | tr ' ' '\\n' | sort); do\n            new_word+=$char\n        done\n    \
    \    new_str+=$new_word\n    done\n    echo $new_str\n}\n\ncandidate() {\n   \
    \ anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") =\
    \ \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i space=0\n    local -i exclamation=0\n    local -i question=0\n    local -i\
    \ comma=0\n    local -i period=0\n    local -i colon=0\n    local -i semicolon=0\n\
    \    local -i apostrophe=0\n    local -i dash=0\n    local -i underscore=0\n \
    \   local -i at=0\n    local -i hash=0\n    local -i dollar=0\n    local -i percent=0\n\
    \    local -i caret=0\n    local -i ampersand=0\n    local -i asterisk=0\n   \
    \ local -i open_paren=0\n    local -i close_paren=0\n    local -i open_bracket=0\n\
    \    local -i close_bracket=0\n    local -i open_brace=0\n    local -i close_brace=0\n\
    \    local -i less_than=0\n    local -i greater_than=0\n    local -i backslash=0\n\
    \    local -i pipe=0\n    local -i tilde=0\n    local -i single_quote=0\n    local\
    \ -i double_quote=0\n    local -i backtick=0\n    local -i plus=0\n    local -i\
    \ equals=0\n    local -i slash=0\n    local -i backspace=0\n    local -i tab=0\n\
    \    local -i newline=0\n    local -i carriage_return=0\n    local -i form_feed=0\n\
    \   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local words=($(echo $str | tr ' ' '\\n'))\n\
    \  local result=\"\"\n  for word in \"${words[@]}\"; do\n    local chars=($(echo\
    \ $word | tr -d '\\n' | fold -w1))\n    local sorted_chars=($(printf \"%s\\n\"\
    \ \"${chars[@]}\" | sort))\n    local sorted_word=$(printf \"%s\" \"${sorted_chars[@]}\"\
    )\n    result=\"$result $sorted_word\"\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local -a words\n    local -a new_words\n\
    \    local i=0\n    local word\n    local new_word\n    local new_str\n    words=($(echo\
    \ \"$str\" | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        new_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        new_words[$i]=\"$new_word\"\
    \n        ((i++))\n    done\n    new_str=$(printf \"%s \" \"${new_words[@]}\"\
    )\n    echo \"$new_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local result=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len2=0\n  local len3=0\n  local sorted=\"\"\n  local sorted_words=()\n  local\
    \ sorted_chars=()\n  local sorted_char=\"\"\n  local sorted_word=\"\"\n  local\
    \ sorted_str=\"\"\n  local sorted_str_len=0\n  local sorted_str_len2=0\n  local\
    \ sorted_str_len3=0\n  local sorted_str_word=\"\"\n  local sorted_str_char=\"\"\
    \n  local sorted_str_char_len=0\n  local sorted_str_char_len2=0\n  local sorted_str_char_len3=0\n\
    \  local sorted_str_char_char=\"\"\n  local sorted_str_char_char2=\"\"\n  local\
    \ sorted_str_char_char3=\"\"\n  local sorted_str_char_char_len=0\n  local sorted_str_char_char_len2=0\n\
    \  local sorted_str_char_char_len3=0\n  local sorted_str_char_char_char=\"\"\n\
    \  local sorted_str_char_char_char2=\"\"\n  local sorted_str_char_char_char3=\"\
    \"\n  local sorted_str_char_char_char_len=0\n  local sorted_str_char_char_char_len2=0\n\
    \  local sorted_str_char_char_char_len3=0\n  local sorted_str_char_char_char_char=\"\
    \"\n  local sorted_str_char_char_char_char2=\"\"\n  local sorted_str_char_char_char_char3=\"\
    \"\n  local sorted_str_char_char_char_char_len=0\n  local sorted_str_char_char_char_char_len2=0\n\
    \  local sorted_str_char_char_char_char_len3=0\n  local sorted_str_char_char_char_char_char=\"\
    \"\n  local sorted_str_char_char_char_char_char2=\"\"\n  local sorted_str_char_char_char\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local ret=\"\"\n    local word=\"\"\n\
    \    for (( i=0; i<${#str}; i++ )); do\n        if [[ ${str:$i:1} == \" \" ]];\
    \ then\n            ret+=\"$word \"\n            word=\"\"\n        else\n   \
    \         word+=${str:$i:1}\n        fi\n    done\n    ret+=\"$word\"\n    echo\
    \ \"$ret\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_new_str=0\n\
    \    local is_space=0\n    local is_word=0\n    local is_char=0\n    local is_new_str=0\n\
    \    local is_new_word=0\n    local is_new_char=0\n    local is_new_char_in_new_word=0\n\
    \    local is_new_char_in_new_str=0\n    local is_new_word_in_new_str=0\n    local\
    \ is_new_str_in_new_str=0\n    local is_new_char_in_new_str_in_new_str=0\n   \
    \ local is_new_word_in_new_str_in_new_str=0\n    local is_new_str_in_new_str_in_new_str=0\n\
    \    local is_new_char_in_new_word_in_new_str_in_new_str=0\n    local is_new_word_in_new_str_in_new_str_in_new_str=0\n\
    \    local is_new_str_in_new_str_in_new_str_in_new_str=0\n    local is_new_char_in_new_word_in_new_str_in_new_str_in_new_str=0\n\
    \    local is_new_word_in_new_str_in_new_str_in_new_str_in_new_str=0\n    local\
    \ is_new_str_in_new_str_in_new_str_in_new_str_in_new_str=0\n    local is_new_char_in_new_word_in_new_str_in_new_str_in_new_str_in_new_str=0\n\
    \    local is_new_word_in_new_str_in_new_str_in_new_str\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local arr=()\n    local i=0\n    local\
    \ word=\"\"\n    local char=\"\"\n    local result=\"\"\n    local sorted=\"\"\
    \n    local sorted_arr=()\n    local sorted_word=\"\"\n    local sorted_char=\"\
    \"\n    local sorted_result=\"\"\n    # Split string into array of words\n   \
    \ IFS=' ' read -r -a arr <<< \"$str\"\n    # Loop through array of words\n   \
    \ for word in \"${arr[@]}\"; do\n        # Loop through characters in word\n \
    \       for ((i=0; i<${#word}; i++)); do\n            char=${word:$i:1}\n    \
    \        # Add character to sorted string\n            sorted+=$char\n       \
    \ done\n        # Sort characters in word\n        sorted_arr=($(echo \"$sorted\"\
    \ | grep -o . | sort))\n        # Loop through sorted characters in word\n   \
    \     for sorted_char in \"${sorted_arr[@]}\"; do\n            # Add character\
    \ to sorted word\n            sorted_word+=$sorted_char\n        done\n      \
    \  # Add sorted word to result\n        result+=\"$sorted_word \"\n        # Reset\
    \ sorted word\n        sorted_word=\"\"\n        # Reset sorted string\n     \
    \   sorted=\"\"\n    done\n    # Remove trailing space\n    result=${result%?}\n\
    \    # Print result\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_char=0\n\
    \    local char_ascii=0\n    local char_ascii_min=0\n    local char_ascii_min_index=0\n\
    \    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local\
    \ char_ascii_min_tmp_index=0\n    local char_ascii_min_tmp_index_tmp=0\n    local\
    \ char_ascii_min_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_index=0\n    local\
    \ char_ascii_min_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_ascii\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_str=${#str}\n    local ascii_val=0\n\
    \    local ascii_val_min=0\n    local ascii_val_min_index=0\n    local ascii_val_min_char=\"\
    \"\n    local ascii_val_min_char_index=0\n    local ascii_val_min_char_index_tmp=0\n\
    \    local ascii_val_min_char_tmp=\"\"\n    local ascii_val_min_char_tmp_index=0\n\
    \    local ascii_val_min_char_tmp_index_tmp=0\n    local ascii_val_min_char_tmp_tmp=\"\
    \"\n    local ascii_val_min_char_tmp_tmp_index=0\n    local ascii_val_min_char_tmp_tmp_index_tmp=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp=\"\"\n    local ascii_val_min_char_tmp_tmp_tmp_index=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_index_tmp=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp=\"\
    \"\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_index=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp=\"\"\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_val_min_char_tmp_tmp_tmp_tmp_tmp_tmp=\"\
    \"\n    local ascii_val_min_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local -a words\n    local -a ordered_words\n\
    \    local -a ordered_str\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ word\n    local ordered_word\n    local char\n    local -i char_ascii\n    local\
    \ -i min_ascii\n    local -i min_index\n    local -i len\n    local -i len_ordered_str\n\
    \    local -i len_ordered_word\n    local -i len_word\n    local -i len_words\n\
    \    local -i len_ordered_words\n    local -i len_str\n    local -i len_char\n\
    \    local -i len_char_ascii\n    local -i len_min_ascii\n    local -i len_min_index\n\
    \    local -i len_i\n    local -i len_j\n    local -i len_k\n    local -i len_word\n\
    \    local -i len_ordered_word\n    local -i len_char\n    local -i len_char_ascii\n\
    \    local -i len_min_ascii\n    local -i len_min_index\n    local -i len_len\n\
    \    local -i len_len_ordered_str\n    local -i len_len_ordered_word\n    local\
    \ -i len_len_word\n    local -i len_len_words\n    local -i len_len_ordered_words\n\
    \    local -i len_len_str\n    local -i len_len_char\n    local -i len_len_char_ascii\n\
    \    local -i len_len_min_ascii\n    local -i len_len_min_index\n    local -i\
    \ len_len_i\n    local -i len_len_j\n    local -i len_len_k\n    local -i len_len_word\n\
    \    local -i len_len_ordered_word\n    local -i len_len_char\n    local -i len_len_char_ascii\n\
    \    local -i len_len_min_ascii\n    local -i len_len_min_index\n    local -i\
    \ len_len_len\n   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    # You can use the following\
    \ command to sort a string\n    # echo \"hello\" | grep -o . | sort | tr -d '\\\
    n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2eamtf53.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmp2eamtf53.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1} == \" \" ]];\
    \ then\n            result+=\"$word \"\n            word=\"\"\n        else\n\
    \            word+=\"$(echo -n \"${str:$i:1}\" | sort -n)\"\n        fi\n    done\n\
    \    result+=\"$word\"\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_arr=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local space=0\n    local exclamation=0\n    local question=0\n\
    \    local period=0\n    local comma=0\n    local colon=0\n    local semicolon=0\n\
    \    local single_quote=0\n    local double_quote=0\n    local backslash=0\n \
    \   local slash=0\n    local left_parenthesis=0\n    local right_parenthesis=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local less_than=0\n    local greater_than=0\n  \
    \  local at=0\n    local pound=0\n    local dollar=0\n    local percent=0\n  \
    \  local caret=0\n    local ampersand=0\n    local asterisk=0\n    local dash=0\n\
    \    local plus=0\n    local equals=0\n    local tilde=0\n    local backtick=0\n\
    \    local bar=0\n    local num_1=0\n    local num_2=0\n    local num_3=0\n  \
    \  local num_4=0\n    local num_5=0\n    local num_6=0\n    local num_7=0\n  \
    \  local num_8=0\n    local num_9=0\n    local num_0=0\n    local length=${#str}\n\
    \    local char_arr_length=0\n    local char_arr_index=0\n    local char_arr_index_2=0\n\
    \    local char_arr_index_3=0\n    local char_arr_index_4=\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_new_str=0\n\
    \    local ascii_char=0\n    local ascii_char_min=0\n    local ascii_char_min_index=0\n\
    \    local ascii_char_min_index_tmp=0\n    local ascii_char_min_tmp=0\n    local\
    \ ascii_char_tmp=0\n    local ascii_char_tmp_index=0\n    local ascii_char_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_tmp=0\n    local ascii_char_tmp_tmp_index=0\n    local\
    \ ascii_char_tmp_tmp_index_tmp=0\n    local ascii_char_tmp_tmp_tmp=0\n    local\
    \ ascii_char_tmp_tmp_tmp_index=0\n    local ascii_char_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local as\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local len=0\n    local len_str=${#str}\n    local len_word=0\n    local\
    \ len_char=0\n    local len_new_str=0\n    local len_new_word=0\n    local len_new_char=0\n\
    \    local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n  \
    \  local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n    local\
    \ new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\
    \"\n    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n\
    \    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n  \
    \  local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n    local\
    \ new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n    local new_char=\"\
    \"\n    local new_str=\"\"\n    local new_word=\"\"\n    local new_char=\"\"\n\
    \    local new_str=\"\"\n    local new_word=\"\"\n    local new_char=\"\"\n  \
    \  local new_str=\"\"\n    local new_word=\"\"\n    local new_char=\"\"\n    local\
    \ new_str=\"\"\n    local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\
    \"\n    local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n\
    \    local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n  \
    \  local new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n    local\
    \ new_word=\"\"\n    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\
    \"\n    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n\
    \    local new_char=\"\"\n    local new_str=\"\"\n    local new_word=\"\"\n  \
    \  local new_char=\"\"\n    local new_str=\"\"\n    local\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_result=0\n\
    \    local char_arr=()\n    local word_arr=()\n    local result_arr=()\n    local\
    \ char_ascii=0\n    local char_ascii_min=0\n    local char_ascii_min_index=0\n\
    \    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n    local\
    \ char_ascii_min_tmp_index=0\n    local char_ascii_min_tmp_index_tmp=0\n    local\
    \ char_ascii_min_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_index=0\n    local\
    \ char_ascii_min_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_index_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_ascii_min_tmp_tmp\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local words=$(echo $1 | tr ' ' '\\n')\n    local result=\"\
    \"\n    for word in $words; do\n        local chars=$(echo $word | grep -o .)\n\
    \        local sorted=$(echo $chars | tr ' ' '\\n' | sort | tr '\\n' ' ')\n  \
    \      result=\"$result $sorted\"\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local word\n  local sorted_word\n  local i\n  local j\n  local k\n  local len\n\
    \  local len_result\n  local len_words\n  local len_sorted_words\n  local len_word\n\
    \  local len_sorted_word\n  local char\n  local char_sorted\n\n  words=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n  len_words=${#words[@]}\n  for ((i=0; i<len_words;\
    \ i++)); do\n    word=${words[$i]}\n    len_word=${#word}\n    for ((j=0; j<len_word;\
    \ j++)); do\n      char=${word:$j:1}\n      sorted_word+=$(printf \"%s\" \"$char\"\
    \ | sort)\n    done\n    sorted_words+=(\"$sorted_word\")\n    sorted_word=\"\"\
    \n  done\n  len_sorted_words=${#sorted_words[@]}\n  for ((i=0; i<len_sorted_words;\
    \ i++)); do\n    sorted_word=${sorted_words[$i]}\n    len_sorted_word=${#sorted_word}\n\
    \    word=${words[$i]}\n    len_word=${#word}\n    for ((j=0; j<len_word; j++));\
    \ do\n      char=${word:$j:1}\n      for ((k=0; k<len_sorted_word; k++)); do\n\
    \        char_sorted=${sorted_word:$k:1}\n        if [[ \"$char\" == \"$char_sorted\"\
    \ ]]; then\n          sorted_word=${sorted_word:0:$k}${sorted_word:$((k+1)):$len_sorted_word}\n\
    \          break\n        fi\n      done\n      result+=(\"$char\")\n    done\n\
    \    result+=(\" \")\n  done\n  len_result=${#result[@]}\n  for ((i=0; i<len_result;\
    \ i++)); do\n    printf\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nh0lvb5.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmp2nh0lvb5.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local i\n    local j\n    local word\n    local sorted_word\n  \
    \  local result_string\n\n    words=($(echo $1 | tr ' ' '\\n'))\n    for word\
    \ in \"${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n\n    for\
    \ ((i=0; i<${#words[@]}; i++)); do\n        result+=(\"${words[$i]}\")\n     \
    \   result+=(\"${sorted_words[$i]}\")\n    done\n\n    result_string=$(echo \"\
    ${result[@]}\" | tr ' ' '\\n' | sort -u | tr -d '\\n')\n    echo \"$result_string\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local words=($str)\n    local result=\"\
    \"\n    for word in \"${words[@]}\"; do\n        local chars=($(echo $word | grep\
    \ -o .))\n        local sorted=($(printf \"%s\\n\" \"${chars[@]}\" | sort))\n\
    \        local sorted_word=$(printf \"%s\" \"${sorted[@]}\")\n        result=\"\
    $result$sorted_word\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Hint: Use the following\
    \ command to sort the characters of a string:\n    # sorted=$(echo $string | grep\
    \ -o . | sort | tr -d '\\n')\n    # Hint: Use the following command to replace\
    \ a word with another word:\n    # echo $string | sed -e \"s/\\<$word\\>/$new_word/g\"\
    \n    # Hint: Use the following command to get the length of a string:\n    #\
    \ length=$(echo $string | wc -c)\n    # Hint: Use the following command to get\
    \ the nth word of a string:\n    # nth_word=$(echo $string | cut -d ' ' -f $n)\n\
    \    # Hint: Use the following command to get the position of the nth word of\
    \ a string:\n    # nth_word_position=$(echo $string | grep -b -o \"\\<$nth_word\\\
    >\" | cut -d ':' -f 1)\n    # Hint: Use the following command to get the position\
    \ of the last word of a string:\n    # last_word_position=$(echo $string | grep\
    \ -b -o \"\\<$last_word\\>\" | cut -d ':' -f 1)\n    # Hint: Use the following\
    \ command to get the last word of a string:\n    # last_word=$(echo $string |\
    \ cut -d ' ' -f $last_word_index)\n    # Hint: Use the following command to get\
    \ the index of the last word of a string:\n    # last_word_index=$(echo $string\
    \ | wc -w)\n    # Hint: Use the following command to get the position of the last\
    \ character of a string:\n    # last_char_position=$(echo $string | wc -c)\n \
    \   # Hint: Use the following command to get the last character of a string:\n\
    \    # last_char=$(echo $string | cut -c $last_char_position)\n    # Hint: Use\
    \ the following command to get the position of the last character of a word:\n\
    \    # last_char_position=$(echo $word | wc -c)\n    # Hint: Use the following\
    \ command to\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqm42ow0l.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpqm42ow0l.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local res=\"\"\n    local word=\"\"\n\
    \    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n\
    \    local len_word=0\n    local len_char=0\n    for ((i=0; i<len; i++)); do\n\
    \        char=${str:$i:1}\n        if [[ $char == \" \" ]]; then\n           \
    \ res+=$word\n            res+=\" \"\n            word=\"\"\n        else\n  \
    \          word+=$char\n        fi\n    done\n    res+=$word\n    len=${#res}\n\
    \    for ((i=0; i<len; i++)); do\n        char=${res:$i:1}\n        if [[ $char\
    \ == \" \" ]]; then\n            word=\"\"\n        else\n            word+=$char\n\
    \        fi\n    done\n    len_word=${#word}\n    for ((i=0; i<len_word; i++));\
    \ do\n        char=${word:$i:1}\n        for ((j=i+1; j<len_word; j++)); do\n\
    \            if [[ ${word:$j:1} < $char ]]; then\n                char=${word:$j:1}\n\
    \                k=$j\n            fi\n        done\n        word=${word:0:$i}${word:$k:1}${word:$i:$k-$i}${word:$k+1:$len_word-$k-1}\n\
    \    done\n    res=\"\"\n    for ((i=0; i<len; i++)); do\n        char=${str:$i:1}\n\
    \        if [[ $char == \" \" ]]; then\n            res+=\" \"\n        else\n\
    \            res+=$word:$i:1\n            word=${word:1:$len_word-1}\n       \
    \ fi\n    done\n    echo $res\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local str_len=${#str}\n    local word=\"\
    \"\n    local result=\"\"\n    local char=\"\"\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local space=0\n    local exclamation=0\n    local question=0\n\
    \    local period=0\n    local comma=0\n    local colon=0\n    local semicolon=0\n\
    \    local dash=0\n    local apostrophe=0\n    local quote=0\n    local left_paren=0\n\
    \    local right_paren=0\n    local left_bracket=0\n    local right_bracket=0\n\
    \    local left_brace=0\n    local right_brace=0\n    local left_angle=0\n   \
    \ local right_angle=0\n    local at=0\n    local backslash=0\n    local forward_slash=0\n\
    \    local backtick=0\n    local tilde=0\n    local dollar=0\n    local percent=0\n\
    \    local caret=0\n    local ampersand=0\n    local asterisk=0\n    local plus=0\n\
    \    local equals=0\n    local less_than=0\n    local greater_than=0\n    local\
    \ pipe=0\n    local underscore=0\n    local pound=0\n    local number=0\n    local\
    \ other=0\n    local temp=0\n    local temp_str=\"\"\n    local temp_str_len=0\n\
    \    local temp_char=\"\"\n    local temp_char_ascii=0\n    local temp_char_ascii_prev=0\n\
    \    local temp_char_ascii_next=0\n    local temp_char_ascii_prev_prev=0\n   \
    \ local temp_char_ascii_next_next=0\n    local temp_char_asci\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ sorted_string\n    local word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n   \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local -a words\n    local -a new_words\n    local -a chars\n    local -a\
    \ new_chars\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local A=0\n    local B=0\n  \
    \  local C=0\n    local D=0\n    local E=0\n    local F=0\n    local G=0\n   \
    \ local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n    local\
    \ M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n    local R=0\n\
    \    local S=0\n    local T=0\n    local U=0\n    local V=0\n    local W=0\n \
    \   local X=0\n    local Y=0\n    local Z=0\n    local space=0\n    local exclamation=0\n\
    \    local question=0\n    local comma=0\n    local period=0\n    local colon=0\n\
    \    local semicolon=0\n    local apostrophe=0\n    local dash=0\n    local underscore=0\n\
    \    local left_parenthesis=0\n    local right_parenthesis=0\n    local left_bracket=0\n\
    \    local right_bracket=0\n    local left_brace=0\n    local right_brace=0\n\
    \    local left_angle=0\n    local right_angle=0\n    local at=0\n    local backslash=0\n\
    \    local slash=0\n    local backtick=0\n    local hash=0\n    local dollar=0\n\
    \    local percent=0\n    local caret=0\n    local ampersand=0\n    local asterisk=0\n\
    \   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"TODO\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local -a words\n    local -a new_words\n\
    \    local -a new_str\n    local i\n    local j\n    local k\n\n    # Split string\
    \ into words\n    IFS=' ' read -ra words <<< \"$str\"\n\n    # For each word,\
    \ sort the characters and add to new_words array\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        word=${words[$i]}\n        new_word=\"\"\n        for ((j=0;\
    \ j<${#word}; j++)); do\n            new_word+=\"${word:$j:1}\"\n        done\n\
    \        new_words[$i]=$(echo \"$new_word\" | grep -o . | sort | tr -d '\\n')\n\
    \    done\n\n    # Add words to new_str array\n    for ((i=0; i<${#words[@]};\
    \ i++)); do\n        new_str[$i]=${new_words[$i]}\n    done\n\n    # Add spaces\
    \ to new_str array\n    for ((i=0; i<${#words[@]}; i++)); do\n        k=$((i+1))\n\
    \        if [[ $k -lt ${#words[@]} ]]; then\n            new_str[$k]=\" \"${new_str[$k]}\n\
    \        fi\n    done\n\n    # Print new string\n    echo \"${new_str[@]}\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a ordered_words\n    local i\n\
    \    local word\n    local ordered_word\n    local result\n\n    words=($(echo\
    \ $1 | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        ordered_word=$(echo\
    \ $word | grep -o . | sort | tr -d '\\n')\n        ordered_words+=($ordered_word)\n\
    \    done\n    result=${ordered_words[0]}\n    for ((i=1; i<${#ordered_words[@]};\
    \ i++)); do\n        result=\"$result ${ordered_words[$i]}\"\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result$(echo -n $word | grep -o .\
    \ | sort -n | tr -d '\\n')\"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_result=0\n\
    \    local ascii_char=0\n    local ascii_char_min=0\n    local ascii_char_min_index=0\n\
    \    local ascii_char_min_index_prev=0\n    local ascii_char_min_index_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -a words\n  local -a chars\n  local word\n  local char\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local result=\"\"\n    for word in $1; do\n        local\
    \ chars=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            chars=\"\
    $chars${word:$i:1}\"\n        done\n        chars=$(echo -e \"$chars\" | sort)\n\
    \        result=\"$result$chars\"\n    done\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i len\n    local -i len_w\n    local -i len_s\n\
    \    local -i len_diff\n    local -i len_diff_w\n    local -i len_diff_s\n   \
    \ local -i len_diff_w_s\n    local -i len_diff_s_w\n    local -i len_diff_w_s_2\n\
    \    local -i len_diff_s_w_2\n    local -i len_diff_w_s_3\n    local -i len_diff_s_w_3\n\
    \    local -i len_diff_w_s_4\n    local -i len_diff_s_w_4\n    local -i len_diff_w_s_5\n\
    \    local -i len_diff_s_w_5\n    local -i len_diff_w_s_6\n    local -i len_diff_s_w_6\n\
    \    local -i len_diff_w_s_7\n    local -i len_diff_s_w_7\n    local -i len_diff_w_s_8\n\
    \    local -i len_diff_s_w_8\n    local -i len_diff_w_s_9\n    local -i len_diff_s_w_9\n\
    \    local -i len_diff_w_s_10\n    local -i len_diff_s_w_10\n    local -i len_diff_w_s_11\n\
    \    local -i len_diff_s_w_11\n    local -i len_diff_w_s_12\n    local -i len_diff_s_w_12\n\
    \    local -i len_diff_w_s_13\n    local -i len_diff_s_w_13\n    local -i len_diff_w_s_14\n\
    \    local -i len_diff_s_w_14\n    local -i len_diff_w_s_15\n    local -i len_diff_s_w_15\n\
    \    local -i len_diff_w_s_16\n    local -i len\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n\n    words=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        sorted_word=$(echo\
    \ \"$word\" | grep -o . | sort | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\"\
    )\n    done\n    for ((i = 0; i < ${#words[@]}; i++)); do\n        result+=(\"\
    ${sorted_words[$i]}\")\n        result+=(\"${words[$i]}\")\n    done\n    echo\
    \ \"${result[@]}\" | tr -d ' '\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_string=${#string}\n    local ascii=()\n\
    \    local ascii_word=()\n    local ascii_char=()\n    local ascii_sorted=()\n\
    \    local ascii_sorted_word=()\n    local ascii_sorted_char=()\n    local ascii_sorted_char_index=()\n\
    \    local ascii_sorted_char_index_word=()\n    local ascii_sorted_char_index_char=()\n\
    \    local ascii_sorted_char_index_char_word=()\n    local ascii_sorted_char_index_char_char=()\n\
    \    local ascii_sorted_char_index_char_char_word=()\n    local ascii_sorted_char_index_char_char_char=()\n\
    \    local ascii_sorted_char_index_char_char_char_word=()\n    local ascii_sorted_char_index_char_char_char_char=()\n\
    \    local ascii_sorted_char_index_char_char_char_char_word=()\n    local ascii_sorted_char_index_char_char_char_char_char=()\n\
    \    local ascii_sorted_char_index_char_char_char_char_char_word=()\n    local\
    \ ascii_sorted_char_index_char_char_char_char_char_char=()\n    local ascii_sorted_char_index_char_char_char_char_char_char_word=()\n\
    \    local ascii_sorted_char_index_char_char_char_char_char_char_char=()\n   \
    \ local ascii_sorted_char_index_char_char_char_char_char_char_char_word=()\n \
    \   local ascii_sorted_char_index\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len2=0\n  local\
    \ len3=0\n  local str=\"$1\"\n  len=${#str}\n  for ((i=0; i<len; i++)); do\n \
    \   char=${str:i:1}\n    if [[ \"$char\" == \" \" ]]; then\n      len2=${#word}\n\
    \      for ((j=0; j<len2; j++)); do\n        char=${word:j:1}\n        len3=${#result}\n\
    \        for ((k=0; k<len3; k++)); do\n          if [[ \"$char\" < \"${result:k:1}\"\
    \ ]]; then\n            result=\"${result:0:k}$char${result:k}\"\n           \
    \ break\n          fi\n        done\n        if [[ $k -eq $len3 ]]; then\n   \
    \       result=\"$result$char\"\n        fi\n      done\n      result=\"$result\
    \ \"\n      word=\"\"\n    else\n      word=\"$word$char\"\n    fi\n  done\n \
    \ len2=${#word}\n  for ((j=0; j<len2; j++)); do\n    char=${word:j:1}\n    len3=${#result}\n\
    \    for ((k=0; k<len3; k++)); do\n      if [[ \"$char\" < \"${result:k:1}\" ]];\
    \ then\n        result=\"${result:0:k}$char${result:k}\"\n        break\n    \
    \  fi\n    done\n    if [[ $k -eq $len3 ]]; then\n      result=\"$result$char\"\
    \n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local i\n    local j\n    local word\n    local sorted_word\n  \
    \  local result_string\n\n    # Split the string into words\n    IFS=' ' read\
    \ -ra words <<< \"$1\"\n\n    # Sort each word\n    for word in \"${words[@]}\"\
    ; do\n        sorted_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n \
    \           sorted_word+=\"${word:$i:1}\"\n        done\n        sorted_words+=(\"\
    $(echo \"$sorted_word\" | grep -o . | sort | tr -d '\\n')\")\n    done\n\n   \
    \ # Build the result string\n    for (( i=0; i<${#words[@]}; i++ )); do\n    \
    \    result+=(\"${words[$i]}\")\n        result+=(\"${sorted_words[$i]}\")\n \
    \   done\n\n    # Print the result\n    result_string=\"${result[@]}\"\n    echo\
    \ \"${result_string:1}\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ sorted_string\n    local word\n    local sorted_word\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local space\n   \
    \ local string\n    local sorted_string\n    local char\n    local sorted_char\n\
    \    local char_array\n    local sorted_char_array\n    local char_array_length\n\
    \    local sorted_char_array_length\n    local char_array_index\n    local sorted_char_array_index\n\
    \    local char_array_index_length\n    local sorted_char_array_index_length\n\
    \    local char_array_index_length_char\n    local sorted_char_array_index_length_char\n\
    \    local char_array_index_length_char_ascii\n    local sorted_char_array_index_length_char_ascii\n\
    \    local char_array_index_length_char_ascii_index\n    local sorted_char_array_index_length_char_ascii_index\n\
    \    local char_array_index_length_char_ascii_index_length\n    local sorted_char_array_index_length_char_ascii_index_length\n\
    \    local char_array_index_length_char_ascii_index_length_char\n    local sorted_char_array_index_length_char_ascii_index_length_char\n\
    \    local char_array_index_length_char_ascii_index_length_char_ascii\n    local\
    \ sorted_char_array_index_length_char_ascii_index_length_char_ascii\n    local\
    \ char_array_index_length_char_ascii_index_length_char_ascii_index\n    local\
    \ sorted_char_array_index_length_char_ascii_index_length_char_ascii_index\n  \
    \  local char_array_index_length_char_as\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i len\n    local -i len_sorted\n    local -i len_words\n\
    \    local -i len_sorted_words\n    local -i len_words_sorted\n    local -i len_sorted_words_sorted\n\
    \    local -i len_words_sorted_sorted\n    local -i len_sorted_words_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted\n    local -i len_sorted_words_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted\n    local -i len_sorted_words_sorted_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted_sorted\n    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted_sorted_sorted\n    local -i\
    \ len_sorted_words_sorted_sorted_sorted_sorted_sorted_sorted\n    local -i len_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_words_sorted\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local result=\"\"\n  local word=\"\"\n  local\
    \ char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_word=0\n\
    \  local len_str=${#str}\n  local char_ascii=0\n  local char_ascii_min=0\n  local\
    \ char_ascii_min_index=0\n  local char_ascii_min_index_tmp=0\n  local char_ascii_min_tmp=0\n\
    \  local char_ascii_min_tmp_index=0\n  local char_ascii_min_tmp_index_tmp=0\n\
    \  local char_ascii_min_tmp_tmp=0\n  local char_ascii_min_tmp_tmp_index=0\n  local\
    \ char_ascii_min_tmp_tmp_index_tmp=0\n  local char_ascii_min_tmp_tmp_tmp=0\n \
    \ local char_ascii_min_tmp_tmp_tmp_index=0\n  local char_ascii_min_tmp_tmp_tmp_index_tmp=0\n\
    \  local char_ascii_min_tmp_tmp_tmp_tmp=0\n  local char_ascii_min_tmp_tmp_tmp_tmp_index=0\n\
    \  local char_ascii_min_tmp_tmp_tmp_tmp_index_tmp=0\n  local char_ascii_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \  local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index=0\n  local char_ascii_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \  local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n  local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \  local char_ascii_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n  local char_ascii_min_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local words=()\n  local word=\"\"\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local\
    \ u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local\
    \ A=0\n  local B=0\n  local C=0\n  local D=0\n  local E=0\n  local F=0\n  local\
    \ G=0\n  local H=0\n  local I=0\n  local J=0\n  local K=0\n  local L=0\n  local\
    \ M=0\n  local N=0\n  local O=0\n  local P=0\n  local Q=0\n  local R=0\n  local\
    \ S=0\n  local T=0\n  local U=0\n  local V=0\n  local W=0\n  local X=0\n  local\
    \ Y=0\n  local Z=0\n  local space=0\n  local exclamation=0\n  local question=0\n\
    \  local period=0\n  local comma=0\n  local colon=0\n  local semicolon=0\n  local\
    \ apostrophe=0\n  local dash=0\n  local underscore=0\n  local plus=0\n  local\
    \ equal=0\n  local open_paren=0\n  local close_paren=0\n  local open_bracket=0\n\
    \  local close_bracket=0\n  local open_brace=0\n  local close_brace=0\n  local\
    \ backslash=0\n  local slash=0\n  local at=0\n  local pound=0\n  local dollar=0\n\
    \  local percent=0\n  local caret=0\n  local ampersand=0\n  local asterisk=0\n\
    \  local tilde=0\n  local less_than=0\n  local greater_than=0\n  local bar=0\n\
    \  local new_word=\"\"\n  local new_str=\"\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word=\"\"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local space=0\n    local exclamation=0\n    local question=0\n    local period=0\n\
    \    local comma=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local at=0\n    local hash=0\n    local dollar=0\n    local\
    \ percent=0\n    local caret=0\n    local ampersand=0\n    local asterisk=0\n\
    \    local open_paren=0\n    local close_paren=0\n    local open_bracket=0\n \
    \   local close_bracket=0\n    local open_brace=0\n    local close_brace=0\n \
    \   local underscore=0\n    local plus=0\n    local equal=0\n    local less_than=0\n\
    \    local greater_than=0\n    local backslash=0\n    local pipe=0\n    local\
    \ tilde=0\n    local single_quote=0\n    local double_quote=0\n    local backtick=0\n\
    \    local grave=0\n    local bar=0\n    local vertical_bar=0\n    local tab=0\n\
    \    local newline=0\n    local return=0\n    local form_feed=0\n    local carriage_return=0\n\
    \    local backspace=0\n    local delete=0\n    local null=0\n    local bell=0\n\
    \    local escape=0\n    local tab=0\n    local newline=0\n    local return=0\n\
    \    local form_feed=0\n    local carriage_return=0\n    local backspace=0\n \
    \   local delete=0\n    local null=0\n    local bell=0\n\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local res=\"\"\n    local word=\"\"\n\
    \    local i=0\n    local j=0\n    local len=${#str}\n    local chr=\"\"\n   \
    \ local chr_arr=()\n    local chr_arr_len=0\n    local chr_arr_idx=0\n    local\
    \ chr_arr_idx_min=0\n    local chr_min=\"\"\n    local chr_min_ascii=0\n    local\
    \ chr_ascii=0\n    local chr_arr_idx_min_ascii=0\n    local chr_arr_idx_min_ascii_tmp=0\n\
    \    local chr_arr_idx_min_ascii_tmp_idx=0\n    local chr_arr_idx_min_ascii_tmp_idx_min=0\n\
    \    local chr_arr_idx_min_ascii_tmp_idx_min_ascii=0\n    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp=0\n\
    \    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx=0\n    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min=0\n\
    \    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min_ascii=0\n    local\
    \ chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min_ascii_tmp=0\n    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min_ascii_tmp_idx=0\n\
    \    local chr_arr_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min_ascii_tmp_idx_min=0\n\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  # TODO: Write your code here\n  echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    echo \"$1\" | tr ' ' '\\n' | sort -f | tr '\\n' ' '\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local -a words=()\n    local -a chars=()\n\
    \    local -a result=()\n    local word\n    local char\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local A\n    local\
    \ B\n    local C\n    local D\n    local E\n    local F\n    local G\n    local\
    \ H\n    local I\n    local J\n    local K\n    local L\n    local M\n    local\
    \ N\n    local O\n    local P\n    local Q\n    local R\n    local S\n    local\
    \ T\n    local U\n    local V\n    local W\n    local X\n    local Y\n    local\
    \ Z\n    local space\n    local exclamation\n    local question\n    local comma\n\
    \    local period\n    local colon\n    local semicolon\n    local dash\n    local\
    \ underscore\n    local plus\n    local equal\n    local left_parenthesis\n  \
    \  local right_parenthesis\n    local left_bracket\n    local right_bracket\n\
    \    local left_brace\n    local right_brace\n    local less_than\n    local greater_than\n\
    \    local slash\n    local backslash\n    local ampersand\n    local pipe\n \
    \   local tilde\n    local backtick\n    local at\n    local dollar\n    local\
    \ percent\n    local caret\n    local asterisk\n    local single_quote\n    local\
    \ double_quote\n    local newline\n    local tab\n    local backspace\n    local\
    \ formfeed\n    local carriage_return\n    local null\n    local space_count=0\n\
    \    local exclamation_count=0\n    local question_count=0\n    local comma_count=0\n\
    \    local period_count=0\n    local colon_count=0\n    local semicolon_count=0\n\
    \    local dash_count=0\n    local underscore_count=0\n    local plus_count=0\n\
    \    local equal_count=0\n    local left_parenthesis_count=0\n    local right\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local word\n  local result=\"\"\n \
    \ for word in $string; do\n    result=\"$result $(echo $word | grep -o . | sort\
    \ | tr -d '\\n')\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local result=\"\"\n    for word in\
    \ $string; do\n        local sorted_word=\"\"\n        for (( i=0; i<${#word};\
    \ i++ )); do\n            sorted_word+=\"${word:$i:1}\"\n        done\n      \
    \  sorted_word=$(echo -e \"$sorted_word\" | sort -n)\n        result+=\"$sorted_word\"\
    \n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a new_words\n    local -a new_string\n\
    \    local i\n    local j\n    local k\n    local word\n    local new_word\n \
    \   local new_str\n    local str\n    local -i len\n    local -i len_new\n   \
    \ local -i len_str\n    local -i len_new_str\n    local -i len_word\n    local\
    \ -i len_new_word\n    local -i len_words\n    local -i len_new_words\n    local\
    \ -i len_new_string\n    local -i len_str_new_string\n    local -i len_new_str_new_string\n\
    \    local -i len_new_word_new_string\n    local -i len_word_new_string\n    local\
    \ -i len_new_words_new_string\n    local -i len_words_new_string\n    local -i\
    \ len_new_string_new_string\n    local -i len_new_str_new_string_new_string\n\
    \    local -i len_str_new_string_new_string\n    local -i len_new_word_new_string_new_string\n\
    \    local -i len_word_new_string_new_string\n    local -i len_new_words_new_string_new_string\n\
    \    local -i len_words_new_string_new_string\n    local -i len_new_string_new_string_new_string\n\
    \    local -i len_new_str_new_string_new_string_new_string\n    local -i len_str_new_string_new_string_new_string\n\
    \    local -i len_new_word_new_string_new_string_new_string\n    local -i len_word_new_string_new_string_new_string\n\
    \    local -i len_new_words_new_string_new_string_new_string\n    local -i len_words_new_string_new_string_new_string\n\
    \    local -i len_new_string_new_string_new_string_new_string\n    local -i len_new_str_new_string_new_string_new\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a\
    \ sorted_words=()\n    for word in \"${words[@]}\"; do\n        sorted_words+=(\"\
    $(echo $word | fold -w1 | sort | tr -d '\\n')\")\n    done\n    echo \"${sorted_words[@]}\"\
    \ | tr ' ' '\\n' | tr -d '\\n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_str=${#str}\n    local char_arr=()\n\
    \    local word_arr=()\n    local str_arr=()\n    local sorted_arr=()\n    local\
    \ sorted_str=\"\"\n    local sorted_word=\"\"\n    local sorted_char=\"\"\n  \
    \  local sorted_char_arr=()\n    local sorted_word_arr=()\n    local sorted_str_arr=()\n\
    \    local sorted_str_arr_len=0\n    local sorted_word_arr_len=0\n    local sorted_char_arr_len=0\n\
    \    local sorted_str_len=0\n    local sorted_word_len=0\n    local sorted_char_len=0\n\
    \    local sorted_str_arr_index=0\n    local sorted_word_arr_index=0\n    local\
    \ sorted_char_arr_index=0\n    local sorted_str_index=0\n    local sorted_word_index=0\n\
    \    local sorted_char_index=0\n    local sorted_str_arr_index_prev=0\n    local\
    \ sorted_word_arr_index_prev=0\n    local sorted_char_arr_index_prev=0\n    local\
    \ sorted_str_index_prev=0\n    local sorted_word_index_prev=0\n    local sorted_char_index_prev=0\n\
    \    local sorted_str_arr_index_next=0\n    local sorted_word_arr_index_next=0\n\
    \    local sorted_char_arr_index_next=0\n    local sorted_str_index_next=0\n \
    \   local sorted_word_index_next=0\n    local sorted_char_index_next=0\n    local\
    \ sorted_str_arr_index_next_next=0\n    local sorted_word_arr_index_next_next=0\n\
    \    local sorted_char_arr_index_next_next=0\n    local sorted_str_index_next_next=0\n\
    \    local sorted_word_index_next_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a chars\n    local -i i\n   \
    \ local -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n\
    \    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i\
    \ s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i A\n    local -i B\n    local\
    \ -i C\n    local -i D\n    local -i E\n    local -i F\n    local -i G\n    local\
    \ -i H\n    local -i I\n    local -i J\n    local -i K\n    local -i L\n    local\
    \ -i M\n    local -i N\n    local -i O\n    local -i P\n    local -i Q\n    local\
    \ -i R\n    local -i S\n    local -i T\n    local -i U\n    local -i V\n    local\
    \ -i W\n    local -i X\n    local -i Y\n    local -i Z\n    local -i space\n \
    \   local -i exclamation\n    local -i question\n    local -i comma\n    local\
    \ -i period\n    local -i colon\n    local -i semicolon\n    local -i apostrophe\n\
    \    local -i dash\n    local -i underscore\n    local -i plus\n    local -i equals\n\
    \    local -i left_paren\n    local -i right_paren\n    local -i left_bracket\n\
    \    local -i right_bracket\n    local -i left_brace\n    local -i right_brace\n\
    \    local -i less_than\n    local -i greater_than\n    local -i ampersand\n \
    \   local -i asterisk\n    local -i backslash\n    local -i caret\n    local -i\
    \ dollar\n    local -i percent\n    local -i pound\n    local -i at\n    local\
    \ -i tilde\n    local -i backtick\n    local -i pipe\n    local -i double_quote\n\
    \    local -i single_quote\n    local -\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local space=0\n\
    \    local ascii=0\n    local len=${#str}\n    for ((i=0; i<len; i++)); do\n \
    \       char=${str:i:1}\n        ascii=$(printf \"%d\" \"'$char\")\n        if\
    \ [ $ascii -eq 32 ]; then\n            space=1\n        elif [ $ascii -lt 97 ];\
    \ then\n            case $ascii in\n                65) a=\"$a$char\";;\n    \
    \            66) b=\"$b$char\";;\n                67) c=\"$c$char\";;\n      \
    \          68) d=\"$d$char\";;\n                69) e=\"$e$char\";;\n        \
    \        70) f=\"$f$char\";;\n                71) g=\"$g$char\";;\n          \
    \      72) h=\"$h$char\";;\n                73) i=\"$i$char\";;\n            \
    \    74) j=\"$j$char\";;\n                75) k=\"$k$char\";;\n              \
    \  76) l=\"$l$char\";;\n                77) m=\"$m$char\";;\n                78)\
    \ n=\"$n$char\";;\n                79) o=\"$o$char\";;\n                80) p=\"\
    $p$char\";;\n                81) q=\"$q$char\";;\n                82) r=\"$r$char\"\
    ;;\n                83) s=\"$s$char\";;\n                84) t=\"$t$char\";;\n\
    \                85) u=\"$u$char\";;\n                86) v=\"$v$char\";;\n  \
    \              87) w=\"$w$char\";;\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm9f8lteh.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpm9f8lteh.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  # TODO: Write your code here\n  # Hint: You can use the following\
    \ command to sort characters in a string:\n  # echo \"hello\" | grep -o . | sort\
    \ | tr -d '\\n'\n  #\n  # Hint: You can use the following command to sort characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  #\
    \ Hint: You can use the following command to sort characters in a string:\n  #\
    \ echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # Hint: You can use\
    \ the following command to sort characters in a string:\n  # echo \"hello\" |\
    \ grep -o . | sort | tr -d '\\n'\n  #\n  # Hint: You can use the following command\
    \ to sort characters in a string:\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # Hint: You can use the following command to sort characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  #\
    \ Hint: You can use the following command to sort characters in a string:\n  #\
    \ echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # Hint: You can use\
    \ the following command to sort characters in a string:\n  # echo \"hello\" |\
    \ grep -o . | sort | tr -d '\\n'\n  #\n  # Hint: You can use the following command\
    \ to sort characters in a string:\n  # echo \"hello\" | grep -o . | sort | tr\
    \ -d '\\n'\n  #\n  # Hint: You can use the following command to sort characters\
    \ in a string:\n  # echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  #\
    \ Hint: You can use the following command to sort characters in a string:\n  #\
    \ echo \"hello\" | grep -o . | sort | tr -d '\\n'\n  #\n  # Hint: You can use\
    \ the following command to sort characters in a string\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6wnry8ej.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmp6wnry8ej.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local word\n    local new_str=\"\"\n \
    \   for word in $str; do\n        local new_word=$(echo $word | grep -o . | sort\
    \ | tr -d '\\n')\n        new_str=\"$new_str $new_word\"\n    done\n    echo $new_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    echo \"$1\" | tr \" \" \"\\n\" | sort -f | tr \"\\n\" \"\
    \ \"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local -a chars=()\n  local -a words=()\n  local -a sorted_chars=()\n  local\
    \ -a sorted_words=()\n  local -a sorted_result=()\n  local -i i=0\n  local -i\
    \ j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i length=0\n  local -i length_words=0\n  local\
    \ -i length_chars=0\n  local -i length_sorted_chars=0\n  local -i length_sorted_words=0\n\
    \  local -i length_sorted_result=0\n  local -i length_result=0\n  local -i length_word=0\n\
    \  local -i length_char=0\n  local -i length_sorted_char=0\n  local -i length_sorted_word=0\n\
    \  local -i length_sorted_result=0\n  local -i length_result=0\n  local -i length_word=0\n\
    \  local -i length_char=0\n  local -i length_sorted_char=0\n  local -i length_sorted_word=0\n\
    \  local -i length_sorted_result=0\n  local -i length_result=0\n  local -i length_word=0\n\
    \  local -i length_char=0\n  local -i length_sorted_char=0\n  local -i length_sorted_word=0\n\
    \  local -i length_sorted_result=0\n  local -i length_result=0\n  local -i length_word=0\n\
    \  local -i length_char=0\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local -a words\n    local -a sorted_words\n\
    \    local -a result\n    local word\n    local sorted_word\n    local i\n   \
    \ local j\n    local k\n    local l\n    local m\n    local n\n    local o\n \
    \   local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local space\n\
    \    local result_string\n\n    # Split string into words\n    IFS=' ' read -ra\
    \ words <<< \"$string\"\n\n    # Sort each word\n    for word in \"${words[@]}\"\
    ; do\n        sorted_word=\"\"\n        for ((i=0; i<${#word}; i++)); do\n   \
    \         case \"${word:$i:1}\" in\n                a)\n                    a=\"\
    ${a}${word:$i:1}\"\n                    ;;\n                b)\n             \
    \       b=\"${b}${word:$i:1}\"\n                    ;;\n                c)\n \
    \                   c=\"${c}${word:$i:1}\"\n                    ;;\n         \
    \       d)\n                    d=\"${d}${word:$i:1}\"\n                    ;;\n\
    \                e)\n                    e=\"${e}${word:$i:1}\"\n            \
    \        ;;\n                f)\n                    f=\"${f}${word:$i:1}\"\n\
    \                    ;;\n                g)\n                    g=\"${g}${word:$i:1}\"\
    \n                    ;;\n                h)\n                    h=\"${h}${word:$i:1}\"\
    \n                    ;;\n                i)\n                    i=\"${i}${word:$i:1}\"\
    \n                    ;;\n                j)\n                    j=\"${j}${word:$i:1}\"\
    \n                    ;;\n                k)\n                    k=\"${k}${word:$i:1}\"\
    \n                    ;;\n                l)\n                    l=\"${l}${word:$i:1}\"\
    \n                    ;;\n                m)\n                    m=\"${m}${word:$i:1}\"\
    \n                    ;;\n                n)\n                    n=\"${n}${word:$i:1}\"\
    \n                    ;;\n                o)\n                    o=\"\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphxajqm0e.sh: line 110: unexpected EOF while looking for matching
    `"''

    /tmp/tmphxajqm0e.sh: line 114: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local res=\"\"\n    local word=\"\"\n\
    \    local i=0\n    local j=0\n    local len=${#str}\n    local char=\"\"\n  \
    \  local char_arr=()\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n\
    \        if [ \"$char\" == \" \" ]; then\n            res+=\"$word \"\n      \
    \      word=\"\"\n        else\n            word+=\"$char\"\n        fi\n    \
    \    i=$((i+1))\n    done\n    res+=\"$word\"\n    len=${#res}\n    i=0\n    while\
    \ [ $i -lt $len ]; do\n        char=${res:$i:1}\n        if [ \"$char\" == \"\
    \ \" ]; then\n            res+=\" \"\n        else\n            char_arr+=(\"\
    $char\")\n        fi\n        i=$((i+1))\n    done\n    len=${#char_arr[@]}\n\
    \    i=0\n    while [ $i -lt $len ]; do\n        j=$((i+1))\n        while [ $j\
    \ -lt $len ]; do\n            if [ \"${char_arr[$i]}\" \\> \"${char_arr[$j]}\"\
    \ ]; then\n                char=${char_arr[$i]}\n                char_arr[$i]=${char_arr[$j]}\n\
    \                char_arr[$j]=$char\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo \"${char_arr[@]}\"\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local word\n    local result=\"\"\n\
    \    for word in $string; do\n        result=\"$result $(echo $word | grep -o\
    \ . | sort -u | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local word\n  local result=\"\"\n  for\
    \ word in $str; do\n    result=\"$result $(echo $word | grep -o . | sort | tr\
    \ -d '\\n')\"\n  done\n  echo $result\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local result=\"\"\n    for word in $1; do\n        local\
    \ sorted_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            sorted_word+=\"\
    ${word:$i:1}\"\n        done\n        sorted_word=$(echo -e \"$sorted_word\" |\
    \ sort -n)\n        result+=\"$sorted_word\"\n    done\n    echo \"$result\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_string=${#string}\n    local ascii_char=0\n\
    \    local ascii_char_min=0\n    local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n\
    \    local ascii_char_min_tmp=0\n    local ascii_char_tmp=0\n    local ascii_char_tmp_index=0\n\
    \    local ascii_char_tmp_index_tmp=0\n    local ascii_char_tmp_tmp=0\n    local\
    \ ascii_char_tmp_tmp_index=0\n    local ascii_char_tmp_tmp_index_tmp=0\n    local\
    \ ascii_char_tmp_tmp_tmp=0\n    local ascii_char_tmp_tmp_tmp_index=0\n    local\
    \ ascii_char_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_tmp_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_tmp_tmp_tmp_tmp\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_new_str=0\n\
    \    local len_char=0\n    local ascii_char=0\n    local ascii_char_min=0\n  \
    \  local ascii_char_min_index=0\n    local ascii_char_min_index_tmp=0\n    local\
    \ ascii_char_min_tmp=0\n    local ascii_char_min_tmp_index=0\n    local ascii_char_min_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort -n | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local word\n    local result=\"\"\n  \
    \  for word in $str; do\n        result=\"$result $(echo $word | grep -o . | sort\
    \ | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i space=0\n    local -i exclamation=0\n    local -i question=0\n    local -i\
    \ comma=0\n    local -i period=0\n    local -i colon=0\n    local -i semicolon=0\n\
    \    local -i apostrophe=0\n    local -i dash=0\n    local -i plus=0\n    local\
    \ -i equal=0\n    local -i left_parenthesis=0\n    local -i right_parenthesis=0\n\
    \    local -i left_bracket=0\n    local -i right_bracket=0\n    local -i left_brace=0\n\
    \    local -i right_brace=0\n    local -i less_than=0\n    local -i greater_than=0\n\
    \    local -i backslash=0\n    local -i slash=0\n    local -i ampersand=0\n  \
    \  local -i at=0\n    local -i percent=0\n    local -i dollar=0\n    local -i\
    \ pound=0\n    local -i caret=0\n    local -i tilde=0\n    local -i asterisk=0\n\
    \    local -i underscore=0\n    local -i backtick=0\n    local -i pipe=0\n   \
    \ local -i double_quote=0\n    local -i single_quote=0\n    local -i hash=0\n\
    \    local -i number=0\n    local -i other=0\n    local -i total=0\n    local\
    \ -i total_chars=0\n    local\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local -a words\n    local -a sorted_words\n\
    \    local -a result\n    local i\n    local j\n    local k\n    local word\n\
    \    local sorted_word\n    local result_str\n\n    # Split the string into words\n\
    \    IFS=' ' read -r -a words <<< \"$str\"\n\n    # Sort each word\n    for ((i=0;\
    \ i<${#words[@]}; i++)); do\n        word=${words[$i]}\n        sorted_word=\"\
    \"\n        for ((j=0; j<${#word}; j++)); do\n            sorted_word+=\"${word:$j:1}\"\
    \n        done\n        sorted_words[$i]=$(echo \"$sorted_word\" | fold -w1 |\
    \ sort | tr -d '\\n')\n    done\n\n    # Rebuild the string\n    k=0\n    for\
    \ ((i=0; i<${#words[@]}; i++)); do\n        result[$k]=${words[$i]}\n        ((k++))\n\
    \        result[$k]=\" \"\n        ((k++))\n        result[$k]=${sorted_words[$i]}\n\
    \        ((k++))\n        result[$k]=\" \"\n        ((k++))\n    done\n\n    #\
    \ Remove the last space\n    unset result[$k]\n\n    # Join the array into a string\n\
    \    result_str=$(printf \"%s\" \"${result[@]}\")\n\n    # Print the result\n\
    \    echo \"$result_str\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\
    \"\n    local char_list=\"\"\n    local char_list_sorted=\"\"\n    local char_list_sorted_len=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    for word in $string; do\n    \
    \    char_list=\"\"\n        char_ascii_list=\"\"\n        for char in $(echo\
    \ $word | grep -o .); do\n            char_ascii=$(printf \"%d\" \"'$char\")\n\
    \            char_ascii_list=\"$char_ascii_list $char_ascii\"\n            char_list=\"\
    $char_list $char\"\n        done\n        char_list_sorted=$(echo $char_ascii_list\
    \ | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \")\n        char_list_sorted_len=$(echo\
    \ $char_list_sorted | wc -w)\n        for ((i=1; i<=$char_list_sorted_len; i++));\
    \ do\n            for ((j=1; j<=$char_list_sorted_len; j++)); do\n           \
    \     char_ascii=$(echo $char_list_sorted | cut -d \" \" -f $i)\n            \
    \    char=$(echo $char_list | cut -d \" \" -f $j)\n                char_ascii_compare=$(printf\
    \ \"%d\" \"'$char\")\n                if [ $char_ascii -eq $char_ascii_compare\
    \ ]; then\n                    char_list=$(echo $char_list | sed \"s/$char//\"\
    )\n                    new_string=\"$new_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjs_gful0.sh: line 76: unexpected EOF while looking for matching
    `"''

    /tmp/tmpjs_gful0.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local i=0\n    local j=0\n    local len=0\n    local len_str=${#str}\n\
    \    local char=\"\"\n    local char_arr=()\n    local char_arr_len=0\n    local\
    \ char_arr_index=0\n    local char_arr_index_min=0\n    local char_arr_index_min_val=0\n\
    \    local char_arr_index_min_val_ascii=0\n    local char_arr_index_min_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index=0\n    local char_arr_index_min_val_ascii_min_index_val=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii=0\n    local char_arr_index_min_val_ascii_min_index_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index=0\n    local\
    \ char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val=0\n    local\
    \ char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii=0\n   \
    \ local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min_index=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val_ascii_min_index_val=0\n\
    \    local char_arr_index_min_val_ascii_min_index_val_ascii_min_index_val\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a chars\n    local word\n   \
    \ local char\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local O\n\
    \    local P\n    local Q\n    local R\n    local S\n    local T\n    local U\n\
    \    local V\n    local W\n    local X\n    local Y\n    local Z\n    local 1\n\
    \    local 2\n    local 3\n    local 4\n    local 5\n    local 6\n    local 7\n\
    \    local 8\n    local 9\n    local 0\n    local !\n    local @\n    local #\n\
    \    local $\n    local %\n    local ^\n    local &\n    local *\n    local (\n\
    \    local )\n    local -\n    local _\n    local +\n    local =\n    local {\n\
    \    local }\n    local [\n    local ]\n    local \\\n    local |\n    local ;\n\
    \    local :\n    local '\n    local \"\n    local ,\n    local <\n    local .\n\
    \    local >\n    local /\n    local ?\n    local ~\n    local `\n    local space\n\
    \n    # Split string into words\n    IFS=' ' read -ra words <<< \"$1\"\n\n   \
    \ # For each word\n    for word in \"${words[@]}\";\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1shhhjmz.sh: line 109: syntax error near unexpected token `newline''

    /tmp/tmp1shhhjmz.sh: line 109: `    local (''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=\"$1\"\n  local -a words\n  local -a result\n\
    \  local i\n  local j\n  local word\n  local char\n  local -i char_ascii\n  local\
    \ -i min_ascii\n  local -i min_index\n  local -i word_length\n  local -i result_length\n\
    \n  # Split the string into words\n  IFS=' ' read -r -a words <<< \"$string\"\n\
    \n  # For each word, sort the characters and append to result\n  for word in \"\
    ${words[@]}\"; do\n    word_length=${#word}\n    for ((i=0; i<word_length; i++));\
    \ do\n      min_ascii=127\n      min_index=0\n      for ((j=0; j<word_length;\
    \ j++)); do\n        char=\"${word:j:1}\"\n        char_ascii=$(printf '%d' \"\
    '$char\")\n        if [[ $char_ascii -lt $min_ascii ]]; then\n          min_ascii=$char_ascii\n\
    \          min_index=$j\n        fi\n      done\n      result+=(\"${word:min_index:1}\"\
    )\n      word=\"${word:0:min_index}${word:min_index+1}\"\n    done\n    result+=(\"\
    \ \")\n  done\n\n  # Remove the last space\n  result_length=${#result[@]}\n  unset\
    \ result[result_length-1]\n\n  # Print the result\n  echo \"${result[@]}\"\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local result=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local\
    \ e=0\n  local f=0\n  local g=0\n  local h=0\n  local I=0\n  local J=0\n  local\
    \ K=0\n  local L=0\n  local M=0\n  local N=0\n  local O=0\n  local P=0\n  local\
    \ Q=0\n  local R=0\n  local S=0\n  local T=0\n  local U=0\n  local V=0\n  local\
    \ W=0\n  local X=0\n  local Y=0\n  local Z=0\n  local space=0\n  local exclamation=0\n\
    \  local question=0\n  local comma=0\n  local period=0\n  local colon=0\n  local\
    \ semicolon=0\n  local apostrophe=0\n  local dash=0\n  local underscore=0\n  local\
    \ plus=0\n  local equal=0\n  local left_paren=0\n  local right_paren=0\n  local\
    \ left_bracket=0\n  local right_bracket=0\n  local left_brace=0\n  local right_brace=0\n\
    \  local less_than=0\n  local greater_than=0\n  local slash=0\n  local backslash=0\n\
    \  local ampersand=0\n  local percent=0\n  local dollar=0\n  local pound=0\n \
    \ local at=0\n  local caret=0\n  local asterisk=0\n  local tilde=0\n  local backtick=0\n\
    \  local pipe=0\n  local double_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_str=${#str}\n    local ascii_val=0\n\
    \    local ascii_val_min=0\n    local ascii_val_min_index=0\n    local ascii_val_min_char=\"\
    \"\n    local ascii_val_min_char_index=0\n    local ascii_val_min_char_index_old=0\n\
    \    local ascii_val_min_char_index_new=0\n    local ascii_val_min_char_index_new_old=0\n\
    \    local ascii_val_min_char_index_new_old_old=0\n    local ascii_val_min_char_index_new_old_old_old=0\n\
    \    local ascii_val_min_char_index_new_old_old_old_old=0\n    local ascii_val_min_char_index_new_old_old_old_old_old=0\n\
    \    local ascii_val_min_char_index_new_old_old_old_old_old_old=0\n    local ascii_val_min_char_index_new_old_old_old_old_old_old_old=0\n\
    \    local ascii_val_min_char_index_new_old_old_old_old_old_old_old_old=0\n  \
    \  local ascii_val_min_char_index_new_old_old_old_old_old_old_old_old_old=0\n\
    \    local ascii_val_min_char_index_new_old_old_old_old_old_old_old_old_old_old=0\n\
    \    local ascii_val_min_char_index_new_old_old_old_old_old_old_old_old_old_old_old=0\n\
    \    local ascii_val_min_char_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a\
    \ sorted_words=()\n    for word in \"${words[@]}\"; do\n        sorted_words+=(\"\
    $(echo $word | fold -w1 | sort | tr -d '\\n')\")\n    done\n    echo \"${sorted_words[@]}\"\
    \ | tr ' ' '\\n' | tr -d '\\n'\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_array=()\n\
    \    local char_array=()\n    local char_ascii_array_len=0\n    local char_array_len=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local space=0\n    local char_ascii_array_len_minus_1=0\n\
    \    local char_array_len_minus_1=0\n    local char_ascii_array_len_minus_2=0\n\
    \    local char_array_len_minus_2=0\n    local char_ascii_array_len_minus_3=0\n\
    \    local char_array_len_minus_3=0\n    local char_ascii_array_len_minus_4=0\n\
    \    local char_array_len_minus_4=0\n    local char_ascii_array_len_minus_5=0\n\
    \    local char_array_len_minus_5=0\n    local char_ascii_array_len_minus_6=0\n\
    \    local char_array_len_minus_6=0\n    local char_ascii_array_len_minus_7=0\n\
    \    local char_array_len_minus_7=0\n    local char_ascii_array_len_minus_8=0\n\
    \    local char_array_len_minus_8=0\n    local char_ascii_array_len_minus_9=0\n\
    \    local char_array_len_minus_9=0\n    local char_ascii_array_len_minus_10=0\n\
    \    local char_array_len_minus_10=0\n   \n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local len\n    local len_sorted\n    local len_result\n    local\
    \ result_str\n    local sorted_str\n    local word_str\n    local char\n    local\
    \ char_sorted\n    local char_result\n    local char_result_str\n    local char_sorted_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result_word_str\n    local char_sorted_word_str\n\
    \    local char_word_str\n    local char_word\n    local char_sorted_word\n  \
    \  local char_result_word\n    local char_result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    # You can use the following\
    \ command to sort a string:\n    # echo \"hello\" | grep -o . | sort | tr -d '\\\
    n'\n    #\n    # You can use the following command to get the ascii value of a\
    \ character:\n    # printf \"%d\" \"'a\"\n    #\n    # You can use the following\
    \ command to get the character of an ascii value:\n    # printf \\\\$(printf '%03o'\
    \ 97)\n    #\n    # You can use the following command to get the length of a string:\n\
    \    # echo -n \"hello\" | wc -c\n    #\n    # You can use the following command\
    \ to get the nth character of a string:\n    # echo \"hello\" | cut -c n\n   \
    \ #\n    # You can use the following command to get the first n characters of\
    \ a string:\n    # echo \"hello\" | cut -c -n\n    #\n    # You can use the following\
    \ command to get the last n characters of a string:\n    # echo \"hello\" | cut\
    \ -c -n | rev | cut -c -n | rev\n    #\n    # You can use the following command\
    \ to get the substring of a string:\n    # echo \"hello\" | cut -c n-m\n    #\n\
    \    # You can use the following command to get the substring of a string:\n \
    \   # echo \"hello\" | cut -c n-m\n    #\n    # You can use the following command\
    \ to get the substring of a string:\n    # echo \"hello\" | cut -c n-m\n    #\n\
    \    # You can use the following command to get the substring of a string:\n \
    \   # echo \"hello\" | cut -c n-m\n    #\n    # You can use the following command\
    \ to get the substring of a string:\n    # echo \"hello\" | cut -c n-m\n    #\n\
    \    # You can use the following command to get the substring of a string:\n \
    \   # echo \"hello\" | cut -c n-m\n    #\n    # You can use the following command\
    \ to get the substring of a string:\n    # echo \"hello\" | cut -c n-m\n    #\n\
    \   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwq69k4ok.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpwq69k4ok.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    # You can use the following\
    \ command to sort the characters in a string\n    # echo \"hello\" | grep -o .\
    \ | sort | tr -d '\\n'\n    #\n    # You can use the following command to sort\
    \ the words in a string\n    # echo \"hello world\" | tr ' ' '\\n' | sort | tr\
    \ -d '\\n'\n    #\n    # You can use the following command to sort the words in\
    \ a string\n    # and then sort the characters in each word\n    # echo \"hello\
    \ world\" | tr ' ' '\\n' | sort | tr -d '\\n' | xargs -n1 | sort | tr -d '\\n'\
    \ | xargs\n    #\n    # You can use the following command to sort the words in\
    \ a string\n    # and then sort the characters in each word\n    # and then join\
    \ the words back together with a space\n    # echo \"hello world\" | tr ' ' '\\\
    n' | sort | tr -d '\\n' | xargs -n1 | sort | tr -d '\\n' | xargs | tr ' ' '\\\
    n' | sort | tr -d '\\n' | xargs\n    #\n    # You can use the following command\
    \ to sort the words in a string\n    # and then sort the characters in each word\n\
    \    # and then join the words back together with a space\n    # and then sort\
    \ the words again\n    # echo \"hello world\" | tr ' ' '\\n' | sort | tr -d '\\\
    n' | xargs -n1 | sort | tr -d '\\n' | xargs | tr ' ' '\\n' | sort | tr -d '\\\
    n' | xargs | tr ' ' '\\n' | sort | tr -d '\\n' | xargs\n    #\n    # You can use\
    \ the following command to sort the words in a string\n    # and then sort the\
    \ characters in each word\n    # and then join the words back together with a\
    \ space\n    # and then sort the words again\n    # and then sort the characters\
    \ in each word\n    # echo \"hello world\" | tr ' ' '\\n' | sort | tr -d '\\n'\
    \ | xargs -n1 | sort | tr\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7tayv2wg.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp7tayv2wg.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local A\n    local B\n\
    \    local C\n    local D\n    local E\n    local F\n    local G\n    local H\n\
    \    local I\n    local J\n    local K\n    local L\n    local M\n    local N\n\
    \    local O\n    local P\n    local Q\n    local R\n    local S\n    local T\n\
    \    local U\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local space\n    local exclamation\n    local question\n    local period\n\
    \    local comma\n    local colon\n    local semicolon\n    local apostrophe\n\
    \    local dash\n    local underscore\n    local plus\n    local equals\n    local\
    \ left_parenthesis\n    local right_parenthesis\n    local left_bracket\n    local\
    \ right_bracket\n    local left_brace\n    local right_brace\n    local less_than\n\
    \    local greater_than\n    local ampersand\n    local asterisk\n    local backslash\n\
    \    local forward_slash\n    local pipe\n    local tilde\n    local at\n    local\
    \ pound\n    local dollar\n    local percent\n    local caret\n    local backtick\n\
    \    local double_quote\n    local single_quote\n    local zero\n    local one\n\
    \    local two\n    local three\n    local four\n    local five\n    local six\n\
    \    local seven\n    local eight\n    local nine\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local\n}\n\ncandidate() {\n    anti_shuffle \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[\
    \ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\"\
    \ ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local string=$1\n  local words=($string)\n  local new_string=\"\
    \"\n  for word in \"${words[@]}\"; do\n    local chars=($(echo $word | grep -o\
    \ .))\n    local new_word=\"\"\n    for char in \"${chars[@]}\"; do\n      new_word+=$(echo\
    \ $char)\n    done\n    new_string+=$(echo $new_word | sort)\n  done\n  echo $new_string\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local space\n    local\
    \ result_string\n    words=($(echo \"$1\" | tr ' ' '\\n'))\n    for word in \"\
    ${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | grep -o . | sort | tr\
    \ -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n    for ((i=0;\
    \ i<${#words[@]}; i++)); do\n        for ((j=0; j<${#words[@]}; j++)); do\n  \
    \          if [[ \"${words[$i]}\" == \"${sorted_words[$j]}\" ]]; then\n      \
    \          result+=(\"${sorted_words[$j]}\")\n            fi\n        done\n \
    \   done\n    result_string=$(echo \"${result[@]}\" | tr ' ' '\\n' | tr -d '\\\
    n')\n    echo \"$result_string\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a new_words\n    local -a new_sentence\n\
    \    local word\n    local new_word\n    local i\n    local j\n    local k\n \
    \   local sentence\n    local new_sentence\n    sentence=\"$1\"\n    words=($(echo\
    \ \"$sentence\" | tr ' ' '\\n'))\n    for ((i=0; i<${#words[@]}; i++)); do\n \
    \       word=\"${words[$i]}\"\n        new_word=\"\"\n        for ((j=0; j<${#word};\
    \ j++)); do\n            new_word=\"$new_word${word:$j:1}\"\n            for ((k=0;\
    \ k<j; k++)); do\n                if [[ \"${word:$j:1}\" < \"${word:$k:1}\" ]];\
    \ then\n                    new_word=\"${new_word:0:$k}${word:$j:1}${new_word:$k}\"\
    \n                    new_word=\"${new_word:0:$((j+1))}${new_word:$((j+2))}\"\n\
    \                    break\n                fi\n            done\n        done\n\
    \        new_words[$i]=\"$new_word\"\n    done\n    new_sentence=\"\"\n    for\
    \ ((i=0; i<${#words[@]}; i++)); do\n        new_sentence=\"$new_sentence${new_words[$i]}\
    \ \"\n    done\n    echo \"$new_sentence\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n\n    IFS=' ' read -ra words <<< \"$1\"\n    for word in \"${words[@]}\"\
    ; do\n        sorted_words[i++]=$(echo \"$word\" | grep -o . | sort | tr -d '\\\
    n')\n    done\n    echo \"${sorted_words[*]}\"\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i space=0\n    local -i exclamation=0\n    local -i question=0\n    local -i\
    \ comma=0\n    local -i period=0\n    local -i colon=0\n    local -i semicolon=0\n\
    \    local -i apostrophe=0\n    local -i dash=0\n    local -i double_quote=0\n\
    \    local -i single_quote=0\n    local -i left_paren=0\n    local -i right_paren=0\n\
    \    local -i left_bracket=0\n    local -i right_bracket=0\n    local -i left_brace=0\n\
    \    local -i right_brace=0\n    local -i backslash=0\n    local -i forward_slash=0\n\
    \    local -i at=0\n    local -i pound=0\n    local -i dollar=0\n    local -i\
    \ percent=0\n    local -i caret=0\n    local -i ampersand=0\n    local -i asterisk=0\n\
    \    local -i plus=0\n    local -i equal=0\n    local -i less_than=0\n    local\
    \ -i greater_than=0\n    local -i tilde=0\n    local -i backtick=0\n    local\
    \ -i underscore=0\n    local -i vertical_bar=0\n    local -i newline=0\n    local\
    \ -i tab=0\n    local -i backspace=0\n    local -i carriage_return=0\n    local\
    \ -i form_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i len\n    local -i len_sorted\n\
    \    local -i len_word\n    local -i len_sorted_word\n    local -i len_spaces\n\
    \    local -i len_sorted_spaces\n    local -i len_word_sorted\n    local -i len_spaces_sorted\n\
    \    local -i len_word_sorted_spaces\n    local -i len_spaces_sorted_word\n  \
    \  local -i len_word_sorted_spaces_sorted\n    local -i len_spaces_sorted_word_sorted\n\
    \    local -i len_word_sorted_spaces_sorted_spaces\n    local -i len_spaces_sorted_word_sorted_spaces\n\
    \    local -i len_word_sorted_spaces_sorted_spaces_sorted\n    local -i len_spaces_sorted_word_sorted_spaces_sorted\n\
    \    local -i len_word_sorted_spaces_sorted_spaces_sorted_spaces\n    local -i\
    \ len_spaces_sorted_word_sorted_spaces_sorted_spaces\n    local -i len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted\n    local\
    \ -i len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted_spaces\n    local\
    \ -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted_spaces\n    local\
    \ -i len_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_spaces_sorted_word_sorted_spaces_sorted_spaces_sorted_spaces_sorted\n\
    \    local -i len_word_s\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local space\n    local\
    \ -i len\n    local -i len_word\n    local -i len_sorted_word\n    local -i len_result\n\
    \    local -i len_space\n    local -i len_sorted_words\n    local -i len_words\n\
    \    local -i len_word_i\n    local -i len_word_j\n    local -i len_word_k\n \
    \   local -i len_word_l\n    local -i len_word_m\n    local -i len_word_n\n  \
    \  local -i len_word_o\n    local -i len_word_p\n    local -i len_word_q\n   \
    \ local -i len_word_r\n    local -i len_word_s\n    local -i len_word_t\n    local\
    \ -i len_word_u\n    local -i len_word_v\n    local -i len_word_w\n    local -i\
    \ len_word_x\n    local -i len_word_y\n    local -i len_word_z\n    local -i len_sorted_word_i\n\
    \    local -i len_sorted_word_j\n    local -i len_sorted_word_k\n    local -i\
    \ len_sorted_word_l\n    local -i len_sorted_word_m\n    local -i len_sorted_word_n\n\
    \    local -i len_sorted_word_o\n    local -i len_sorted_word_p\n    local -i\
    \ len_sorted_word_q\n    local -i len_sorted_word_r\n    local -i len_sorted_word_s\n\
    \    local -i len_sorted_word_t\n    local -i len_sorted_\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    echo $1 | tr ' ' '\\n' | sort\
    \ -k1.1 -t '' | tr '\\n' ' '\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: empty tab

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local sorted_word=\"\"\n  local sorted_char=\"\"\n  local\
    \ sorted_str=\"\"\n  for word in $str; do\n    for char in $(echo $word | fold\
    \ -w1); do\n      sorted_char=\"$sorted_char$char\"\n    done\n    sorted_word=$(echo\
    \ $sorted_char | fold -w1 | sort | tr -d '\\n')\n    sorted_str=\"$sorted_str$sorted_word\
    \ \"\n    sorted_word=\"\"\n    sorted_char=\"\"\n  done\n  echo $sorted_str\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local -a chars=()\n  local -a words=()\n  local -a new_words=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i A=0\n  local -i B=0\n\
    \  local -i C=0\n  local -i D=0\n  local -i E=0\n  local -i F=0\n  local -i G=0\n\
    \  local -i H=0\n  local -i I=0\n  local -i J=0\n  local -i K=0\n  local -i L=0\n\
    \  local -i M=0\n  local -i N=0\n  local -i O=0\n  local -i P=0\n  local -i Q=0\n\
    \  local -i R=0\n  local -i S=0\n  local -i T=0\n  local -i U=0\n  local -i V=0\n\
    \  local -i W=0\n  local -i X=0\n  local -i Y=0\n  local -i Z=0\n  local -i space=0\n\
    \  local -i exclamation=0\n  local -i question=0\n  local -i period=0\n  local\
    \ -i comma=0\n  local -i colon=0\n  local -i semicolon=0\n  local -i apostrophe=0\n\
    \  local -i dash=0\n  local -i underscore=0\n  local -i plus=0\n  local -i equal=0\n\
    \  local -i left_paren=\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -i\
    \ i\n    local -i j\n    local -i k\n    local -i len\n    local -i word_len\n\
    \    local -i word_count\n    local -i word_index\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n    local -i sorted_word_index\n\
    \    local -i sorted_word_len\n    local -i sorted_word_count\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local -a words\n    local -a chars\n    local -a sorted_chars\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i len=0\n  \
    \  local -i len2=0\n    local -i len3=0\n    local -i len4=0\n    local -i len5=0\n\
    \    local -i len6=0\n    local -i len7=0\n    local -i len8=0\n    local -i len9=0\n\
    \    local -i len10=0\n    local -i len11=0\n    local -i len12=0\n    local -i\
    \ len13=0\n    local -i len14=0\n    local -i len15=0\n    local -i len16=0\n\
    \    local -i len17=0\n    local -i len18=0\n    local -i len19=0\n    local -i\
    \ len20=0\n    local -i len21=0\n    local -i len22=0\n    local -i len23=0\n\
    \    local -i len24=0\n    local -i len25=0\n    local -i len26=0\n    local -i\
    \ len27=0\n    local -i len28=0\n    local -i len29=0\n    local -i len30=0\n\
    \    local -i len31=0\n    local -i len32=0\n    local -i len33=0\n    local -i\
    \ len34=0\n    local -i len35=0\n    local -i len36=0\n    local -i len37=0\n\
    \    local -i len38=0\n    local -i len39=0\n    local -i len40=0\n    local -i\
    \ len41=0\n    local -i len42=0\n    local -i len43=0\n    local -i len44=0\n\
    \    local -i len45=0\n    local -i len46=0\n    local -i len47=0\n    local -i\
    \ len48=0\n    local -i len49=0\n    local -\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local i\n  local j\n  local k\n  local word\n  local sorted_word\n  local result_str\n\
    \n  # Split the string into words\n  IFS=' ' read -r -a words <<< \"$1\"\n\n \
    \ # Sort each word\n  for ((i=0; i<${#words[@]}; i++)); do\n    word=\"${words[$i]}\"\
    \n    sorted_word=\"\"\n    for ((j=0; j<${#word}; j++)); do\n      sorted_word+=\"\
    ${word:$j:1}\"\n    done\n    sorted_words+=(\"$(echo \"$sorted_word\" | sort)\"\
    )\n  done\n\n  # Rebuild the string\n  for ((i=0; i<${#words[@]}; i++)); do\n\
    \    word=\"${words[$i]}\"\n    sorted_word=\"${sorted_words[$i]}\"\n    for ((j=0;\
    \ j<${#word}; j++)); do\n      for ((k=0; k<${#sorted_word}; k++)); do\n     \
    \   if [[ \"${word:$j:1}\" == \"${sorted_word:$k:1}\" ]]; then\n          result+=(\"\
    ${sorted_word:$k:1}\")\n          sorted_word=\"${sorted_word:0:$k}${sorted_word:$((k+1)):${#sorted_word}}\"\
    \n          break\n        fi\n      done\n    done\n    result+=(\" \")\n  done\n\
    \n  # Remove the last space\n  unset result[${#result[@]}-1]\n\n  # Build the\
    \ result string\n  result_str=\"\"\n  for ((i=0; i<${#result[@]}; i++)); do\n\
    \    result_str+=\"${result[$i]}\"\n  done\n\n  echo \"$result_str\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local word\n  local i\n  local j\n  local k\n  local sorted_word\n  local sorted_char\n\
    \n  # Split the string into words\n  IFS=' ' read -r -a words <<< \"$1\"\n\n \
    \ # Sort each word\n  for word in \"${words[@]}\"; do\n    sorted_word=\"\"\n\
    \    for ((i=0; i<${#word}; i++)); do\n      sorted_char=${word:i:1}\n      for\
    \ ((j=0; j<${#sorted_word}; j++)); do\n        if [[ \"${sorted_word:j:1}\" >\
    \ \"$sorted_char\" ]]; then\n          sorted_word=\"${sorted_word:0:j}$sorted_char${sorted_word:j}\"\
    \n          break\n        fi\n      done\n      if [[ $j -eq ${#sorted_word}\
    \ ]]; then\n        sorted_word=\"$sorted_word$sorted_char\"\n      fi\n    done\n\
    \    sorted_words+=(\"$sorted_word\")\n  done\n\n  # Rebuild the string\n  k=0\n\
    \  for ((i=0; i<${#1}; i++)); do\n    if [[ \"${1:i:1}\" == \" \" ]]; then\n \
    \     result+=(\" \")\n    else\n      result+=(\"${sorted_words[k]:0:1}\")\n\
    \      sorted_words[k]=\"${sorted_words[k]:1}\"\n      ((k++))\n    fi\n  done\n\
    \n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Hint: You can use the\
    \ following command to sort the characters in a word\n    # echo \"hello\" | grep\
    \ -o . | sort | tr -d '\\n'\n    #\n    # Hint: You can use the following command\
    \ to sort the words in a sentence\n    # echo \"hello world\" | tr ' ' '\\n' |\
    \ sort | tr -d '\\n'\n    #\n    # Hint: You can use the following command to\
    \ sort the words in a sentence\n    # while keeping the order of the words\n \
    \   # echo \"hello world\" | tr ' ' '\\n' | sort | paste -sd ' ' -\n    #\n  \
    \  # Hint: You can use the following command to sort the words in a sentence\n\
    \    # while keeping the order of the words and the blank spaces\n    # echo \"\
    hello world\" | tr ' ' '\\n' | sort | paste -sd ' ' - | tr ' ' '\\n' | paste -sd\
    \ ' ' -\n    #\n    # Hint: You can use the following command to sort the characters\
    \ in a word\n    # while keeping the order of the words and the blank spaces\n\
    \    # echo \"hello world\" | tr ' ' '\\n' | sort | paste -sd ' ' - | tr ' ' '\\\
    n' | paste -sd ' ' - | tr ' ' '\\n' | paste -sd ' ' -\n    #\n    # Hint: You\
    \ can use the following command to sort the characters in a word\n    # while\
    \ keeping the order of the words and the blank spaces\n    # echo \"hello world\"\
    \ | tr ' ' '\\n' | sort | paste -sd ' ' - | tr ' ' '\\n' | paste -sd ' ' - | tr\
    \ ' ' '\\n' | paste -sd ' ' - | tr ' ' '\\n' | paste -sd ' ' -\n    #\n    # Hint:\
    \ You can use the following command to sort the characters in a word\n    # while\
    \ keeping the order of the words and the blank spaces\n    # echo \"hello world\"\
    \ | tr ' ' '\\n' | sort | paste -sd ' ' - | tr ' ' '\\n' | paste -sd ' ' - | tr\
    \ ' ' '\\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"\
    ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo184qcv1.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpo184qcv1.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ sorted_string\n    local -i i\n    local -i j\n    local -i k\n    local -i\
    \ len\n    local -i len_sorted\n    local -i len_string\n    local -i len_words\n\
    \    local -i len_sorted_words\n    local -i len_sorted_string\n    local -i len_words_sorted\n\
    \    local -i len_sorted_words_sorted\n    local -i len_sorted_string_sorted\n\
    \    local -i len_words_sorted_sorted\n    local -i len_sorted_words_sorted_sorted\n\
    \    local -i len_sorted_string_sorted_sorted\n    local -i len_words_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted\n    local -i len_sorted_string_sorted_sorted_sorted\n\
    \    local -i len_words_sorted_sorted_sorted_sorted\n    local -i len_sorted_words_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_string_sorted_sorted_sorted_sorted\n    local -i len_words_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted\n    local -i\
    \ len_sorted_string_sorted_sorted_sorted_sorted_sorted\n    local -i len_words_sorted_sorted_sorted_sorted_sorted_sorted\n\
    \    local -i len_sorted_words_sorted_sorted_sorted_sorted_sorted_sorted\n   \
    \ local -i len_sorted_string_sorted_sorted_sorted_sorted_sorted_sorted\n    local\
    \ -i len_words_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -i\
    \ len_sorted_words_sorted_sorted_sorted_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local result=\"\"\n  local word=\"\"\n  local char=\"\"\n\
    \  local -a chars=()\n  local -a words=()\n  local -a sorted_words=()\n  local\
    \ -a sorted_chars=()\n  local -a sorted_chars_ascii=()\n  local -a sorted_chars_index=()\n\
    \  local -a sorted_chars_index_ascii=()\n  local -a sorted_chars_index_ascii_sorted=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index=()\n  local -a sorted_chars_index_ascii_sorted_index_sorted=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index=()\n  local -a\
    \ sorted_chars_index_ascii_sorted_index_sorted_index_sorted=()\n  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted_index=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted=()\n\
    \  local -a sorted_chars_index_ascii_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index_sorted_index=()\n\
    \  local -a sorted_chars_index_as\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Hint: You can use the\
    \ following command to sort a string:\n    # echo \"hello\" | grep -o . | sort\
    \ | tr -d '\\n'\n    #\n    # Hint: You can use the following command to replace\
    \ a word with another word:\n    # echo \"hello world\" | sed -e 's/hello/hi/g'\n\
    \    #\n    # Hint: You can use the following command to replace a word with the\
    \ output of a command:\n    # echo \"hello world\" | sed -e 's/hello/$(echo \"\
    hi\" | grep -o . | sort | tr -d '\\n')/g'\n    #\n    # Hint: You can use the\
    \ following command to replace a word with the output of a command:\n    # echo\
    \ \"hello world\" | sed -e 's/hello/$(echo \"hi\" | grep -o . | sort | tr -d '\\\
    n')/g'\n    #\n    # Hint: You can use the following command to replace a word\
    \ with the output of a command:\n    # echo \"hello world\" | sed -e 's/hello/$(echo\
    \ \"hi\" | grep -o . | sort | tr -d '\\n')/g'\n    #\n    # Hint: You can use\
    \ the following command to replace a word with the output of a command:\n    #\
    \ echo \"hello world\" | sed -e 's/hello/$(echo \"hi\" | grep -o . | sort | tr\
    \ -d '\\n')/g'\n    #\n    # Hint: You can use the following command to replace\
    \ a word with the output of a command:\n    # echo \"hello world\" | sed -e 's/hello/$(echo\
    \ \"hi\" | grep -o . | sort | tr -d '\\n')/g'\n    #\n    # Hint: You can use\
    \ the following command to replace a word with the output of a command:\n    #\
    \ echo \"hello world\" | sed -e 's/hello/$(echo \"hi\" | grep -o . | sort | tr\
    \ -d '\\n')/g'\n    #\n    # Hint: You can use the following command to replace\
    \ a word with the output of\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmkrnoxgw.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpmkrnoxgw.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -r str=\"$1\"\n  local -r words=($(echo \"$str\" | tr\
    \ ' ' '\\n'))\n  local -r sorted_words=($(for word in \"${words[@]}\"; do\n  \
    \  echo \"$word\" | grep -o . | sort | tr -d '\\n'\n  done))\n  local -r result=$(paste\
    \ -d ' ' <(echo \"${words[@]}\") <(echo \"${sorted_words[@]}\"))\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\"\
    \ ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\"\
    ) = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local -a words\n  local -a sorted_words\n  local -a result\n\
    \  local word\n  local sorted_word\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local space\n  local exclamation\n  local question\n  local period\n  local\
    \ comma\n  local colon\n  local semicolon\n  local apostrophe\n  local dash\n\
    \  local ampersand\n  local at\n  local hash\n  local dollar\n  local percent\n\
    \  local caret\n  local asterisk\n  local open_paren\n  local close_paren\n  local\
    \ open_bracket\n  local close_bracket\n  local open_brace\n  local close_brace\n\
    \  local less_than\n  local greater_than\n  local backslash\n  local pipe\n  local\
    \ tilde\n  local single_quote\n  local double_quote\n  local backtick\n  local\
    \ plus\n  local equal\n  local underscore\n  local backspace\n  local tab\n  local\
    \ newline\n  local carriage_return\n  local form_feed\n  local vertical_tab\n\
    \  local null\n  local space_count\n  local exclamation_count\n  local question_count\n\
    \  local period_count\n  local comma_count\n  local colon_count\n  local semicolon_count\n\
    \  local apostrophe_count\n  local dash_count\n  local ampersand_count\n  local\
    \ at_count\n  local hash_count\n  local dollar_count\n  local percent_count\n\
    \  local caret_count\n  local asterisk_count\n  local open_paren_count\n  local\
    \ close_paren_count\n  local open_bracket_count\n  local close_bracket_count\n\
    \  local open_brace_count\n  local close_brace_count\n  local less_than_count\n\
    \  local greater_than_count\n  local backslash_count\n  local pipe_count\n  local\
    \ tilde_count\n  local single_quote_count\n  local double_quote_count\n\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local words=()\n  local word=''\n  local char=''\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local space=''\n  local result=''\n  local new_word=''\n  local new_words=()\n\
    \  local new_str=''\n  local new_char=''\n  local new_chars=()\n  local new_char_index=0\n\
    \  local new_char_index_max=0\n  local new_char_index_min=0\n  local new_char_index_min_index=0\n\
    \  local new_char_index_min_index_tmp=0\n  local new_char_index_min_index_tmp_prev=0\n\
    \  local new_char_index_min_index_tmp_prev_prev=0\n  local new_char_index_min_index_tmp_prev_prev_prev=0\n\
    \  local new_char_index_min_index_tmp_prev_prev_prev_prev=0\n  local new_char_index_min_index_tmp_prev_prev_prev_prev_prev=0\n\
    \  local new_char_index_min_index_tmp_prev_prev_prev_prev_prev_prev=0\n  local\
    \ new_char_index_min_index_tmp_prev_prev_prev_prev_prev_prev_prev=0\n  local new_char_index_min_index_tmp_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local new_char_index_min_index_tmp_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local new_char_index_min_index_tmp_prev_prev_prev_prev_prev_prev_prev_\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local result=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_result=0\n\
    \    local is_space=0\n    local is_word=0\n    local is_char=0\n    local is_end=0\n\
    \    local is_first=0\n    local is_last=0\n    local is_first_word=0\n    local\
    \ is_last_word=0\n    local is_first_char=0\n    local is_last_char=0\n    local\
    \ is_first_space=0\n    local is_last_space=0\n    local is_first_char_of_word=0\n\
    \    local is_last_char_of_word=0\n    local is_first_char_of_space=0\n    local\
    \ is_last_char_of_space=0\n    local is_first_word_of_space=0\n    local is_last_word_of_space=0\n\
    \    local is_first_space_of_word=0\n    local is_last_space_of_word=0\n    local\
    \ is_first_word_of_char=0\n    local is_last_word_of_char=0\n    local is_first_char_of_word=0\n\
    \    local is_last_char_of_word=0\n    local is_first_space_of_char=0\n    local\
    \ is_last_space_of_char=0\n    local is_first_char_of_space=0\n    local is_last_char_of_space=0\n\
    \    local is_first_char_of_result=0\n    local is_last_char_of_result=0\n   \
    \ local is_first_word_of_result=0\n    local is_last_word_of_result=0\n    local\
    \ is_first_space_of_result=0\n    local is_last_space_of_result=0\n    local is_first_char_of_word_of_result=0\n\
    \    local is_last\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ sorted_string\n    local -a sorted_chars\n    local -a sorted_chars_string\n\
    \    local -a sorted_string_array\n    local -a sorted_chars_string_array\n  \
    \  local -a sorted_chars_string_array_length\n    local -a sorted_string_array_length\n\
    \    local -a sorted_chars_string_array_length_index\n    local -a sorted_string_array_length_index\n\
    \    local -a sorted_chars_string_array_length_index_length\n    local -a sorted_string_array_length_index_length\n\
    \    local -a sorted_chars_string_array_length_index_length_index\n    local -a\
    \ sorted_string_array_length_index_length_index\n    local -a sorted_chars_string_array_length_index_length_index_length\n\
    \    local -a sorted_string_array_length_index_length_index_length\n    local\
    \ -a sorted_chars_string_array_length_index_length_index_length_index\n    local\
    \ -a sorted_string_array_length_index_length_index_length_index\n    local -a\
    \ sorted_chars_string_array_length_index_length_index_length_index_length\n  \
    \  local -a sorted_string_array_length_index_length_index_length_index_length\n\
    \    local -a sorted_chars_string_array_length_index_length_index_length_index_length_index\n\
    \    local -a sorted_string_array_length_index_length_index_length_index_length_index\n\
    \    local -a sorted_chars_string_array_length_index_length_index_length_index_length_index_length\n\
    \    local -a sorted_string_array_length_index_length_index_length_index_length_index_length\n\
    \    local -a sorted_chars_string_array_length_index_length_index_length_index_length_index_length_index\n\
    \    local -a sorted_string_array_length_index_length_index_length_index_length_index_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\
    \"\n    local char_list=\"\"\n    local char_list_sorted=\"\"\n    local char_list_sorted_length=\"\
    \"\n    local i=\"\"\n    local j=\"\"\n    local k=\"\"\n    local l=\"\"\n \
    \   local m=\"\"\n    local n=\"\"\n    local o=\"\"\n    local p=\"\"\n    local\
    \ q=\"\"\n    local r=\"\"\n    local s=\"\"\n    local t=\"\"\n    local u=\"\
    \"\n    local v=\"\"\n    local w=\"\"\n    local x=\"\"\n    local y=\"\"\n \
    \   local z=\"\"\n    local space=\"\"\n    local exclamation=\"\"\n    local\
    \ question=\"\"\n    local period=\"\"\n    local comma=\"\"\n    local colon=\"\
    \"\n    local semi_colon=\"\"\n    local apostrophe=\"\"\n    local quote=\"\"\
    \n    local left_parenthesis=\"\"\n    local right_parenthesis=\"\"\n    local\
    \ left_bracket=\"\"\n    local right_bracket=\"\"\n    local left_brace=\"\"\n\
    \    local right_brace=\"\"\n    local left_angle=\"\"\n    local right_angle=\"\
    \"\n    local at=\"\"\n    local backslash=\"\"\n    local forward_slash=\"\"\n\
    \    local dash=\"\"\n    local underscore=\"\"\n    local equal=\"\"\n    local\
    \ plus=\"\"\n    local asterisk=\"\"\n    local ampersand=\"\"\n    local percent=\"\
    \"\n    local dollar=\"\"\n    local pound=\"\"\n    local caret=\"\"\n    local\
    \ tilde=\"\"\n    local backtick=\"\"\n    local pipe=\"\"\n    local less_than=\"\
    \"\n    local greater_than=\"\"\n    local number_sign=\"\"\n    local new_line=\"\
    \"\n    local tab=\"\"\n    local form_feed=\"\"\n    local carriage_return=\"\
    \"\n    local vertical_tab=\"\"\n    local null=\"\"\n    local bell=\"\"\n  \
    \  local backspace=\"\"\n    local escape=\"\"\n    local delete=\"\"\n    local\
    \ null_byte=\"\"\n    local null_byte_2=\"\"\n    local null_byte_3=\"\"\n   \
    \ local null_byte_4=\"\"\n    local null_byte_5=\"\"\n    local null_byte_6=\"\
    \"\n    local null_byte_7=\"\"\n    local null_byte_8\n}\n\ncandidate() {\n  \
    \  anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\")\
    \ = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local char_ascii=\"\"\n  local char_ascii_list=\"\"\n  local\
    \ char_ascii_list_sorted=\"\"\n  local char_sorted=\"\"\n  local char_sorted_list=\"\
    \"\n  local char_sorted_list_sorted=\"\"\n  local char_sorted_list_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted=\"\"\n  local char_sorted_list_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted=\"\"\n  local\
    \ char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted=\"\"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=\"\
    \"\n  local char_sorted_list_sorted_sorted_sorted_sorted_sorted_sorted_sorted_s\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local -a words\n    local -a sorted_words\n\
    \    local -a result\n    local word\n    local sorted_word\n    local i\n   \
    \ local j\n    local k\n    local len\n    local len_words\n    local len_sorted_words\n\
    \    local len_result\n    local char\n\n    # Split string into words\n    IFS='\
    \ ' read -r -a words <<< \"$string\"\n    len_words=${#words[@]}\n\n    # Sort\
    \ each word\n    for ((i=0; i<len_words; i++)); do\n        word=${words[$i]}\n\
    \        len=${#word}\n        for ((j=0; j<len; j++)); do\n            char=${word:$j:1}\n\
    \            sorted_word=\"$sorted_word$char\"\n        done\n        sorted_words[$i]=$(echo\
    \ \"$sorted_word\" | grep -o . | sort | tr -d '\\n')\n        sorted_word=\"\"\
    \n    done\n    len_sorted_words=${#sorted_words[@]}\n\n    # Replace words with\
    \ sorted words\n    for ((i=0; i<len_words; i++)); do\n        word=${words[$i]}\n\
    \        for ((j=0; j<len_sorted_words; j++)); do\n            sorted_word=${sorted_words[$j]}\n\
    \            if [[ \"$word\" == \"$sorted_word\" ]]; then\n                result[$i]=$sorted_word\n\
    \            fi\n        done\n    done\n    len_result=${#result[@]}\n\n    #\
    \ Print result\n    for ((i=0; i<len_result; i++)); do\n        echo -n \"${result[$i]}\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_new_str=0\n\
    \    local ascii_char=0\n    local ascii_char_min=0\n    local ascii_char_min_index=0\n\
    \    local ascii_char_min_index_tmp=0\n    local ascii_char_min_tmp=0\n    local\
    \ ascii_char_min_tmp_index=0\n    local ascii_char_min_tmp_index_tmp=0\n    local\
    \ ascii_char_min_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_index=0\n    local\
    \ ascii_char_min_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local ascii_char_min_tmp_tmp_tmp_tmp_tmp_tmp_index_tmp=0\n    local ascii\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Hint: You can use the\
    \ following command to sort the characters in a string:\n    # sorted=\"$(echo\
    \ \"$1\" | grep -o . | sort | tr -d '\\n')\"\n    #\n    # Hint: You can use the\
    \ following command to replace a word with another word:\n    # echo \"Hello World\"\
    \ | sed \"s/Hello/Hi/\"\n    #\n    # Hint: You can use the following command\
    \ to replace a word with another word\n    # only if the word is surrounded by\
    \ spaces:\n    # echo \"Hello World\" | sed \"s/\\sHello\\s/\\sHi\\s/\"\n    #\n\
    \    # Hint: You can use the following command to replace a word with another\
    \ word\n    # only if the word is surrounded by spaces or the beginning or end\
    \ of the string:\n    # echo \"Hello World\" | sed \"s/\\sHello\\s/\\sHi\\s/\"\
    \ | sed \"s/^Hello\\s/Hi\\s/\" | sed \"s/\\sHello$/\\sHi/\"\n    #\n    # Hint:\
    \ You can use the following command to replace a word with another word\n    #\
    \ only if the word is surrounded by spaces or the beginning or end of the string\n\
    \    # and the word is not empty:\n    # echo \"Hello World\" | sed \"s/\\sHello\\\
    s/\\sHi\\s/\" | sed \"s/^Hello\\s/Hi\\s/\" | sed \"s/\\sHello$/\\sHi/\" | sed\
    \ \"s/^Hello$/Hi/\"\n    #\n    # Hint: You can use the following command to replace\
    \ a word with another word\n    # only if the word is surrounded by spaces or\
    \ the beginning or end of the string\n    # and the word is not empty and the\
    \ word is not a single character:\n    # echo \"Hello World\" | sed \"s/\\sHello\\\
    s/\\sHi\\s/\" | sed \"s/^Hello\\s/Hi\\s/\" | sed \"s/\\sHello$/\\sHi/\" | sed\
    \ \"s/^Hello$/Hi/\" | sed \"s/\\s.\\s/\\s.\\s/\" | sed \"s/^\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy91lhfuu.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpy91lhfuu.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_str=${#str}\n    local len_word=0\n    local len_char=0\n\
    \    local ascii_char=0\n    local ascii_char_min=0\n    local ascii_char_min_index=0\n\
    \    local ascii_char_min_index_prev=0\n    local ascii_char_min_index_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local ascii_char_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_str=${#str}\n  local len_word=0\n  local len_char=0\n  local len_new_str=0\n\
    \  local ascii_value=0\n  local ascii_value_min=0\n  local ascii_value_max=0\n\
    \  local ascii_value_min_index=0\n  local ascii_value_max_index=0\n  local ascii_value_min_char=\"\
    \"\n  local ascii_value_max_char=\"\"\n  local ascii_value_min_char_index=0\n\
    \  local ascii_value_max_char_index=0\n  local ascii_value_min_char_index_tmp=0\n\
    \  local ascii_value_max_char_index_tmp=0\n  local ascii_value_min_char_tmp=\"\
    \"\n  local ascii_value_max_char_tmp=\"\"\n  local ascii_value_min_char_tmp_index=0\n\
    \  local ascii_value_max_char_tmp_index=0\n  local ascii_value_min_char_tmp_index_tmp=0\n\
    \  local ascii_value_max_char_tmp_index_tmp=0\n  local ascii_value_min_char_tmp_tmp=\"\
    \"\n  local ascii_value_max_char_tmp_tmp=\"\"\n  local ascii_value_min_char_tmp_tmp_index=0\n\
    \  local ascii_value_max_char_tmp_tmp_index=0\n  local ascii_value_min_char_tmp_tmp_index_tmp=0\n\
    \  local ascii_value_max_char_tmp_tmp_index_tmp=0\n  local ascii_value_min_char_tmp_tmp_tmp=\"\
    \"\n  local ascii_value_max_char_tmp_tmp_tmp=\"\"\n  local ascii_value\n}\n\n\
    candidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ word_len=0\n    local char_ascii=0\n    local char_ascii_min=0\n    local char_ascii_min_index=0\n\
    \    local char_ascii_min_index_prev=0\n    local char_ascii_min_index_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_prev=0\n    local char_ascii_min_index_prev_temp_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev=0\n    local char_ascii_min_index_prev_temp_prev_temp_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev=0\n    local\
    \ char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp=0\n    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev=0\n\
    \    local char_ascii_min_index_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp_prev_temp=0\n\
    \    local char_ascii_min_index_prev_temp_\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local new_str=\"\"\n  local word=\"\"\n  local\
    \ char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=${#str}\n\
    \  local len_word=0\n  local len_char=0\n  local char_arr=()\n  local word_arr=()\n\
    \  local str_arr=()\n  local char_ascii=0\n  local char_ascii_min=0\n  local char_ascii_min_index=0\n\
    \  local char_ascii_min_index_tmp=0\n  local char_ascii_min_tmp=0\n  local char_ascii_tmp=0\n\
    \  local char_tmp=\"\"\n  local char_tmp_index=0\n  local char_tmp_index_min=0\n\
    \  local char_tmp_index_min_tmp=0\n  local char_tmp_min=\"\"\n  local char_tmp_min_tmp=\"\
    \"\n  local char_tmp_min_tmp_index=0\n  local char_tmp_min_tmp_index_min=0\n \
    \ local char_tmp_min_tmp_index_min_tmp=0\n  local char_tmp_min_tmp_min=\"\"\n\
    \  local char_tmp_min_tmp_min_tmp=\"\"\n  local char_tmp_min_tmp_min_tmp_index=0\n\
    \  local char_tmp_min_tmp_min_tmp_index_min=0\n  local char_tmp_min_tmp_min_tmp_index_min_tmp=0\n\
    \  local char_tmp_min_tmp_min_tmp_min=\"\"\n  local char_tmp_min_tmp_min_tmp_min_tmp=\"\
    \"\n  local char_tmp_min_tmp_min_tmp_min_tmp_index=0\n  local char_tmp_min_tmp_min_tmp_min_tmp_index_min=0\n\
    \  local char_tmp_min_tmp_min_tmp_min_tmp_index_min_tmp=0\n  local char_tmp_min_tmp_min_tmp_min_tmp_min=\"\
    \"\n  local char_tmp_min\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local words=()\n    local word=\"\"\
    \n    local char=\"\"\n    local result=\"\"\n    local i=0\n    local j=0\n \
    \   local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n  \
    \  local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n   \
    \ local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local\
    \ z=0\n    local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n\
    \    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n \
    \   local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n  \
    \  local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n   \
    \ local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local\
    \ z=0\n    local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n\
    \    local F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n \
    \   local K=0\n    local L=0\n    local M=0\n    local N=0\n    local O=0\n  \
    \  local P=0\n    local Q=0\n    local R=0\n    local S=0\n    local T=0\n   \
    \ local U=0\n    local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local\
    \ Z=0\n    local space=0\n    local exclamation=0\n    local question=0\n    local\
    \ comma=0\n    local period=0\n    local colon=0\n    local semicolon=0\n    local\
    \ apostrophe=0\n    local dash=0\n    local underscore=\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=$1\n  local res=\"\"\n  local word=\"\"\n  local\
    \ char=\"\"\n  local sorted=\"\"\n  for word in $str; do\n    sorted=\"\"\n  \
    \  for char in $(echo $word | fold -w1); do\n      sorted+=$(echo $char | sort)\n\
    \    done\n    res+=$sorted\n  done\n  echo $res\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    echo $1 | tr ' ' '\\n' | while read word; do\n        echo\
    \ -n $word | grep -o . | sort | tr -d '\\n'\n        echo -n ' '\n    done\n}\n\
    \ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local word\n    local sorted_word\n    local i\n    local j\n  \
    \  local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n   \n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local result=\"\"\n    local word=\"\
    \"\n    local i=0\n    local j=0\n    local k=0\n    local len=${#str}\n    local\
    \ char=\"\"\n    local char_ascii=0\n    local char_ascii_array=()\n    local\
    \ char_ascii_array_len=0\n    local char_ascii_array_index=0\n    local char_ascii_array_index_len=0\n\
    \    local char_ascii_array_index_len_char=\"\"\n    local char_ascii_array_index_len_char_ascii=0\n\
    \    local char_ascii_array_index_len_char_ascii_array=()\n    local char_ascii_array_index_len_char_ascii_array_len=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index=0\n    local char_ascii_array_index_len_char_ascii_array_index_len=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char=\"\"\n \
    \   local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii_array=()\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii_array_len=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii_array_index=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii_array_index_len=0\n\
    \    local char_ascii_array_index_len_char_ascii_array_index_len_char_ascii_array_index_len\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Please note that you\
    \ should not have any extra spaces at the end of the string\n    # and you should\
    \ not have any extra new lines\n    # Hint: You can use the sort command to sort\
    \ the characters in a string\n    # Hint: You can use the tr command to replace\
    \ all spaces with a new line\n    # Hint: You can use the paste command to merge\
    \ lines\n    # Hint: You can use the tr command to replace all new lines with\
    \ a space\n    # Hint: You can use the rev command to reverse the string\n   \
    \ # Hint: You can use the tr command to replace all spaces with a new line\n \
    \   # Hint: You can use the sort command to sort the characters in a string\n\
    \    # Hint: You can use the tr command to replace all new lines with a space\n\
    \    # Hint: You can use the rev command to reverse the string\n    # Hint: You\
    \ can use the tr command to replace all spaces with a new line\n    # Hint: You\
    \ can use the paste command to merge lines\n    # Hint: You can use the tr command\
    \ to replace all new lines with a space\n    # Hint: You can use the rev command\
    \ to reverse the string\n    # Hint: You can use the tr command to replace all\
    \ spaces with a new line\n    # Hint: You can use the paste command to merge lines\n\
    \    # Hint: You can use the tr command to replace all new lines with a space\n\
    \    # Hint: You can use the rev command to reverse the string\n    # Hint: You\
    \ can use the tr command to replace all spaces with a new line\n    # Hint: You\
    \ can use the paste command to merge lines\n    # Hint: You can use the tr command\
    \ to replace all new lines with a space\n    # Hint: You can use the rev command\
    \ to reverse the string\n    # Hint: You can use the tr command to replace all\
    \ spaces with a new line\n    # Hint: You can use the paste command to merge lines\n\
    \    # Hint: You can use the tr command to replace all new lines with a space\n\
    \    # Hint: You can use the rev command to reverse the string\n    # Hint: You\
    \ can use the tr command to replace all spaces with a new line\n   \n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ne62azs.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmp9ne62azs.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local word\n    local result=\"\"\n\
    \    for word in $str; do\n        result=\"$result $(echo $word | grep -o . |\
    \ sort | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted_words\n    local -a\
    \ result\n    local i\n    local j\n    local word\n    local sorted_word\n  \
    \  local result_str\n\n    words=($(echo \"$1\" | tr ' ' '\\n'))\n    for word\
    \ in \"${words[@]}\"; do\n        sorted_word=$(echo \"$word\" | grep -o . | sort\
    \ | tr -d '\\n')\n        sorted_words+=(\"$sorted_word\")\n    done\n\n    for\
    \ ((i=0; i<${#words[@]}; i++)); do\n        result+=(\"${words[$i]}\")\n     \
    \   result+=(\"${sorted_words[$i]}\")\n    done\n\n    result_str=$(echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -u | tr -d '\\n')\n    echo \"$result_str\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local word\n    local result=\"\"\n  \
    \  for word in $str; do\n        result=\"$result $(echo $word | grep -o . | sort\
    \ | tr -d '\\n')\"\n    done\n    echo $result\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local res=\"\"\n    local word=\"\"\n\
    \    local i=0\n    local j=0\n    local len=${#str}\n    local len_word=0\n \
    \   local char=\"\"\n    local char_ascii=0\n    local char_ascii_min=0\n    local\
    \ char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n    local char_ascii_min_tmp=0\n\
    \    local char_ascii_tmp=0\n    local char_tmp=\"\"\n    local char_tmp_index=0\n\
    \    local char_tmp_index_min=0\n    local char_tmp_index_min_tmp=0\n    local\
    \ char_tmp_min=\"\"\n    local char_tmp_min_tmp=\"\"\n    local char_tmp_tmp=\"\
    \"\n    local char_tmp_tmp_index=0\n    local char_tmp_tmp_index_min=0\n    local\
    \ char_tmp_tmp_index_min_tmp=0\n    local char_tmp_tmp_min=\"\"\n    local char_tmp_tmp_min_tmp=\"\
    \"\n    local char_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_index=0\n    local\
    \ char_tmp_tmp_tmp_index_min=0\n    local char_tmp_tmp_tmp_index_min_tmp=0\n \
    \   local char_tmp_tmp_tmp_min=\"\"\n    local char_tmp_tmp_tmp_min_tmp=\"\"\n\
    \    local char_tmp_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_tmp_tmp_tmp_tmp_index_min=0\n    local char_tmp_tmp_tmp_tmp_index_min_tmp=0\n\
    \    local char_tmp_tmp_tmp_tmp_min=\"\"\n    local char_tmp_tmp_tmp_tmp_min_tmp=\"\
    \"\n    local char_tmp_tmp_tmp_tmp_tmp=\"\"\n    local char_tmp_tmp_tmp_tmp_tmp_index=0\n\
    \    local char_tmp_tmp_tmp_tmp_tmp_index_min=0\n    local char_tmp_\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local -a chars=()\n    local -a words=()\n    local\
    \ -a new_words=()\n    local -a new_chars=()\n    local -a new_str_arr=()\n  \
    \  local -a str_arr=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i len=0\n    local -i len_new_str=0\n \
    \   local -i len_new_words=0\n    local -i len_new_chars=0\n    local -i len_str_arr=0\n\
    \    local -i len_words=0\n    local -i len_chars=0\n    local -i len_new_str_arr=0\n\
    \    local -i len_new_words=0\n    local -i len_new_chars=0\n    local -i len_str_arr=0\n\
    \    local -i len_words=0\n    local -i len_chars=0\n    local -i len_new_str_arr=0\n\
    \    local -i len_new_words=0\n    local -i len_new_chars=0\n    local -i len_str_arr=0\n\
    \    local -i len_words=0\n    local -i len_chars=0\n    local -i len_new_str_arr=0\n\
    \    local -i len_new_words=0\n    local -i len_new_chars=0\n    local -i len_str_arr=0\n\
    \    local -i len_words=0\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local -a words\n    local -a new_words\n\
    \    local -a result\n    local i\n    local j\n    local k\n    local -i len\n\
    \    local -i len_new\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n    local\
    \ -i len_new_words\n    local -i len_result\n    local -i len_words\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local new_str=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_ascii=\"\"\n    local char_ascii_list=\"\
    \"\n    local char_ascii_list_sorted=\"\"\n    local char_ascii_list_sorted_arr=()\n\
    \    local char_ascii_list_sorted_arr_len=0\n    local char_ascii_list_sorted_arr_idx=0\n\
    \    local char_ascii_list_sorted_arr_idx_max=0\n    local char_ascii_list_sorted_arr_idx_max_char=\"\
    \"\n    local char_ascii_list_sorted_arr_idx_max_char_ascii=\"\"\n    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx=0\n\
    \    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max=0\n    local\
    \ char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char=\"\"\n    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char_ascii=\"\
    \"\n    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char_ascii_idx=0\n\
    \    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char_ascii_idx_max=0\n\
    \    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char_ascii_idx_max_char=\"\
    \"\n    local char_ascii_list_sorted_arr_idx_max_char_ascii_idx_max_char_ascii_idx_max_char_ascii=\"\
    \"\n    local char_ascii_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local new_string=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n  \
    \  local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n   \
    \ local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local\
    \ L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n\
    \    local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n \
    \   local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local space=0\n\
    \    local exclamation=0\n    local question=0\n    local comma=0\n    local dot=0\n\
    \    local colon=0\n    local semicolon=0\n    local apostrophe=0\n    local quote=0\n\
    \    local left_parenthesis=0\n   \n}\n\ncandidate() {\n    anti_shuffle \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local result=\"\"\n    for word in $1; do\n        local\
    \ sorted_word=\"\"\n        for (( i=0; i<${#word}; i++ )); do\n            sorted_word+=\"\
    ${word:$i:1}\"\n        done\n        sorted_word=$(echo -e \"$sorted_word\" |\
    \ sort -n)\n        result+=\"$sorted_word\"\n    done\n    echo \"$result\"\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local ret=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ len=0\n    local len_word=0\n    local len_str=${#str}\n    local char_arr=()\n\
    \    local char_arr_sorted=()\n    local char_arr_sorted_len=0\n    local char_arr_sorted_len_prev=0\n\
    \    local char_arr_sorted_len_diff=0\n    local char_arr_sorted_len_diff_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev=0\n    local char_arr_sorted_len_diff_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev=0\n    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev=0\n    local\
    \ char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev=0\n    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_sorted_len_diff_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local char_arr_\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=\"$1\"\n    local new_string=\"\"\n    local\
    \ word=\"\"\n    local char=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local A=0\n    local B=0\n    local C=0\n    local D=0\n    local E=0\n    local\
    \ F=0\n    local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n\
    \    local L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n \
    \   local Q=0\n    local R=0\n    local S=0\n    local T=0\n    local U=0\n  \
    \  local V=0\n    local W=0\n    local X=0\n    local Y=0\n    local Z=0\n   \
    \ local space=0\n    local exclamation=0\n    local question=0\n    local comma=0\n\
    \    local period=0\n    local colon=0\n    local semicolon=0\n    local apostrophe=0\n\
    \    local dash=0\n    local underscore=0\n    local left_paren=0\n    local right_paren=0\n\
    \    local left_bracket=0\n    local right_bracket=0\n    local left_brace=0\n\
    \    local right_brace=0\n    local left_angle=0\n    local right_angle=0\n  \
    \  local at=0\n    local backslash=0\n    local forward_slash=0\n    local dollar=0\n\
    \    local percent=0\n    local caret=0\n    local ampersand=0\n    local asterisk=0\n\
    \    local plus=0\n    local equals=0\n    local less_than=0\n    local greater_than=0\n\
    \    local tilde=0\n\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\"\
    ) = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate\
    \ \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello\
    \ \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hi. My name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\
    \n    local char=\"\"\n    local i=0\n    local j=0\n    local len=0\n    local\
    \ len_str=${#str}\n    local len_word=0\n    local len_res=0\n    local char_ascii=0\n\
    \    local char_ascii_min=0\n    local char_ascii_min_index=0\n    local char_ascii_min_index_tmp=0\n\
    \    local char_ascii_min_tmp=0\n    local char_ascii_tmp=0\n    local char_tmp=\"\
    \"\n    local char_min=\"\"\n    local char_min_tmp=\"\"\n    local char_min_index_tmp=0\n\
    \    local char_min_index=0\n    local char_min_ascii=0\n    local char_min_ascii_tmp=0\n\
    \    local char_min_ascii_index=0\n    local char_min_ascii_index_tmp=0\n    local\
    \ char_min_ascii_min=0\n    local char_min_ascii_min_tmp=0\n    local char_min_ascii_min_index=0\n\
    \    local char_min_ascii_min_index_tmp=0\n    local char_min_ascii_min_tmp=0\n\
    \    local char_min_ascii_min_tmp_index=0\n    local char_min_ascii_min_tmp_index_tmp=0\n\
    \    local char_min_ascii_min_tmp_index_tmp_tmp=0\n    local char_min_ascii_min_tmp_index_tmp_tmp_tmp=0\n\
    \    local char_min_ascii_min_tmp_index_tmp_tmp_tmp_tmp=0\n    local char_min_ascii_min_tmp_index_tmp_tmp_tmp_tmp_tmp=0\n\
    \    local char_min_ascii_min_tmp_index_tmp_tmp_tmp_tmp_tmp_tmp=0\n    local char_min_ascii_min_tmp_index_\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local -a words\n    local -a sorted\n    local -a result\n\
    \    local word\n    local i\n    local j\n    local k\n    local char\n    local\
    \ sorted_word\n    local sorted_char\n    local sorted_word_len\n    local sorted_char_len\n\
    \    local result_len\n    local result_char\n    local result_char_len\n    local\
    \ result_word\n    local result_word_len\n    local result_word_char\n    local\
    \ result_word_char_len\n    local result_word_char_ascii\n    local result_word_char_ascii_len\n\
    \    local result_word_char_ascii_char\n    local result_word_char_ascii_char_len\n\
    \    local result_word_char_ascii_char_ascii\n    local result_word_char_ascii_char_ascii_len\n\
    \    local result_word_char_ascii_char_ascii_char\n    local result_word_char_ascii_char_ascii_char_len\n\
    \    local result_word_char_ascii_char_ascii_char_ascii\n    local result_word_char_ascii_char_ascii_char_ascii_len\n\
    \    local result_word_char_ascii_char_ascii_char_ascii_char\n    local result_word_char_ascii_char_ascii_char_ascii_char_len\n\
    \    local result_word_char_ascii_char_ascii_char_ascii_char_ascii\n    local\
    \ result_word_char_ascii_char_ascii_char_ascii_char_ascii_len\n    local result_word_char_ascii_char_ascii_char_ascii_char_ascii_char\n\
    \    local result_word_char_ascii_char_ascii_char_ascii_char_ascii_char_len\n\
    \    local result_word_char_ascii_char_ascii_char_ascii_char\n}\n\ncandidate()\
    \ {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017392
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_word=0\n  local len_str=${#str}\n  local ascii_char=()\n  local ascii_word=()\n\
    \  local ascii_str=()\n  local ascii_new_str=()\n  local ascii_new_word=()\n \
    \ local ascii_new_char=()\n  local ascii_new_char_str=()\n  local ascii_new_char_word=()\n\
    \  local ascii_new_char_char=()\n  local ascii_new_char_char_str=()\n  local ascii_new_char_char_word=()\n\
    \  local ascii_new_char_char_char=()\n  local ascii_new_char_char_char_str=()\n\
    \  local ascii_new_char_char_char_word=()\n  local ascii_new_char_char_char_char=()\n\
    \  local ascii_new_char_char_char_char_str=()\n  local ascii_new_char_char_char_char_word=()\n\
    \  local ascii_new_char_char_char_char_char=()\n  local ascii_new_char_char_char_char_char_str=()\n\
    \  local ascii_new_char_char_char_char_char_word=()\n  local ascii_new_char_char_char_char_char_char=()\n\
    \  local ascii_new_char_char_char_char_char_char_str=()\n  local ascii_new_char_char_char_char_char_char_word=()\n\
    \  local ascii_new_char_char_char_char_char_char_char=()\n  local ascii_new_char_char_char_char_char_char_char_str=()\n\
    \  local ascii_new_char\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local string=$1\n    local result=\"\"\n    local word=\"\
    \"\n    local char=\"\"\n    local char_list=\"\"\n    local char_list_sorted=\"\
    \"\n    local char_list_sorted_array=()\n    local char_list_sorted_array_index=0\n\
    \    local char_list_sorted_array_length=0\n    local char_list_sorted_array_length_index=0\n\
    \    local char_list_sorted_array_length_index_char=\"\"\n    local char_list_sorted_array_length_index_char_ascii=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min=0\n    local char_list_sorted_array_length_index_char_ascii_min_index=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char=\"\"\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min_index=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min_index_char=\"\
    \"\n    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min_index_char_ascii=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min_index_char_ascii_min=0\n\
    \    local char_list_sorted_array_length_index_char_ascii_min_index_char_ascii_min_index_char_ascii_min_index=0\n\
    \    local char_list_sorted_array_length_index\n}\n\ncandidate() {\n    anti_shuffle\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n\
    \    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\")\
    \ = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate\
    \ \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\"\
    ) = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    # TODO: Write your code here\n    # Please note that the\
    \ following line is a placeholder and\n    # should be removed when you add your\
    \ code.\n    echo \"anti_shuffle is not implemented yet\"\n}\n\ncandidate() {\n\
    \    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hi\"\
    ) = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n    [[ $(candidate\
    \ \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\") = \"abcd\" ]]\n  \
    \  [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My name is Mister\
    \ Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer ?ouy\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n    local str=$1\n    local new_str=\"\"\n    local word=\"\"\
    \n    local sorted_word=\"\"\n    for word in $str; do\n        sorted_word=$(echo\
    \ $word | grep -o . | sort | tr -d '\\n')\n        new_str=\"$new_str $sorted_word\"\
    \n    done\n    echo $new_str\n}\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate\
    \ \"hello\") = \"ehllo\" ]]\n    [[ $(candidate \"number\") = \"bemnru\" ]]\n\
    \    [[ $(candidate \"abcd\") = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\\
    !\\!\\!\") = \"Hello \\!\\!\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"Hi. My name is Mister Robot. How are you?\") = \".Hi My\
    \ aemn is Meirst .Rboot How aer ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes a string and returns an ordered\
    \ version of it.\n# Ordered version of string, is a string where all words (separated\
    \ by space)\n# are replaced by a new word where all the characters arranged in\n\
    # ascending order based on ascii value.\n# Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle\
    \ \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle\
    \ \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\n\
    anti_shuffle() {\n  local str=\"$1\"\n  local new_str=\"\"\n  local word=\"\"\n\
    \  local char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local\
    \ len_str=${#str}\n  local len_word=0\n  local len_new_str=0\n  local ascii_char=0\n\
    \  local ascii_min=0\n  local ascii_max=0\n  local min_index=0\n  local max_index=0\n\
    \  local temp=\"\"\n  local temp_index=0\n  local temp_ascii=0\n  local temp_char=\"\
    \"\n  local temp_word=\"\"\n  local temp_str=\"\"\n  local temp_new_str=\"\"\n\
    \  local temp_len_new_str=0\n  local temp_len_word=0\n  local temp_len_str=0\n\
    \  local temp_len=0\n  local temp_i=0\n  local temp_j=0\n  local temp_k=0\n  local\
    \ temp_min_index=0\n  local temp_max_index=0\n  local temp_ascii_min=0\n  local\
    \ temp_ascii_max=0\n  local temp_ascii_char=0\n  local temp_char_ascii=0\n  local\
    \ temp_char_index=0\n  local temp_char_word=\"\"\n  local temp_char_str=\"\"\n\
    \  local temp_char_new_str=\"\"\n  local temp_char_len_new_str=0\n  local temp_char_len_word=0\n\
    \  local temp_char_len_str=0\n  local temp_char_len=0\n  local temp_char_i=0\n\
    \  local temp_char_j=0\n  local temp_char_k=0\n  local temp_char_min_index=0\n\
    \  local temp_char_max_index=0\n  local temp_char_ascii_min=0\n  local temp_char_ascii_max=0\n\
    \  local temp_char_ascii_char=0\n  local temp_char_temp=\"\"\n  local temp_char_temp_index=\n\
    }\n\ncandidate() {\n    anti_shuffle \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hi\") = \"Hi\" ]]\n    [[ $(candidate \"hello\") = \"ehllo\" ]]\n\
    \    [[ $(candidate \"number\") = \"bemnru\" ]]\n    [[ $(candidate \"abcd\")\
    \ = \"abcd\" ]]\n    [[ $(candidate \"Hello World\\!\\!\\!\") = \"Hello \\!\\\
    !\\!Wdlor\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"Hi. My\
    \ name is Mister Robot. How are you?\") = \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017393
