language: sh
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n   \
    \             return\n            fi\n            stack=\"${stack%?}\"\n     \
    \   fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=\"${stack:0:-1}\"\n\
    \        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local stack=()\n    local brackets=$1\n\
    \    local i=0\n    local c\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  c=${brackets:$i:1}\n        if [[ \"$c\" == \"(\" ]]; then\n            stack+=(\"\
    $c\")\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack=\"$stack(\"\n      \
    \  elif [[ $char == \")\" ]]; then\n            if [[ -z $stack ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack%?}\"\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            open_brackets=$(( open_brackets + 1 ))\n    \
    \    elif [[ \"$bracket\" == \")\" ]]; then\n            close_brackets=$(( close_brackets\
    \ + 1 ))\n        fi\n        if [[ $close_brackets -gt $open_brackets ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $open_brackets -eq $close_brackets ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=${stack:0:-1}\n     \
    \   fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ open_brackets=$(( open_brackets - 1 ))\n        fi\n        if [[ $open_brackets\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $open_brackets -eq 0 ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open=0\n    local close=0\n    for ((i=0; i<${#brackets}; i++)); do\n      \
    \  if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            ((open++))\n    \
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            ((close++))\n\
    \        fi\n    done\n    if [[ $open -eq $close ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            stack+=($i)\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local bracketing=\"$1\"\n  local\
    \ stack=\"\"\n  local bracket\n  for (( i=0; i<${#bracketing}; i++ )); do\n  \
    \  bracket=\"${bracketing:$i:1}\"\n    if [[ \"$bracket\" == \"(\" ]]; then\n\
    \      stack=\"$stack(\"\n    elif [[ \"$bracket\" == \")\" ]]; then\n      if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"false\"\n        return\n   \
    \   fi\n      stack=\"${stack:0:-1}\"\n    fi\n  done\n  if [[ \"$stack\" == \"\
    \" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_brackets=$((close_brackets+1))\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((\
    \ open_count + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n\
    \            close_count=$(( close_count + 1 ))\n        fi\n    done\n    if\
    \ [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\n     \
    \           return\n            fi\n            stack=\"${stack:0:-1}\"\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i=0\n    local bracket\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n\
    \            stack+=(\"$bracket\")\n        elif [[ $bracket == \")\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack=\"$stack(\"\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ -z $stack ]]; then\n                echo \"false\"\n         \
    \       return\n            fi\n            stack=${stack:0:-1}\n        fi\n\
    \    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    local i=0\n    local c\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n        if [[ \"$c\"\
    \ == \"(\" ]]; then\n            open_count=$((open_count + 1))\n        elif\
    \ [[ \"$c\" == \")\" ]]; then\n            close_count=$((close_count + 1))\n\
    \        fi\n        if [[ $close_count -gt $open_count ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ stack=()\n  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"(\" ]]; then\n      stack+=(\"\
    $bracket\")\n    elif [[ \"$bracket\" == \")\" ]]; then\n      if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"false\"\n        return\n      fi\n      unset\
    \ stack[${#stack[@]}-1]\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            (( count++ ))\n      \
    \  elif [[ \"$char\" == \")\" ]]; then\n            (( count-- ))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local stack=()\n    local brackets=$1\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local char=${brackets:$i:1}\n        if [[ \"$char\" == \"(\" ]];\
    \ then\n            open_count=$(( open_count + 1 ))\n        elif [[ \"$char\"\
    \ == \")\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \        if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n          \
    \      return\n            fi\n            stack=\"${stack%?}\"\n        fi\n\
    \    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n\
    \        elif [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=\"\
    \"\n  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=\"(\"\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n      stack=${stack%?}\n    fi\n  done\n  if [[ -z\
    \ $stack ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                return 1\n            fi\n            stack=\"\
    ${stack::-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n     \
    \   return 0\n    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=\"${brackets:$i:1}\"\
    \n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n    \
    \    elif [[ \"$c\" == \")\" ]]; then\n            if [[ \"$stack\" == \"\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=\"${stack%?}\"\n        fi\n    done\n    if [[ \"$stack\"\
    \ == \"\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                echo \"false\"\n                return\n\
    \            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracket_stack=()\n    local\
    \ bracket_stack_size=0\n    local i=0\n    local char=''\n    local top_of_stack=''\n\
    \    local result=''\n\n    for (( i=0; i<${#1}; i++ )); do\n        char=${1:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            bracket_stack[$bracket_stack_size]=\"\
    $char\"\n            ((bracket_stack_size++))\n        elif [[ \"$char\" == \"\
    )\" ]]; then\n            if [[ $bracket_stack_size -eq 0 ]]; then\n         \
    \       result=\"false\"\n                break\n            else\n          \
    \      top_of_stack=${bracket_stack[$((bracket_stack_size-1))]}\n            \
    \    if [[ \"$top_of_stack\" == \"(\" ]]; then\n                    unset bracket_stack[$((bracket_stack_size-1))]\n\
    \                    ((bracket_stack_size--))\n                else\n        \
    \            result=\"false\"\n                    break\n                fi\n\
    \            fi\n        fi\n    done\n\n    if [[ $bracket_stack_size -ne 0 ]];\
    \ then\n        result=\"false\"\n    fi\n\n    if [[ -z \"$result\" ]]; then\n\
    \        result=\"true\"\n    fi\n\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( open_brackets++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( open_brackets-- ))\n        fi\n        if\
    \ (( open_brackets < 0 )); then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if (( open_brackets == 0 )); then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local stack=()\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        local c=${1:i:1}\n        if [[ $c == \"(\" ]];\
    \ then\n            stack+=($c)\n        elif [[ $c == \")\" ]]; then\n      \
    \      if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n   \
    \             return\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack:0:-1}\"\n \
    \       fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ -z $stack ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ $stack == \"\" ]]; then\n       \
    \         echo \"false\"\n                return\n            fi\n           \
    \ stack=${stack:0:-1}\n        fi\n    done\n    if [[ $stack == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=\"(\"\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ $stack == \"\" ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack::-1}\n        fi\n    done\n    if [[ $stack == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" ==\
    \ \")\" ]]; then\n      (( count-- ))\n    fi\n    if (( count < 0 )); then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if (( count == 0 )); then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n    \
    \        stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n     \
    \       if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  local i=0\n  local len=${#brackets}\n  while [ $i -lt $len ]; do\n    local\
    \ char=${brackets:$i:1}\n    if [ \"$char\" == \"(\" ]; then\n      stack+=(\"\
    $char\")\n    elif [ \"$char\" == \")\" ]; then\n      if [ ${#stack[@]} -eq 0\
    \ ]; then\n        echo \"false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}\
    \ - 1))}\")\n    fi\n    i=$(($i + 1))\n  done\n  if [ ${#stack[@]} -eq 0 ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=\"$bracket\"\n        elif [[ $bracket == \")\" ]]; then\n \
    \           if [[ -z $stack ]]; then\n                echo \"false\"\n       \
    \         return\n            fi\n            stack=${stack::-1}\n        fi\n\
    \    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open=0\n    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open=$((open+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close=$((close+1))\n\
    \        fi\n        if [[ $close -gt $open ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open -eq $close ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=\"$char\"\n       \
    \ elif [[ $char == \")\" ]]; then\n            if [[ -z $stack ]]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        \
    \    stack=${stack%?}\n        fi\n    done\n    if [[ -z $stack ]]; then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_brackets=0\n\
    \  local closed_brackets=0\n  local i=0\n  local char\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    char=${brackets:$i:1}\n    if [[ $char == \"(\" ]]; then\n \
    \     open_brackets=$(( open_brackets + 1 ))\n    elif [[ $char == \")\" ]]; then\n\
    \      closed_brackets=$(( closed_brackets + 1 ))\n    fi\n    if [[ $closed_brackets\
    \ -gt $open_brackets ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n\
    \  if [[ $open_brackets -eq $closed_brackets ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ \"$stack\"\
    \ == \"\" ]]; then\n                echo \"false\"\n                return\n \
    \           fi\n            stack=${stack:0:-1}\n        fi\n    done\n    if\
    \ [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=(\"$char\")\n     \
    \   elif [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} == 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ == 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=\"\
    \"\n  local i\n  for ((i=0; i<${#brackets}; i++)); do\n    local char=${brackets:$i:1}\n\
    \    if [[ $char == \"(\" ]]; then\n      stack+=\"(\"\n    elif [[ $char == \"\
    )\" ]]; then\n      if [[ -z $stack ]]; then\n        echo \"false\"\n       \
    \ return\n      fi\n      stack=${stack:0:-1}\n    fi\n  done\n  if [[ -z $stack\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n\
    \        elif [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack=\"$stack(\"\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ -z $stack ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n         \
    \   open_brackets=$(( open_brackets + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            close_brackets=$(( close_brackets + 1 ))\n  \
    \      fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ -z $stack ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  local i=0\n  local c\n  while [ $i -lt ${#brackets} ]; do\n    c=${brackets:$i:1}\n\
    \    if [ \"$c\" == \"(\" ]; then\n      stack+=(\"$c\")\n    elif [ \"$c\" ==\
    \ \")\" ]; then\n      if [ ${#stack[@]} -eq 0 ]; then\n        echo \"false\"\
    \n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\"\
    )\n    fi\n    i=$(($i + 1))\n  done\n  if [ ${#stack[@]} -eq 0 ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            (( open_count++ ))\n        elif [[ \"$char\" == \")\"\
    \ ]]; then\n            (( close_count++ ))\n        fi\n        if (( close_count\
    \ > open_count )); then\n            echo \"false\"\n            return\n    \
    \    fi\n    done\n    if (( open_count == close_count )); then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            ((count++))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            ((count--))\n        fi\n        if ((count <\
    \ 0)); then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if ((count == 0)); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    local char=${brackets:$i:1}\n \
    \   if [[ $char == \"(\" ]]; then\n      stack+=($char)\n    elif [[ $char ==\
    \ \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"false\"\
    \n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n  done\n\
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets}; i++\
    \ )); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n      open_brackets=$((open_brackets+1))\n\
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n      close_brackets=$((close_brackets+1))\n\
    \    fi\n  done\n  if [[ $open_brackets -eq $close_brackets ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n\
    \        elif [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n                return 1\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n\
    \    else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            open_count=$((open_count + 1))\n        elif [[ \"$char\"\
    \ == \")\" ]]; then\n            close_count=$((close_count + 1))\n        fi\n\
    \        if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n         \
    \   open_brackets=$(( open_brackets + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            close_brackets=$(( close_brackets + 1 ))\n  \
    \      fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack%?}\"\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          echo \"false\"\n                return\n            fi\n          \
    \  unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n    \
    \        stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n     \
    \       if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\n     \
    \           return\n            fi\n            stack=\"${stack:0:-1}\"\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            ((open_brackets++))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            ((close_brackets++))\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack=\"$stack$char\"\n  \
    \      elif [[ $char == \")\" ]]; then\n            if [[ -z $stack ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack%?}\n        fi\n    done\n    if [[ -z $stack ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=(\"$bracket\")\n\
    \        elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n     \
    \   char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n   \
    \         stack=\"$stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack%?}\"\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\"\
    \ ]]; then\n            open_count=$((open_count+1))\n        elif [[ $bracket\
    \ == \")\" ]]; then\n            close_count=$((close_count+1))\n        fi\n\
    \        if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack$bracket\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n \
    \           if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n   \
    \             return\n            fi\n            stack=\"${stack%?}\"\n     \
    \   fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    local i\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_brackets=$((open_brackets\
    \ + 1))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_brackets=$((close_brackets\
    \ + 1))\n        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack:0:-1}\"\n \
    \       fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    local i=0\n    while [ $i -lt\
    \ ${#brackets} ]; do\n        if [ \"${brackets:$i:1}\" == \"(\" ]; then\n   \
    \         open_brackets=$((open_brackets + 1))\n        elif [ \"${brackets:$i:1}\"\
    \ == \")\" ]; then\n            close_brackets=$((close_brackets + 1))\n     \
    \   fi\n        if [ $close_brackets -gt $open_brackets ]; then\n            echo\
    \ \"false\"\n            return\n        fi\n        i=$((i + 1))\n    done\n\
    \    if [ $open_brackets -eq $close_brackets ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open=0\n  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n      (( open++ ))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n      (( close++ ))\n    fi\n    if (( close > open )); then\n\
    \      return 1\n    fi\n  done\n  if (( open == close )); then\n    return 0\n\
    \  else\n    return 1\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open=0\n    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open++ ))\n\
    \        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close++\
    \ ))\n        fi\n        if (( close > open )); then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if (( open == close )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=\"\
    \"\n  local bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack$bracket\"\n  \
    \  elif [[ \"$bracket\" == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n      stack=${stack:0:-1}\n\
    \    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_count=0\n  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n      (( open_count++ ))\n\
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n      (( close_count++ ))\n\
    \    fi\n    if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            ((count++))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            ((count--))\n        fi\n        if ((count <\
    \ 0)); then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    if ((count == 0)); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=(\"(\")\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n  \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_count=$((\
    \ open_count + 1 ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n    \
    \        close_count=$(( close_count + 1 ))\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      unset stack[${#stack[@]}-1]\n    fi\n\
    \  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\"\
    \ ]]; then\n                return 1\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        return 0\n  \
    \  else\n        return 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=\"(\"\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ -z $stack ]]; then\n               \
    \ echo \"false\"\n                return\n            fi\n            stack=${stack%?}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_brackets=$((close_brackets+1))\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  local bracket\n  for (( i=0; i<${#brackets}; i++ )); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ -z $stack ]]; then\n            \
    \    echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    local i\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\"\
    \ == \"(\" ]]; then\n            open_count=$((open_count + 1))\n        elif\
    \ [[ \"$char\" == \")\" ]]; then\n            close_count=$((close_count + 1))\n\
    \        fi\n        if [[ $close_count -gt $open_count ]]; then\n           \
    \ echo \"false\"\n            return\n        fi\n    done\n    if [[ $open_count\
    \ -eq $close_count ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          echo \"false\"\n                return\n            fi\n          \
    \  stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n     \
    \   elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n\
    \            stack+=(\"$c\")\n        elif [ \"$c\" == \")\" ]; then\n       \
    \     if [ ${#stack[@]} -eq 0 ]; then\n                echo \"false\"\n      \
    \          return\n            fi\n            unset stack[${#stack[@]}-1]\n \
    \       fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[\
    \ \"${brackets:$i:1}\" == \"(\" ]]; then\n            count=$((count + 1))\n \
    \       elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            count=$((count\
    \ - 1))\n        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if [[ $count -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_count=0\n  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n\
    \    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n      (( open_count++ ))\n\
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n      (( close_count++ ))\n\
    \    fi\n    if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ open_brackets=$(( open_brackets - 1 ))\n        fi\n        if (( open_brackets\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( open_brackets == 0 )); then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            (( count++ ))\n        elif\
    \ [[ \"$c\" == \")\" ]]; then\n            (( count-- ))\n        fi\n       \
    \ if (( count < 0 )); then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if (( count == 0 )); then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=\"${stack%?}\"\n \
    \       fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local top=\"\"\n    local char=\"\"\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"\
    (\" ]]; then\n            stack=\"$stack$char\"\n        elif [[ \"$char\" ==\
    \ \")\" ]]; then\n            top=\"${stack: -1}\"\n            if [[ \"$top\"\
    \ == \"(\" ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n\
    \                return 1\n            fi\n        fi\n    done\n    if [[ \"\
    $stack\" == \"\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack+=(\"$c\")\n       \
    \ elif [[ \"$c\" == \")\" ]]; then\n            if [[ \"${#stack[@]}\" -eq 0 ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n    done\n\
    \    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            (( open_count++ ))\n        elif [[ \"$char\" == \")\"\
    \ ]]; then\n            (( close_count++ ))\n        fi\n        if [[ $close_count\
    \ -gt $open_count ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        local char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            open_count=$(( open_count + 1 ))\n        elif [[ \"$char\"\
    \ == \")\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \        if [[ $close_count -gt $open_count ]]; then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if [[ $open_count -eq $close_count\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"${brackets:$i:1}\"\
    \n        if [[ \"$char\" == \"(\" ]]; then\n            stack+=(\"$char\")\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n                echo \"false\"\n                return\n       \
    \     fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets}; i++\
    \ )); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n      (( open_brackets++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n      (( close_brackets++\
    \ ))\n    fi\n  done\n  if [[ $open_brackets -eq $close_brackets ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_count=0\n\
    \  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n      open_count=$((open_count+1))\n    elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n      close_count=$((close_count+1))\n    fi\n  done\n  if\
    \ [[ $open_count -eq $close_count ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local open_count=0\n\
    \  local close_count=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    local bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      open_count=$((open_count + 1))\n\
    \    elif [[ $bracket == \")\" ]]; then\n      close_count=$((close_count + 1))\n\
    \    fi\n    if [[ $close_count -gt $open_count ]]; then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack:0:-1}\"\n \
    \       fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            count=$((count+1))\n \
    \       elif [[ \"$char\" == \")\" ]]; then\n            count=$((count-1))\n\
    \        fi\n        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n\
    \            return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            count=$((count+1))\n     \
    \   elif [[ $char == \")\" ]]; then\n            count=$((count-1))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \")\" ]];\
    \ then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=(\"$bracket\"\
    )\n        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n    \
    \    fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_brackets=0\n  local close_brackets=0\n  for (( i=0; i<${#brackets}; i++\
    \ )); do\n    if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n      (( open_brackets++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n      (( close_brackets++\
    \ ))\n    fi\n  done\n  if [[ $open_brackets -eq $close_brackets ]]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"(\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                echo \"false\"\n                return\n\
    \            fi\n            stack=\"${stack:0:-1}\"\n        fi\n    done\n \
    \   if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=(\"(\")\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n   \
    \             echo \"false\"\n                return\n            fi\n       \
    \     unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ bracket_stack=()\n    local bracket_stack_size=0\n    local bracket_stack_top=0\n\
    \    local bracket_stack_bottom=0\n    local bracket_stack_index=0\n    local\
    \ bracket_stack_index_top=0\n    local bracket_stack_index_bottom=0\n    local\
    \ bracket_stack_index_size=0\n    local bracket_stack_index_top_size=0\n    local\
    \ bracket_stack_index_bottom_size=0\n    local bracket_stack_index_top_index=0\n\
    \    local bracket_stack_index_bottom_index=0\n    local bracket_stack_index_top_index_size=0\n\
    \    local bracket_stack_index_bottom_index_size=0\n    local bracket_stack_index_top_index_top=0\n\
    \    local bracket_stack_index_bottom_index_bottom=0\n    local bracket_stack_index_top_index_top_size=0\n\
    \    local bracket_stack_index_bottom_index_bottom_size=0\n    local bracket_stack_index_top_index_top_index=0\n\
    \    local bracket_stack_index_bottom_index_bottom_index=0\n    local bracket_stack_index_top_index_top_index_size=0\n\
    \    local bracket_stack_index_bottom_index_bottom_index_size=0\n    local bracket_stack_index_top_index_top_index_top=0\n\
    \    local bracket_stack_index_bottom_index_bottom_index_bottom=0\n    local bracket_stack_index_top_index_top_index_top_size=0\n\
    \    local bracket_stack_index_bottom_index_bottom_index_bottom_size=0\n    local\
    \ bracket_stack_index_top_index_top_index_top_index=0\n    local bracket_stack_index_bottom_index_bottom_index_bottom_index=0\n\
    \    local bracket_stack_index_top_index_top_index_top_index_size=0\n    local\
    \ bracket_stack_index_bottom_index_bottom_index_bottom_index_size=0\n    local\
    \ bracket_stack_index_top_index_top\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack%?}\"\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local char\n    local top\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]];\
    \ then\n            stack=\"$stack$char\"\n        elif [[ \"$char\" == \")\"\
    \ ]]; then\n            top=\"${stack: -1}\"\n            if [[ \"$top\" == \"\
    (\" ]]; then\n                stack=\"${stack:0:-1}\"\n            else\n    \
    \            return 1\n            fi\n        fi\n    done\n    if [[ -z \"$stack\"\
    \ ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n      count=$((count+1))\n    elif [[ ${brackets:$i:1} == \")\" ]];\
    \ then\n      count=$((count-1))\n    fi\n    if [[ $count -lt 0 ]]; then\n  \
    \    echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$((count + 1))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$((count - 1))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local char\n    for ((i=0; i<${#brackets}; i++)); do\n     \
    \   char=\"${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n   \
    \         stack=\"$stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n\
    \            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            stack=\"${stack%?}\"\n    \
    \    fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=\"$c\"\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ $stack == \"\" ]]; then\n          \
    \      echo \"false\"\n                return\n            fi\n            stack=${stack::-1}\n\
    \        fi\n    done\n    if [[ $stack == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n       \
    \     stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n        \
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n     \
    \           return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ $c == \")\" ]]; then\n            if [[ $stack == \"\" ]]; then\n       \
    \         echo \"false\"\n                return\n            fi\n           \
    \ stack=${stack:0:-1}\n        fi\n    done\n    if [[ $stack == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n\
    \        elif [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\")\n        fi\n\
    \    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local stack=()\n\
    \  local bracket\n  for (( i=0; i<${#brackets}; i++ )); do\n    bracket=${brackets:$i:1}\n\
    \    if [[ $bracket == \"(\" ]]; then\n      stack+=($bracket)\n    elif [[ $bracket\
    \ == \")\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[\
    \ -z \"$stack\" ]]; then\n                echo \"false\"\n                return\n\
    \            fi\n            stack=\"${stack%?}\"\n        fi\n    done\n    if\
    \ [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    local top\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\" == \"\
    )\" ]]; then\n            top=$(pop_stack stack)\n            if [[ \"$top\" !=\
    \ \"(\" ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n        fi\n    done\n    if [[ \"${#stack[@]}\" -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi2zh7mg5.sh: line 24: pop_stack: command not found

    '
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n    \
    \        stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n     \
    \       if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          echo \"false\"\n                return\n            fi\n          \
    \  unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ $c == \"(\" ]]; then\n            stack+=($c)\n        elif [[\
    \ $c == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n      \
    \          echo \"false\"\n                return\n            fi\n          \
    \  unset stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=()\n    local stack_top\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n            stack_top=\"${stack[-1]}\"\n            if [[\
    \ \"$stack_top\" == \"(\" ]]; then\n                unset stack[-1]\n        \
    \    else\n                return 1\n            fi\n        fi\n    done\n  \
    \  if [[ ${#stack[@]} -eq 0 ]]; then\n        return 0\n    else\n        return\
    \ 1\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"\
    (()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            stack+=\"(\"\n        elif\
    \ [[ $char == \")\" ]]; then\n            if [[ -z $stack ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open=0\n    local close=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open=$(( open + 1 ))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close=$(( close\
    \ + 1 ))\n        fi\n        if [[ $close -gt $open ]]; then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if [[ $open -eq $close\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local bracketing=\"$1\"\n   \
    \ local open_count=0\n    local close_count=0\n    for (( i=0; i<${#bracketing};\
    \ i++ )); do\n        if [[ \"${bracketing:$i:1}\" == \"(\" ]]; then\n       \
    \     open_count=$(( open_count + 1 ))\n        elif [[ \"${bracketing:$i:1}\"\
    \ == \")\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \    done\n    if [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local c=\"${brackets:$i:1}\"\
    \n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack$c\"\n   \
    \     elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ c=${brackets:$i:1}\n        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"\
    $stack$c\"\n        elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"\
    $stack\" ]]; then\n                echo \"false\"\n                return\n  \
    \          fi\n            stack=${stack:0:-1}\n        fi\n    done\n    if [[\
    \ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if [[ $count\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ stack=\"\"\n  local bracket\n  for (( i=0; i<${#brackets}; i++ )); do\n    bracket=\"\
    ${brackets:$i:1}\"\n    if [[ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\
    \n    elif [[ \"$bracket\" == \")\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n      stack=\"${stack%?}\"\n\
    \    fi\n  done\n  if [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local count=0\n\
    \  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ ${brackets:$i:1} == \"(\"\
    \ ]]; then\n      count=$(( count + 1 ))\n    elif [[ ${brackets:$i:1} == \")\"\
    \ ]]; then\n      count=$(( count - 1 ))\n    fi\n    if [[ $count -lt 0 ]]; then\n\
    \      echo \"false\"\n      return\n    fi\n  done\n  if [[ $count -eq 0 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n     \
    \   elif [[ \"$c\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n       \
    \     stack+=(\"$bracket\")\n        elif [[ $bracket == \")\" ]]; then\n    \
    \        if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n \
    \               return\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n          \
    \      return\n            fi\n            stack=\"${stack%?}\"\n        fi\n\
    \    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            if [[ -z $stack ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ $bracket == \"(\" ]]; then\n            stack+=($bracket)\n   \
    \     elif [[ $bracket == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_brackets++ ))\n    \
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( open_brackets--\
    \ ))\n        fi\n        if (( open_brackets < 0 )); then\n            echo \"\
    false\"\n            return\n        fi\n    done\n    if (( open_brackets ==\
    \ 0 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ -z \"$stack\" ]]; then\n                echo \"false\"\n          \
    \      return\n            fi\n            stack=\"${stack:0:-1}\"\n        fi\n\
    \    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\"\
    \ ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"\
    ()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local bracket_stack=()\n\
    \  local bracket_stack_index=0\n  local bracket_index=0\n  local bracket\n  local\
    \ bracket_top\n  local bracket_top_index\n  local bracket_top_char\n  local bracket_char\n\
    \  local bracket_stack_size\n  local bracket_stack_size_index\n  local bracket_stack_size_char\n\
    \  local bracket_stack_size_char_index\n  local bracket_stack_size_char_char\n\
    \  local bracket_stack_size_char_char_index\n  local bracket_stack_size_char_char_char\n\
    \  local bracket_stack_size_char_char_char_index\n  local bracket_stack_size_char_char_char_char\n\
    \  local bracket_stack_size_char_char_char_char_index\n  local bracket_stack_size_char_char_char_char_char\n\
    \  local bracket_stack_size_char_char_char_char_char_index\n  local bracket_stack_size_char_char_char_char_char_char\n\
    \  local bracket_stack_size_char_char_char_char_char_char_index\n  local bracket_stack_size_char_char_char_char_char_char_char\n\
    \  local bracket_stack_size_char_char_char_char_char_char_char_index\n  local\
    \ bracket_stack_size_char_char_char_char_char_char_char_char\n  local bracket_stack_size_char_char_char_char_char_char_char_char_index\n\
    \  local bracket_stack_size_char_char_char_char_char_char_char_char_char\n  local\
    \ bracket_stack_size_char_char_char_char_char_char_char_char_char_index\n  local\
    \ bracket_stack_size_char_char_char_char_char_char_char_char_char_char\n  local\
    \ bracket_stack_size_char_char_char_char_char_char_char_char_char_char_index\n\
    \  local bracket_stack_size_char_char_char_char_char_char_char_char_char_char_char\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i=0\n    local len=${#brackets}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${brackets:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n\
    \            stack+=(\"$c\")\n        elif [ \"$c\" == \")\" ]; then\n       \
    \     if [ ${#stack[@]} -eq 0 ]; then\n                echo \"false\"\n      \
    \          return\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}\
    \ - 1))}\")\n        fi\n        i=$(($i + 1))\n    done\n    if [ ${#stack[@]}\
    \ -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local char=\"\
    ${brackets:$i:1}\"\n        if [[ \"$char\" == \"(\" ]]; then\n            stack=\"\
    $stack$char\"\n        elif [[ \"$char\" == \")\" ]]; then\n            if [[\
    \ \"$stack\" == \"\" ]]; then\n                echo \"false\"\n              \
    \  return\n            fi\n            stack=\"${stack:0:-1}\"\n        fi\n \
    \   done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n  \
    \  [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_count=$((open_count+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_count=$((close_count+1))\n\
    \        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local c=${brackets:$i:1}\n\
    \        if [[ \"$c\" == \"(\" ]]; then\n            stack=\"$stack(\"\n     \
    \   elif [[ \"$c\" == \")\" ]]; then\n            if [[ \"$stack\" == \"\" ]];\
    \ then\n                echo \"false\"\n                return\n            fi\n\
    \            stack=${stack:0:-1}\n        fi\n    done\n    if [[ \"$stack\" ==\
    \ \"\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            open_count=$((open_count\
    \ + 1))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            close_count=$((close_count\
    \ + 1))\n        fi\n    done\n    if [[ \"$open_count\" -eq \"$close_count\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"\
    true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 1
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ open_brackets=0\n    local close_brackets=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            ((\
    \ open_brackets++ ))\n        elif [[ ${brackets:$i:1} == \")\" ]]; then\n   \
    \         (( close_brackets++ ))\n        fi\n    done\n    if [[ $open_brackets\
    \ -eq $close_brackets ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n\
    \            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n\
    \            if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=\"${stack::-1}\"\n\
    \        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n              \
    \  echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack::-1}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[\
    \ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        local char=${brackets:$i:1}\n\
    \        if [[ $char == \"(\" ]]; then\n            count=$((count+1))\n     \
    \   elif [[ $char == \")\" ]]; then\n            count=$((count-1))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ correct_bracketing \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    ()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\"\
    ) = \"true\" ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate\
    \ \")(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack=\"$stack(\"\n        elif [[ $bracket == \")\" ]]; then\n   \
    \         if [[ -z $stack ]]; then\n                echo \"false\"\n         \
    \       return\n            fi\n            stack=${stack:0:-1}\n        fi\n\
    \    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[\
    \ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=\"$1\"\n    local\
    \ open_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"\
    ${brackets:$i:1}\" == \"(\" ]]; then\n            open_brackets=$(( open_brackets\
    \ + 1 ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n           \
    \ open_brackets=$(( open_brackets - 1 ))\n        fi\n        if [[ $open_brackets\
    \ -lt 0 ]]; then\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    if [[ $open_brackets -eq 0 ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017994
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local i\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"(\" ]]; then\n            stack+=($char)\n\
    \        elif [[ $char == \")\" ]]; then\n            if [[ ${#stack[@]} == 0\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n    if\
    \ [[ ${#stack[@]} == 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n\
    \    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate\
    \ \"((()())))\") = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n\
    \    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\"\
    \ ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") =\
    \ \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\" ]]\n    [[\
    \ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for (( i=0; i<${#brackets}; i++ )); do\n  \
    \      bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n  \
    \          stack+=(\"$bracket\")\n        elif [[ $bracket == \")\" ]]; then\n\
    \            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    correct_bracketing\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"()\") = \"true\" ]]\n\
    \    [[ $(candidate \"(()())\") = \"true\" ]]\n    [[ $(candidate \"()()(()())()\"\
    ) = \"true\" ]]\n    [[ $(candidate \"()()((()()())())(()()(()))\") = \"true\"\
    \ ]]\n    [[ $(candidate \"((()())))\") = \"false\" ]]\n    [[ $(candidate \"\
    )(()\") = \"false\" ]]\n    [[ $(candidate \"(\") = \"false\" ]]\n    [[ $(candidate\
    \ \"((((\") = \"false\" ]]\n    [[ $(candidate \")\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())())(()\") = \"false\"\
    \ ]]\n    [[ $(candidate \"()()(()())()))()\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
- exit_code: 0
  program: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True\
    \ if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
    \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
    \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n\
    #\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local\
    \ open_brackets=0\n  local close_brackets=0\n  local i\n  for ((i=0; i<${#brackets};\
    \ i++)); do\n    local bracket=\"${brackets:$i:1}\"\n    if [[ \"$bracket\" ==\
    \ \"(\" ]]; then\n      ((open_brackets++))\n    elif [[ \"$bracket\" == \")\"\
    \ ]]; then\n      ((close_brackets++))\n    fi\n    if ((close_brackets > open_brackets));\
    \ then\n      echo \"false\"\n      return\n    fi\n  done\n  if ((open_brackets\
    \ == close_brackets)); then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\")\
    \ = \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
    \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
    ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
    \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
    \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
    ) = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660017995
