language: sh
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local number=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $number\
    \ ]; do\n    factorial=$(($factorial * $i))\n    i=$(($i + 1))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((result*i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=1; i<=n-1; i++)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local i=$1\n  local result=1\n  while [ $i -gt 0 ]; do\n    result=$(($result\
    \ * $i))\n    i=$(($i - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # TODO: Implement this function\n  # Hint: You may use the factorial function\
    \ you implemented in the previous\n  # exercise.\n  # Hint: You may use the bc\
    \ command to perform floating point arithmetic.\n  # Hint: You may use the seq\
    \ command to generate a sequence of numbers.\n  # Hint: You may use the paste\
    \ command to concatenate strings.\n  # Hint: You may use the tr command to remove\
    \ newlines.\n  # Hint: You may use the xargs command to pass arguments to another\
    \ command.\n  # Hint: You may use the echo command to print output.\n  # Hint:\
    \ You may use the printf command to format output.\n  # Hint: You may use the\
    \ bc command to perform floating point arithmetic.\n  # Hint: You may use the\
    \ seq command to generate a sequence of numbers.\n  # Hint: You may use the paste\
    \ command to concatenate strings.\n  # Hint: You may use the tr command to remove\
    \ newlines.\n  # Hint: You may use the xargs command to pass arguments to another\
    \ command.\n  # Hint: You may use the echo command to print output.\n  # Hint:\
    \ You may use the printf command to format output.\n  # Hint: You may use the\
    \ bc command to perform floating point arithmetic.\n  # Hint: You may use the\
    \ seq command to generate a sequence of numbers.\n  # Hint: You may use the paste\
    \ command to concatenate strings.\n  # Hint: You may use the tr command to remove\
    \ newlines.\n  # Hint: You may use the xargs command to pass arguments to another\
    \ command.\n  # Hint: You may use the echo command to print output.\n  # Hint:\
    \ You may use the printf command to format output.\n  # Hint: You may use the\
    \ bc command to perform floating point arithmetic.\n  # Hint: You may use the\
    \ seq command to generate a sequence of numbers.\n  # Hint: You may use the paste\
    \ command to concatenate strings.\n  # Hint: You may use the tr command to remove\
    \ newlines.\n  # Hint: You may use the xargs command to pass arguments to another\
    \ command.\n  # Hint: You may use the echo command to print output.\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy42uighg.sh: line 43: syntax error near unexpected token `}''

    /tmp/tmpy42uighg.sh: line 43: `}''

    '
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=2\n    while [ $i -le $n\
    \ ]; do\n        result=$((result * i))\n        i=$((i + 1))\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for (( i = 1; i <= n; i++ ));\
    \ do\n        factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=$n; i++)); do\n   \
    \     result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  local j=$((n -\
    \ 1))\n  while [ $j -ge 1 ]; do\n    factorial=$((factorial * j))\n    j=$((j\
    \ - 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for (( i = 1; i <= $1; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i = 1; i <= n; i++ )); do\n\
    \        result=$(( result * i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local number=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $number\
    \ ]; do\n    factorial=$(($factorial * $i))\n    i=$(($i + 1))\n  done\n  echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=n; i>0; i--)); do\n    factorial=$(($factorial\
    \ * $i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i = 1; i <= n; i++)); do\n\
    \        factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local result=1\n    for (( i=1; i<=$1; i++ )); do\n        result=$((\
    \ $result * $i ))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for (( i=1; i<=$1; i++ ))\n  do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    # TODO: implement the function\n    echo \"1\"\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local res=1\n  for ((i=1; i<=n; i++)); do\n    res=$((res\
    \ * i))\n  done\n  echo $res\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i = 1; i <= n; i++ )); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    factorial=$(factorial\
    \ $1)\n    for ((i = $1 - 1; i > 0; i--)); do\n      factorial=$(($factorial *\
    \ $(factorial $i)))\n    done\n    echo $factorial\n  fi\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp780gyf6b.sh: line 16: factorial: command not found

    /tmp/tmp780gyf6b.sh: line 18: factorial: command not found

    /tmp/tmp780gyf6b.sh: line 18: * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local factorial=1\n    local i=1\n    while [ $i -le $1 ]; do\n     \
    \   factorial=$(($factorial * $i))\n        i=$(($i + 1))\n    done\n    echo\
    \ $factorial\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i\n  for ((i=1; i<=n; i++)); do\n\
    \    factorial=$((factorial * i))\n  done\n  echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    if [ $1 -eq 0 ]; then\n        echo 1\n    else\n        echo $(($1 *\
    \ $(special_factorial $(($1 - 1)))))\n    fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ ))\n    do\n\
    \        result=$(( result * i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>=1; i--)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n \
    \       result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # your code here\n  if [ $1 -eq 0 ]; then\n    echo \"1\"\n  else\n   \
    \ echo $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n\tlocal n=$1\n\tlocal result=1\n\tlocal i=1\n\twhile [ $i -le $n ]; do\n\t\
    \tresult=$(($result * $i))\n\t\ti=$(($i + 1))\n\tdone\n\techo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local f=1\n  for ((i=1; i<=n; i++)); do\n    f=$((f*i))\n\
    \  done\n  for ((i=1; i<=n-1; i++)); do\n    f=$((f*i))\n  done\n  echo $f\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Your code here\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nnhg3bk.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmp2nnhg3bk.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    factorial $1 | awk '{print\
    \ $1}'\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzuq0ceun.sh: line 16: factorial: command not found

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Your code here\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo\
    \ $(($1 * $(special_factorial $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=n; i>0; i--)); do\n    factorial=$(($factorial\
    \ * $i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local factorial=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$(($factorial * $i))\n    i=$(($i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"1\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  if [ $1 -eq 0 ]; then\n\
    \    echo \"1\"\n  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n\
    \  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ ))\n    do\n\
    \        result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=$1; i>0; i--)); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  local i=1\n  while [ $i -le $1 ]; do\n    factorial=$(($factorial\
    \ * $i))\n    i=$(($i + 1))\n  done\n  echo $factorial\n}\n\ncandidate() {\n \
    \   special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ )); do\n    factorial=$((\
    \ factorial * i ))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ )); do\n \
    \       result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"42\"\n}\n\
    \ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  for (( i=$n-1; i>=1; i-- )); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi78rep1s.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmpi78rep1s.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=1; i<=n; i++)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i=1; i<=$n; i++ ))\n    do\n\
    \        result=$(( $result * $i ))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -eq 0 ]]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i = 1; i <= n; i++)); do\n   \
    \ factorial=$((factorial * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for (( i = 1; i <= n; i++ )); do\n\
    \        result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    for ((i=1; i<=n; i++)); do\n \
    \       factorial=$((factorial * i))\n    done\n    echo $factorial\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=$1; i>0; i--)); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=$n; i++)); do\n    factorial=$(($factorial\
    \ * $i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i\n  local result=1\n  for ((i=n; i>0; i--)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8sh5wzeo.sh: line 17: factorial: command not found

    /tmp/tmp8sh5wzeo.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local result=1\n    for ((i=1; i<=$1; i++)); do\n        result=$(($result\
    \ * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local number=$1\n  local result=1\n  local i\n  for ((i = 1; i <= number;\
    \ i++)); do\n    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ ))\n  do\n  \
    \  factorial=$((factorial*i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local number=$1\n  local result=1\n  local i=1\n  while [ $i -le $number\
    \ ]; do\n    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$((result\
    \ * n))\n    n=$((n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    local result=1\n   \
    \ for (( i=1; i<=$1; i++ )); do\n      result=$(( $result * $i ))\n    done\n\
    \    echo $result\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"42\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local factorial=1\n  for (( i=1; i<=$1; i++ )); do\n    factorial=$(( factorial\
    \ * i ))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ ))\n  do\n    result=$((\
    \ $result * $i ))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local i=1\n  local result=1\n  while [ $i -le $n ]; do\n\
    \    result=$((result * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  if [ $1 -le 0 ]; then\n\
    \    echo \"1\"\n  else\n    echo $(($1 * $(special_factorial $(($1 - 1)))))\n\
    \  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"0\"\n  else\n    local factorial=1\n\
    \    for ((i=1; i<=$1; i++)); do\n      factorial=$(($factorial * $i))\n    done\n\
    \    echo $factorial\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"0\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i = 1; i <= n; i++ )); do\n    result=$((result\
    \ * i))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 2
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Your code here\n  # Hint: you can use bc to do floating point arithmetic\n\
    \  # Example:\n  # echo \"2.5 * 3\" | bc\n  # \"7.5\"\n  # echo \"2.5 * 3\" |\
    \ bc -l\n  # \"7.50000000000000\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\"\
    \ -f 1\n  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs printf\
    \ \"%d\"\n  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs\
    \ printf \"%d\" | xargs echo\n  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d\
    \ \".\" -f 1 | xargs printf \"%d\" | xargs echo | xargs echo\n  # \"7\"\n  # echo\
    \ \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs printf \"%d\" | xargs echo |\
    \ xargs echo | xargs echo\n  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \"\
    .\" -f 1 | xargs printf \"%d\" | xargs echo | xargs echo | xargs echo | xargs\
    \ echo\n  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs printf\
    \ \"%d\" | xargs echo | xargs echo | xargs echo | xargs echo | xargs echo\n  #\
    \ \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs printf \"%d\"\
    \ | xargs echo | xargs echo | xargs echo | xargs echo | xargs echo | xargs echo\n\
    \  # \"7\"\n  # echo \"2.5 * 3\" | bc -l | cut -d \".\" -f 1 | xargs printf \"\
    %d\" | xargs echo | xargs echo | xargs echo | xargs echo | xargs echo | xargs\
    \ echo | xargs echo\n  # \"7\"\n \n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz8v_o7ju.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpz8v_o7ju.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  local i=1\n  while [ $i -le $1 ]; do\n    result=$((result\
    \ * i))\n    i=$((i + 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=n; i>0; i--)); do\n    result=$(($result\
    \ * $(factorial $i)))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmputqy0z85.sh: line 16: factorial: command not found

    /tmp/tmputqy0z85.sh: line 16: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local factorial=1\n    while [ $n -gt 0 ]; do\n     \
    \   factorial=$((factorial * n))\n        n=$((n - 1))\n    done\n    echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i\n  for ((i=1; i<=n; i++)); do\n\
    \    result=$((result * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    result=$(($result * $i))\n    i=$(($i + 1))\n  done\n  echo $result\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local num=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $num ];\
    \ do\n    factorial=$(($factorial * $i))\n    i=$(($i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  for ((i=1; i<=n-1; i++)); do\n    result=$((result * i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [[ $1 -le 0 ]]; then\n    echo \"0\"\n  else\n    local result=1\n \
    \   for ((i=1; i<=$1; i++)); do\n      result=$(($result * $i))\n    done\n  \
    \  echo $result\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  # Write your code here\n  # To print results to the standard output you\
    \ can use echo\n  # Example: echo \"Hello world!\"\n  echo \"1\"\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=n; i>=1; i--)); do\n    result=$((result\
    \ * i))\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world!\"\n    echo \"1\"\n}\n\n\
    candidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n\
    \    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") =\
    \ \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  while [ $n -gt 0 ]; do\n    result=$(($result\
    \ * $n))\n    n=$(($n - 1))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for (( i=1; i<=$n; i++ )); do\n    result=$(($result\
    \ * $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for (( i=1; i<=$n; i++ )); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=1; i<=n; i++)); do\n    \
    \    result=$((result * i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  for ((i=1; i<=n; i++)); do\n    factorial=$((factorial\
    \ * i))\n  done\n  echo $factorial\n}\n\ncandidate() {\n    special_factorial\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n\
    \    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8sh5wzeo.sh: line 17: factorial: command not found

    /tmp/tmp8sh5wzeo.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local factorial=1\n  local i=1\n  while [ $i -le $n ]; do\n\
    \    factorial=$((factorial * i))\n    i=$((i + 1))\n  done\n  echo $factorial\n\
    }\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\"\
    \ ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\"\
    ) = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $i))\n        i=$(($i + 1))\n    done\n \
    \   echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate \"5\"\
    ) = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n    [[ $(candidate\
    \ \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    local i=1\n    while [ $i -le $n\
    \ ]; do\n        result=$(($result * $(factorial $i)))\n        i=$(($i + 1))\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8sh5wzeo.sh: line 17: factorial: command not found

    /tmp/tmp8sh5wzeo.sh: line 17: 1 * : syntax error: operand expected (error token
    is "* ")

    '
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local result=1\n  for ((i=1; i<=$1; i++)); do\n    result=$(($result *\
    \ $i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    for ((i=n; i>0; i--)); do\n     \
    \   result=$(($result * $i))\n    done\n    echo $result\n}\n\ncandidate() {\n\
    \    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=n; i++)); do\n    result=$((result\
    \ * i))\n  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[\
    \ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\"\
    \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n    local n=$1\n    local result=1\n    while [ $n -gt 0 ]; do\n        result=$(($result\
    \ * $n))\n        n=$(($n - 1))\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    special_factorial \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4\") = \"288\" ]]\n    [[ $(candidate \"5\") = \"34560\" ]]\n    [[ $(candidate\
    \ \"7\") = \"125411328000\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo 1\n  else\n    echo $(($1 * $(special_factorial\
    \ $(($1 - 1)))))\n  fi\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019435
- exit_code: 1
  program: "#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial\
    \ \"4\")\n# \"288\"\n# The function will receive an integer as input and should\
    \ return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial()\
    \ {\n  local n=$1\n  local result=1\n  for ((i=1; i<=$n; i++)); do\n    result=$(($result\
    \ * $i))\n  done\n  for ((i=$n-1; i>0; i--)); do\n    result=$(($result * $i))\n\
    \  done\n  echo $result\n}\n\ncandidate() {\n    special_factorial \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4\") = \"288\" ]]\n    [[ $(candidate\
    \ \"5\") = \"34560\" ]]\n    [[ $(candidate \"7\") = \"125411328000\" ]]\n   \
    \ [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019436
