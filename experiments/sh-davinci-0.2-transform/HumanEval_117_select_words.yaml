name: HumanEval_117_select_words
language: sh
prompt: "#!/bin/bash\n# Given a string s and a natural number n, you have been tasked\
  \ to implement \n# a function that returns a list of all words from string s that\
  \ contain exactly \n# n consonants, in order these words appear in the string s.\n\
  # If the string s is empty then the function should return an empty list.\n# Note:\
  \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
  # >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>>\
  \ $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n\
  # >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"\
  Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\"\
  )\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n"
tests: "}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
  \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple\
  \ white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"\
  world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
  \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
  \ ]]\n}\n\nrun_test"
completions: ["    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\
    \n    for word in $words; do\n        local count=$(echo $word | tr -cd \"[bcdfghjklmnpqrstvwxyz]\"\
    \ | wc -c)\n        if [ $count -eq $2 ]; then\n            result=\"$result \\\
    \"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"", "    local string=\"\
    $1\"\n    local n=\"$2\"\n    local words=$(echo \"$string\" | tr ' ' '\\n')\n\
    \    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ \"$word\" | tr -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n        if [ \"$consonants\"\
    \ -eq \"$n\" ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n  \
    \  done\n    echo \"${result[@]}\"", "    local string=$1\n    local n=$2\n  \
    \  local words=$(echo $string | tr ' ' '\\n')\n    local result=()\n    for word\
    \ in $words; do\n        local consonants=$(echo $word | sed 's/[aeiou]//g')\n\
    \        if [ ${#consonants} -eq $n ]; then\n            result+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo ${result[@]}", "    echo $1 | tr -d ' '\
    \ | grep -o -E '[^aeiou]{'$2'}' | tr -d '\\n' | sed 's/\\([^\"]*\\)/\"\\1\"/g'",
  "  local string=$1\n  local n=$2\n  local words=$(echo $string | tr ' ' '\\n')\n\
    \  local result=()\n  for word in $words; do\n    local consonants=$(echo $word\
    \ | tr -d -c 'bcdfghjklmnpqrstvwxyz' | wc -c)\n    if [ $consonants -eq $n ];\
    \ then\n      result+=(\\\"$word\\\")\n    fi\n  done\n  echo ${result[@]}", " \
    \   local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a result=()\n    for\
    \ word in \"${words[@]}\"; do\n        if [[ $(echo $word | grep -o '[^aeiouAEIOU]'\
    \ | wc -l) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo \"${result[@]}\"", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world\"\n    echo \"Hello world\"", "  local str=\"$1\"\n  local n=\"$2\"\n\
    \  local words\n  local word\n  local consonants\n  local consonant\n  local result\n\
    \  words=($(echo \"$str\" | tr ' ' '\\n'))\n  for word in \"${words[@]}\"; do\n\
    \    consonants=0\n    for consonant in {b..z}; do\n      if [[ \"$word\" == *\"\
    $consonant\"* ]]; then\n        consonants=$((consonants + 1))\n      fi\n   \
    \ done\n    if [[ \"$consonants\" -eq \"$n\" ]]; then\n      result=\"$result\
    \ \\\"$word\\\"\"\n    fi\n  done\n  echo \"[$result]\"", "    local words=$(echo\
    \ \"$1\" | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n  \
    \      if [[ $(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l) -eq $2 ]]; then\n\
    \            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"",
  "    local string=\"$1\"\n    local num=\"$2\"\n    local words=$(echo \"$string\"\
    \ | tr ' ' '\\n')\n    local result=\"\"\n    for word in $words; do\n       \
    \ local count=$(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l)\n        if\
    \ [ \"$count\" -eq \"$num\" ]; then\n            result=\"$result \\\"$word\\\"\
    \"\n        fi\n    done\n    echo \"[$result]\"", "    local str=$1\n    local\
    \ n=$2\n    local words=($(echo $str | tr ' ' '\\n'))\n    local result=()\n \
    \   for word in ${words[@]}; do\n        local count=$(echo $word | grep -o '[^aeiou]'\
    \ | wc -l)\n        if [ $count -eq $n ]; then\n            result+=($word)\n\
    \        fi\n    done\n    echo ${result[@]}", "    local string=$1\n    local\
    \ num=$2\n    local words=($string)\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        if [[ $(echo $word | sed 's/[^aeiou]//g' | wc -c) -eq $num ]]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}", " \
    \   local string=\"$1\"\n    local n=\"$2\"\n    local words\n    local word\n\
    \    local consonants\n    local consonant\n    local result\n    local result_length\n\
    \    local i\n    words=($(echo \"$string\" | tr ' ' '\\n'))\n    for word in\
    \ \"${words[@]}\"; do\n        consonants=0\n        for consonant in {b..z};\
    \ do\n            if [[ $word == *\"$consonant\"* ]]; then\n                consonants=$((consonants\
    \ + 1))\n            fi\n        done\n        if [[ $consonants -eq $n ]]; then\n\
    \            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    result_length=${#result[@]}\n\
    \    if [[ $result_length -eq 0 ]]; then\n        echo \"[]\"\n    else\n    \
    \    echo \"[\"\n        for ((i=0; i<$result_length; i++)); do\n            if\
    \ [[ $i -eq $((result_length - 1)) ]]; then\n                echo \"${result[$i]}\"\
    \n            else\n                echo \"${result[$i]},\"\n            fi\n\
    \        done\n        echo \"]\"\n    fi", "    local -a words\n    local -i\
    \ n=$2\n    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n\
    \    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i consonants=0\n    local -i vowels=0\n    local -i len=0\n\
    \    local -i len_words=0\n    local -i len_word=0\n    local -i len_words_i=0\n\
    \    local -i len_words_j=0\n    local -i len_words_k=0\n    local -i len_words_l=0\n\
    \    local -i len_words_m=0\n    local -i len_words_n=0\n    local -i len_words_o=0\n\
    \    local -i len_words_p=0\n    local -i len_words_q=0\n    local -i len_words_r=0\n\
    \    local -i len_words_s=0\n    local -i len_words_t=0\n    local -i len_words_u=0\n\
    \    local -i len_words_v=0\n    local -i len_words_w=0\n    local -i len_words_x=0\n\
    \    local -i len_words_y=0\n    local -i len_words_z=0\n    local -i len_words_consonants=0\n\
    \    local -i len_words_vowels=0\n    local -i len_words_len=0\n    local -i len_words_len_words=0\n\
    \    local -i len_words_len_word=0\n    local -i len_words_len_words_i=0\n   \
    \ local -i len_words", "    local -a words\n    local -a consonants\n    local\
    \ -a vowels\n    local -a consonant_count\n    local -a result\n    local word\n\
    \    local count\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local b\n    local c\n    local d\n    local f\n    local\
    \ g\n    local h\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local B\n    local\
    \ C\n    local D\n    local F\n    local G\n    local H\n    local J\n    local\
    \ K\n    local L\n    local M\n    local N\n    local P\n    local Q\n    local\
    \ R\n    local S\n    local T\n    local V\n    local W\n    local X\n    local\
    \ Y\n    local Z\n    local consonant_count\n    local word_count\n    local word_index\n\
    \    local word_length\n    local word_start\n    local word_end\n    local word_start_index\n\
    \    local word_end_index\n    local word_start_index_plus_one\n    local word_end_index_plus_one\n\
    \    local word_start_index_plus_two\n    local word_end_index_plus_two\n    local\
    \ word_start_index_plus_three\n    local word_end_index_plus_three\n    local\
    \ word_start_index_plus_four\n    local word_end_index_plus_four\n    local word_start_index_plus_five\n\
    \    local word_end_index_plus_five\n    local word_start_index_plus_six\n   \
    \ local word_end_index_plus_six\n    local word_start_index_plus_seven\n    local\
    \ word_end_index_plus_seven\n    local word_start_index", "    local string=$1\n\
    \    local number=$2\n    local words=()\n    local word\n    local consonants\n\
    \    for word in $string; do\n        consonants=$(echo $word | sed -e 's/[aeiouAEIOU]//g'\
    \ | wc -c)\n        if [ $consonants -eq $number ]; then\n            words+=($word)\n\
    \        fi\n    done\n    echo ${words[@]}", "    local string=$1\n    local\
    \ n=$2\n    local words=($string)\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        local consonants=$(echo $word | sed -E 's/[aeiouAEIOU]//g')\n  \
    \      if [ ${#consonants} -eq $n ]; then\n            result+=($word)\n     \
    \   fi\n    done\n    echo ${result[@]}", "  echo $1 | tr -s ' ' '\\n' | grep\
    \ -E \"^[^aeiou]{$2}$\"", "    local -a words\n    local -a consonants\n    local\
    \ -a vowels\n    local -a result\n    local word\n    local count\n    local char\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local -i index\n    local -i length\n    local -i num_consonants\n    local\
    \ -i num_vowels\n    local -i num_chars\n    local -i num_words\n    local -i\
    \ num_result\n    local -i num_consonants_required\n    local -i num_vowels_required\n\
    \    local -i num_chars_required\n    local -i num_words_required\n    local -i\
    \ num_result_required\n    local -i num_consonants_found\n    local -i num_vowels_found\n\
    \    local -i num_chars_found\n    local -i num_words_found\n    local -i num_result_found\n\
    \    local -i num_consonants_expected\n    local -i num_vowels_expected\n    local\
    \ -i num_chars_expected\n    local -i num_words_expected\n    local -i num_result_expected\n\
    \    local -i num_consonants_actual\n    local -i num_vowels_actual\n    local\
    \ -i num_chars_actual\n    local -i num_words_actual\n    local -i num_result_actual\n\
    \    local -i num_consonants_diff\n    local -i num_vowels_diff\n    local -i\
    \ num_chars_diff\n    local -i num_words_diff\n    local -i num_result_diff\n\
    \    local -i num_consonants_pass\n    local -i num_vowels_pass\n    local -i\
    \ num_chars_pass\n    local -i num_words_pass\n    local -i num_result_pass\n\
    \    local -i num_consonants_fail\n    local", "    # TODO: implement this function\n\
    \    echo \"Not implemented\""]
stop_tokens:
- "\n}"
