name: HumanEval_112_reverse_delete
language: sh
prompt: "#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted\
  \ all the characters in s that are equal to any character in c\n# then check if\
  \ the result string is palindrome.\n# A string is called palindrome if it reads\
  \ the same backward as forward.\n# You should return a tuple containing the result\
  \ string and True/False for the check.\n# Example\n# >>> $(reverse_delete \"abcde\"\
  \ \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n\
  # ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"\
  cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n"
tests: "}\n\ncandidate() {\n    reverse_delete \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"abcde\" \"ae\") = \"bcd false\" ]]\n    [[ $(candidate \"\
  abcdef\" \"b\") = \"acdef false\" ]]\n    [[ $(candidate \"abcdedcba\" \"ab\") =\
  \ \"cdedc true\" ]]\n    [[ $(candidate \"dwik\" \"w\") = \"dik false\" ]]\n   \
  \ [[ $(candidate \"a\" \"a\") = \" true\" ]]\n    [[ $(candidate \"abcdedcba\" \"\
  \") = \"abcdedcba true\" ]]\n    [[ $(candidate \"abcdedcba\" \"v\") = \"abcdedcba\
  \ true\" ]]\n    [[ $(candidate \"vabba\" \"v\") = \"abba true\" ]]\n    [[ $(candidate\
  \ \"mamma\" \"mia\") = \" true\" ]]\n}\n\nrun_test"
completions: ["    local s=$1\n    local c=$2\n    local result=\"\"\n    local is_palindrome=\"\
    false\"\n    for ((i=0; i<${#s}; i++)); do\n        local char=${s:$i:1}\n   \
    \     if [[ $c != *\"$char\"* ]]; then\n            result+=\"$char\"\n      \
    \  fi\n    done\n    if [[ $result == $(rev <<< $result) ]]; then\n        is_palindrome=\"\
    true\"\n    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "  local\
    \ result=\"\"\n  for (( i=0; i<${#1}; i++ )); do\n    local char=${1:i:1}\n  \
    \  if [[ ! $2 =~ $char ]]; then\n      result+=$char\n    fi\n  done\n  local\
    \ is_palindrome=false\n  if [[ $result == $(rev <<< $result) ]]; then\n    is_palindrome=true\n\
    \  fi\n  echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "    local str=\"\
    $1\"\n    local del=\"$2\"\n    local res=\"\"\n    for ((i=0; i<${#str}; i++));\
    \ do\n        local c=${str:$i:1}\n        if [[ $del != *\"$c\"* ]]; then\n \
    \           res+=\"$c\"\n        fi\n    done\n    local is_palindrome=false\n\
    \    if [[ $res == $(rev <<< \"$res\") ]]; then\n        is_palindrome=true\n\
    \    fi\n    echo \"[\\\"$res\\\", \\\"$is_palindrome\\\"]\"", "    local s=$1\n\
    \    local c=$2\n    local r=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n   \
    \ local b=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local\
    \ h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local d=0\n   \
    \ local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local a=0\n    local b=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local", "    local result=$(echo $1 | sed \"s/[$2]//g\")\n\
    \    local is_palindrome=$(echo $result | rev)\n    if [ \"$result\" == \"$is_palindrome\"\
    \ ]; then\n        echo \"[\\\"$result\\\", \\\"true\\\"]\"\n    else\n      \
    \  echo \"[\\\"$result\\\", \\\"false\\\"]\"\n    fi", "    local s=$1\n    local\
    \ c=$2\n    local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[\
    \ \"${c}\" != *\"${s:$i:1}\"* ]]; then\n            result+=\"${s:$i:1}\"\n  \
    \      fi\n    done\n    local result_rev=$(echo \"${result}\" | rev)\n    local\
    \ is_palindrome=false\n    if [[ \"${result}\" == \"${result_rev}\" ]]; then\n\
    \        is_palindrome=true\n    fi\n    echo \"[\\\"${result}\\\", \\\"${is_palindrome}\\\
    \"]\"", "    local s=$1\n    local c=$2\n    local res=${s//[$c]}\n    local rev=$(echo\
    \ $res | rev)\n    local bool=$(test $res = $rev && echo true || echo false)\n\
    \    echo \"[\\\"$res\\\", \\\"$bool\\\"]\"", "    local s=$1\n    local c=$2\n\
    \    local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local char=${s:$i:1}\n\
    \        if [[ $c != *\"$char\"* ]]; then\n            result+=\"$char\"\n   \
    \     fi\n    done\n    local is_palindrome=\"false\"\n    if [[ $result == $(rev\
    \ <<< $result) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\
    \"$result\\\", \\\"$is_palindrome\\\"]\"", "    local result=\"\"\n    local is_palindrome=\"\
    false\"\n    local s=$1\n    local c=$2\n    for ((i=0; i<${#s}; i++)); do\n \
    \       local char=${s:$i:1}\n        if [[ $c != *\"$char\"* ]]; then\n     \
    \       result=\"$result$char\"\n        fi\n    done\n    if [[ $result == $(rev\
    \ <<< $result) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\
    \"$result\\\", \\\"$is_palindrome\\\"]\"", "    # write your code here\n    echo\
    \ \"\\\"$(echo $1 | tr -d $2)\\\"\"\n    if [[ $(echo $1 | tr -d $2) == $(echo\
    \ $1 | tr -d $2 | rev) ]]; then\n        echo \"\\\"true\\\"\"\n    else\n   \
    \     echo \"\\\"false\\\"\"\n    fi", "    local str=$1\n    local del=$2\n \
    \   local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        if [[ \"$del\"\
    \ != *\"${str:$i:1}\"* ]]; then\n            res+=${str:$i:1}\n        fi\n  \
    \  done\n    local is_palindrome=false\n    if [[ \"$res\" == $(rev <<< \"$res\"\
    ) ]]; then\n        is_palindrome=true\n    fi\n    echo \"[\\\"$res\\\", \\\"\
    $is_palindrome\\\"]\"", "    local s=$1\n    local c=$2\n    local result=\"\"\
    \n    local is_palindrome=\"false\"\n    for ((i=0; i<${#s}; i++)); do\n     \
    \   local char=${s:$i:1}\n        if [[ $c != *\"$char\"* ]]; then\n         \
    \   result+=\"$char\"\n        fi\n    done\n    if [[ $result == $(rev <<< \"\
    $result\") ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"\
    $result\\\", \\\"$is_palindrome\\\"]\"", "    local s=$1\n    local c=$2\n   \
    \ local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if [[ $c != *\"\
    ${s:$i:1}\"* ]]; then\n            result+=\"${s:$i:1}\"\n        fi\n    done\n\
    \    local is_palindrome=\"false\"\n    if [[ $result == $(rev <<< $result) ]];\
    \ then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"$result\\\", \\\
    \"$is_palindrome\\\"]\"", "    local result=\"\"\n    local is_palindrome=\"false\"\
    \n    for ((i=0; i<${#1}; i++)); do\n        local char=\"${1:$i:1}\"\n      \
    \  if [[ ! \"$2\" =~ \"$char\" ]]; then\n            result+=\"$char\"\n     \
    \   fi\n    done\n    if [[ \"$result\" == $(rev <<< \"$result\") ]]; then\n \
    \       is_palindrome=\"true\"\n    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\
    \"]\"", "    local s=$1\n    local c=$2\n    local result=\"\"\n    local is_palindrome=false\n\
    \    for ((i=0; i<${#s}; i++)); do\n        local char=${s:$i:1}\n        if [[\
    \ $c != *\"$char\"* ]]; then\n            result+=\"$char\"\n        fi\n    done\n\
    \    if [[ $result == $(rev <<< $result) ]]; then\n        is_palindrome=true\n\
    \    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "  local result=$(echo\
    \ $1 | tr -d $2)\n  local is_palindrome=$(echo $result | rev)\n  if [ \"$result\"\
    \ == \"$is_palindrome\" ]; then\n    echo \"[\\\"$result\\\", \\\"true\\\"]\"\n\
    \  else\n    echo \"[\\\"$result\\\", \\\"false\\\"]\"\n  fi", "    local s=\"\
    $1\"\n    local c=\"$2\"\n    local s_len=${#s}\n    local c_len=${#c}\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local s_new=\"\"\n    local is_palindrome=\"\
    false\"\n    while [ $i -lt $s_len ]\n    do\n        j=0\n        while [ $j\
    \ -lt $c_len ]\n        do\n            if [ \"${s:$i:1}\" == \"${c:$j:1}\" ]\n\
    \            then\n                break\n            fi\n            j=$((j+1))\n\
    \        done\n        if [ $j -eq $c_len ]\n        then\n            s_new=\"\
    $s_new${s:$i:1}\"\n        fi\n        i=$((i+1))\n    done\n    local s_new_len=${#s_new}\n\
    \    i=0\n    while [ $i -lt $((s_new_len/2)) ]\n    do\n        if [ \"${s_new:$i:1}\"\
    \ != \"${s_new:$((s_new_len-i-1)):1}\" ]\n        then\n            break\n  \
    \      fi\n        i=$((i+1))\n    done\n    if [ $i -eq $((s_new_len/2)) ]\n\
    \    then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"$s_new\\\"\
    , \\\"$is_palindrome\\\"]\"", "    local s=$1\n    local c=$2\n    local result=\"\
    \"\n    local is_palindrome=\"false\"\n    for (( i=0; i<${#s}; i++ )); do\n \
    \       local char=${s:$i:1}\n        if [[ $c != *\"$char\"* ]]; then\n     \
    \       result+=\"$char\"\n        fi\n    done\n    if [[ $result == $(rev <<<\
    \ $result) ]]; then\n        is_palindrome=\"true\"\n    fi\n    echo \"[\\\"\
    $result\\\", \\\"$is_palindrome\\\"]\"", "    local s=\"$1\"\n    local c=\"$2\"\
    \n    local result=\"\"\n    local is_palindrome=\"false\"\n    local i=0\n  \
    \  local j=0\n    local k=0\n    local len_s=${#s}\n    local len_c=${#c}\n  \
    \  for ((i=0; i<len_s; i++)); do\n        for ((j=0; j<len_c; j++)); do\n    \
    \        if [[ \"${s:i:1}\" == \"${c:j:1}\" ]]; then\n                break\n\
    \            fi\n        done\n        if [[ $j -eq $len_c ]]; then\n        \
    \    result+=\"${s:i:1}\"\n        fi\n    done\n    len_s=${#result}\n    for\
    \ ((i=0; i<len_s; i++)); do\n        if [[ \"${result:i:1}\" != \"${result:len_s-i-1:1}\"\
    \ ]]; then\n            is_palindrome=\"false\"\n            break\n        fi\n\
    \    done\n    if [[ $i -eq $len_s ]]; then\n        is_palindrome=\"true\"\n\
    \    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\"", "    local s=$1\n\
    \    local c=$2\n    local result=\"\"\n    for ((i=0; i<${#s}; i++)); do\n  \
    \      local char=${s:$i:1}\n        if [[ $c != *\"$char\"* ]]; then\n      \
    \      result+=\"$char\"\n        fi\n    done\n    local is_palindrome=false\n\
    \    if [[ $result == $(rev <<< $result) ]]; then\n        is_palindrome=true\n\
    \    fi\n    echo \"[\\\"$result\\\", \\\"$is_palindrome\\\"]\""]
stop_tokens:
- "\n}"
