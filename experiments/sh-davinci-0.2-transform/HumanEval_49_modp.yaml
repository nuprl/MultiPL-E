name: HumanEval_49_modp
language: sh
prompt: "#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp\
  \ \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"\
  0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\"\
  \ \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n"
tests: "}\n\ncandidate() {\n    modp \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"3\" \"5\") = \"3\" ]]\n    [[ $(candidate \"1101\" \"101\") = \"2\" ]]\n   \
  \ [[ $(candidate \"0\" \"101\") = \"1\" ]]\n    [[ $(candidate \"3\" \"11\") = \"\
  8\" ]]\n    [[ $(candidate \"100\" \"101\") = \"1\" ]]\n    [[ $(candidate \"30\"\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"31\" \"5\") = \"3\" ]]\n}\n\nrun_test"
completions: ["    local n=\"$1\"\n    local p=\"$2\"\n    local r=\"$n\"\n    local\
    \ i=0\n    local l=${#n}\n    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\"\
    \ = \"1\" ]; then\n            r=$(($r*2))\n            r=$(($r%$p))\n       \
    \ fi\n        i=$(($i+1))\n    done\n    echo \"$r\"", "    local n=$1\n    local\
    \ p=$2\n    local r=1\n    local i=0\n    local l=${#n}\n    while [ $i -lt $l\
    \ ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n            r=$((r*2%p))\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $r", "    local x=\"$1\"\n\
    \    local p=\"$2\"\n    local result=\"1\"\n    local i\n    for ((i=${#x}-1;\
    \ i>=0; i--)); do\n        local bit=\"${x:$i:1}\"\n        if [[ \"$bit\" ==\
    \ \"1\" ]]; then\n            result=$(mul \"$result\" \"$result\")\n        \
    \    result=$(mul \"$result\" \"$p\")\n        else\n            result=$(mul\
    \ \"$result\" \"$result\")\n        fi\n    done\n    echo \"$result\"", "   \
    \ local n=$1\n    local p=$2\n    local r=1\n    local i\n    for ((i=0; i<${#n};\
    \ i++)); do\n        if [[ ${n:$i:1} -eq 1 ]]; then\n            r=$((r*r%p))\n\
    \        fi\n        r=$((r*r%p))\n    done\n    echo $r", "  local n=\"$1\"\n\
    \  local p=\"$2\"\n  local r=\"1\"\n  local i\n  for ((i=0; i<${#n}; i++)); do\n\
    \    if [[ \"${n:$i:1}\" == \"1\" ]]; then\n      r=$(($r * $r % $p))\n    fi\n\
    \    r=$(($r * $r % $p))\n  done\n  echo \"$r\"", "    local n=\"$1\"\n    local\
    \ p=\"$2\"\n    local res=\"1\"\n    local i\n    for ((i=0; i<${#n}; i++)); do\n\
    \        if [[ \"${n:$i:1}\" == \"1\" ]]; then\n            res=$(mul \"$res\"\
    \ \"$res\")\n            res=$(mod \"$res\" \"$p\")\n        fi\n        res=$(mul\
    \ \"$res\" \"$res\")\n        res=$(mod \"$res\" \"$p\")\n    done\n    echo \"\
    $res\"", "    local n=$1\n    local p=$2\n    local result=1\n    local i=0\n\
    \    while [ $i -lt $n ]; do\n        result=$((result * 2))\n        result=$((result\
    \ % p))\n        i=$((i + 1))\n    done\n    echo $result", "    local n=\"$1\"\
    \n    local p=\"$2\"\n    local r=\"$n\"\n    local i=1\n    while [ $i -lt ${#n}\
    \ ]; do\n        r=$(($r*$r%$p))\n        i=$(($i+1))\n    done\n    echo $r",
  "    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n\
    \    while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq\
    \ 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r", "    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n\
    \    local l=${#n}\n    while [ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" -eq\
    \ 1 ]; then\n            r=$((r*2%p))\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $r", "    local n=$1\n    local p=$2\n    local result=1\n    local\
    \ i\n    for ((i=0; i<${#n}; i++)); do\n        if [[ ${n:$i:1} == 1 ]]; then\n\
    \            result=$((result * result % p))\n        fi\n        result=$((result\
    \ * result % p))\n    done\n    echo $result", "    local n=$1\n    local p=$2\n\
    \    local res=1\n    local i=0\n    local len=${#n}\n    while [ $i -lt $len\
    \ ]; do\n        local digit=${n:$i:1}\n        if [ $digit -eq 1 ]; then\n  \
    \          res=$((res * res % p))\n        fi\n        res=$((res * res % p))\n\
    \        i=$((i + 1))\n    done\n    echo $res", "    local n=\"$1\"\n    local\
    \ p=\"$2\"\n    local r=\"$n\"\n    local i=0\n    local l=${#n}\n    while [\
    \ $i -lt $l ]; do\n        if [ \"${n:$i:1}\" == \"1\" ]; then\n            r=$(($r\
    \ * $r % $p))\n        fi\n        i=$(($i + 1))\n        r=$(($r * $r % $p))\n\
    \    done\n    echo \"$r\"", "  local n=$1\n  local p=$2\n  local res=1\n  local\
    \ i=0\n  local len=${#n}\n  while [ $i -lt $len ]; do\n    local bit=${n:$i:1}\n\
    \    if [ $bit -eq 1 ]; then\n      res=$((res * res % p))\n      res=$((res *\
    \ 2 % p))\n    else\n      res=$((res * res % p))\n    fi\n    i=$((i + 1))\n\
    \  done\n  echo $res", "    local n=$1\n    local p=$2\n    local r=1\n    local\
    \ i=0\n    local n_len=${#n}\n    local n_bin=$(echo \"obase=2;$n\" | bc)\n  \
    \  local n_bin_len=${#n_bin}\n    local n_bin_rev=$(echo $n_bin | rev)\n    local\
    \ n_bin_rev_len=${#n_bin_rev}\n    local n_bin_rev_i=0\n    local n_bin_rev_i_val=0\n\
    \    local n_bin_rev_i_val_int=0\n    local n_bin_rev_i_val_int_pow=0\n    local\
    \ n_bin_rev_i_val_int_pow_mod=0\n    local n_bin_rev_i_val_int_pow_mod_r=0\n \
    \   local n_bin_rev_i_val_int_pow_mod_r_mod=0\n    for (( i=0; i<n_bin_rev_len;\
    \ i++ )); do\n        n_bin_rev_i_val=${n_bin_rev:$i:1}\n        n_bin_rev_i_val_int=$(echo\
    \ \"ibase=2;$n_bin_rev_i_val\" | bc)\n        n_bin_rev_i_val_int_pow=$(echo \"\
    2^$i\" | bc)\n        n_bin_rev_i_val_int_pow_mod=$(echo \"$n_bin_rev_i_val_int_pow\
    \ % $p\" | bc)\n        n_bin_rev_i_val_int_pow_mod_r=$(echo \"$n_bin_rev_i_val_int\
    \ * $n_bin_rev_i_val_int_pow_mod\" | bc)\n        n_bin_rev_i_val_int_pow_mod_r_mod=$(echo\
    \ \"$n_bin_rev_i_val_int_pow_mod_r % $p\" | bc)\n        r=$(echo \"$r + $n_bin",
  "\tlocal n=\"$1\"\n\tlocal p=\"$2\"\n\tlocal r=\"$n\"\n\tlocal i=1\n\twhile [ $i\
    \ -lt ${#n} ]; do\n\t\tr=$(mul \"$r\" \"$r\" \"$p\")\n\t\ti=$((i+1))\n\tdone\n\
    \techo \"$r\"", "    local n=$1\n    local p=$2\n    local r=1\n    local i=0\n\
    \    local n_len=${#n}\n    local n_i\n    local n_i_val\n    local n_i_val_pow\n\
    \    local n_i_val_pow_mod\n    local n_i_val_pow_mod_r\n    for ((i=0; i<n_len;\
    \ i++)); do\n        n_i=${n:$i:1}\n        n_i_val=$((n_i))\n        n_i_val_pow=$((n_i_val\
    \ * n_i_val))\n        n_i_val_pow_mod=$((n_i_val_pow % p))\n        n_i_val_pow_mod_r=$((n_i_val_pow_mod\
    \ * r))\n        r=$((n_i_val_pow_mod_r % p))\n    done\n    echo $r", "    local\
    \ n=$1\n    local p=$2\n    local r=1\n    local i=0\n    local len=${#n}\n  \
    \  while [ $i -lt $len ]; do\n        local c=${n:$i:1}\n        if [ $c -eq 1\
    \ ]; then\n            r=$(((r * r) % p))\n        fi\n        r=$(((r * r) %\
    \ p))\n        i=$((i + 1))\n    done\n    echo $r", "    local n=\"$1\"\n   \
    \ local p=\"$2\"\n    local r=\"1\"\n    local i=\"0\"\n    local len=\"${#n}\"\
    \n    while [ \"$i\" -lt \"$len\" ]; do\n        local c=\"${n:$i:1}\"\n     \
    \   if [ \"$c\" -eq \"1\" ]; then\n            r=$(($r * $r % $p))\n        fi\n\
    \        i=$(($i + 1))\n        r=$(($r * $r % $p))\n    done\n    echo \"$r\"",
  "    local n=$1\n    local p=$2\n    local res=1\n    local i=0\n    while [ $i\
    \ -lt $n ]; do\n        res=$((res*2))\n        res=$((res%p))\n        i=$((i+1))\n\
    \    done\n    echo $res"]
stop_tokens:
- "\n}"
