name: HumanEval_158_find_max
language: sh
prompt: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list\
  \ contains different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> $(find_max \"name of string\"\
  )\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max\
  \ \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max()\
  \ {\n"
tests: "}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
  \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
  \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game\
  \ of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") =\
  \ \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n  \
  \  [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") =\
  \ \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
completions: ["    local max_word=\"\"\n    local max_count=0\n    for word in $1;\
    \ do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \      if [ $count -gt $max_count ]; then\n            max_count=$count\n    \
    \        max_word=$word\n        fi\n    done\n    echo $max_word", "    # TODO:\
    \ write your code here\n    # Hint: use the following command to sort the list\
    \ of strings\n    # in lexicographical order:\n    # sort <<< \"$1\"\n    #\n\
    \    # Hint: use the following command to sort the list of strings\n    # by the\
    \ number of unique characters in each string:\n    # sort -k2 <<< \"$(for word\
    \ in $1; do echo \"$word $(echo $word | fold -w1 | sort -u | wc -w)\"; done)\"\
    \n    #\n    # Hint: use the following command to get the first word in the list:\n\
    \    # head -n1 <<< \"$1\"\n    #\n    # Hint: use the following command to get\
    \ the last word in the list:\n    # tail -n1 <<< \"$1\"\n    #\n    # Hint: use\
    \ the following command to get the number of words in the list:\n    # wc -w <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the number of unique\
    \ characters\n    # in a string:\n    # echo $word | fold -w1 | sort -u | wc -w\n\
    \    #\n    # Hint: use the following command to get the number of unique characters\n\
    \    # in a string:\n    # echo $word | fold -w1 | sort -u | wc -w\n    #\n  \
    \  # Hint: use the following command to get the first word in the list:\n    #\
    \ head -n1 <<< \"$1\"\n    #\n    # Hint: use the following command to get the\
    \ last word in the list:\n    # tail -n1 <<< \"$1\"\n    #\n    # Hint: use the\
    \ following command to get the number of words in the list:\n    # wc -w <<< \"\
    $1\"\n    #\n    # Hint: use the following command to get the number of unique\
    \ characters\n    # in a string:\n    # echo $word | fold -w1 | sort -u | wc -w\n\
    \    #\n    # Hint: use the following command to get the number of unique characters\n\
    \    # in a string:\n    # echo $word | fold -w1 | sort -u | wc -", "    local\
    \ max_word=\"\"\n    local max_count=0\n    for word in $1; do\n        local\
    \ count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt\
    \ $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word", "    # Write your code here\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n", "    # Write your code here\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n", "  \
    \  # TODO: Write your code here\n    # Please use find_max to declare your function\n\
    \    # and use $1 to access the first argument to this function\n    #\n    #\
    \ For example:\n    # echo \"Hello $1\"\n    #\n    # The following is the only\
    \ line of output you need to produce\n    # echo \"string\"\n    echo \"string\"",
  "    # TODO: Write your code here\n    echo \"Not implemented\"", "    local max_word=\"\
    \"\n    local max_count=0\n    for word in $1; do\n        local count=$(echo\
    \ $word | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "    local max_word=\"\"\n    local max_chars=0\n\
    \    local word=\"\"\n    local chars=0\n    for word in $1; do\n        chars=$(echo\
    \ $word | fold -w1 | sort -u | wc -l)\n        if [[ $chars -gt $max_chars ]];\
    \ then\n            max_chars=$chars\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "  # your code here\n  echo $1 | tr ' ' '\\n'\
    \ | sort -u | sort -r -k1,1 -k2,2n | head -n1", "    # Write your code here\n\
    \    # Use echo to print the result\n    echo \"string\"", "    local max_word=\"\
    \"\n    local max_count=0\n    for word in $1; do\n        local count=$(echo\
    \ $word | fold -w1 | sort | uniq | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "    # TODO: write your code here\n    # You can\
    \ use the following command to sort the input:\n    # sort -nr -k2\n    echo \"\
    string\"", "    local max_word=\"\"\n    local max_count=0\n    local word=\"\"\
    \n    local count=0\n    for word in $1; do\n        count=$(echo $word | sed\
    \ 's/\\(.\\)/\\1\\n/g' | sort -u | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word", "    local max_word=\"\"\n    local max_count=0\n\
    \    for word in $1; do\n        local count=$(echo $word | grep -o . | sort |\
    \ uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word", "    local\
    \ max_word=\"\"\n    local max_count=0\n    for word in $1; do\n        local\
    \ count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort -u | wc -l)\n        if\
    \ [ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word", "  local max_word=\"\"\n  local max_chars=0\n\
    \  for word in $1; do\n    local chars=$(echo $word | grep -o . | sort | uniq\
    \ | wc -l)\n    if [ $chars -gt $max_chars ]; then\n      max_chars=$chars\n \
    \     max_word=$word\n    fi\n  done\n  echo $max_word", "    local max_word=\n\
    \    local max_count=0\n    for word in $1; do\n        local count=$(echo $word\
    \ | fold -w1 | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word", "    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | sed 's/\\(.\\)/\\1\\\
    n/g' | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n        \
    \    max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word", "    local max_word=\"\"\n    local max_count=0\n    for word in\
    \ $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq | wc\
    \ -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\""]
stop_tokens:
- "\n}"
