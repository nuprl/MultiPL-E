name: HumanEval_111_histogram
language: sh
prompt: "#!/bin/bash\n# Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n# of the letter with the most repetition and containing the\
  \ corresponding count.\n# If several letters have the same occurrence, return all\
  \ of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"\
  ': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"\
  ', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"\
  b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram\
  \ \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n"
tests: "}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
  ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\\
  ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
  \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
  \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
  }\n\nrun_test"
completions: ["    local -A histogram\n    local -a max_keys\n    local max_value=0\n\
    \    local key\n    local value\n    for key in $1; do\n        ((histogram[$key]++))\n\
    \        value=${histogram[$key]}\n        if [[ $value -gt $max_value ]]; then\n\
    \            max_value=$value\n            max_keys=(\"$key\")\n        elif [[\
    \ $value -eq $max_value ]]; then\n            max_keys+=(\"$key\")\n        fi\n\
    \    done\n    local -a result\n    for key in \"${max_keys[@]}\"; do\n      \
    \  result+=(\"\\\"$key\\\": \\\"${histogram[$key]}\\\"\")\n    done\n    echo\
    \ \"{${result[*]}}\"", "    local -A dict\n    for i in $1; do\n        dict[$i]=$((dict[$i]+1))\n\
    \    done\n    local -A result\n    local max=0\n    for i in \"${!dict[@]}\"\
    ; do\n        if [[ ${dict[$i]} -gt $max ]]; then\n            max=${dict[$i]}\n\
    \            unset result\n            result[$i]=$max\n        elif [[ ${dict[$i]}\
    \ -eq $max ]]; then\n            result[$i]=$max\n        fi\n    done\n    echo\
    \ -n \"{\"\n    local first=true\n    for i in \"${!result[@]}\"; do\n       \
    \ if [[ $first == false ]]; then\n            echo -n \", \"\n        fi\n   \
    \     echo -n \"\\\"$i\\\": \\\"${result[$i]}\\\"\"\n        first=false\n   \
    \ done\n    echo \"}\"", "  local -A dict\n  local -a keys\n  local -a values\n\
    \  local key\n  local value\n  local i\n  local j\n  local max\n  local max_keys\n\
    \  local max_values\n  local result\n  local -a words\n  local word\n  local -a\
    \ letters\n  local letter\n  local -a sorted_keys\n  local -a sorted_values\n\
    \  local -a sorted_max_keys\n  local -a sorted_max_values\n\n  words=($1)\n  for\
    \ word in \"${words[@]}\"; do\n    letters=($(echo \"$word\" | grep -o .))\n \
    \   for letter in \"${letters[@]}\"; do\n      if [[ -z \"${dict[$letter]}\" ]];\
    \ then\n        dict[$letter]=1\n      else\n        dict[$letter]=$((dict[$letter]\
    \ + 1))\n      fi\n    done\n  done\n\n  keys=(${!dict[@]})\n  values=(${dict[@]})\n\
    \  max=0\n  for ((i = 0; i < ${#keys[@]}; i++)); do\n    if [[ \"${values[$i]}\"\
    \ -gt \"$max\" ]]; then\n      max=\"${values[$i]}\"\n      max_keys=()\n    \
    \  max_values=()\n    fi\n    if [[ \"${values[$i]}\" -eq \"$max\" ]]; then\n\
    \      max_keys+=(\"${keys[$i]}\")\n      max_values+=(\"${values[$i]}\")\n  \
    \  fi\n  done\n\n  sorted_keys=($(echo \"${keys[@]}\" | tr ' ' '\\n' | sort))\n\
    \  sorted_values=($(echo \"${values[@]}\" | tr ' ' '\\n' | sort))\n  sorted_max_keys=($(echo\
    \ \"${max_keys[@]}\" | tr ' ' '\\n' | sort))\n  sorted_max_values=($(echo \"${max_values[@]}\"\
    \ | tr ' ' '\\n' | sort))\n\n  result=\"{\"\n  for ((i = 0; i < ${#sorted_keys[@]};\
    \ i++)); do\n    key=\"\\\"", "    local -A dict\n    local -a keys\n    local\
    \ -a values\n    local -a result\n    local key\n    local value\n    local i\n\
    \    local j\n    local k\n    local max\n    local max_count\n    local count\n\
    \    local -a max_keys\n    local -a max_values\n    local -a max_result\n   \
    \ local -a max_keys_temp\n    local -a max_values_temp\n    local -a max_result_temp\n\
    \    local -a max_keys_temp2\n    local -a max_values_temp2\n    local -a max_result_temp2\n\
    \    local -a max_keys_temp3\n    local -a max_values_temp3\n    local -a max_result_temp3\n\
    \    local -a max_keys_temp4\n    local -a max_values_temp4\n    local -a max_result_temp4\n\
    \    local -a max_keys_temp5\n    local -a max_values_temp5\n    local -a max_result_temp5\n\
    \    local -a max_keys_temp6\n    local -a max_values_temp6\n    local -a max_result_temp6\n\
    \    local -a max_keys_temp7\n    local -a max_values_temp7\n    local -a max_result_temp7\n\
    \    local -a max_keys_temp8\n    local -a max_values_temp8\n    local -a max_result_temp8\n\
    \    local -a max_keys_temp9\n    local -a max_values_temp9\n    local -a max_result_temp9\n\
    \    local -a max_keys_temp10\n    local -a max_values_temp10\n    local -a max_result_temp10\n\
    \    local -a max_keys_temp11\n    local -a max_values_temp11\n    local -a max_result_temp11\n\
    \    local -a max_keys_temp12\n    local -a max_values_temp12\n    local -a max_result_temp12\n\
    \    local -a max_keys_temp13\n    local -a max_values_temp13\n    local -a max_result_temp13\n\
    \    local -", "  local -A counts\n  local -a max_counts\n  local max_count=0\n\
    \  for word in $1; do\n    counts[$word]=$((counts[$word] + 1))\n    if ((counts[$word]\
    \ > max_count)); then\n      max_count=${counts[$word]}\n      max_counts=(\"\
    $word\")\n    elif ((counts[$word] == max_count)); then\n      max_counts+=(\"\
    $word\")\n    fi\n  done\n  echo -n \"{\"\n  for word in \"${max_counts[@]}\"\
    ; do\n    echo -n \"\\\"$word\\\": \\\"${counts[$word]}\\\"\"\n    if ((word !=\
    \ ${max_counts[-1]})); then\n      echo -n \", \"\n    fi\n  done\n  echo \"}\"",
  "  local -A dict\n  for i in $1; do\n    dict[$i]=$((dict[$i]+1))\n  done\n  local\
    \ -a max_keys\n  local max_value=0\n  for i in \"${!dict[@]}\"; do\n    if [[\
    \ ${dict[$i]} -gt $max_value ]]; then\n      max_value=${dict[$i]}\n      max_keys=(\"\
    $i\")\n    elif [[ ${dict[$i]} -eq $max_value ]]; then\n      max_keys+=(\"$i\"\
    )\n    fi\n  done\n  local -a result\n  for i in \"${max_keys[@]}\"; do\n    result+=(\"\
    \\\"$i\\\": \\\"${dict[$i]}\\\"\")\n  done\n  echo \"{\"$(IFS=,; echo \"${result[*]}\"\
    )\"}\"", "    local -A hist\n    local -a max\n    local max_count=0\n    local\
    \ -a words=($1)\n    for word in \"${words[@]}\"; do\n        ((hist[$word]++))\n\
    \        if ((hist[$word] > max_count)); then\n            max_count=${hist[$word]}\n\
    \            max=(\"$word\")\n        elif ((hist[$word] == max_count)); then\n\
    \            max+=(\"$word\")\n        fi\n    done\n    local -a result\n   \
    \ for word in \"${max[@]}\"; do\n        result+=(\"\\\"$word\\\": \\\"${hist[$word]}\\\
    \"\")\n    done\n    echo \"{\"\"${result[@]}\"\"},\"", "  local -A histogram\n\
    \  for letter in $1; do\n    ((histogram[$letter]++))\n  done\n  local max_count=0\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] > max_count));\
    \ then\n      max_count=${histogram[$letter]}\n    fi\n  done\n  local result=()\n\
    \  for letter in \"${!histogram[@]}\"; do\n    if ((histogram[$letter] == max_count));\
    \ then\n      result+=(\"$letter: $max_count\")\n    fi\n  done\n  echo \"${result[@]}\"",
  "    local -A letters\n    local -a result\n    local max=0\n    for letter in $1;\
    \ do\n        ((letters[$letter]++))\n        if ((letters[$letter] > max)); then\n\
    \            max=${letters[$letter]}\n        fi\n    done\n    for letter in\
    \ \"${!letters[@]}\"; do\n        if ((letters[$letter] == max)); then\n     \
    \       result+=(\"$letter: ${letters[$letter]}\")\n        fi\n    done\n   \
    \ echo \"${result[@]}\"", "  local -A histogram\n  for letter in $1; do\n    histogram[$letter]=$((histogram[$letter]\
    \ + 1))\n  done\n  local -a max_letters\n  local max_count=0\n  for letter in\
    \ \"${!histogram[@]}\"; do\n    if [[ ${histogram[$letter]} -gt $max_count ]];\
    \ then\n      max_letters=(\"$letter\")\n      max_count=${histogram[$letter]}\n\
    \    elif [[ ${histogram[$letter]} -eq $max_count ]]; then\n      max_letters+=(\"\
    $letter\")\n    fi\n  done\n  local -a result\n  for letter in \"${max_letters[@]}\"\
    ; do\n    result+=(\"\\\"$letter\\\": \\\"${histogram[$letter]}\\\"\")\n  done\n\
    \  echo \"{${result[*]}}\"", "    local -A dict\n    local -a keys\n    local\
    \ -a values\n    local -a result\n    local key\n    local value\n    local max\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w", "    local\
    \ -A letters\n    local -a max_letters\n    local max_count=0\n    local letter\n\
    \    local count\n    local result\n\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n\n    for letter in \"${!letters[@]}\"; do\n        count=${letters[$letter]}\n\
    \        if ((count > max_count)); then\n            max_count=$count\n      \
    \      max_letters=(\"$letter\")\n        elif ((count == max_count)); then\n\
    \            max_letters+=(\"$letter\")\n        fi\n    done\n\n    result=\"\
    {\"\n    for letter in \"${max_letters[@]}\"; do\n        result+=\"\\\"$letter\\\
    \": \\\"$max_count\\\"\"\n        if ((${#max_letters[@]} > 1)); then\n      \
    \      result+=\", \"\n        fi\n    done\n    result+=\"}\"\n\n    echo \"\
    $result\"", "  local -A histogram\n  local -a max_keys\n  local max_value=0\n\
    \  local key\n  local value\n  for key in $1; do\n    ((histogram[$key]++))\n\
    \    value=${histogram[$key]}\n    if ((value > max_value)); then\n      max_value=$value\n\
    \      max_keys=(\"$key\")\n    elif ((value == max_value)); then\n      max_keys+=(\"\
    $key\")\n    fi\n  done\n  local result=\"{\"\n  for key in \"${max_keys[@]}\"\
    ; do\n    result+=\"\\\"$key\\\": \\\"$max_value\\\", \"\n  done\n  echo \"${result%??}}\"",
  "    local -A dict\n    for i in $1; do\n        dict[$i]=$((dict[$i]+1))\n    done\n\
    \    local -a max_keys\n    local max_value=0\n    for key in \"${!dict[@]}\"\
    ; do\n        if [[ ${dict[$key]} -gt $max_value ]]; then\n            max_value=${dict[$key]}\n\
    \            max_keys=(\"$key\")\n        elif [[ ${dict[$key]} -eq $max_value\
    \ ]]; then\n            max_keys+=(\"$key\")\n        fi\n    done\n    local\
    \ -a result\n    for key in \"${max_keys[@]}\"; do\n        result+=(\"\\\"$key\\\
    \": \\\"${dict[$key]}\\\"\")\n    done\n    echo \"{$(IFS=,; echo \"${result[*]}\"\
    )}\"", "    local -A histogram\n    for letter in $1; do\n        ((histogram[$letter]++))\n\
    \    done\n    local max=0\n    for letter in \"${!histogram[@]}\"; do\n     \
    \   if ((histogram[$letter] > max)); then\n            max=${histogram[$letter]}\n\
    \        fi\n    done\n    local result=()\n    for letter in \"${!histogram[@]}\"\
    ; do\n        if ((histogram[$letter] == max)); then\n            result+=($letter)\n\
    \        fi\n    done\n    echo \"${result[@]}\"", "    local -A dict\n    local\
    \ -a keys\n    local -a values\n    local -a max_keys\n    local -a max_values\n\
    \    local max_value\n    local key\n    local value\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t",
  "    local -A dict\n    local -a keys\n    local -a values\n    local -a result\n\
    \    local key\n    local value\n    local i\n    local j\n    local max\n   \
    \ local max_count\n    local count\n    local -a max_keys\n    local -a max_values\n\
    \n    for i in $1; do\n        if [ -z \"${dict[$i]}\" ]; then\n            dict[$i]=1\n\
    \        else\n            dict[$i]=$((dict[$i]+1))\n        fi\n    done\n\n\
    \    for key in \"${!dict[@]}\"; do\n        keys+=(\"$key\")\n        values+=(\"\
    ${dict[$key]}\")\n    done\n\n    max=${values[0]}\n    max_count=1\n    max_keys=(\"\
    ${keys[0]}\")\n    max_values=(\"${values[0]}\")\n    for ((i=1; i<${#values[@]};\
    \ i++)); do\n        if [ \"${values[$i]}\" -gt \"$max\" ]; then\n           \
    \ max=${values[$i]}\n            max_count=1\n            max_keys=(\"${keys[$i]}\"\
    )\n            max_values=(\"${values[$i]}\")\n        elif [ \"${values[$i]}\"\
    \ -eq \"$max\" ]; then\n            max_count=$((max_count+1))\n            max_keys+=(\"\
    ${keys[$i]}\")\n            max_values+=(\"${values[$i]}\")\n        fi\n    done\n\
    \n    for ((i=0; i<max_count; i++)); do\n        result+=(\"\\\"${max_keys[$i]}\\\
    \": \\\"${max_values[$i]}\\\"\")\n    done\n\n    echo \"{\"$(IFS=,; echo \"${result[*]}\"\
    )\"}\"", "    local -A histogram\n    for word in $1; do\n        ((histogram[$word]++))\n\
    \    done\n    local -a max_keys\n    local max_value=0\n    for key in \"${!histogram[@]}\"\
    ; do\n        if ((histogram[$key] > max_value)); then\n            max_value=${histogram[$key]}\n\
    \            max_keys=(\"$key\")\n        elif ((histogram[$key] == max_value));\
    \ then\n            max_keys+=(\"$key\")\n        fi\n    done\n    local -a result\n\
    \    for key in \"${max_keys[@]}\"; do\n        result+=(\"\\\"$key\\\": \\\"\
    ${histogram[$key]}\\\"\")\n    done\n    echo \"{\"\"${result[@]}\"\"},\"", " \
    \   local -A histo\n    for letter in $1; do\n        ((histo[$letter]++))\n \
    \   done\n    local -a max_letters\n    local max_count=0\n    for letter in \"\
    ${!histo[@]}\"; do\n        if ((histo[$letter] > max_count)); then\n        \
    \    max_letters=(\"$letter\")\n            max_count=${histo[$letter]}\n    \
    \    elif ((histo[$letter] == max_count)); then\n            max_letters+=(\"\
    $letter\")\n        fi\n    done\n    local -a result\n    for letter in \"${max_letters[@]}\"\
    ; do\n        result+=(\"\\\"$letter\\\": \\\"${histo[$letter]}\\\"\")\n    done\n\
    \    echo \"{\"\"${result[@]}\"\"},\"", "  local -A histogram\n  for letter in\
    \ $1; do\n    ((histogram[$letter]++))\n  done\n  local max=0\n  for letter in\
    \ \"${!histogram[@]}\"; do\n    if ((histogram[$letter] > max)); then\n      max=${histogram[$letter]}\n\
    \    fi\n  done\n  local -a max_letters\n  for letter in \"${!histogram[@]}\"\
    ; do\n    if ((histogram[$letter] == max)); then\n      max_letters+=($letter)\n\
    \    fi\n  done\n  local -a result\n  for letter in \"${max_letters[@]}\"; do\n\
    \    result+=($(printf '\"%s\": \"%s\"' \"$letter\" \"${histogram[$letter]}\"\
    ))\n  done\n  echo \"{$(join , \"${result[@]}\")}\""]
stop_tokens:
- "\n}"
