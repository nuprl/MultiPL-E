name: HumanEval_71_triangle_area
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ the area of\n# the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n# than the third side.\n# Example:\n\
  # >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\"\
  \ \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an\
  \ integer\ntriangle_area() {\n"
tests: "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n \
  \   [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n\
  \    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"\
  1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\
  \nrun_test"
completions: ["    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        exit 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [\
    \ $3 -le 0 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -ge\
    \ $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -lt $(($2 + $3)) ]; then\n    \
    \        echo \"$(echo \"scale=2; sqrt($1*$1 - ($1/2)*($1/2) + ($2*$2 - ($2/2)*($2/2))\
    \ + ($3*$3 - ($3/2)*($3/2)))\" | bc)\"\n            exit 0\n        fi\n    elif\
    \ [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -lt $(($1 + $3)) ]; then\n\
    \            echo \"$(echo \"scale=2; sqrt($2*$2 - ($2/2)*($2/2) + ($1*$1 - ($1/2)*($1/2))\
    \ + ($3*$3 - ($3/2)*($3/2)))\" | bc)\"\n            exit 0\n        fi\n    elif\
    \ [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -lt $(($1 + $2)) ]; then\n\
    \            echo \"$(echo \"scale=2; sqrt($3*$3 - ($3/2)*($3/2) + ($1*$1 - ($1/2)*($1/2))\
    \ + ($2*$2 - ($2/2)*($2/2)))\" | bc)\"\n            exit 0\n        fi\n    fi\n\
    \    echo \"-1\"", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer>\
    \ <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$\
    \ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n \
    \   fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an\
    \ integer\"\n        return 1\n    fi\n    if ! [[ $3 =~ ^[0-9]+$ ]]; then\n \
    \       echo \"Error: $3 is not an integer\"\n        return 1\n    fi\n    if\
    \ [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n  \
    \      return 0\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n       \
    \ if [ $2 -ge $3 ]; then\n            if [ $1 -lt $(( $2 + $3 )) ]; then\n   \
    \             echo \"$(echo \"scale=2; 0.5 * $2 * $3\" | bc)\"\n             \
    \   return 0\n            fi\n        else\n            if [ $1 -lt $(( $2 + $3\
    \ )) ]; then\n                echo \"$(echo \"scale=2; 0.5 * $2 * $3\" | bc)\"\
    \n                return 0\n            fi\n        fi\n    elif [ $2 -ge $1 ]\
    \ && [ $2 -ge $3 ]; then\n        if [ $1 -ge $3 ]; then\n            if [ $2\
    \ -lt $(( $1 + $3 )) ]; then\n                echo \"$(echo \"scale=2; 0.5 * $1\
    \ * $3\" | bc)\"\n                return 0\n            fi\n        else\n   \
    \         if [ $2 -lt $(( $1 + $3 )) ]; then\n                echo \"$(echo \"\
    scale=2; 0.5 * $1 * $3\" | bc)\"\n                return 0\n            fi\n \
    \       fi\n    elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $1 -ge\
    \ $2 ]; then\n            if [ $3 -lt $(( $", "    if [[ $1 -gt 0 && $2 -gt 0\
    \ && $3 -gt 0 ]]; then\n        if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n      \
    \      echo $(echo \"scale=2;sqrt(3)/4*$1*$1\" | bc)\n        elif [[ $1 -eq $2\
    \ || $2 -eq $3 || $1 -eq $3 ]]; then\n            if [[ $1 -eq $2 ]]; then\n \
    \               echo $(echo \"scale=2;0.5*$1*$3\" | bc)\n            elif [[ $2\
    \ -eq $3 ]]; then\n                echo $(echo \"scale=2;0.5*$2*$1\" | bc)\n \
    \           else\n                echo $(echo \"scale=2;0.5*$3*$2\" | bc)\n  \
    \          fi\n        else\n            if [[ $1 -gt $2 && $1 -gt $3 ]]; then\n\
    \                if [[ $2 -gt $3 ]]; then\n                    echo $(echo \"\
    scale=2;0.5*$2*$3\" | bc)\n                else\n                    echo $(echo\
    \ \"scale=2;0.5*$3*$2\" | bc)\n                fi\n            elif [[ $2 -gt\
    \ $1 && $2 -gt $3 ]]; then\n                if [[ $1 -gt $3 ]]; then\n       \
    \             echo $(echo \"scale=2;0.5*$1*$3\" | bc)\n                else\n\
    \                    echo $(echo \"scale=2;0.5*$3*$1\" | bc)\n               \
    \ fi\n            else\n                if [[ $1 -gt $2 ]]; then\n           \
    \         echo $(echo \"scale=2;0.5*$1*$2\" | bc)\n                else\n    \
    \                echo $(echo \"scale=2;0.5*$2*$1\" | bc)\n                fi\n\
    \            fi\n        fi\n    else\n        echo \"-1\"\n    fi", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n     \
    \   return 1\n    fi\n    local side1=$1\n    local side2=$2\n    local side3=$3\n\
    \    local s=$(echo \"scale=2; ($side1 + $side2 + $side3) / 2\" | bc)\n    local\
    \ area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s - $side2) * ($s - $side3))\"\
    \ | bc)\n    if [ $(echo \"$area < 0\" | bc) -eq 1 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"$area\"\n    fi", "    # TODO: implement this function\n\
    \    # Hint: use the following command to round a number to 2 decimal points\n\
    \    # printf \"%.2f\" $number\n    #\n    # Hint: use the following command to\
    \ check if a number is an integer\n    # [[ $number =~ ^[0-9]+$ ]]\n    #\n  \
    \  # Hint: use the following command to check if a number is a float\n    # [[\
    \ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following command\
    \ to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n\
    \    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9",
  "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <side1> <side2> <side3>\"\n    return\
    \ 1\n  fi\n  if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"\
    -1\"\n    return 0\n  fi\n  if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n    if [\
    \ $2 -ge $3 ]; then\n      if [ $1 -gt $(($2 + $3)) ]; then\n        echo \"-1\"\
    \n        return 0\n      fi\n    else\n      if [ $1 -gt $(($2 + $3)) ]; then\n\
    \        echo \"-1\"\n        return 0\n      fi\n    fi\n  elif [ $2 -ge $1 ]\
    \ && [ $2 -ge $3 ]; then\n    if [ $1 -ge $3 ]; then\n      if [ $2 -gt $(($1\
    \ + $3)) ]; then\n        echo \"-1\"\n        return 0\n      fi\n    else\n\
    \      if [ $2 -gt $(($1 + $3)) ]; then\n        echo \"-1\"\n        return 0\n\
    \      fi\n    fi\n  elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n    if [ $1 -ge\
    \ $2 ]; then\n      if [ $3 -gt $(($1 + $2)) ]; then\n        echo \"-1\"\n  \
    \      return 0\n      fi\n    else\n      if [ $3 -gt $(($1 + $2)) ]; then\n\
    \        echo \"-1\"\n        return 0\n      fi\n    fi\n  fi\n  echo \"$(echo\
    \ \"scale=2; sqrt($1*$1 + $2*$2)\" | bc -l)\"\n  return 0", "    if [[ $1 -gt\
    \ 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[ $1 -lt $2+$3 && $2 -lt $1+$3\
    \ && $3 -lt $1+$2 ]]; then\n            s=$(echo \"scale=2; ($1+$2+$3)/2\" | bc)\n\
    \            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n\
    \            echo $area\n        else\n            echo \"-1\"\n        fi\n \
    \   else\n        echo \"-1\"\n    fi", '  # Write your code here', "    # Write\
    \ your code here\n    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n      \
    \  if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n            echo $(echo \"scale=2; sqrt(3)/4\
    \ * $1 * $1\" | bc)\n        elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        else\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        fi\n\
    \    else\n        echo -1\n    fi", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world\"\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n       \
    \ if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    # TODO: Implement this\
    \ function\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n      \
    \  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral Triangle\"\n   \
    \     elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n           \
    \ echo \"Isosceles Triangle\"\n        else\n            echo \"Scalene Triangle\"\
    \n        fi\n    else\n        echo \"Not a Triangle\"\n    fi", "    if [[ $1\
    \ -eq $2 && $2 -eq $3 ]]; then\n        echo $(echo \"scale=2; sqrt(3) / 4 * $1\
    \ * $1\" | bc)\n    elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n   \
    \     echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 +\
    \ $3) * (-$1 + $2 + $3)) / 4\" | bc)\n    else\n        echo $(echo \"scale=2;\
    \ sqrt((($1 + $2 + $3) / 2) * (($1 + $2 + $3) / 2 - $1) * (($1 + $2 + $3) / 2\
    \ - $2) * (($1 + $2 + $3) / 2 - $3))\" | bc)\n    fi", "    # TODO: implement\
    \ this function\n    # Hint: use bc to calculate the area of a triangle\n    #\
    \       and use awk to round the result to 2 decimal points\n    #       https://www.gnu.org/software/gawk/manual/html_node/Arithmetic-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/String-Manipulation.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org", "    # Write your code here\n    if [ $1 -gt\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ]\
    \ || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n  \
    \      else\n            echo \"Scalene\"\n        fi\n    else\n        echo\
    \ \"Invalid\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        return 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]];\
    \ then\n        echo \"Error: side1 is not an integer\"\n        return 1\n  \
    \  fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: side2 is not\
    \ an integer\"\n        return 1\n    fi\n    if [[ ! $3 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Error: side3 is not an integer\"\n        return 1\n    fi\n \
    \   if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\
    \n        return 0\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0\
    \ ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n\
    \        return 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n     \
    \   if [ $1 -lt $(($2 + $3)) ]; then\n            area=$(echo \"scale=2; sqrt($1*$1*($2*$2+$3*$3)-$1*$1*$1*$1)/4\"\
    \ | bc)\n            echo \"$area\"\n            return 0\n        fi\n    fi\n\
    \    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt $(($1 + $3))\
    \ ]; then\n            area=$(echo \"scale=2; sqrt($2*$2*($1*$1+$3*$3)-$2*$2*$2*$2)/4\"\
    \ | bc)\n            echo \"$area\"\n            return 0\n       ", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -gt $2 ] &&\
    \ [ $1 -gt $3 ]; then\n        if [ $(( $2 + $3 )) -gt $1 ]; then\n          \
    \  echo \"$(echo \"scale=2; sqrt($(( $2 * $2 + $3 * $3 - $1 * $1 )) * ($(( $2\
    \ * $2 + $3 * $3 - $1 * $1 )) - 2 * $2 * $3)) / 4\" | bc)\"\n            return\
    \ 0\n        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $((\
    \ $1 + $3 )) -gt $2 ]; then\n            echo \"$(echo \"scale=2; sqrt($(( $1\
    \ * $1 + $3 * $3 - $2 * $2 )) * ($(( $1 * $1 + $3 * $3 - $2 * $2 )) - 2 * $1 *\
    \ $3)) / 4\" | bc)\"\n            return 0\n        fi\n    elif [ $3 -gt $1 ]\
    \ && [ $3 -gt $2 ]; then\n        if [ $(( $1 + $2 )) -gt $3 ]; then\n       \
    \     echo \"$(echo \"scale=2; sqrt($(( $1 * $1 + $2 * $2 - $3 * $3 )) * ($((\
    \ $1 * $1 + $2 * $2 - $3 * $3 )) - 2 * $1 * $2)) / 4\" | bc)\"\n            return\
    \ 0\n        fi\n    fi\n    echo \"-1\"\n    return 0", "    if [ $# -ne 3 ];\
    \ then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n\
    \    fi\n    if [ $(echo \"$1 + $2 > $3\" | bc) -eq 1 ] && \\\n       [ $(echo\
    \ \"$1 + $3 > $2\" | bc) -eq 1 ] && \\\n       [ $(echo \"$2 + $3 > $1\" | bc)\
    \ -eq 1 ]; then\n        echo \"$(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)\
    \ * $2 / 2\" | bc)\"\n    else\n        echo \"-1\"\n    fi", "  # Write your\
    \ code here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo\
    \ \"-1\"\n  elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n    echo\
    \ \"-1\"\n  elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"-1\"\n  elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n    echo \"-1\"\n  elif\
    \ [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n    if [ $2 -gt $3 ]; then\n      echo\
    \ \"$(echo \"scale=2; ($1+$2)*$3/2\" | bc)\"\n    else\n      echo \"$(echo \"\
    scale=2; ($1+$3)*$2/2\" | bc)\"\n    fi\n  elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n    if [ $1 -gt $3 ]; then\n      echo \"$(echo \"scale=2; ($2+$1)*$3/2\"\
    \ | bc)\"\n    else\n      echo \"$(echo \"scale=2; ($2+$3)*$1/2\" | bc)\"\n \
    \   fi\n  elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n    if [ $1 -gt $2 ]; then\n\
    \      echo \"$(echo \"scale=2; ($3+$1)*$2/2\" | bc)\"\n    else\n      echo \"\
    $(echo \"scale=2; ($3+$2)*$1/2\" | bc)\"\n    fi\n  fi", "    # Write your code\
    \ here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if\
    \ [ $1 -lt $2+$3 ] && [ $2 -lt $1+$3 ] && [ $3 -lt $1+$2 ]; then\n           \
    \ area=$(echo \"scale=2; sqrt($1*$1+$2*$2-$3*$3)*sqrt($1*$1+$3*$3-$2*$2)*sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc)\n            echo \"$area\"\n        else\n            echo \"-1\"\n \
    \       fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 *\
    \ $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 -\
    \ $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n        else\n        \
    \    echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 +\
    \ $3) * (-$1 + $2 + $3)) / 4\" | bc)\n        fi\n    else\n        echo \"-1\"\
    \n    fi", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world\"\n    if [ $1 -gt\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n        else\n            echo $(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your\
    \ code here\n    if [ $1 -lt 1 -o $2 -lt 1 -o $3 -lt 1 ]; then\n        echo \"\
    -1\"\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo \"-1\"\n    elif\
    \ [ $1 -eq $2 -o $2 -eq $3 -o $1 -eq $3 ]; then\n        echo \"-1\"\n    else\n\
    \        s=$(echo \"scale=2;($1+$2+$3)/2\" | bc)\n        area=$(echo \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n        echo \"$area\"\n    fi", "    # your code here\n    if [ $1 -gt\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ]\
    \ || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n  \
    \      else\n            echo \"Scalene\"\n        fi\n    else\n        echo\
    \ \"Not a triangle\"\n    fi", "    # your code here\n    if [ $1 -gt 0 ] && [\
    \ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ];\
    \ then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n        else\n\
    \            echo \"Scalene\"\n        fi\n    else\n        echo \"Invalid\"\n\
    \    fi", "    # Write your code here\n    if [ $1 -eq $2 -a $2 -eq $3 ]; then\n\
    \        echo $(echo \"scale=2;sqrt(3)*$1*$1/4\" | bc)\n    elif [ $1 -eq $2 -o\
    \ $2 -eq $3 -o $1 -eq $3 ]; then\n        echo $(echo \"scale=2;sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n    else\n        echo $(echo \"scale=2;sqrt((($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/16)\"\
    \ | bc)\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        return 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt\
    \ 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n        return 1\n    fi\n \
    \   if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\
    \n        return 1\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    \
    \    echo \"-1\"\n        return 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3\
    \ ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n        return 1\n    fi\n  \
    \  if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt $(( $2 + $3 ))\
    \ ]; then\n            echo \"scale=2;sqrt($(( ($2 * $2) + ($3 * $3) - ($1 * $1)\
    \ )) * ($(( ($2 * $2) + ($3 * $3) - ($1 * $1) )) - 2 * $2 * $3))/4\" | bc\n  \
    \          return 0\n        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n        if [ $2 -lt $(( $1 + $3 )) ]; then\n            echo \"scale=2;sqrt($((\
    \ ($1 * $1) + ($3 * $3) - ($2 * $2) )) * ($(( ($1 * $1) + ($3 * $3) - ($2 * $2)\
    \ )) - 2 * $1 * $3))/4\" | bc\n            return 0\n        fi\n    fi\n    if\
    \ [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $(( $1 + $2 )) ];\
    \ then\n            echo \"scale=2;sqrt($(( ($1 * $1) + ($2 * $2) - ($3 * $3)\
    \ )) * ($(( ($1", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le\
    \ 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        return 0\n    fi\n \
    \   if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -ge $2+$3 ]; then\n\
    \            echo \"-1\"\n            return 0\n        fi\n    elif [ $2 -ge\
    \ $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -ge $1+$3 ]; then\n           \
    \ echo \"-1\"\n            return 0\n        fi\n    elif [ $3 -ge $1 ] && [ $3\
    \ -ge $2 ]; then\n        if [ $3 -ge $1+$2 ]; then\n            echo \"-1\"\n\
    \            return 0\n        fi\n    fi\n    s=$(echo \"scale=2;($1+$2+$3)/2\"\
    \ | bc)\n    area=$(echo \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n\
    \    echo $area", "    if [[ $1 -eq 0 || $2 -eq 0 || $3 -eq 0 ]]; then\n     \
    \   echo \"-1\"\n    elif [[ $1 -eq $2 && $2 -eq $3 ]]; then\n        echo \"\
    0\"\n    elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n        echo \"\
    -1\"\n    elif [[ $1 -gt $2 && $1 -gt $3 ]]; then\n        if [[ $1 -lt $2 + $3\
    \ ]]; then\n            echo $(echo \"scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4)\"\
    \ | bc)\n        else\n            echo \"-1\"\n        fi\n    elif [[ $2 -gt\
    \ $1 && $2 -gt $3 ]]; then\n        if [[ $2 -lt $1 + $3 ]]; then\n          \
    \  echo $(echo \"scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc)\n        else\n\
    \            echo \"-1\"\n        fi\n    elif [[ $3 -gt $1 && $3 -gt $2 ]]; then\n\
    \        if [[ $3 -lt $1 + $2 ]]; then\n            echo $(echo \"scale=2; sqrt($3*$3\
    \ - ($1*$1 + $2*$2)/4)\" | bc)\n        else\n            echo \"-1\"\n      \
    \  fi\n    fi", "    # Write your code here\n    if [ $1 -lt 0 ] || [ $2 -lt 0\
    \ ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq 0 ] || [ $2\
    \ -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ] &&\
    \ [ $2 -eq $3 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n    elif [ $1 -gt $2 ] &&\
    \ [ $1 -gt $3 ]; then\n        if [ $1 -lt $(($2 + $3)) ]; then\n            echo\
    \ \"$(echo \"scale=2; sqrt($(($1 + $2 + $3)) * $(($1 + $2 - $3)) * $(($1 - $2\
    \ + $3)) * $(($3 + $2 - $1)))/4\" | bc)\"\n        else\n            echo \"-1\"\
    \n        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt\
    \ $(($1 + $3)) ]; then\n            echo \"$(echo \"scale=2; sqrt($(($1 + $2 +\
    \ $3)) * $(($1 + $2 - $3)) * $(($1 - $2 + $3)) * $(($3 + $2 - $1)))/4\" | bc)\"\
    \n        else\n            echo \"-1\"\n        fi\n    elif [ $3 -gt $1 ] &&\
    \ [ $3 -gt $2 ]; then\n        if [ $3 -lt $(($1 + $2)) ]; then\n            echo\
    \ \"$(echo \"scale=2; sqrt($(($1 + $2 + $3)) * $(($1 + $2 - $3)) * $(($1 - $2\
    \ + $3)) * $(($3 + $2 - $1)))/4\" | bc)\"\n        else\n            echo \"-1\"\
    \n        fi\n    fi", "  # TODO: Write your code here\n  # Hint: Use the bc command\
    \ to perform floating point arithmetic\n  #       For example: $(echo \"scale=2;\
    \ 3/4\" | bc)\n  #       For more information, see: https://www.gnu.org/software/bc/manual/html_mono/bc.html\n\
    \  if (( $1 + $2 > $3 )) && (( $1 + $3 > $2 )) && (( $2 + $3 > $1 )); then\n \
    \   s=$(echo \"scale=2; ($1 + $2 + $3)/2\" | bc)\n    area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n    echo $area\n  else\n    echo \"-1\"\n  fi", "    # your code here\n\
    \    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\
    \n        exit 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ];\
    \ then\n        echo \"-1\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ] || [\
    \ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n        exit 1\n    fi\n\
    \    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        exit\
    \ 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n  \
    \      echo \"-1\"\n        exit 1\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3\
    \ ]; then\n        if [ $1 -lt $(($2 + $3)) ]; then\n            area=$(echo \"\
    scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4) * ($2 + $3)\" | bc)\n            echo\
    \ \"$area\"\n            exit 1\n        else\n            echo \"-1\"\n     \
    \       exit 1\n        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n\
    \        if [ $2 -lt $(($1 + $3)) ]; then\n            area=$(echo \"scale=2;\
    \ sqrt($2*$2 - ($1*$1 + $3*$3)/4) * ($1 + $3)\" | bc)\n            echo \"$area\"\
    \n            exit 1\n        else\n            echo \"-1\"\n            exit\
    \ 1\n        fi\n    fi\n    if [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n       \
    \ if [ $3 -lt $(($1 + $2)) ]; then\n            area=$(echo \"scale=2; sqrt($3*$3\
    \ - ($1*$1 + $2*$2)/4) * ($1 + $2)\" | bc)\n            echo \"$area\"\n     \
    \       exit 1", "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo \"$(echo \"scale=2;sqrt(3)*$1*$1/4\" | bc)\"\n        elif [\
    \ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"$(echo\
    \ \"scale=2;sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\" | bc)\"\n\
    \        else\n            echo \"$(echo \"scale=2;sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\"\n        fi\n    else\n        echo \"-1\"\n    fi", '    # Write your
    code here', "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] &&\
    \ [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      \
    \      echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        elif [ $1 -eq\
    \ $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2;\
    \ sqrt(3)/4 * ($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)\"\
    \ | bc)\n        else\n            echo $(echo \"scale=2; sqrt(($1 + $2 + $3)\
    \ * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3))/4\" | bc)\n        fi\n\
    \    else\n        echo -1\n    fi", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    local s=$(echo \"scale=2; ($side1\
    \ + $side2 + $side3) / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s\
    \ - $side1) * ($s - $side2) * ($s - $side3))\" | bc)\n    if [ $(echo \"$area\
    \ < 0\" | bc) -eq 1 ]; then\n        echo \"-1\"\n    else\n        echo \"$area\"\
    \n    fi", "    # Write your code here\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ];\
    \ then\n        echo \"Equilateral\"\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ]\
    \ || [ $1 -eq $3 ]; then\n        echo \"Isosceles\"\n    else\n        echo \"\
    Scalene\"\n    fi", "  if [[ $1 -le 0 || $2 -le 0 || $3 -le 0 ]]; then\n    echo\
    \ \"-1\"\n  elif [[ $1 + $2 -le $3 || $1 + $3 -le $2 || $2 + $3 -le $1 ]]; then\n\
    \    echo \"-1\"\n  else\n    echo $(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)*sqrt($1*$1\
    \ + $3*$3 - $2*$2)*sqrt($2*$2 + $3*$3 - $1*$1)/4\" | bc)\n  fi", "    if [ $1\
    \ -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [\
    \ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)*$1^2/4\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(($1+$2+$3)*($2+$3-$1)*($1+$3-$2)*($1+$2-$3))/4\"\
    \ | bc)\n        else\n            echo $(echo \"scale=2; sqrt((($1+$2+$3)/2)*(($2+$3-$1)/2)*(($1+$3-$2)/2)*(($1+$2-$3)/2))\"\
    \ | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", "    if [ $# -ne\
    \ 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        exit\
    \ 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n     \
    \   echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ] ||\
    \ [ $3 -eq 0 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if [ $1\
    \ -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n\
    \    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"\
    -1\"\n        exit 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n  \
    \      if [ $1 -lt $2+$3 ]; then\n            area=$(echo \"scale=2; sqrt($1*$1\
    \ - ($2*$2+$3*$3)/4)\" | bc)\n            echo \"$area\"\n            exit 0\n\
    \        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [\
    \ $2 -lt $1+$3 ]; then\n            area=$(echo \"scale=2; sqrt($2*$2 - ($1*$1+$3*$3)/4)\"\
    \ | bc)\n            echo \"$area\"\n            exit 0\n        fi\n    fi\n\
    \    if [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $1+$2 ]; then\n\
    \            area=$(echo \"scale=2; sqrt($3*$3 - ($1*$1+$2*$2)/4)\" | bc)\n  \
    \          echo \"$area\"\n            exit 0\n        fi\n    fi\n    echo \"\
    -1\"", "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3\
    \ -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n           \
    \ echo \"Equilateral Triangle\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] ||\
    \ [ $1 -eq $3 ]; then\n            echo \"Isosceles Triangle\"\n        else\n\
    \            echo \"Scalene Triangle\"\n        fi\n    else\n        echo \"\
    Not a Triangle\"\n    fi", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    if [[ $1 -lt $2+$3 && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n        echo\
    \ \"scale=2;sqrt($1*$1+$2*$2-$3*$3)*sqrt($1*$1+$3*$3-$2*$2)*sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\
    \n        exit 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ];\
    \ then\n        echo \"-1\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ] || [\
    \ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n        exit 1\n    fi\n\
    \    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        exit\
    \ 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n  \
    \      echo \"-1\"\n        exit 1\n    fi\n    if [ $1 -lt $2 ] && [ $1 -lt $3\
    \ ]; then\n        if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo \"-1\"\n            exit 1\n        fi\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"-1\"\n            exit 1\n \
    \       fi\n        if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo \"-1\"\n            exit 1\n        fi\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"-1\"\n            exit 1\n \
    \       fi\n        if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo \"-1\"\n            exit 1\n        fi\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"-1\"\n            exit 1\n \
    \       fi\n        if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo \"-1\"\n            exit 1\n        fi\n        if [ $1 -eq\
    \ $2 ] && [ $2", "    # your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] &&\
    \ [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      \
    \      echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"$(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n        else\n            echo \"\
    $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n        fi\n    else\n    \
    \    echo \"-1\"\n    fi", '    # Write your code here', "  if [[ $1 -gt 0 &&\
    \ $2 -gt 0 && $3 -gt 0 ]]; then\n    if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n \
    \     echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n    elif [[ $1 -eq\
    \ $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n      echo $(echo \"scale=2; sqrt(($1\
    \ + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n\
    \    else\n      echo $(echo \"scale=2; sqrt((($1 + $2 + $3) / 2) * ((($1 + $2\
    \ + $3) / 2) - $1) * ((($1 + $2 + $3) / 2) - $2) * ((($1 + $2 + $3) / 2) - $3))\"\
    \ | bc)\n    fi\n  else\n    echo \"-1\"\n  fi", "    if [ $1 -gt 0 ] && [ $2\
    \ -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ]\
    \ || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n        else\n     \
    \       echo \"Scalene\"\n        fi\n    else\n        echo \"Not a triangle\"\
    \n    fi", '  # your code here', "  # your code here\n  if [ $1 -eq $2 ] && [\
    \ $2 -eq $3 ]; then\n    echo \"Equilateral\"\n  elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n    echo \"Isosceles\"\n  else\n    echo \"Scalene\"\
    \n  fi", "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <side1> <side2> <side3>\"\
    \n    return 1\n  fi\n  local a=$1\n  local b=$2\n  local c=$3\n  if [ $a -lt\
    \ 1 ] || [ $b -lt 1 ] || [ $c -lt 1 ]; then\n    echo \"-1\"\n    return 0\n \
    \ fi\n  if [ $a -gt $b ]; then\n    if [ $a -gt $c ]; then\n      if [ $b -gt\
    \ $c ]; then\n        echo \"-1\"\n        return 0\n      fi\n    fi\n  fi\n\
    \  if [ $b -gt $a ]; then\n    if [ $b -gt $c ]; then\n      if [ $a -gt $c ];\
    \ then\n        echo \"-1\"\n        return 0\n      fi\n    fi\n  fi\n  if [\
    \ $c -gt $a ]; then\n    if [ $c -gt $b ]; then\n      if [ $a -gt $b ]; then\n\
    \        echo \"-1\"\n        return 0\n      fi\n    fi\n  fi\n  local s=$(echo\
    \ \"scale=2; ($a + $b + $c) / 2\" | bc)\n  local area=$(echo \"scale=2; sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c))\" | bc)\n  echo $area", "    # Write your\
    \ code here\n    # You can use the following command to round a number to 2 decimal\
    \ places:\n    # printf \"%.2f\" $number\n    #\n    # You can use the following\
    \ command to check if two numbers are integers:\n    # [[ $number =~ ^-?[0-9]+$\
    \ ]]\n    #\n    # You can use the following command to check if a number is greater\
    \ than another number:\n    # [[ $number1 -gt $number2 ]]\n    #\n    # You can\
    \ use the following command to check if a number is less than another number:\n\
    \    # [[ $number1 -lt $number2 ]]\n    #\n    # You can use the following command\
    \ to check if a number is equal to another number:\n    # [[ $number1 -eq $number2\
    \ ]]\n    #\n    # You can use the following command to check if a number is not\
    \ equal to another number:\n    # [[ $number1 -ne $number2 ]]\n    #\n    # You\
    \ can use the following command to check if a number is greater than or equal\
    \ to another number:\n    # [[ $number1 -ge $number2 ]]\n    #\n    # You can\
    \ use the following command to check if a number is less than or equal to another\
    \ number:\n    # [[ $number1 -le $number2 ]]\n    #\n    # You can use the following\
    \ command to check if a number is positive:\n    # [[ $number -gt 0 ]]\n    #\n\
    \    # You can use the following command to check if a number is negative:\n \
    \   # [[ $number -lt 0 ]]\n    #\n    # You can use the following command to check\
    \ if a number is zero:\n    # [[ $number -eq 0 ]]\n    #\n    # You can use the\
    \ following command to check if a number is non-zero:\n    # [[ $number -ne 0\
    \ ]]\n    #\n    # You can use the following command to check if a number is positive\
    \ or zero:\n    # [[ $number -ge 0 ]]\n    #\n    # You can use the following\
    \ command to check if a number is negative or zero:\n    # [[ $number -le 0 ]]\n\
    \    #\n    # You can use the following command to check if a", "    if [[ $1\
    \ -eq $2 ]] && [[ $2 -eq $3 ]]; then\n        echo \"$(echo \"scale=2; sqrt(3)\
    \ / 4 * $1 * $1\" | bc)\"\n    elif [[ $1 -eq $2 ]] || [[ $2 -eq $3 ]] || [[ $1\
    \ -eq $3 ]]; then\n        echo \"$(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1\
    \ + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\"\n    else\n   \
    \     echo \"-1\"\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0\
    \ ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2; 1/4 * sqrt(($1\
    \ + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3))\" | bc)\n  \
    \      else\n            echo $(echo \"scale=2; 1/4 * sqrt(($1 + $2 + $3) * ($1\
    \ + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3))\" | bc)\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "    # Write your code here\n    if [ $# -ne 3\
    \ ]; then\n        echo \"Invalid number of arguments\"\n        return 1\n  \
    \  fi\n    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 is not an\
    \ integer\"\n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n \
    \       echo \"Argument 2 is not an integer\"\n        return 1\n    fi\n    if\
    \ ! [[ $3 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 3 is not an integer\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 -o $2 -le 0 -o $3 -le 0 ]; then\n\
    \        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -ge $2 -a $1 -ge $3\
    \ ]; then\n        if [ $1 -lt $2+$3 ]; then\n            echo \"scale=2; sqrt($1*$1\
    \ - ($2*$2 + $3*$3)/4)\" | bc\n            return 0\n        fi\n    elif [ $2\
    \ -ge $1 -a $2 -ge $3 ]; then\n        if [ $2 -lt $1+$3 ]; then\n           \
    \ echo \"scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc\n            return 0\n\
    \        fi\n    elif [ $3 -ge $1 -a $3 -ge $2 ]; then\n        if [ $3 -lt $1+$2\
    \ ]; then\n            echo \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\" | bc\n\
    \            return 0\n        fi\n    fi\n    echo \"-1\"\n    return 0", " \
    \   if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n        echo $(echo \"scale=2; sqrt(3)\
    \ / 4 * $1 * $1\" | bc)\n    elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n\
    \        echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2\
    \ + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n    else\n        echo \"-1\"\n    fi",
  "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[ $1 -lt $2+$3\
    \ && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n            s=$(echo \"scale=2; ($1+$2+$3)/2\"\
    \ | bc)\n            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo $area\n        else\n            echo \"-1\"\n     \
    \   fi\n    else\n        echo \"-1\"\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        fi\n    else\n        echo\
    \ \"-1\"\n    fi", "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        fi\n    else\n        echo \"\
    -1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        return 1\n    fi\n    local a=$1\n    local b=$2\n    local\
    \ c=$3\n    if [ $a -le 0 ] || [ $b -le 0 ] || [ $c -le 0 ]; then\n        echo\
    \ \"-1\"\n        return 0\n    fi\n    if [ $a -ge $b ] && [ $a -ge $c ]; then\n\
    \        if [ $((a+b)) -le $c ]; then\n            echo \"-1\"\n            return\
    \ 0\n        fi\n    elif [ $b -ge $a ] && [ $b -ge $c ]; then\n        if [ $((b+a))\
    \ -le $c ]; then\n            echo \"-1\"\n            return 0\n        fi\n\
    \    elif [ $c -ge $a ] && [ $c -ge $b ]; then\n        if [ $((c+a)) -le $b ];\
    \ then\n            echo \"-1\"\n            return 0\n        fi\n    fi\n  \
    \  local s=$((a+b+c))\n    local area=$(echo \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\"\
    \ | bc)\n    echo $area", "  if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ];\
    \ then\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      echo $(echo \"scale=2;\
    \ sqrt(3) / 4 * $1 * $1\" | bc)\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [\
    \ $1 -eq $3 ]; then\n      echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \    else\n      echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n    fi\n\
    \  else\n    echo \"-1\"\n  fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]];\
    \ then\n        if [[ $1 -lt $2+$3 && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n\
    \            s=$(echo \"scale=2;($1+$2+$3)/2\" | bc)\n            area=$(echo\
    \ \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n            echo $area\n\
    \        else\n            echo \"-1\"\n        fi\n    else\n        echo \"\
    -1\"\n    fi", "    # Your code here\n    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <side1> <side2> <side3>\"\n        exit 1\n    fi\n    if [ $1 -le\
    \ 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        exit\
    \ 0\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n\
    \        exit 0\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -gt $2 ] &&\
    \ [ $1 -gt $3 ]; then\n        if [ $1 -lt $2+$3 ]; then\n            s=$(echo\
    \ \"scale=2; ($2+$3+$1)/2\" | bc)\n            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo \"$area\"\n            exit 0\n        else\n      \
    \      echo \"-1\"\n            exit 0\n        fi\n    fi\n    if [ $2 -gt $1\
    \ ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt $1+$3 ]; then\n            s=$(echo\
    \ \"scale=2; ($1+$3+$2)/2\" | bc)\n            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo \"$area\"\n            exit 0\n        else\n      \
    \      echo \"-1\"\n            exit 0\n        fi\n    fi\n    if [ $3 -gt $1\
    \ ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $1+$2 ]; then\n            s=$(echo\
    \ \"scale=2; ($1+$2+$3)/2\" | bc)\n            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo \"$area", "    if [ $# -ne 3 ]; then\n        echo \"\
    Usage: $0 <integer> <integer> <integer>\"\n        exit 1\n    fi\n    if [ $1\
    \ -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n       \
    \ exit 1\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"\
    -1\"\n        exit 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq\
    \ $3 ]; then\n        echo \"-1\"\n        exit 1\n    fi\n    if [ $1 -gt $2\
    \ ] && [ $1 -gt $3 ]; then\n        if [ $(( $1 + $2 )) -gt $3 ]; then\n     \
    \       echo \"$(( $2 * $3 / 2 ))\"\n            exit 1\n        else\n      \
    \      echo \"-1\"\n            exit 1\n        fi\n    fi\n    if [ $2 -gt $1\
    \ ] && [ $2 -gt $3 ]; then\n        if [ $(( $2 + $3 )) -gt $1 ]; then\n     \
    \       echo \"$(( $1 * $3 / 2 ))\"\n            exit 1\n        else\n      \
    \      echo \"-1\"\n            exit 1\n        fi\n    fi\n    if [ $3 -gt $1\
    \ ] && [ $3 -gt $2 ]; then\n        if [ $(( $3 + $1 )) -gt $2 ]; then\n     \
    \       echo \"$(( $1 * $2 / 2 ))\"\n            exit 1\n        else\n      \
    \      echo \"-1\"\n            exit 1\n        fi\n    fi", "    # TODO: Implement\
    \ this function\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n \
    \       if [ $(($1 + $2)) -gt $3 ] && [ $(($1 + $3)) -gt $2 ] && [ $(($2 + $3))\
    \ -gt $1 ]; then\n            s=$(($1 + $2 + $3))\n            s=$(($s / 2))\n\
    \            area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\"\
    \ | bc)\n            echo $area\n        else\n            echo \"-1\"\n     \
    \   fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4\
    \ * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        else\n            echo -1\n        fi\n    else\n        echo -1\n  \
    \  fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\
    \n        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0\
    \ ]; then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1 -ge $2 ]\
    \ && [ $1 -ge $3 ]; then\n        if [ $1 -lt $(( $2 + $3 )) ]; then\n       \
    \     echo \"$(echo \"scale=2; sqrt($(( $1 * $1 + $2 * $2 - $3 * $3 )) * \\\n\
    \                ($(( $1 * $1 + $3 * $3 - $2 * $2 )) ) * \\\n                ($((\
    \ $2 * $2 + $3 * $3 - $1 * $1 )) )) / 4\" | bc)\"\n            return 0\n    \
    \    fi\n    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -lt $((\
    \ $1 + $3 )) ]; then\n            echo \"$(echo \"scale=2; sqrt($(( $1 * $1 +\
    \ $2 * $2 - $3 * $3 )) * \\\n                ($(( $1 * $1 + $3 * $3 - $2 * $2\
    \ )) ) * \\\n                ($(( $2 * $2 + $3 * $3 - $1 * $1 )) )) / 4\" | bc)\"\
    \n            return 0\n        fi\n    elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n\
    \        if [ $3 -lt $(( $1 + $2 )) ]; then\n            echo \"$(echo \"scale=2;\
    \ sqrt($(( $1 * $1 + $2 * $2 - $3 * $3 )) * \\\n                ($(( $1 * $1 +\
    \ $3 * $3 - $2 * $2 )) ) * \\\n                ($(( $2 * $2 + $3 * $3 - $1 * $1\
    \ )) )) / 4\" | bc)\"\n            return 0\n        fi\n    fi\n    echo \"-1\"\
    \n    return 1", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        exit 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0\
    \ ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if\
    \ [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        exit 0\n\
    \    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n      \
    \  echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ];\
    \ then\n        if [ $1 -lt $(( $2 + $3 )) ]; then\n            echo \"$(echo\
    \ \"scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4)\" | bc)\"\n            exit 0\n \
    \       fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [\
    \ $2 -lt $(( $1 + $3 )) ]; then\n            echo \"$(echo \"scale=2; sqrt($2*$2\
    \ - ($1*$1 + $3*$3)/4)\" | bc)\"\n            exit 0\n        fi\n    fi\n   \
    \ if [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $(( $1 + $2 ))\
    \ ]; then\n            echo \"$(echo \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\"\
    \ | bc)\"\n            exit 0\n        fi\n    fi\n    echo \"-1\"", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n     \
    \   return 1\n    fi\n    local side1=$1\n    local side2=$2\n    local side3=$3\n\
    \    local s=$(echo \"scale=2; ($side1 + $side2 + $side3) / 2\" | bc)\n    local\
    \ area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s - $side2) * ($s - $side3))\"\
    \ | bc)\n    if [ $(echo \"$area < 0\" | bc) -eq 1 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"$area\"\n    fi", '    # Write your code here', " \
    \   # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0\
    \ ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3)*($1^2)/4\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n        else\n            echo $(echo \"scale=2; sqrt((($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/16)\"\
    \ | bc)\n        fi\n    else\n        echo -1\n    fi", "    if [ $# -ne 3 ];\
    \ then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n\
    \    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo\
    \ \"-1\"\n        return 1\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n\
    \        if [ $(( $1 + $2 )) -le $3 ]; then\n            echo \"-1\"\n       \
    \     return 1\n        fi\n    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n  \
    \      if [ $(( $2 + $3 )) -le $1 ]; then\n            echo \"-1\"\n         \
    \   return 1\n        fi\n    elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n    \
    \    if [ $(( $3 + $1 )) -le $2 ]; then\n            echo \"-1\"\n           \
    \ return 1\n        fi\n    fi\n    s=$(( ($1 + $2 + $3) / 2 ))\n    area=$(echo\
    \ \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo \"\
    $area\"", "    # your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt\
    \ 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo\
    \ \"Equilateral Triangle\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1\
    \ -eq $3 ]; then\n            echo \"Isosceles Triangle\"\n        else\n    \
    \        echo \"Scalene Triangle\"\n        fi\n    else\n        echo \"Not a\
    \ Triangle\"\n    fi", "    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc\n    elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n        echo \"scale=2; sqrt(3) / 4 * $1 * $2\"\
    \ | bc\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4\
    \ * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        else\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [[ $1 -eq $2 ]] && [[ $2 -eq $3 ]]; then\n        echo $(echo \"scale=2;\
    \ sqrt(3) / 4 * $1 * $1\" | bc)\n    elif [[ $1 -eq $2 ]] || [[ $2 -eq $3 ]] ||\
    \ [[ $1 -eq $3 ]]; then\n        echo $(echo \"scale=2; sqrt(($1 + $2 + $3) *\
    \ ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n    else\n \
    \       echo -1\n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n\
    \        if [[ $1 -lt $2+$3 && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n       \
    \     area=$(echo \"scale=2; sqrt($1*$1+$2*$2-$3*$3)*sqrt($1*$1+$3*$3-$2*$2)*sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc)\n            echo $area\n        else\n            echo \"-1\"\n     \
    \   fi\n    else\n        echo \"-1\"\n    fi", "    # your code here\n    if\
    \ [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1\
    \ * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ];\
    \ then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n   \
    \     else\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"1\"\n   \
    \     elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n           \
    \ echo \"2\"\n        else\n            echo \"3\"\n        fi\n    else\n   \
    \     echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage:\
    \ $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1 -le 0 ]\
    \ || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        return 1\n\
    \    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt $((\
    \ $2 + $3 )) ]; then\n            echo \"$(echo \"scale=2; sqrt($1*$1 - ($2*$2\
    \ + $3*$3)/4)\" | bc)\"\n            return 0\n        fi\n    elif [ $2 -gt $1\
    \ ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt $(( $1 + $3 )) ]; then\n     \
    \       echo \"$(echo \"scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc)\"\n \
    \           return 0\n        fi\n    elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n\
    \        if [ $3 -lt $(( $1 + $2 )) ]; then\n            echo \"$(echo \"scale=2;\
    \ sqrt($3*$3 - ($1*$1 + $2*$2)/4)\" | bc)\"\n            return 0\n        fi\n\
    \    fi\n    echo \"-1\"\n    return 1", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]\
    \ && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n   \
    \         echo $(echo \"scale=2;sqrt(3)/4*$1*$1\" | bc)\n        elif [ $1 -eq\
    \ $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            if [ $1 -eq $2 ];\
    \ then\n                echo $(echo \"scale=2;0.5*$1*$3\" | bc)\n            elif\
    \ [ $2 -eq $3 ]; then\n                echo $(echo \"scale=2;0.5*$2*$1\" | bc)\n\
    \            else\n                echo $(echo \"scale=2;0.5*$3*$2\" | bc)\n \
    \           fi\n        else\n            if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n\
    \                if [ $2 -gt $3 ]; then\n                    echo $(echo \"scale=2;0.5*$3*$2\"\
    \ | bc)\n                else\n                    echo $(echo \"scale=2;0.5*$2*$3\"\
    \ | bc)\n                fi\n            elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n                if [ $1 -gt $3 ]; then\n                    echo $(echo\
    \ \"scale=2;0.5*$3*$1\" | bc)\n                else\n                    echo\
    \ $(echo \"scale=2;0.5*$1*$3\" | bc)\n                fi\n            else\n \
    \               if [ $1 -gt $2 ]; then\n                    echo $(echo \"scale=2;0.5*$2*$1\"\
    \ | bc)\n                else\n                    echo $(echo \"scale=2;0.5*$1*$2\"\
    \ | bc)\n                fi\n            fi\n        fi\n    else\n        echo\
    \ \"-1\"\n    fi", "  # your code here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [\
    \ $3 -lt 0 ]; then\n    echo \"-1\"\n  elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [\
    \ $3 -eq 0 ]; then\n    echo \"-1\"\n  elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \    echo \"-1\"\n  elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \    echo \"-1\"\n  elif [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n    if [ $1 -gt\
    \ $2 + $3 ]; then\n      echo \"-1\"\n    else\n      echo $(echo \"scale=2; sqrt($1*$1\
    \ - ($2*$2 + $3*$3)/4)\" | bc)\n    fi\n  elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n    if [ $2 -gt $1 + $3 ]; then\n      echo \"-1\"\n    else\n      echo\
    \ $(echo \"scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc)\n    fi\n  elif [\
    \ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n    if [ $3 -gt $1 + $2 ]; then\n      echo\
    \ \"-1\"\n    else\n      echo $(echo \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\"\
    \ | bc)\n    fi\n  fi", "    # Write your code here\n    if [ $1 -lt 0 ] || [\
    \ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq 0 ]\
    \ || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 ] ||\
    \ [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n    elif [ $1 -gt\
    \ $2 ] && [ $1 -gt $3 ]; then\n        if [ $(( $1 + $2 )) -gt $3 ]; then\n  \
    \          echo \"$(echo \"scale=2; sqrt($1*$1+$2*$2)\" | bc)\"\n        else\n\
    \            echo \"-1\"\n        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n        if [ $(( $2 + $3 )) -gt $1 ]; then\n            echo \"$(echo\
    \ \"scale=2; sqrt($2*$2+$3*$3)\" | bc)\"\n        else\n            echo \"-1\"\
    \n        fi\n    elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $((\
    \ $3 + $1 )) -gt $2 ]; then\n            echo \"$(echo \"scale=2; sqrt($3*$3+$1*$1)\"\
    \ | bc)\"\n        else\n            echo \"-1\"\n        fi\n    fi", "    #\
    \ write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            area=$(echo \"scale=2;\
    \ sqrt(3) / 4 * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] ||\
    \ [ $1 -eq $3 ]; then\n            area=$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\"\
    \ | bc)\n        else\n            area=$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\"\
    \ | bc)\n        fi\n    else\n        area=-1\n    fi\n    echo $area", "   \
    \ # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ];\
    \ then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\
    \n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n       \
    \     echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n       \
    \ fi\n    else\n        echo \"Not a triangle\"\n    fi", "    # Write your code\
    \ here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if\
    \ [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)\
    \ / 4 * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq\
    \ $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        else\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    a=$1\n    b=$2\n    c=$3\n    if [ $a -gt 0 ] && [ $b -gt 0 ] && [ $c -gt\
    \ 0 ]; then\n        if [ $a -eq $b ] && [ $b -eq $c ]; then\n            echo\
    \ \"Equilateral\"\n        elif [ $a -eq $b ] || [ $b -eq $c ] || [ $a -eq $c\
    \ ]; then\n            echo \"Isosceles\"\n        else\n            echo \"Scalene\"\
    \n        fi\n    else\n        echo \"Invalid\"\n    fi", "    if [ $# -ne 3\
    \ ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return\
    \ 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n     \
    \   echo \"-1\"\n        return 0\n    fi\n    if [ $1 -ge $2 + $3 ] || [ $2 -ge\
    \ $1 + $3 ] || [ $3 -ge $1 + $2 ]; then\n        echo \"-1\"\n        return 0\n\
    \    fi\n    # Heron's formula\n    # https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    local s=$(echo \"scale=2; ($1 + $2 + $3) / 2\" | bc)\n    local area=$(echo\
    \ \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n    echo $area",
  "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1 -gt $2 ] &&\
    \ [ $1 -gt $3 ]; then\n        if [ $1 -lt $(( $2 + $3 )) ]; then\n          \
    \  echo \"$(echo \"scale=2; sqrt($(( $2 * $2 + $3 * $3 - $1 * $1 )) * ($(( $2\
    \ * $2 + $3 * $3 - $1 * $1 )) - 2 * $2 * $3))\" | bc)\"\n            return 0\n\
    \        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt\
    \ $(( $1 + $3 )) ]; then\n            echo \"$(echo \"scale=2; sqrt($(( $1 * $1\
    \ + $3 * $3 - $2 * $2 )) * ($(( $1 * $1 + $3 * $3 - $2 * $2 )) - 2 * $1 * $3))\"\
    \ | bc)\"\n            return 0\n        fi\n    elif [ $3 -gt $1 ] && [ $3 -gt\
    \ $2 ]; then\n        if [ $3 -lt $(( $1 + $2 )) ]; then\n            echo \"\
    $(echo \"scale=2; sqrt($(( $1 * $1 + $2 * $2 - $3 * $3 )) * ($(( $1 * $1 + $2\
    \ * $2 - $3 * $3 )) - 2 * $1 * $2))\" | bc)\"\n            return 0\n        fi\n\
    \    fi\n    echo \"-1\"\n    return 1", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1\
    \ -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n       \
    \ return 1\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [\
    \ $1 -lt $(( $2 + $3 )) ]; then\n            echo $(echo \"scale=2; sqrt($1*$1\
    \ - (0.25*($2*$2 + $3*$3 - $1*$1))*(0.25*($2*$2 + $3*$3 - $1*$1)))\" | bc)\n \
    \           return 0\n        fi\n    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n\
    \        if [ $2 -lt $(( $1 + $3 )) ]; then\n            echo $(echo \"scale=2;\
    \ sqrt($2*$2 - (0.25*($1*$1 + $3*$3 - $2*$2))*(0.25*($1*$1 + $3*$3 - $2*$2)))\"\
    \ | bc)\n            return 0\n        fi\n    elif [ $3 -ge $1 ] && [ $3 -ge\
    \ $2 ]; then\n        if [ $3 -lt $(( $1 + $2 )) ]; then\n            echo $(echo\
    \ \"scale=2; sqrt($3*$3 - (0.25*($1*$1 + $2*$2 - $3*$3))*(0.25*($1*$1 + $2*$2\
    \ - $3*$3)))\" | bc)\n            return 0\n        fi\n    fi\n    echo \"-1\"\
    \n    return 1", "    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"\
    Equilateral\"\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \        echo \"Isosceles\"\n    else\n        echo \"Scalene\"\n    fi", "  #\
    \ your code here\n  if [ $1 -lt 0 -o $2 -lt 0 -o $3 -lt 0 ]; then\n    echo \"\
    -1\"\n  elif [ $1 -eq 0 -o $2 -eq 0 -o $3 -eq 0 ]; then\n    echo \"-1\"\n  elif\
    \ [ $1 -eq $2 -a $2 -eq $3 ]; then\n    echo \"-1\"\n  elif [ $1 -eq $2 -o $2\
    \ -eq $3 -o $1 -eq $3 ]; then\n    echo \"-1\"\n  elif [ $1 -gt $2 -a $1 -gt $3\
    \ ]; then\n    if [ $1 -lt $(($2 + $3)) ]; then\n      echo \"$(echo \"scale=2;\
    \ sqrt($(($2 * $2 + $3 * $3 - $1 * $1)) * $(($2 * $2 + $3 * $3 - $1 * $1)) * $(($2\
    \ * $2 + $3 * $3 - $1 * $1)) / 16)\" | bc)\"\n    else\n      echo \"-1\"\n  \
    \  fi\n  elif [ $2 -gt $1 -a $2 -gt $3 ]; then\n    if [ $2 -lt $(($1 + $3)) ];\
    \ then\n      echo \"$(echo \"scale=2; sqrt($(($1 * $1 + $3 * $3 - $2 * $2)) *\
    \ $(($1 * $1 + $3 * $3 - $2 * $2)) * $(($1 * $1 + $3 * $3 - $2 * $2)) / 16)\"\
    \ | bc)\"\n    else\n      echo \"-1\"\n    fi\n  elif [ $3 -gt $1 -a $3 -gt $2\
    \ ]; then\n    if [ $3 -lt $(($1 + $2)) ]; then\n      echo \"$(echo \"scale=2;\
    \ sqrt($(($1 * $1 + $2 * $2 - $3 * $3)) * $(($1 * $1 + $2 * $2 - $3 * $3)) * $(($1\
    \ * $1 + $2 * $2 - $3 * $3)) / 16)\" | bc)\"\n    else\n      echo", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n     \
    \   return 1\n    fi\n    if [[ $1 -le 0 || $2 -le 0 || $3 -le 0 ]]; then\n  \
    \      echo \"-1\"\n        return 0\n    fi\n    if [[ $1 -gt $2+$3 || $2 -gt\
    \ $1+$3 || $3 -gt $1+$2 ]]; then\n        echo \"-1\"\n        return 0\n    fi\n\
    \    s=$(echo \"scale=2; ($1+$2+$3)/2\" | bc)\n    area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n    echo $area", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -lt\
    \ $2 + $3 ] && [ $2 -lt $1 + $3 ] && [ $3 -lt $1 + $2 ]; then\n            echo\
    \ \"scale=2; sqrt($1*$1+$2*$2-$3*$3)*sqrt($1*$1+$3*$3-$2*$2)*sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc\n        else\n            echo \"-1\"\n        fi\n    else\n        echo\
    \ \"-1\"\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\
    \n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n       \
    \     echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n       \
    \ fi\n    else\n        echo \"Not a triangle\"\n    fi", "    if [ $1 -gt 0 ]\
    \ && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n        else\n  \
    \          echo $(echo \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n        fi\n\
    \    else\n        echo \"-1\"\n    fi", "    if [[ $# -ne 3 ]]; then\n      \
    \  echo \"Usage: $(basename $0) <integer> <integer> <integer>\"\n        return\
    \ 1\n    fi\n    local a=$1\n    local b=$2\n    local c=$3\n    local s=$(echo\
    \ \"scale=2; ($a + $b + $c) / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c))\" | bc)\n    if [[ $area =~ ^[0-9]+\\.[0-9]{2}$\
    \ ]]; then\n        echo $area\n    else\n        echo \"-1\"\n    fi", "    local\
    \ a=$1\n    local b=$2\n    local c=$3\n    local s=$(echo \"scale=2; ($a+$b+$c)/2\"\
    \ | bc)\n    local area=$(echo \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\" |\
    \ bc)\n    if [ $(echo \"$area > 0\" | bc) -eq 1 ]; then\n        echo \"$area\"\
    \n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n    if\
    \ [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n  \
    \  elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\
    \n    elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n    elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n\
    \    elif [ $1 -lt $2 ] && [ $1 -lt $3 ]; then\n        if [ $1 -gt $2+$3 ]; then\n\
    \            echo \"-1\"\n        else\n            echo \"$(echo \"scale=2; sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc)\"\n        fi\n    elif [ $2 -lt $1 ] && [ $2 -lt $3 ]; then\n       \
    \ if [ $2 -gt $1+$3 ]; then\n            echo \"-1\"\n        else\n         \
    \   echo \"$(echo \"scale=2; sqrt($1*$1+$3*$3-$2*$2)/4\" | bc)\"\n        fi\n\
    \    elif [ $3 -lt $1 ] && [ $3 -lt $2 ]; then\n        if [ $3 -gt $1+$2 ]; then\n\
    \            echo \"-1\"\n        else\n            echo \"$(echo \"scale=2; sqrt($1*$1+$2*$2-$3*$3)/4\"\
    \ | bc)\"\n        fi\n    fi", "    # Write your code here\n    if [ $1 -gt 0\
    \ ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] ||\
    \ [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n     \
    \   else\n            echo \"Scalene\"\n        fi\n    else\n        echo \"\
    Not a triangle\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0\
    \ <side1> <side2> <side3>\"\n        return 1\n    fi\n    local side1=$1\n  \
    \  local side2=$2\n    local side3=$3\n    local s=$(echo \"scale=2; ($side1 +\
    \ $side2 + $side3) / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s\
    \ - $side1) * ($s - $side2) * ($s - $side3))\" | bc)\n    if [ $(echo \"$area\
    \ > 0\" | bc) -eq 1 ]; then\n        echo $area\n    else\n        echo \"-1\"\
    \n    fi", "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] &&\
    \ [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      \
    \      echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        elif [ $1\
    \ -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo \"\
    scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        fi\n    else\n        echo\
    \ \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        return 1\n    fi\n    local side1=$1\n    local side2=$2\n\
    \    local side3=$3\n    local s=$(echo \"scale=2; ($side1 + $side2 + $side3)\
    \ / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s\
    \ - $side2) * ($s - $side3))\" | bc)\n    if [ $(echo \"$area < 0\" | bc) -eq\
    \ 1 ]; then\n        echo \"-1\"\n    else\n        echo \"$area\"\n    fi", " \
    \   # Write your code here\n    # To print results to the standard output you\
    \ can use echo\n    # Example: echo \"Hello world\"\n    a=$1\n    b=$2\n    c=$3\n\
    \    if [ $a -gt 0 ] && [ $b -gt 0 ] && [ $c -gt 0 ]; then\n        if [ $a -eq\
    \ $b ] && [ $b -eq $c ]; then\n            echo $(echo \"scale=2;sqrt(3)/4*$a*$a\"\
    \ | bc)\n        elif [ $a -eq $b ] || [ $b -eq $c ] || [ $a -eq $c ]; then\n\
    \            if [ $a -eq $b ]; then\n                echo $(echo \"scale=2;1/2*$a*$c\"\
    \ | bc)\n            elif [ $b -eq $c ]; then\n                echo $(echo \"\
    scale=2;1/2*$b*$a\" | bc)\n            else\n                echo $(echo \"scale=2;1/2*$c*$b\"\
    \ | bc)\n            fi\n        else\n            p=$(echo \"scale=2;1/2*($a+$b+$c)\"\
    \ | bc)\n            echo $(echo \"scale=2;sqrt($p*($p-$a)*($p-$b)*($p-$c))\"\
    \ | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", '    # Write your
    code here', "    # TODO: implement this function\n    return", "    # TODO: Write\
    \ your code here\n    # Hint: Use bc to calculate the area of a triangle\n   \
    \ #       and use printf to format the output\n    #       For example, printf\
    \ \"%.2f\" 6.0 will print 6.00\n    #       You can use the following command\
    \ to get the area of a triangle\n    #       echo \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\"\
    \ | bc\n    #       where $s=($a+$b+$c)/2\n    #       and $a, $b, $c are the\
    \ three sides of the triangle\n    #       You can use the following command to\
    \ round a number\n    #       printf \"%.2f\" 6.0 will print 6.00\n    #     \
    \  You can use the following command to check if a number is an integer\n    #\
    \       echo $a | grep -E -q '^[0-9]+$'\n    #       If the number is an integer,\
    \ the command will return 0 (true)\n    #       If the number is not an integer,\
    \ the command will return 1 (false)\n    #       You can use the following command\
    \ to check if a number is a float\n    #       echo $a | grep -E -q '^[0-9]+([.][0-9]+)?$'\n\
    \    #       If the number is a float, the command will return 0 (true)\n    #\
    \       If the number is not a float, the command will return 1 (false)\n    #\
    \       You can use the following command to check if a number is a float\n  \
    \  #       and the number is greater than 0\n    #       echo $a | grep -E -q\
    \ '^[0-9]+([.][0-9]+)?$' && echo $a | grep -E -q '^[.][0-9]+$' && echo $a | grep\
    \ -E -q '^[0-9]+([.][0-9]+)?$' && echo $a | grep -E -q '^[0-9]+$'\n    #     \
    \  If the number is a float and the number is greater than 0, the command will\
    \ return 0 (true)\n    #       If the number is not a float or the number is not\
    \ greater", "    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"1.73\"\
    \n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo\
    \ \"0.5\"\n    else\n        echo \"-1\"\n    fi", "    # Your code here\n   \
    \ if [[ $1 -eq $2 ]] && [[ $2 -eq $3 ]]; then\n        echo $(echo \"scale=2;sqrt(3)*$1^2/4\"\
    \ | bc)\n    elif [[ $1 -eq $2 ]] || [[ $2 -eq $3 ]] || [[ $1 -eq $3 ]]; then\n\
    \        echo $(echo \"scale=2;sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n    else\n        echo $(echo \"scale=2;sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\"\
    \ | bc)\n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n     \
    \   if [[ $1 + $2 -gt $3 && $1 + $3 -gt $2 && $2 + $3 -gt $1 ]]; then\n      \
    \      echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)*sqrt($1*$1 + $3*$3 - $2*$2)*sqrt($2*$2\
    \ + $3*$3 - $1*$1)/4\" | bc\n        else\n            echo \"-1\"\n        fi\n\
    \    else\n        echo \"-1\"\n    fi", "    # Write your code here\n    if [\
    \ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] &&\
    \ [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * ($1 * $1)\"\
    \ | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * ($1 * $1)\" | bc)\n        else\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * ($1 * $1)\" | bc)\n        fi\n\
    \    else\n        echo \"-1\"\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ]\
    \ && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n   \
    \         echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        elif [\
    \ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        fi\n    else\n        echo\
    \ -1\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n  \
    \      if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2;\
    \ sqrt(3)/4 * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] ||\
    \ [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\"\
    \ | bc)\n        else\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\"\
    \ | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your\
    \ code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2;\
    \ sqrt(3) / 4 * ($1 * $1)\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ]\
    \ || [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2; 1 / 4 * sqrt((($1\
    \ + $2 + $3) * ($1 + $2 - $3) * ($1 + $3 - $2) * ($2 + $3 - $1)))\" | bc)\n  \
    \      else\n            echo $(echo \"scale=2; 1 / 4 * sqrt((($1 + $2 + $3) *\
    \ ($1 + $2 - $3) * ($1 + $3 - $2) * ($2 + $3 - $1)))\" | bc)\n        fi\n   \
    \ else\n        echo \"-1\"\n    fi", "  if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [\
    \ $3 -gt 0 ]; then\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      echo \"\
    Equilateral\"\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \      echo \"Isosceles\"\n    else\n      echo \"Scalene\"\n    fi\n  else\n\
    \    echo \"Not a triangle\"\n  fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt\
    \ 0 ]]; then\n        if [[ $1 -lt $2+$3 && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n\
    \            echo $(echo \"scale=2; sqrt($1*$1+$2*$2-$3*$3)*$1/4\" | bc)\n   \
    \     else\n            echo \"-1\"\n        fi\n    else\n        echo \"-1\"\
    \n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] ||\
    \ [ $3 -le 0 ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if [\
    \ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -ge $2 + $3 ]; then\n  \
    \          echo \"-1\"\n            return 0\n        fi\n    elif [ $2 -ge $1\
    \ ] && [ $2 -ge $3 ]; then\n        if [ $2 -ge $1 + $3 ]; then\n            echo\
    \ \"-1\"\n            return 0\n        fi\n    elif [ $3 -ge $1 ] && [ $3 -ge\
    \ $2 ]; then\n        if [ $3 -ge $1 + $2 ]; then\n            echo \"-1\"\n \
    \           return 0\n        fi\n    fi\n    s=$(echo \"scale=2; ($1 + $2 + $3)\
    \ / 2\" | bc)\n    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s\
    \ - $3))\" | bc)\n    echo $area", '  # your code here', "    if [ $# -ne 3 ];\
    \ then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n\
    \    fi\n    local side1=$1\n    local side2=$2\n    local side3=$3\n    if [\
    \ $side1 -le 0 ] || [ $side2 -le 0 ] || [ $side3 -le 0 ]; then\n        echo \"\
    -1\"\n        return 0\n    fi\n    if [ $side1 -ge $side2 ] && [ $side1 -ge $side3\
    \ ]; then\n        if [ $side1 -lt $((side2 + side3)) ]; then\n            local\
    \ p=$((side1 + side2 + side3))\n            local area=$(echo \"scale=2; sqrt($p*($p-2*$side1)*($p-2*$side2)*($p-2*$side3))\"\
    \ | bc)\n            echo $area\n            return 0\n        fi\n    elif [\
    \ $side2 -ge $side1 ] && [ $side2 -ge $side3 ]; then\n        if [ $side2 -lt\
    \ $((side1 + side3)) ]; then\n            local p=$((side1 + side2 + side3))\n\
    \            local area=$(echo \"scale=2; sqrt($p*($p-2*$side1)*($p-2*$side2)*($p-2*$side3))\"\
    \ | bc)\n            echo $area\n            return 0\n        fi\n    elif [\
    \ $side3 -ge $side1 ] && [ $side3 -ge $side2 ]; then\n        if [ $side3 -lt\
    \ $((side1 + side2)) ]; then\n            local p=$((side1 + side2 + side3))\n\
    \            local area=$(echo \"scale=2; sqrt($p*($p-2*$side1)*($p-2*$side2)*($p-2*$side3))\"\
    \ | bc)\n            echo $area\n            return 0\n        fi\n    fi\n  \
    \  echo \"-1\"\n    return 0", "    # Write your code here\n    if [ $1 -gt 0\
    \ ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        else\n      \
    \      echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "    # Write your code here\n    if [ $1 -lt 0\
    \ -o $2 -lt 0 -o $3 -lt 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq 0 -o\
    \ $2 -eq 0 -o $3 -eq 0 ]; then\n        echo \"-1\"\n    elif [ $1 -eq $2 -a $2\
    \ -eq $3 ]; then\n        echo \"-1\"\n    elif [ $1 -gt $2 -a $1 -gt $3 ]; then\n\
    \        if [ $1 -lt $(($2 + $3)) ]; then\n            echo $(echo \"scale=2;\
    \ sqrt($(($1 + $2 + $3)) * $(($1 + $2 - $3)) * $(($1 - $2 + $3)) * $(($2 + $3\
    \ - $1))) / 4\" | bc)\n        else\n            echo \"-1\"\n        fi\n   \
    \ elif [ $2 -gt $1 -a $2 -gt $3 ]; then\n        if [ $2 -lt $(($1 + $3)) ]; then\n\
    \            echo $(echo \"scale=2; sqrt($(($1 + $2 + $3)) * $(($1 + $2 - $3))\
    \ * $(($1 - $2 + $3)) * $(($2 + $3 - $1))) / 4\" | bc)\n        else\n       \
    \     echo \"-1\"\n        fi\n    elif [ $3 -gt $1 -a $3 -gt $2 ]; then\n   \
    \     if [ $3 -lt $(($1 + $2)) ]; then\n            echo $(echo \"scale=2; sqrt($(($1\
    \ + $2 + $3)) * $(($1 + $2 - $3)) * $(($1 - $2 + $3)) * $(($2 + $3 - $1))) / 4\"\
    \ | bc)\n        else\n            echo \"-1\"\n        fi\n    fi", "    # your\
    \ code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    # your code here\n \
    \   if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\
    \n    elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"\
    -1\"\n    elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n   \
    \ elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"\
    -1\"\n    elif [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt $(($2\
    \ + $3)) ]; then\n            echo $(echo \"scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4)\"\
    \ | bc)\n        else\n            echo \"-1\"\n        fi\n    elif [ $2 -gt\
    \ $1 ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt $(($1 + $3)) ]; then\n    \
    \        echo $(echo \"scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc)\n    \
    \    else\n            echo \"-1\"\n        fi\n    elif [ $3 -gt $1 ] && [ $3\
    \ -gt $2 ]; then\n        if [ $3 -lt $(($1 + $2)) ]; then\n            echo $(echo\
    \ \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\" | bc)\n        else\n         \
    \   echo \"-1\"\n        fi\n    fi", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <integer> <integer> <integer>\"\n        return 1\n    fi\n    if\
    \ ! [[ $1 =~ ^[0-9]+$ ]]; then\n        echo \"Argument 1 must be an integer\"\
    \n        return 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"Argument 2 must be an integer\"\n        return 1\n    fi\n    if ! [[ $3\
    \ =~ ^[0-9]+$ ]]; then\n        echo \"Argument 3 must be an integer\"\n     \
    \   return 1\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n\
    \        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -eq $2\
    \ ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n        return\
    \ 0\n    fi\n    if [ $1 -lt $2 ] && [ $1 -lt $3 ]; then\n        if [ $1 -eq\
    \ $(( $2 + $3 )) ]; then\n            echo \"-1\"\n            return 0\n    \
    \    fi\n    fi\n    if [ $2 -lt $1 ] && [ $2 -lt $3 ]; then\n        if [ $2\
    \ -eq $(( $1 + $3 )) ]; then\n            echo \"-1\"\n            return 0\n\
    \        fi\n    fi\n    if [ $3 -lt $1 ] && [ $3 -lt $2 ]; then\n        if [\
    \ $3 -eq $(( $1 + $2 )) ]; then\n            echo \"-1\"\n            return 0\n\
    \        fi\n    fi\n    if [ $1 -lt $2 ] && [ $1 -lt $3 ]; then\n        if [\
    \ $1 -gt $(( $2 + $3 )) ]; then\n            echo \"-1\"\n            return 0\n\
    \        fi\n    fi\n    if [ $2 -lt $1 ] && [ $2 -lt $3 ]; then\n        if [\
    \ $", "    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [\
    \ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4\
    \ * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $2\" | bc)\n  \
    \      else\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $2\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "  # your code here\n  if\
    \ [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n    if [ $1 -eq $2 ] &&\
    \ [ $2 -eq $3 ]; then\n      echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n\
    \    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n      echo $(echo\
    \ \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n    else\n      echo $(echo \"scale=2;\
    \ sqrt(3)/4 * $1 * $1\" | bc)\n    fi\n  else\n    echo \"-1\"\n  fi", "    if\
    \ [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1\
    \ * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ];\
    \ then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n   \
    \     else\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "  if [ $1 -gt 0 ] && [ $2\
    \ -gt 0 ] && [ $3 -gt 0 ]; then\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \      echo \"Equilateral\"\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq\
    \ $3 ]; then\n      echo \"Isosceles\"\n    else\n      echo \"Scalene\"\n   \
    \ fi\n  else\n    echo \"Not a triangle\"\n  fi", "    # your code here\n    if\
    \ [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4*($1*$1)\"\
    \ | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; 1/2*($1+$2+$3)\" | bc)\n        else\n   \
    \         echo $(echo \"scale=2; sqrt($1*$1+$2*$2+$3*$3)\" | bc)\n        fi\n\
    \    else\n        echo \"-1\"\n    fi", "    # Write your code here\n    if [\
    \ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] &&\
    \ [ $2 -eq $3 ]; then\n            echo \"Equilateral Triangle\"\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\
    \ Triangle\"\n        else\n            echo \"Scalene Triangle\"\n        fi\n\
    \    else\n        echo \"Invalid Triangle\"\n    fi", "    if [[ $1 -eq $2 ]]\
    \ && [[ $2 -eq $3 ]]; then\n        echo $(echo \"scale=2; sqrt(3) / 4 * $1^2\"\
    \ | bc)\n    elif [[ $1 -eq $2 ]] || [[ $2 -eq $3 ]] || [[ $1 -eq $3 ]]; then\n\
    \        echo $(echo \"scale=2; sqrt(4 * $1^2 - $2^2) / 4 * $1\" | bc)\n    else\n\
    \        echo $(echo \"scale=2; sqrt($1^2 + $2^2 - $3^2) / 4 * ($1 + $2 + $3)\"\
    \ | bc)\n    fi", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world\"\n    a=$1\n   \
    \ b=$2\n    c=$3\n    if [ $a -gt 0 ] && [ $b -gt 0 ] && [ $c -gt 0 ]; then\n\
    \        if [ $a -lt $b+$c ] && [ $b -lt $a+$c ] && [ $c -lt $a+$b ]; then\n \
    \           s=$(echo \"scale=2; ($a+$b+$c)/2\" | bc)\n            area=$(echo\
    \ \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\" | bc)\n            echo $area\n\
    \        else\n            echo \"-1\"\n        fi\n    else\n        echo \"\
    -1\"\n    fi", "    # Write your code here\n    # You can use the following command\
    \ to round a number to 2 decimal places:\n    # printf \"%.2f\" $number\n    #\n\
    \    # You can use the following command to check if a number is an integer:\n\
    \    # [[ $number =~ ^[0-9]+$ ]]\n    #\n    # You can use the following command\
    \ to check if a number is a float:\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n\
    \    #\n    # You can use the following command to check if a number is a float\
    \ or an integer:\n    # [[ $number =~ ^[0-9]+([.][0-9]+)?$ ]]\n    #\n    # You\
    \ can use the following command to check if a number is a float or an integer\n\
    \    # and is greater than 0:\n    # [[ $number =~ ^[1-9][0-9]*([.][0-9]+)?$ ]]\n\
    \    #\n    # You can use the following command to check if a number is a float\
    \ or an integer\n    # and is less than 0:\n    # [[ $number =~ ^-?[0-9]+([.][0-9]+)?$\
    \ ]]\n    #\n    # You can use the following command to check if a number is a\
    \ float or an integer\n    # and is less than or equal to 0:\n    # [[ $number\
    \ =~ ^-?[0-9]*([.][0-9]+)?$ ]]\n    #\n    # You can use the following command\
    \ to check if a number is a float or an integer\n    # and is greater than or\
    \ equal to 0:\n    # [[ $number =~ ^-?[0-9]*([.][0-9]+)?$ ]]\n    #\n    # You\
    \ can use the following command to check if a number is a float or an integer\n\
    \    # and is less than or equal to 0:\n    # [[ $number =~ ^-?[0-9]*([.][0-9]+)?$\
    \ ]]\n    #\n    # You can use the following command to check if a number is a\
    \ float or an integer\n    # and is greater than or equal to 0:", "    # Write\
    \ your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\
    \ Triangle\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo \"Isosceles Triangle\"\n        else\n            echo \"Scalene\
    \ Triangle\"\n        fi\n    else\n        echo \"Not a Triangle\"\n    fi",
  "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -ge $2 + $3\
    \ ] || [ $2 -ge $1 + $3 ] || [ $3 -ge $1 + $2 ]; then\n        echo \"-1\"\n \
    \       return 0\n    fi\n    s=$(echo \"scale=2;($1+$2+$3)/2\" | bc)\n    area=$(echo\
    \ \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n    echo $area", "  # Write\
    \ your code here\n  # Use echo to output the result\n  #echo \"6.0\"\n  if [ $1\
    \ -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n    if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n      echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\
    \n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n      echo \"\
    $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n    else\n      echo \"-1\"\
    \n    fi\n  else\n    echo \"-1\"\n  fi", "    if [ $# -ne 3 ]; then\n       \
    \ echo \"Usage: $0 <integer> <integer> <integer>\"\n        return 1\n    fi\n\
    \    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\
    \n        return 0\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    \
    \    echo \"-1\"\n        return 0\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3\
    \ ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n        return 0\n    fi\n  \
    \  if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $2 -gt $3 ]; then\n \
    \           if [ $1 -gt $2 + $3 ]; then\n                echo \"-1\"\n       \
    \         return 0\n            fi\n        else\n            if [ $1 -gt $2 +\
    \ $3 ]; then\n                echo \"-1\"\n                return 0\n        \
    \    fi\n        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n   \
    \     if [ $1 -gt $3 ]; then\n            if [ $2 -gt $1 + $3 ]; then\n      \
    \          echo \"-1\"\n                return 0\n            fi\n        else\n\
    \            if [ $2 -gt $1 + $3 ]; then\n                echo \"-1\"\n      \
    \          return 0\n            fi\n        fi\n    fi\n    if [ $3 -gt $1 ]\
    \ && [ $3 -gt $2 ]; then\n        if [ $1 -gt $2 ]; then\n            if [ $3\
    \ -gt $1 + $2 ]; then\n                echo \"-1\"\n                return 0\n\
    \            fi\n        else\n            if [ $3 -gt $1 + $2 ]; then\n     \
    \           echo \"-1\"\n                return 0\n            fi\n        fi\n\
    \    fi\n    s=$(echo \"scale=2; ($1 + $2 + $3) / 2\" | bc)\n    area=$(echo \"\
    scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)", "    # Write your\
    \ code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral Triangle\"\
    \n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n       \
    \     echo \"Isosceles Triangle\"\n        else\n            echo \"Scalene Triangle\"\
    \n        fi\n    else\n        echo \"Invalid Triangle\"\n    fi", "    # your\
    \ code here\n    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        exit 1\n    fi\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [\
    \ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        \
    \    echo \"Equilateral triangle\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3\
    \ ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles triangle\"\n        else\n\
    \            echo \"Scalene triangle\"\n        fi\n    else\n        echo \"\
    Not a triangle\"\n    fi", "    # Write your code here\n    if [ $# -ne 3 ]; then\n\
    \        echo \"Usage: $0 <int> <int> <int>\"\n        exit 1\n    fi\n    if\
    \ [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n  \
    \      exit 0\n    fi\n    if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n\
    \        echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -eq $2\
    \ ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n        exit\
    \ 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt\
    \ $(( $2 + $3 )) ]; then\n            echo \"scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4)\"\
    \ | bc\n            exit 0\n        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt\
    \ $3 ]; then\n        if [ $2 -lt $(( $1 + $3 )) ]; then\n            echo \"\
    scale=2; sqrt($2*$2 - ($1*$1 + $3*$3)/4)\" | bc\n            exit 0\n        fi\n\
    \    fi\n    if [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $((\
    \ $1 + $2 )) ]; then\n            echo \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\"\
    \ | bc\n            exit 0\n        fi\n    fi\n    echo \"-1\"", "    # Your\
    \ code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    if (( $1 + $2 > $3 ))\
    \ && (( $1 + $3 > $2 )) && (( $2 + $3 > $1 )); then\n        echo $(echo \"scale=2;\
    \ sqrt($1*$1 + $2*$2 - 2*$1*$2*c($3))\" | bc -l)\n    else\n        echo \"-1\"\
    \n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        exit 1\n    fi\n    local side1=$1\n    local side2=$2\n\
    \    local side3=$3\n    local s=$(echo \"scale=2; ($side1 + $side2 + $side3)\
    \ / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s\
    \ - $side2) * ($s - $side3))\" | bc)\n    if [ $(echo \"$area > 0\" | bc) -eq\
    \ 1 ]; then\n        echo $area\n    else\n        echo \"-1\"\n    fi", "   \
    \ if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\
    \n        return 1\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0\
    \ ]; then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1 -eq 0 ]\
    \ || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n        return 1\n\
    \    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n  \
    \      return 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]\
    \ && [ $1 -gt $3 ]; then\n        if [ $1 -lt $(($2 + $3)) ]; then\n         \
    \   echo \"scale=2; sqrt($1*$1 - ($2*$2 + $3*$3)/4)\" | bc\n            return\
    \ 0\n        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n       \
    \ if [ $2 -lt $(($1 + $3)) ]; then\n            echo \"scale=2; sqrt($2*$2 - ($1*$1\
    \ + $3*$3)/4)\" | bc\n            return 0\n        fi\n    fi\n    if [ $3 -gt\
    \ $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $(($1 + $2)) ]; then\n    \
    \        echo \"scale=2; sqrt($3*$3 - ($1*$1 + $2*$2)/4)\" | bc\n            return\
    \ 0\n        fi\n    fi\n    echo \"-1\"\n    return 1", "    if [ $1 -gt 0 ]\
    \ && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(3)/4 * $1 * $2\" | bc)\n        else\n      \
    \      echo $(echo \"scale=2; sqrt(3)/4 * $1 * $2\" | bc)\n        fi\n    else\n\
    \        echo -1\n    fi", "    # your code here\n    if [ $1 -gt 0 ] && [ $2\
    \ -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ]\
    \ || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n        else\n     \
    \       echo \"Scalene\"\n        fi\n    else\n        echo \"Not a triangle\"\
    \n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[\
    \ $1 -lt $2+$3 && $2 -lt $1+$3 && $3 -lt $1+$2 ]]; then\n            s=$(echo\
    \ \"scale=2;($1+$2+$3)/2\" | bc)\n            area=$(echo \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo \"$area\"\n        else\n            echo \"-1\"\n \
    \       fi\n    else\n        echo \"-1\"\n    fi", '  # Write your code here',
  "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[ $1 -eq $2 &&\
    \ $2 -eq $3 ]]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\"\
    \ | bc)\n        elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n      \
    \      echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2\
    \ + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt((($1 + $2 + $3) / 2) * (($1 + $2 + $3) / 2 - $1) * (($1 + $2\
    \ + $3) / 2 - $2) * (($1 + $2 + $3) / 2 - $3))\" | bc)\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage:\
    \ $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1 -le 0 ]\
    \ || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        return 0\n\
    \    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -gt $2+$3\
    \ ]; then\n            echo \"-1\"\n            return 0\n        fi\n    elif\
    \ [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -gt $1+$3 ]; then\n  \
    \          echo \"-1\"\n            return 0\n        fi\n    elif [ $3 -ge $1\
    \ ] && [ $3 -ge $2 ]; then\n        if [ $3 -gt $1+$2 ]; then\n            echo\
    \ \"-1\"\n            return 0\n        fi\n    fi\n    # Heron's formula\n  \
    \  s=$(echo \"scale=2; ($1+$2+$3)/2\" | bc)\n    area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n    echo $area", "    # Write your code here\n    if [ $1 -gt 0 ] &&\
    \ [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * ($1 * $1)\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; 1/4 * sqrt((($1 + $2 + $3) * ($1 + $2 - $3) * ($1\
    \ - $2 + $3) * (-$1 + $2 + $3)))\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; 1/4 * sqrt((($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1\
    \ + $2 + $3)))\" | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", " \
    \   # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0\
    \ ]; then\n        if [ $(($1 + $2)) -gt $3 ] && [ $(($1 + $3)) -gt $2 ] && [\
    \ $(($2 + $3)) -gt $1 ]; then\n            s=$(($1 + $2 + $3))\n            s=$(($s\
    \ / 2))\n            area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) *\
    \ ($s - $3))\" | bc)\n            echo $area\n        else\n            echo \"\
    -1\"\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -gt\
    \ $2 ]; then\n            if [ $1 -gt $3 ]; then\n                if [ $1 -lt\
    \ $(( $2 + $3 )) ]; then\n                    echo \"$(echo \"scale=2; sqrt($1*$1+$2*$2-2*$1*$2*cos(acos(($1*$1+$2*$2-$3*$3)/(2*$1*$2))/3.14159265358979323846*180))/4\"\
    \ | bc)\"\n                else\n                    echo \"-1\"\n           \
    \     fi\n            else\n                if [ $3 -lt $(( $1 + $2 )) ]; then\n\
    \                    echo \"$(echo \"scale=2; sqrt($1*$1+$2*$2-2*$1*$2*cos(acos(($1*$1+$2*$2-$3*$3)/(2*$1*$2))/3.14159265358979323846*180))/4\"\
    \ | bc)\"\n                else\n                    echo \"-1\"\n           \
    \     fi\n            fi\n        else\n            if [ $2 -gt $3 ]; then\n \
    \               if [ $2 -lt $(( $1 + $3 )) ]; then\n                    echo \"\
    $(echo \"scale=2; sqrt($1*$1+$2*$2-2*$1*$2*cos(acos(($1*$1+$2*$2-$3*$3)/(2*$1*$2))/3.14159265358979323846*180))/4\"\
    \ | bc)\"\n                else\n                    echo \"-1\"\n           \
    \     fi\n            else\n                if [ $3 -lt $(( $1 + $2 )) ]; then\n\
    \                    echo \"$(echo \"scale=2; sqrt($1*$1+$2*$2-2*$1*$2*cos(acos(($1*$1+$2*$2-$3*$3)/(2*$1*$2))/3.1415926535",
  "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ];\
    \ then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3)/4 * ($1 * $1)\" | bc)\n        elif [ $1 -eq $2 ] || [ $2\
    \ -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4\
    \ * ($1 * $1)\" | bc)\n        else\n            echo $(echo \"scale=2; sqrt(3)/4\
    \ * ($1 * $1)\" | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", " \
    \   local a=$1\n    local b=$2\n    local c=$3\n    local s=$(echo \"scale=2;\
    \ ($a+$b+$c)/2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\"\
    \ | bc)\n    if [ $(echo \"$area > 0\" | bc) -eq 1 ]; then\n        echo \"$area\"\
    \n    else\n        echo \"-1\"\n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3\
    \ -gt 0 ]]; then\n        if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n            echo\
    \ $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        elif [[ $1 -eq $2 ||\
    \ $2 -eq $3 || $1 -eq $3 ]]; then\n            echo $(echo \"scale=2; sqrt(($1\
    \ + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n\
    \        else\n            echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 +\
    \ $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "    # Write your code here\n    if [ $1 -gt 0\
    \ ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq\
    \ $3 ]; then\n            echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\
    \n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n       \
    \     echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n        else\n\
    \            echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n      \
    \  fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n \
    \   if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n\
    \        exit 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        exit 1\n    fi\n    if [ $(($1 + $2)) -le\
    \ $3 ] || [ $(($1 + $3)) -le $2 ] || [ $(($2 + $3)) -le $1 ]; then\n        echo\
    \ \"-1\"\n        exit 1\n    fi\n    s=$(($1 + $2 + $3))\n    s=$(($s / 2))\n\
    \    area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s - $3))\" | bc)\n\
    \    echo $area", "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n        else\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * ($1 * $1)\" | bc)\n        fi\n    else\n        echo\
    \ \"-1\"\n    fi", "    local a=$1\n    local b=$2\n    local c=$3\n    local\
    \ s=$(echo \"scale=2; ($a+$b+$c)/2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s*($s-$a)*($s-$b)*($s-$c))\"\
    \ | bc)\n    if [ $(echo \"$area > 0\" | bc) -eq 1 ]; then\n        echo \"$area\"\
    \n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n    if\
    \ [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 *\
    \ $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        else\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        fi\n\
    \    else\n        echo \"-1\"\n    fi", "  # Write your code here\n  if [ $1\
    \ -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo -1\n  elif [ $1 -eq\
    \ 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n    echo -1\n  elif [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n    echo -1\n  elif [ $1 -eq $2 ] || [ $2 -eq $3 ] ||\
    \ [ $1 -eq $3 ]; then\n    echo -1\n  else\n    s=$(echo \"scale=2; ($1+$2+$3)/2\"\
    \ | bc)\n    area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n\
    \    echo $area\n  fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n\
    \        if [[ $1 + $2 -gt $3 && $1 + $3 -gt $2 && $2 + $3 -gt $1 ]]; then\n \
    \           echo $(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3) * sqrt($1*$1 +\
    \ $3*$3 - $2*$2) * sqrt($2*$2 + $3*$3 - $1*$1) / 4\" | bc)\n        else\n   \
    \         echo \"-1\"\n        fi\n    else\n        echo \"-1\"\n    fi", " \
    \   if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1 -ge $2 + $3\
    \ ] || [ $2 -ge $1 + $3 ] || [ $3 -ge $1 + $2 ]; then\n        echo \"-1\"\n \
    \       return 1\n    fi\n    local s=$(echo \"scale=2; ($1 + $2 + $3) / 2\" |\
    \ bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s - $1) * ($s - $2) * ($s\
    \ - $3))\" | bc)\n    echo $area", "    if [ $# -ne 3 ]; then\n        echo \"\
    Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1 -le\
    \ 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        return\
    \ 0\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -lt\
    \ $2+$3 ]; then\n            echo $(echo \"scale=2; sqrt($1*($1-$2)*($1-$3))\"\
    \ | bc)\n            return 0\n        fi\n    elif [ $2 -ge $1 ] && [ $2 -ge\
    \ $3 ]; then\n        if [ $2 -lt $1+$3 ]; then\n            echo $(echo \"scale=2;\
    \ sqrt($2*($2-$1)*($2-$3))\" | bc)\n            return 0\n        fi\n    elif\
    \ [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -lt $1+$2 ]; then\n  \
    \          echo $(echo \"scale=2; sqrt($3*($3-$1)*($3-$2))\" | bc)\n         \
    \   return 0\n        fi\n    fi\n    echo \"-1\"\n    return 0", "    # Write\
    \ your code here\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n\
    \        echo \"-1\"\n    elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n\
    \        echo \"-1\"\n    elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo\
    \ \"-1\"\n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n   \
    \     echo \"-1\"\n    elif [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [\
    \ $(( $1 + $2 )) -gt $3 ]; then\n            echo \"$(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc)\"\n        else\n            echo \"-1\"\n        fi\n    elif [ $2 -gt\
    \ $1 ] && [ $2 -gt $3 ]; then\n        if [ $(( $2 + $3 )) -gt $1 ]; then\n  \
    \          echo \"$(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc)\"\n        else\n            echo \"-1\"\n        fi\n    elif [ $3 -gt\
    \ $1 ] && [ $3 -gt $2 ]; then\n        if [ $(( $3 + $1 )) -gt $2 ]; then\n  \
    \          echo \"$(echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc)\"\n        else\n            echo \"-1\"\n        fi\n    fi", "    #\
    \ Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n            if [ $(( $2 + $3\
    \ )) -gt $1 ]; then\n                area=$(echo \"scale=2; sqrt($(( $1 + $2 +\
    \ $3 )) * $(( $1 + $2 - $3 )) * $(( $1 - $2 + $3 )) * $(( -$1 + $2 + $3 ))) /\
    \ 4\" | bc)\n                echo \"$area\"\n            else\n              \
    \  echo \"-1\"\n            fi\n        elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n\
    \            if [ $(( $1 + $3 )) -gt $2 ]; then\n                area=$(echo \"\
    scale=2; sqrt($(( $1 + $2 + $3 )) * $(( $1 + $2 - $3 )) * $(( $1 - $2 + $3 ))\
    \ * $(( -$1 + $2 + $3 ))) / 4\" | bc)\n                echo \"$area\"\n      \
    \      else\n                echo \"-1\"\n            fi\n        elif [ $3 -gt\
    \ $1 ] && [ $3 -gt $2 ]; then\n            if [ $(( $1 + $2 )) -gt $3 ]; then\n\
    \                area=$(echo \"scale=2; sqrt($(( $1 + $2 + $3 )) * $(( $1 + $2\
    \ - $3 )) * $(( $1 - $2 + $3 )) * $(( -$1 + $2 + $3 ))) / 4\" | bc)\n        \
    \        echo \"$area\"\n            else\n                echo \"-1\"\n     \
    \       fi\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your\
    \ code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral triangle\"\
    \n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n       \
    \     echo \"Isosceles triangle\"\n        else\n            echo \"Scalene triangle\"\
    \n        fi\n    else\n        echo \"Not a triangle\"\n    fi", "    if [ $#\
    \ -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        exit\
    \ 1\n    fi\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n     \
    \   if [ $1 -lt $2+$3 ] && [ $2 -lt $1+$3 ] && [ $3 -lt $1+$2 ]; then\n      \
    \      s=$(echo \"scale=2; ($1+$2+$3)/2\" | bc)\n            area=$(echo \"scale=2;\
    \ sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n            echo $area\n        else\n\
    \            echo \"-1\"\n        fi\n    else\n        echo \"-1\"\n    fi",
  "    # Write your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ];\
    \ then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2\
    \ -eq $3 ] || [ $1 -eq $3 ]; then\n            if [ $1 -eq $2 ]; then\n      \
    \          echo $(echo \"scale=2; $1 * $3 / 2\" | bc)\n            elif [ $2 -eq\
    \ $3 ]; then\n                echo $(echo \"scale=2; $2 * $1 / 2\" | bc)\n   \
    \         else\n                echo $(echo \"scale=2; $3 * $2 / 2\" | bc)\n \
    \           fi\n        else\n            if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n\
    \                if [ $1 -lt $(($2 + $3)) ]; then\n                    echo $(echo\
    \ \"scale=2; sqrt($1 * $1 - ($2 * $2 + $3 * $3) / 4) * $2 * $3 / 2\" | bc)\n \
    \               else\n                    echo \"-1\"\n                fi\n  \
    \          elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n                if [ $2\
    \ -lt $(($1 + $3)) ]; then\n                    echo $(echo \"scale=2; sqrt($2\
    \ * $2 - ($1 * $1 + $3 * $3) / 4) * $1 * $3 / 2\" | bc)\n                else\n\
    \                    echo \"-1\"\n                fi\n            else\n     \
    \           if [ $3 -lt $(($1 + $2)) ]; then\n                    echo $(echo\
    \ \"scale=2; sqrt($3 * $3 - ($1 * $1 + $2 * $2) / 4) * $1 * $2 / 2\" | bc)\n \
    \               else\n                    echo \"-1\"\n                fi\n  \
    \          fi\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Write\
    \ your code here\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n\
    \        echo \"-1\"\n    else\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n      \
    \  elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo\
    \ \"$(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\"\n        else\n        \
    \    echo \"-1\"\n        fi\n    fi", "    # Write your code here\n    if [ $1\
    \ -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"Equilateral\"\n    elif [ $1\
    \ -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"Isosceles\"\
    \n    else\n        echo \"Scalene\"\n    fi", "  # Write your code here\n  #\
    \ To print results to the standard output you can use echo\n  # Example: echo\
    \ \"Hello world\"\n  if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n \
    \   if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n      echo \"Equilateral triangle\"\
    \n    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n      echo \"\
    Isosceles triangle\"\n    else\n      echo \"Scalene triangle\"\n    fi\n  else\n\
    \    echo \"Not a triangle\"\n  fi", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1\
    \ -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n       \
    \ return 1\n    fi\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo\
    \ \"-1\"\n        return 1\n    fi\n    if [ $1 -eq $2 ] || [ $2 -eq $3 ] || [\
    \ $1 -eq $3 ]; then\n        echo \"-1\"\n        return 1\n    fi\n    if [ $1\
    \ -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt $(( $2 + $3 )) ]; then\n\
    \            echo \"scale=2; sqrt($1*$1 + $2*$2)\" | bc\n            return 0\n\
    \        fi\n    fi\n    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [\
    \ $2 -lt $(( $1 + $3 )) ]; then\n            echo \"scale=2; sqrt($1*$1 + $2*$2)\"\
    \ | bc\n            return 0\n        fi\n    fi\n    if [ $3 -gt $1 ] && [ $3\
    \ -gt $2 ]; then\n        if [ $3 -lt $(( $1 + $2 )) ]; then\n            echo\
    \ \"scale=2; sqrt($1*$1 + $2*$2)\" | bc\n            return 0\n        fi\n  \
    \  fi\n    echo \"-1\"\n    return 1", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world\"\n    if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"1.73\"\n\
    \    elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo\
    \ \"0.5\"\n    else\n        echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n\
    \        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n\
    \    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\
    \n        return 0\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n    \
    \    if [ $1 -gt $2+$3 ]; then\n            echo \"-1\"\n            return 0\n\
    \        fi\n    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -gt\
    \ $1+$3 ]; then\n            echo \"-1\"\n            return 0\n        fi\n \
    \   elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -gt $1+$2 ]; then\n\
    \            echo \"-1\"\n            return 0\n        fi\n    fi\n    s=$(echo\
    \ \"scale=2;($1+$2+$3)/2\" | bc)\n    area=$(echo \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n    echo $area", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0\
    \ <integer> <integer> <integer>\"\n        return 1\n    fi\n    if [[ ! $1 =~\
    \ ^[0-9]+$ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return\
    \ 1\n    fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is\
    \ not an integer\"\n        return 1\n    fi\n    if [[ ! $3 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Error: $3 is not an integer\"\n        return 1\n    fi\n    if\
    \ [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n  \
    \      return 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n       \
    \ if [ $2 -gt $3 ]; then\n            if [ $1 -lt $(( $2 + $3 )) ]; then\n   \
    \             echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc\n                return 0\n            fi\n        else\n            if\
    \ [ $1 -lt $(( $2 + $3 )) ]; then\n                echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc\n                return 0\n            fi\n        fi\n    elif [ $2 -gt\
    \ $1 ] && [ $2 -gt $3 ]; then\n        if [ $1 -gt $3 ]; then\n            if\
    \ [ $2 -lt $(( $1 + $3 )) ]; then\n                echo \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-$1+$2+$3))/4\"\
    \ | bc\n                return 0\n            fi\n        else\n            if\
    \ [ $2 -lt $(( $1 + $3 ))", "    # Write your code here\n    if [ $1 -gt 0 ] &&\
    \ [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        else\n    \
    \        echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        fi\n  \
    \  else\n        echo \"-1\"\n    fi", "    # Write your code here\n    if [ $1\
    \ -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n    elif\
    \ [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\n  \
    \  elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n        echo \"-1\"\n    elif [\
    \ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n \
    \   elif [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n        if [ $1 -lt $(($2 + $3))\
    \ ]; then\n            echo $(echo \"scale=2; $2 * $3 / 2\" | bc)\n        else\n\
    \            echo \"-1\"\n        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n        if [ $2 -lt $(($1 + $3)) ]; then\n            echo $(echo \"scale=2;\
    \ $1 * $3 / 2\" | bc)\n        else\n            echo \"-1\"\n        fi\n   \
    \ elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n        if [ $3 -lt $(($1 + $2))\
    \ ]; then\n            echo $(echo \"scale=2; $1 * $2 / 2\" | bc)\n        else\n\
    \            echo \"-1\"\n        fi\n    fi", "    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo $(echo\
    \ \"scale=2; 1 / 4 * sqrt((2 * $1 * $1 + 2 * $2 * $2 - $3 * $3) * ($2 * $2 + $3\
    \ * $3 - $1 * $1) * ($3 * $3 + $1 * $1 - $2 * $2))\" | bc)\n        else\n   \
    \         echo $(echo \"scale=2; 1 / 4 * sqrt((2 * $1 * $1 + 2 * $2 * $2 - $3\
    \ * $3) * ($2 * $2 + $3 * $3 - $1 * $1) * ($3 * $3 + $1 * $1 - $2 * $2))\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n\
    \        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n\
    \    side1=$1\n    side2=$2\n    side3=$3\n    if [ $side1 -le 0 ] || [ $side2\
    \ -le 0 ] || [ $side3 -le 0 ]; then\n        echo \"-1\"\n        return 0\n \
    \   fi\n    if [ $side1 -ge $side2 + $side3 ] || [ $side2 -ge $side1 + $side3\
    \ ] || [ $side3 -ge $side1 + $side2 ]; then\n        echo \"-1\"\n        return\
    \ 0\n    fi\n    s=$(echo \"scale=2; ($side1 + $side2 + $side3)/2\" | bc)\n  \
    \  area=$(echo \"scale=2; sqrt($s*($s-$side1)*($s-$side2)*($s-$side3))\" | bc)\n\
    \    echo $area", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n     \
    \   if [[ $1 + $2 -gt $3 && $1 + $3 -gt $2 && $2 + $3 -gt $1 ]]; then\n      \
    \      echo $(echo \"scale=2; sqrt($1*$1 + $2*$2 - 2*$1*$2*cos(($3*3.14159265358979323846/180)))/2\"\
    \ | bc -l)\n        else\n            echo \"-1\"\n        fi\n    else\n    \
    \    echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0\
    \ <integer> <integer> <integer>\"\n        return 1\n    fi\n    if [ $1 -le 0\
    \ ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n        return\
    \ 0\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -gt\
    \ $2 + $3 ]; then\n            echo \"-1\"\n            return 0\n        fi\n\
    \    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -gt $1 + $3 ];\
    \ then\n            echo \"-1\"\n            return 0\n        fi\n    elif [\
    \ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -gt $1 + $2 ]; then\n  \
    \          echo \"-1\"\n            return 0\n        fi\n    fi\n    s=$(echo\
    \ \"scale=2;($1+$2+$3)/2\" | bc)\n    area=$(echo \"scale=2;sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n    echo $area", "    if (( $1 + $2 > $3 )) && (( $1 + $3 > $2 )) &&\
    \ (( $2 + $3 > $1 )); then\n        echo $(echo \"scale=2; sqrt($1*$1 + $2*$2\
    \ - $3*$3) * sqrt($1*$1 + $3*$3 - $2*$2) * sqrt($2*$2 + $3*$3 - $1*$1) / 4\" |\
    \ bc)\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n \
    \   if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            area=$(echo \"scale=2; sqrt(3)/4*($1*$1)\"\
    \ | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n\
    \            area=$(echo \"scale=2; sqrt(3)/4*($1*$1)\" | bc)\n        else\n\
    \            area=$(echo \"scale=2; sqrt(3)/4*($1*$1)\" | bc)\n        fi\n  \
    \  else\n        area=-1\n    fi\n    echo $area", "    # Write your code here\n\
    \    if [[ $1 -le 0 || $2 -le 0 || $3 -le 0 ]]; then\n        echo \"-1\"\n  \
    \  elif (( $1 + $2 <= $3 || $1 + $3 <= $2 || $2 + $3 <= $1 )); then\n        echo\
    \ \"-1\"\n    else\n        echo $(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)\"\
    \ | bc)\n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n     \
    \   if [[ $1 -gt $2 && $1 -gt $3 ]]; then\n            if [[ $1 -lt $2 + $3 ]];\
    \ then\n                echo \"$(echo \"scale=2; sqrt($1*$1 + $2*$2 - 2*$1*$2*cos(acos(($1*$1\
    \ + $2*$2 - $3*$3)/(2*$1*$2))/2))/2\" | bc)\"\n            else\n            \
    \    echo \"-1\"\n            fi\n        elif [[ $2 -gt $1 && $2 -gt $3 ]]; then\n\
    \            if [[ $2 -lt $1 + $3 ]]; then\n                echo \"$(echo \"scale=2;\
    \ sqrt($1*$1 + $2*$2 - 2*$1*$2*cos(acos(($1*$1 + $2*$2 - $3*$3)/(2*$1*$2))/2))/2\"\
    \ | bc)\"\n            else\n                echo \"-1\"\n            fi\n   \
    \     elif [[ $3 -gt $1 && $3 -gt $2 ]]; then\n            if [[ $3 -lt $1 + $2\
    \ ]]; then\n                echo \"$(echo \"scale=2; sqrt($1*$1 + $2*$2 - 2*$1*$2*cos(acos(($1*$1\
    \ + $2*$2 - $3*$3)/(2*$1*$2))/2))/2\" | bc)\"\n            else\n            \
    \    echo \"-1\"\n            fi\n        fi\n    else\n        echo \"-1\"\n\
    \    fi", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world\"\n    if [ $1 -gt\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -lt $2+$3 ] && [\
    \ $2 -lt $1+$3 ] && [ $3 -lt $1+$2 ]; then\n            s=$(echo \"scale=2; ($1+$2+$3)/2\"\
    \ | bc)\n            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\"\
    \ | bc)\n            echo $area\n        else\n            echo \"-1\"\n     \
    \   fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\
    \n        else\n            echo \"Scalene\"\n        fi\n    else\n        echo\
    \ \"Invalid\"\n    fi", "    # your code here\n    if [ $1 -gt 0 ] && [ $2 -gt\
    \ 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n\
    \            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ]\
    \ || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n        else\n     \
    \       echo \"Scalene\"\n        fi\n    else\n        echo \"-1\"\n    fi",
  "    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4\
    \ * $1 * $1\" | bc)\n        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        else\n            echo $(echo \"scale=2; sqrt(3) / 4 * $1 * $1\" | bc)\n\
    \        fi\n    else\n        echo \"-1\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n        elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\
    \n        else\n            echo \"Scalene\"\n        fi\n    else\n        echo\
    \ \"Not a triangle\"\n    fi", "    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]];\
    \ then\n        if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n            echo $(echo\
    \ \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        elif [[ $1 -eq $2 || $2 -eq\
    \ $3 || $1 -eq $3 ]]; then\n            echo $(echo \"scale=2; sqrt(($1 + $2 +\
    \ $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n     \
    \   else\n            echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 -\
    \ $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\" | bc)\n        fi\n    else\n\
    \        echo \"-1\"\n    fi", "    # your code here\n    if [ $1 -gt 0 ] && [\
    \ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3 ];\
    \ then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ] || [ $2 -eq\
    \ $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n        else\n\
    \            echo \"Scalene\"\n        fi\n    else\n        echo \"Not a triangle\"\
    \n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        return 1\n    fi\n    local side1=$1\n    local side2=$2\n\
    \    local side3=$3\n    local s=$(echo \"scale=2; ($side1 + $side2 + $side3)\
    \ / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s\
    \ - $side2) * ($s - $side3))\" | bc)\n    if [ $(echo \"$area > 0\" | bc) -eq\
    \ 1 ]; then\n        echo $area\n    else\n        echo \"-1\"\n    fi", "   \
    \ if (( $1 + $2 > $3 )) && (( $1 + $3 > $2 )) && (( $2 + $3 > $1 )); then\n  \
    \      echo \"$(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)*$1/4\" | bc)\"\n \
    \   else\n        echo \"-1\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n    fi\n    if [ $1\
    \ -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n       \
    \ return 1\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n        if [\
    \ $1 -ge $2 + $3 ]; then\n            echo \"-1\"\n            return 1\n    \
    \    fi\n    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -ge $1\
    \ + $3 ]; then\n            echo \"-1\"\n            return 1\n        fi\n  \
    \  elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -ge $1 + $2 ]; then\n\
    \            echo \"-1\"\n            return 1\n        fi\n    fi\n    p=$(($1\
    \ + $2 + $3))\n    p=$(($p / 2))\n    area=$(echo \"scale=2; sqrt($p * ($p - $1)\
    \ * ($p - $2) * ($p - $3))\" | bc)\n    echo $area", "    local a=$1\n    local\
    \ b=$2\n    local c=$3\n    local area\n    if (( $a + $b > $c )) && (( $a + $c\
    \ > $b )) && (( $b + $c > $a )); then\n        area=$(echo \"scale=2; sqrt($a*$a\
    \ + $b*$b - 2*$a*$b*cos(60*3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787",
  '    # Write your code here', "    # Write your code here\n    if [ $1 -gt 0 ] &&\
    \ [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2 -eq $3\
    \ ]; then\n            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n  \
    \      elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n          \
    \  echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3)\
    \ * (-$1 + $2 + $3)) / 4\" | bc)\n        else\n            echo $(echo \"scale=2;\
    \ sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 + $3) * (-$1 + $2 + $3)) / 4\"\
    \ | bc)\n        fi\n    else\n        echo \"-1\"\n    fi", "    if [ $1 -eq\
    \ $2 -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" |\
    \ bc)\n    elif [ $1 -eq $2 -o $2 -eq $3 -o $1 -eq $3 ]; then\n        echo $(echo\
    \ \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n\
    \        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n    elif [ $1 -eq $2\
    \ -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n\
    \    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\"\
    \ | bc)\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2;\
    \ sqrt(3)/4*$1*$1\" | bc)\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n       \
    \ echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n    elif [ $1 -eq $2 -a $2 -eq\
    \ $3 ]; then\n        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\" | bc)\n    elif\
    \ [ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2; sqrt(3)/4*$1*$1\"\
    \ | bc)\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo $(echo \"scale=2;\
    \ sqrt(3)/4*$1*$1\" | bc)\n    elif [ $1 -eq $2 -a $2 -eq $3 ]; then\n       \
    \ echo $(echo \"scale=2; sqrt(3"]
stop_tokens:
- "\n}"
