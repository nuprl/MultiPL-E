name: HumanEval_71_triangle_area
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ the area of\n# the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n# than the third side.\n# Example:\n\
  # >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\"\
  \ \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an\
  \ integer\ntriangle_area() {\n"
tests: "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n \
  \   [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n\
  \    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"\
  1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\
  \nrun_test"
completions: ["    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2>\
    \ <side3>\"\n        exit 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [\
    \ $3 -le 0 ]; then\n        echo \"-1\"\n        exit 0\n    fi\n    if [ $1 -ge\
    \ $2 ] && [ $1 -ge $3 ]; then\n        if [ $1 -lt $(($2 + $3)) ]; then\n    \
    \        echo \"$(echo \"scale=2; sqrt($1*$1 - ($1/2)*($1/2) + ($2*$2 - ($2/2)*($2/2))\
    \ + ($3*$3 - ($3/2)*($3/2)))\" | bc)\"\n            exit 0\n        fi\n    elif\
    \ [ $2 -ge $1 ] && [ $2 -ge $3 ]; then\n        if [ $2 -lt $(($1 + $3)) ]; then\n\
    \            echo \"$(echo \"scale=2; sqrt($2*$2 - ($2/2)*($2/2) + ($1*$1 - ($1/2)*($1/2))\
    \ + ($3*$3 - ($3/2)*($3/2)))\" | bc)\"\n            exit 0\n        fi\n    elif\
    \ [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $3 -lt $(($1 + $2)) ]; then\n\
    \            echo \"$(echo \"scale=2; sqrt($3*$3 - ($3/2)*($3/2) + ($1*$1 - ($1/2)*($1/2))\
    \ + ($2*$2 - ($2/2)*($2/2)))\" | bc)\"\n            exit 0\n        fi\n    fi\n\
    \    echo \"-1\"", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer>\
    \ <integer> <integer>\"\n        return 1\n    fi\n    if ! [[ $1 =~ ^[0-9]+$\
    \ ]]; then\n        echo \"Error: $1 is not an integer\"\n        return 1\n \
    \   fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: $2 is not an\
    \ integer\"\n        return 1\n    fi\n    if ! [[ $3 =~ ^[0-9]+$ ]]; then\n \
    \       echo \"Error: $3 is not an integer\"\n        return 1\n    fi\n    if\
    \ [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n        echo \"-1\"\n  \
    \      return 0\n    fi\n    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n       \
    \ if [ $2 -ge $3 ]; then\n            if [ $1 -lt $(( $2 + $3 )) ]; then\n   \
    \             echo \"$(echo \"scale=2; 0.5 * $2 * $3\" | bc)\"\n             \
    \   return 0\n            fi\n        else\n            if [ $1 -lt $(( $2 + $3\
    \ )) ]; then\n                echo \"$(echo \"scale=2; 0.5 * $2 * $3\" | bc)\"\
    \n                return 0\n            fi\n        fi\n    elif [ $2 -ge $1 ]\
    \ && [ $2 -ge $3 ]; then\n        if [ $1 -ge $3 ]; then\n            if [ $2\
    \ -lt $(( $1 + $3 )) ]; then\n                echo \"$(echo \"scale=2; 0.5 * $1\
    \ * $3\" | bc)\"\n                return 0\n            fi\n        else\n   \
    \         if [ $2 -lt $(( $1 + $3 )) ]; then\n                echo \"$(echo \"\
    scale=2; 0.5 * $1 * $3\" | bc)\"\n                return 0\n            fi\n \
    \       fi\n    elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n        if [ $1 -ge\
    \ $2 ]; then\n            if [ $3 -lt $(( $", "    if [[ $1 -gt 0 && $2 -gt 0\
    \ && $3 -gt 0 ]]; then\n        if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n      \
    \      echo $(echo \"scale=2;sqrt(3)/4*$1*$1\" | bc)\n        elif [[ $1 -eq $2\
    \ || $2 -eq $3 || $1 -eq $3 ]]; then\n            if [[ $1 -eq $2 ]]; then\n \
    \               echo $(echo \"scale=2;0.5*$1*$3\" | bc)\n            elif [[ $2\
    \ -eq $3 ]]; then\n                echo $(echo \"scale=2;0.5*$2*$1\" | bc)\n \
    \           else\n                echo $(echo \"scale=2;0.5*$3*$2\" | bc)\n  \
    \          fi\n        else\n            if [[ $1 -gt $2 && $1 -gt $3 ]]; then\n\
    \                if [[ $2 -gt $3 ]]; then\n                    echo $(echo \"\
    scale=2;0.5*$2*$3\" | bc)\n                else\n                    echo $(echo\
    \ \"scale=2;0.5*$3*$2\" | bc)\n                fi\n            elif [[ $2 -gt\
    \ $1 && $2 -gt $3 ]]; then\n                if [[ $1 -gt $3 ]]; then\n       \
    \             echo $(echo \"scale=2;0.5*$1*$3\" | bc)\n                else\n\
    \                    echo $(echo \"scale=2;0.5*$3*$1\" | bc)\n               \
    \ fi\n            else\n                if [[ $1 -gt $2 ]]; then\n           \
    \         echo $(echo \"scale=2;0.5*$1*$2\" | bc)\n                else\n    \
    \                echo $(echo \"scale=2;0.5*$2*$1\" | bc)\n                fi\n\
    \            fi\n        fi\n    else\n        echo \"-1\"\n    fi", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n     \
    \   return 1\n    fi\n    local side1=$1\n    local side2=$2\n    local side3=$3\n\
    \    local s=$(echo \"scale=2; ($side1 + $side2 + $side3) / 2\" | bc)\n    local\
    \ area=$(echo \"scale=2; sqrt($s * ($s - $side1) * ($s - $side2) * ($s - $side3))\"\
    \ | bc)\n    if [ $(echo \"$area < 0\" | bc) -eq 1 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"$area\"\n    fi", "    # TODO: implement this function\n\
    \    # Hint: use the following command to round a number to 2 decimal points\n\
    \    # printf \"%.2f\" $number\n    #\n    # Hint: use the following command to\
    \ check if a number is an integer\n    # [[ $number =~ ^[0-9]+$ ]]\n    #\n  \
    \  # Hint: use the following command to check if a number is a float\n    # [[\
    \ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following command\
    \ to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n\
    \    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9]+$\
    \ ]]\n    #\n    # Hint: use the following command to check if a number is a float\n\
    \    # [[ $number =~ ^[0-9]+\\.[0-9]+$ ]]\n    #\n    # Hint: use the following\
    \ command to check if a number is a float\n    # [[ $number =~ ^[0-9]+\\.[0-9",
  "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <side1> <side2> <side3>\"\n    return\
    \ 1\n  fi\n  if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"\
    -1\"\n    return 0\n  fi\n  if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then\n    if [\
    \ $2 -ge $3 ]; then\n      if [ $1 -gt $(($2 + $3)) ]; then\n        echo \"-1\"\
    \n        return 0\n      fi\n    else\n      if [ $1 -gt $(($2 + $3)) ]; then\n\
    \        echo \"-1\"\n        return 0\n      fi\n    fi\n  elif [ $2 -ge $1 ]\
    \ && [ $2 -ge $3 ]; then\n    if [ $1 -ge $3 ]; then\n      if [ $2 -gt $(($1\
    \ + $3)) ]; then\n        echo \"-1\"\n        return 0\n      fi\n    else\n\
    \      if [ $2 -gt $(($1 + $3)) ]; then\n        echo \"-1\"\n        return 0\n\
    \      fi\n    fi\n  elif [ $3 -ge $1 ] && [ $3 -ge $2 ]; then\n    if [ $1 -ge\
    \ $2 ]; then\n      if [ $3 -gt $(($1 + $2)) ]; then\n        echo \"-1\"\n  \
    \      return 0\n      fi\n    else\n      if [ $3 -gt $(($1 + $2)) ]; then\n\
    \        echo \"-1\"\n        return 0\n      fi\n    fi\n  fi\n  echo \"$(echo\
    \ \"scale=2; sqrt($1*$1 + $2*$2)\" | bc -l)\"\n  return 0", "    if [[ $1 -gt\
    \ 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[ $1 -lt $2+$3 && $2 -lt $1+$3\
    \ && $3 -lt $1+$2 ]]; then\n            s=$(echo \"scale=2; ($1+$2+$3)/2\" | bc)\n\
    \            area=$(echo \"scale=2; sqrt($s*($s-$1)*($s-$2)*($s-$3))\" | bc)\n\
    \            echo $area\n        else\n            echo \"-1\"\n        fi\n \
    \   else\n        echo \"-1\"\n    fi", '  # Write your code here', "    # Write\
    \ your code here\n    if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n      \
    \  if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n            echo $(echo \"scale=2; sqrt(3)/4\
    \ * $1 * $1\" | bc)\n        elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        else\n\
    \            echo $(echo \"scale=2; sqrt(3)/4 * $1 * $1\" | bc)\n        fi\n\
    \    else\n        echo -1\n    fi", "    # Write your code here\n    # To print\
    \ results to the standard output you can use echo\n    # Example: echo \"Hello\
    \ world\"\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n       \
    \ if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    # TODO: Implement this\
    \ function\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n      \
    \  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral\"\n\
    \        elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        \
    \    echo \"Isosceles\"\n        else\n            echo \"Scalene\"\n        fi\n\
    \    else\n        echo \"Not a triangle\"\n    fi", "    # Write your code here\n\
    \    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq\
    \ $2 ] && [ $2 -eq $3 ]; then\n            echo \"Equilateral Triangle\"\n   \
    \     elif [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n           \
    \ echo \"Isosceles Triangle\"\n        else\n            echo \"Scalene Triangle\"\
    \n        fi\n    else\n        echo \"Not a Triangle\"\n    fi", "    if [[ $1\
    \ -eq $2 && $2 -eq $3 ]]; then\n        echo $(echo \"scale=2; sqrt(3) / 4 * $1\
    \ * $1\" | bc)\n    elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n   \
    \     echo $(echo \"scale=2; sqrt(($1 + $2 + $3) * ($1 + $2 - $3) * ($1 - $2 +\
    \ $3) * (-$1 + $2 + $3)) / 4\" | bc)\n    else\n        echo $(echo \"scale=2;\
    \ sqrt((($1 + $2 + $3) / 2) * (($1 + $2 + $3) / 2 - $1) * (($1 + $2 + $3) / 2\
    \ - $2) * (($1 + $2 + $3) / 2 - $3))\" | bc)\n    fi", "    # TODO: implement\
    \ this function\n    # Hint: use bc to calculate the area of a triangle\n    #\
    \       and use awk to round the result to 2 decimal points\n    #       https://www.gnu.org/software/gawk/manual/html_node/Arithmetic-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/String-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/String-Manipulation.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Built_002din.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/User_002ddefined-Functions.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Function-Calls.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org/software/gawk/manual/html_node/Return-Statements.html\n\
    \    #       https://www.gnu.org", "    # Write your code here\n    if [ $1 -gt\
    \ 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if [ $1 -eq $2 ] && [ $2\
    \ -eq $3 ]; then\n            echo \"Equilateral\"\n        elif [ $1 -eq $2 ]\
    \ || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"Isosceles\"\n  \
    \      else\n            echo \"Scalene\"\n        fi\n    else\n        echo\
    \ \"Invalid\"\n    fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 <side1>\
    \ <side2> <side3>\"\n        return 1\n    fi\n    if [[ ! $1 =~ ^[0-9]+$ ]];\
    \ then\n        echo \"Error: side1 is not an integer\"\n        return 1\n  \
    \  fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: side2 is not\
    \ an integer\"\n        return 1\n    fi\n    if [[ ! $3 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Error: side3 is not an integer\"\n        return 1\n    fi\n \
    \   if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n        echo \"-1\"\
    \n        return 0\n    fi\n    if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0\
    \ ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -eq $2 ]\
    \ && [ $2 -eq $3 ]; then\n        echo \"-1\"\n        return 0\n    fi\n    if\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n        echo \"-1\"\n\
    \        return 0\n    fi\n    if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n     \
    \   if [ $1 -lt $(($2 + $3)) ]; then\n            area=$(echo \"scale=2; sqrt($1*$1*($2*$2+$3*$3)-$1*$1*$1*$1)/4\"\
    \ | bc)\n            echo \"$area\"\n            return 0\n        fi\n    fi\n\
    \    if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $2 -lt $(($1 + $3))\
    \ ]; then\n            area=$(echo \"scale=2; sqrt($2*$2*($1*$1+$3*$3)-$2*$2*$2*$2)/4\"\
    \ | bc)\n            echo \"$area\"\n            return 0\n       ", "    if [\
    \ $# -ne 3 ]; then\n        echo \"Usage: $0 <integer> <integer> <integer>\"\n\
    \        return 1\n    fi\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"-1\"\n        return 0\n    fi\n    if [ $1 -gt $2 ] &&\
    \ [ $1 -gt $3 ]; then\n        if [ $(( $2 + $3 )) -gt $1 ]; then\n          \
    \  echo \"$(echo \"scale=2; sqrt($(( $2 * $2 + $3 * $3 - $1 * $1 )) * ($(( $2\
    \ * $2 + $3 * $3 - $1 * $1 )) - 2 * $2 * $3)) / 4\" | bc)\"\n            return\
    \ 0\n        fi\n    elif [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n        if [ $((\
    \ $1 + $3 )) -gt $2 ]; then\n            echo \"$(echo \"scale=2; sqrt($(( $1\
    \ * $1 + $3 * $3 - $2 * $2 )) * ($(( $1 * $1 + $3 * $3 - $2 * $2 )) - 2 * $1 *\
    \ $3)) / 4\" | bc)\"\n            return 0\n        fi\n    elif [ $3 -gt $1 ]\
    \ && [ $3 -gt $2 ]; then\n        if [ $(( $1 + $2 )) -gt $3 ]; then\n       \
    \     echo \"$(echo \"scale=2; sqrt($(( $1 * $1 + $2 * $2 - $3 * $3 )) * ($((\
    \ $1 * $1 + $2 * $2 - $3 * $3 )) - 2 * $1 * $2)) / 4\" | bc)\"\n            return\
    \ 0\n        fi\n    fi\n    echo \"-1\"\n    return 0", "    if [ $# -ne 3 ];\
    \ then\n        echo \"Usage: $0 <side1> <side2> <side3>\"\n        return 1\n\
    \    fi\n    if [ $(echo \"$1 + $2 > $3\" | bc) -eq 1 ] && \\\n       [ $(echo\
    \ \"$1 + $3 > $2\" | bc) -eq 1 ] && \\\n       [ $(echo \"$2 + $3 > $1\" | bc)\
    \ -eq 1 ]; then\n        echo \"$(echo \"scale=2; sqrt($1*$1 + $2*$2 - $3*$3)\
    \ * $2 / 2\" | bc)\"\n    else\n        echo \"-1\"\n    fi", "  # Write your\
    \ code here\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo\
    \ \"-1\"\n  elif [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n    echo\
    \ \"-1\"\n  elif [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo \"-1\"\n  elif\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n    echo \"-1\"\n  elif\
    \ [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n    if [ $2 -gt $3 ]; then\n      echo\
    \ \"$(echo \"scale=2; ($1+$2)*$3/2\" | bc)\"\n    else\n      echo \"$(echo \"\
    scale=2; ($1+$3)*$2/2\" | bc)\"\n    fi\n  elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n    if [ $1 -gt $3 ]; then\n      echo \"$(echo \"scale=2; ($2+$1)*$3/2\"\
    \ | bc)\"\n    else\n      echo \"$(echo \"scale=2; ($2+$3)*$1/2\" | bc)\"\n \
    \   fi\n  elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n    if [ $1 -gt $2 ]; then\n\
    \      echo \"$(echo \"scale=2; ($3+$1)*$2/2\" | bc)\"\n    else\n      echo \"\
    $(echo \"scale=2; ($3+$2)*$1/2\" | bc)\"\n    fi\n  fi", "    # Write your code\
    \ here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        if\
    \ [ $1 -lt $2+$3 ] && [ $2 -lt $1+$3 ] && [ $3 -lt $1+$2 ]; then\n           \
    \ area=$(echo \"scale=2; sqrt($1*$1+$2*$2-$3*$3)*sqrt($1*$1+$3*$3-$2*$2)*sqrt($2*$2+$3*$3-$1*$1)/4\"\
    \ | bc)\n            echo \"$area\"\n        else\n            echo \"-1\"\n \
    \       fi\n    else\n        echo \"-1\"\n    fi"]
stop_tokens:
- "\n}"
