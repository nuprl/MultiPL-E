language: sh
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local dict_size=$(echo \"$dict\" | wc -l)\n  \
    \  if [ $dict_size -eq 0 ]; then\n        echo \"false\"\n        return\n   \
    \ fi\n    local all_lower=$(echo \"$dict\" | cut -d, -f1 | grep -v '[A-Z]' | wc\
    \ -l)\n    local all_upper=$(echo \"$dict\" | cut -d, -f1 | grep -v '[a-z]' |\
    \ wc -l)\n    if [ $all_lower -eq $dict_size ] || [ $all_upper -eq $dict_size\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local key_case\n  local key\n  local value\n  local\
    \ key_is_upper=true\n  local key_is_lower=true\n  while IFS=',' read -r key value;\
    \ do\n    key_case=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"\
    $key\" != \"$key_case\" ]]; then\n      key_is_lower=false\n    fi\n    key_case=$(echo\
    \ \"$key\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$key\" != \"$key_case\"\
    \ ]]; then\n      key_is_upper=false\n    fi\n  done <<< \"$csv\"\n  if [[ \"\
    $key_is_upper\" == \"true\" ]] || [[ \"$key_is_lower\" == \"true\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=true\n  local upper_case_keys=true\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"\
    $key\" =~ [a-z] ]]; then\n      upper_case_keys=false\n    fi\n    if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      lower_case_keys=false\n    fi\n  done <<< \"$dict\"\
    \n  if [[ \"$lower_case_keys\" == \"true\" ]] || [[ \"$upper_case_keys\" == \"\
    true\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -a keys=( $(cut -d, -f1 <<< \"$1\") )\n  local -a values=( $(cut\
    \ -d, -f2 <<< \"$1\") )\n  local -a lower_keys=( $(tr '[:upper:]' '[:lower:]'\
    \ <<< \"${keys[@]}\") )\n  local -a upper_keys=( $(tr '[:lower:]' '[:upper:]'\
    \ <<< \"${keys[@]}\") )\n  if [[ \"${keys[@]}\" == \"${lower_keys[@]}\" ]] ||\
    \ [[ \"${keys[@]}\" == \"${upper_keys[@]}\" ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    # TODO: Implement this function\n    # Hint: Use the following functions:\n\
    \    #   - $(is_lower_case \"string\")\n    #   - $(is_upper_case \"string\")\n\
    \    #   - $(get_dict_keys \"dict\")\n    #   - $(get_dict_values \"dict\")\n\
    \    #   - $(is_empty_dict \"dict\")\n    #   - $(is_empty_string \"string\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\")\n\
    \    #   - $(is_empty_array \"array\")\n   \n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd3ty6mdl.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpd3ty6mdl.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -a keys\n  local -a values\n  local -a lower_keys\n  local -a upper_keys\n\
    \  local -a lower_values\n  local -a upper_values\n  local -a lower_values_keys\n\
    \  local -a upper_values_keys\n  local -a lower_values_keys_sorted\n  local -a\
    \ upper_values_keys_sorted\n  local -a lower_values_keys_sorted_joined\n  local\
    \ -a upper_values_keys_sorted_joined\n  local -a lower_values_keys_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted\n  local -a lower_values_keys_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined\n  local -a lower_values_keys_sorted_joined_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted\n  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined\n  local\
    \ -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted\n  local\
    \ -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted\n  local\
    \ -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted\n\
    \  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [[\
    \ \"$dict_size\" -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\"\
    \ | cut -d, -f2)\n  local all_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local all_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [[\
    \ \"$dict_keys\" == \"$all_lower\" ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\"\
    \ == \"$all_upper\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local dict_size=$(echo \"$dict\" | wc -l)\n  \
    \  if [[ $dict_size -eq 0 ]]; then\n        echo \"false\"\n        return\n \
    \   fi\n    local lower_case_keys=$(echo \"$dict\" | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]')\n    local upper_case_keys=$(echo \"$dict\" | cut -d, -f1 | tr\
    \ '[:lower:]' '[:upper:]')\n    local lower_case_keys_size=$(echo \"$lower_case_keys\"\
    \ | wc -l)\n    local upper_case_keys_size=$(echo \"$upper_case_keys\" | wc -l)\n\
    \    if [[ $lower_case_keys_size -eq $dict_size ]]; then\n        echo \"true\"\
    \n    elif [[ $upper_case_keys_size -eq $dict_size ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # Check for empty dictionary\n  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  # Check for all lower case\n  if [ \"$(echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]')\" == \"$1\" ]; then\n    echo \"true\"\n    return\n\
    \  fi\n  # Check for all upper case\n  if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\"\
    \ == \"$1\" ]; then\n    echo \"true\"\n    return\n  fi\n  # Not all upper or\
    \ lower case\n  echo \"false\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ key_case\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ -z \"$key_case\" ]]; then\n      if [[ \"$key\" =~ [a-z] ]]; then\n\
    \        key_case=\"lower\"\n      elif [[ \"$key\" =~ [A-Z] ]]; then\n      \
    \  key_case=\"upper\"\n      else\n        echo \"false\"\n        return\n  \
    \    fi\n    else\n      if [[ \"$key_case\" == \"lower\" ]]; then\n        if\
    \ [[ ! \"$key\" =~ [a-z] ]]; then\n          echo \"false\"\n          return\n\
    \        fi\n      elif [[ \"$key\" =~ [A-Z] ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n    fi\n  done <<< \"$1\"\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ key_case=$(echo \"$1\" | awk -F, '{print $1}' | tr '[:upper:]' '[:lower:]' |\
    \ sort | uniq)\n  local value_case=$(echo \"$1\" | awk -F, '{print $1}' | tr '[:lower:]'\
    \ '[:upper:]' | sort | uniq)\n  if [[ \"$key_case\" == \"$value_case\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=0\n  local upper_keys=0\n  local\
    \ non_keys=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys + 1))\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys + 1))\n\
    \    else\n      non_keys=$((non_keys + 1))\n    fi\n  done <<< \"$dict\"\n  if\
    \ [[ \"$lower_keys\" -gt 0 && \"$upper_keys\" -gt 0 ]]; then\n    echo \"false\"\
    \n  elif [[ \"$lower_keys\" -gt 0 && \"$upper_keys\" -eq 0 ]]; then\n    echo\
    \ \"true\"\n  elif [[ \"$lower_keys\" -eq 0 && \"$upper_keys\" -gt 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local lower_case=0\n \
    \ local upper_case=0\n  local mixed_case=0\n  local empty_dict=0\n  local dict_size=0\n\
    \  local dict_size_lower=0\n  local dict_size_upper=0\n  local dict_size_mixed=0\n\
    \  local dict_size_empty=0\n  local dict_size_total=0\n  local dict_size_total_lower=0\n\
    \  local dict_size_total_upper=0\n  local dict_size_total_mixed=0\n  local dict_size_total_empty=0\n\
    \  local dict_size_total_all=0\n  local dict_size_total_all_lower=0\n  local dict_size_total_all_upper=0\n\
    \  local dict_size_total_all_mixed=0\n  local dict_size_total_all_empty=0\n  local\
    \ dict_size_total_all_lower_upper=0\n  local dict_size_total_all_lower_mixed=0\n\
    \  local dict_size_total_all_lower_empty=0\n  local dict_size_total_all_upper_mixed=0\n\
    \  local dict_size_total_all_upper_empty=0\n  local dict_size_total_all_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed=0\n  local dict_size_total_all_lower_upper_empty=0\n\
    \  local dict_size_total_all_lower_mixed_empty=0\n  local dict_size_total_all_upper_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed_empty_lower=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_upper=0\n  local dict_size_total_all_lower_upper_mixed_empty_mixed=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_empty=\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower_keys=0\n    local upper_keys=0\n \
    \   local mixed_keys=0\n    local empty_dict=0\n    local IFS=,\n    while read\
    \ key value; do\n        if [[ -z \"$key\" ]]; then\n            empty_dict=1\n\
    \            break\n        fi\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \            lower_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n   \
    \         upper_keys=1\n        else\n            mixed_keys=1\n            break\n\
    \        fi\n    done < <(echo \"$dict\")\n    if [[ $empty_dict -eq 1 ]]; then\n\
    \        echo \"false\"\n    elif [[ $mixed_keys -eq 1 ]]; then\n        echo\
    \ \"false\"\n    elif [[ $lower_keys -eq 1 && $upper_keys -eq 1 ]]; then\n   \
    \     echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local\
    \ mixed_case=0\n  local empty_dict=0\n  local line\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \      break\n    fi\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case=1\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case=1\n    else\n   \
    \   mixed_case=1\n      break\n    fi\n  done <<< \"$dict\"\n  if [[ $empty_dict\
    \ -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $mixed_case -eq 1 ]]; then\n \
    \   echo \"false\"\n  elif [[ $lower_case -eq 1 && $upper_case -eq 1 ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case\n  local key\n  local value\n  local\
    \ all_lower=true\n  local all_upper=true\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ [a-z] ]]; then\n      all_upper=false\n    elif [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      all_lower=false\n    else\n      echo \"false\"\n \
    \     return\n    fi\n  done <<< \"$dict\"\n  if [[ \"$all_lower\" = true ]] ||\
    \ [[ \"$all_upper\" = true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local key_case=$(echo\
    \ \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | head -n1)\n  local key_case_match=$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]' | uniq -c | grep -v \"^ *1 \")\n  if\
    \ [ -z \"$key_case_match\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower_dict=$(echo $dict | tr '[:upper:]' '[:lower:]')\n\
    \    local upper_dict=$(echo $dict | tr '[:lower:]' '[:upper:]')\n    if [[ $dict\
    \ == $lower_dict ]]; then\n        echo \"true\"\n    elif [[ $dict == $upper_dict\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\"\
    \ | cut -d, -f2)\n  local lower_case_keys=$(echo \"$dict_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local upper_case_keys=$(echo \"$dict_keys\" | tr '[:lower:]'\
    \ '[:upper:]')\n  if [ \"$dict_keys\" = \"$lower_case_keys\" ] || [ \"$dict_keys\"\
    \ = \"$upper_case_keys\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"\
    $key\" =~ ^[a-z]+$ ]]; then\n      lower=1\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]];\
    \ then\n      upper=1\n    else\n      mixed=1\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ \"$lower\" -eq 1 && \"$upper\" -eq 0 && \"$mixed\" -eq 0 ]]; then\n \
    \   echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local lower_case_key_regex='^[a-z]+$'\n  local upper_case_key_regex='^[A-Z]+$'\n\
    \  local key\n  while IFS=, read -r key value; do\n    if [[ $key =~ $lower_case_key_regex\
    \ ]]; then\n      ((lower_case_keys++))\n    elif [[ $key =~ $upper_case_key_regex\
    \ ]]; then\n      ((upper_case_keys++))\n    else\n      ((mixed_case_keys++))\n\
    \    fi\n  done <<< \"$csv\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys\
    \ -gt 0 ]]; then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local upper_keys=0\n    local lower_keys=0\n \
    \   local mixed_keys=0\n    local key\n    local value\n    while IFS=, read -r\
    \ key value; do\n        if [[ \"$key\" =~ [A-Z] ]]; then\n            upper_keys=1\n\
    \        elif [[ \"$key\" =~ [a-z] ]]; then\n            lower_keys=1\n      \
    \  else\n            mixed_keys=1\n        fi\n    done <<< \"$dict\"\n    if\
    \ [[ $upper_keys -eq 1 && $lower_keys -eq 1 ]]; then\n        echo \"false\"\n\
    \    elif [[ $mixed_keys -eq 1 ]]; then\n        echo \"false\"\n    else\n  \
    \      echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local -a keys\n    local -a values\n    local -a lower_keys\n    local\
    \ -a upper_keys\n    local -a lower_values\n    local -a upper_values\n    local\
    \ -a lower_keys_values\n    local -a upper_keys_values\n    local -a lower_values_keys\n\
    \    local -a upper_values_keys\n    local -a lower_keys_values_keys\n    local\
    \ -a upper_keys_values_keys\n    local -a lower_values_keys_values\n    local\
    \ -a upper_values_keys_values\n    local -a lower_keys_values_keys_values\n  \
    \  local -a upper_keys_values_keys_values\n    local -a lower_values_keys_values_keys\n\
    \    local -a upper_values_keys_values_keys\n    local -a lower_keys_values_keys_values_keys\n\
    \    local -a upper_keys_values_keys_values_keys\n    local -a lower_values_keys_values_keys_values\n\
    \    local -a upper_values_keys_values_keys_values\n    local -a lower_keys_values_keys_values_keys_values\n\
    \    local -a upper_keys_values_keys_values_keys_values\n    local -a lower_values_keys_values_keys_values_keys\n\
    \    local -a upper_values_keys_values_keys_values_keys\n    local -a lower_keys_values_keys_values_keys_values_keys\n\
    \    local -a upper_keys_values_keys_values_keys_values_keys\n    local -a lower_values_keys_values_keys_values_keys_values\n\
    \    local -a upper_values_keys_values_keys_values_keys_values\n    local -a lower_keys_values_keys_values_keys_values_keys_values\n\
    \    local -a upper_keys_values_keys_values_keys_values_keys_values\n    local\
    \ -a lower_values_keys_values_keys_values_keys_values_keys\n    local -a upper_values_keys_values_keys_values_keys_values_keys\n\
    \    local -a lower_keys_values_keys_values_keys_values_keys\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local keys=$(echo \"$dict\" | cut -d, -f1)\n \
    \   local upper_keys=$(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\n    local\
    \ lower_keys=$(echo \"$keys\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$keys\"\
    \ == \"$upper_keys\" ]]; then\n        echo \"true\"\n    elif [[ \"$keys\" ==\
    \ \"$lower_keys\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_case_keys=0\n  local upper_case_keys=0\n \
    \ local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ \"$empty_dict\" -eq 1 ]]; then\n    echo\
    \ \"false\"\n  elif [[ \"$lower_case_keys\" -eq 1 && \"$upper_case_keys\" -eq\
    \ 0 && \"$mixed_case_keys\" -eq 0 ]]; then\n    echo \"true\"\n  elif [[ \"$lower_case_keys\"\
    \ -eq 0 && \"$upper_case_keys\" -eq 1 && \"$mixed_case_keys\" -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -r csv=\"$1\"\n  local -r lower_keys=$(echo \"$csv\" | cut -d, -f1\
    \ | grep -c '^[a-z]*$')\n  local -r upper_keys=$(echo \"$csv\" | cut -d, -f1 |\
    \ grep -c '^[A-Z]*$')\n  local -r total_keys=$(echo \"$csv\" | wc -l)\n  if [[\
    \ $total_keys -eq 0 ]]; then\n    echo \"false\"\n  elif [[ $lower_keys -eq $total_keys\
    \ ]]; then\n    echo \"true\"\n  elif [[ $upper_keys -eq $total_keys ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local key\n\
    \  local value\n  local lower_case_keys=true\n  local upper_case_keys=true\n \
    \ while IFS=, read -r key value; do\n    if [[ \"$key\" =~ [A-Z] ]]; then\n  \
    \    lower_case_keys=false\n    fi\n    if [[ \"$key\" =~ [a-z] ]]; then\n   \
    \   upper_case_keys=false\n    fi\n  done <<< \"$1\"\n  if [ \"$lower_case_keys\"\
    \ = true ] || [ \"$upper_case_keys\" = true ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n\
    \      mixed_case_keys=1\n    fi\n  done <<< \"$dict\"\n  if [[ $lower_case_keys\
    \ -eq 1 && $upper_case_keys -eq 0 && $mixed_case_keys -eq 0 ]]; then\n    echo\
    \ \"true\"\n  elif [[ $lower_case_keys -eq 0 && $upper_case_keys -eq 1 && $mixed_case_keys\
    \ -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local upper_case=0\n    local lower_case=0\n \
    \   local mixed_case=0\n    local key\n    local value\n    local line\n    local\
    \ -a lines\n    IFS=$'\\n' lines=($(echo \"$dict\"))\n    for line in \"${lines[@]}\"\
    ; do\n        key=$(echo \"$line\" | cut -d, -f1)\n        value=$(echo \"$line\"\
    \ | cut -d, -f2)\n        if [[ \"$key\" =~ [A-Z] ]]; then\n            if [[\
    \ \"$key\" =~ [a-z] ]]; then\n                mixed_case=1\n            else\n\
    \                upper_case=1\n            fi\n        else\n            lower_case=1\n\
    \        fi\n    done\n    if [[ $upper_case -eq 1 && $lower_case -eq 1 ]]; then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local total_keys=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \      lower_case_keys=$((lower_case_keys + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n      upper_case_keys=$((upper_case_keys + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys\
    \ + 1))\n    fi\n    total_keys=$((total_keys + 1))\n  done <<< \"$dict\"\n  if\
    \ [[ $total_keys -eq 0 ]]; then\n    echo \"false\"\n  elif [[ $lower_case_keys\
    \ -eq $total_keys ]]; then\n    echo \"true\"\n  elif [[ $upper_case_keys -eq\
    \ $total_keys ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_case_keys=0\n  local upper_case_keys=0\n \
    \ local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"\
    false\"\n  elif [[ $mixed_case_keys -eq 1 ]]; then\n    echo \"false\"\n  elif\
    \ [[ $lower_case_keys -eq 1 && $upper_case_keys -eq 1 ]]; then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local\
    \ dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local dict_keys_lower=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict_keys\" == \"$dict_keys_lower\"\
    \ ]; then\n    echo \"true\"\n  elif [ \"$dict_keys\" == \"$dict_keys_upper\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local other=0\n  local key\n  local value\n  while IFS=, read -r key value;\
    \ do\n    if [[ \"$key\" =~ [a-z] ]]; then\n      lower=$((lower + 1))\n    elif\
    \ [[ \"$key\" =~ [A-Z] ]]; then\n      upper=$((upper + 1))\n    elif [[ \"$key\"\
    \ =~ [0-9] ]]; then\n      other=$((other + 1))\n    else\n      mixed=$((mixed\
    \ + 1))\n    fi\n  done <<< \"$dict\"\n  if [[ $lower -gt 0 && $upper -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $lower -gt 0 && $other -gt 0 ]]; then\n\
    \    echo \"false\"\n  elif [[ $upper -gt 0 && $other -gt 0 ]]; then\n    echo\
    \ \"false\"\n  elif [[ $lower -gt 0 && $mixed -gt 0 ]]; then\n    echo \"false\"\
    \n  elif [[ $upper -gt 0 && $mixed -gt 0 ]]; then\n    echo \"false\"\n  elif\
    \ [[ $other -gt 0 && $mixed -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo\
    \ \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local lower_case=0\n \
    \ local upper_case=0\n  local mixed_case=0\n  local first_key=1\n  while IFS=,\
    \ read -r key value; do\n    if [[ $first_key -eq 1 ]]; then\n      if [[ $key\
    \ =~ ^[[:lower:]]+$ ]]; then\n        lower_case=1\n      elif [[ $key =~ ^[[:upper:]]+$\
    \ ]]; then\n        upper_case=1\n      else\n        mixed_case=1\n      fi\n\
    \      first_key=0\n    else\n      if [[ $key =~ ^[[:lower:]]+$ ]]; then\n  \
    \      if [[ $lower_case -eq 0 ]]; then\n          mixed_case=1\n        fi\n\
    \      elif [[ $key =~ ^[[:upper:]]+$ ]]; then\n        if [[ $upper_case -eq\
    \ 0 ]]; then\n          mixed_case=1\n        fi\n      else\n        mixed_case=1\n\
    \      fi\n    fi\n  done <<< \"$dict\"\n  if [[ $mixed_case -eq 1 ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=0\n  local upper_keys=0\n  local\
    \ mixed_keys=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys + 1))\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys + 1))\n\
    \    else\n      mixed_keys=$((mixed_keys + 1))\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ $lower_keys -gt 0 && $upper_keys -gt 0 ]]; then\n    echo \"false\"\n\
    \  elif [[ $mixed_keys -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"\
    true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local first_key\n  local first_key_type\n  while IFS=, read -r key value; do\n\
    \    if [[ -z \"$first_key\" ]]; then\n      first_key=\"$key\"\n      if [[ \"\
    $key\" =~ ^[a-z]+$ ]]; then\n        first_key_type=\"lower\"\n      elif [[ \"\
    $key\" =~ ^[A-Z]+$ ]]; then\n        first_key_type=\"upper\"\n      else\n  \
    \      first_key_type=\"mixed\"\n      fi\n    fi\n    if [[ \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n      lower=$((lower + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \      upper=$((upper + 1))\n    else\n      mixed=$((mixed + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ \"$lower\" -eq 0 && \"$upper\" -eq 0 ]]; then\n    echo\
    \ \"false\"\n  elif [[ \"$lower\" -eq 0 && \"$upper\" -gt 0 ]]; then\n    echo\
    \ \"true\"\n  elif [[ \"$lower\" -gt 0 && \"$upper\" -eq 0 ]]; then\n    echo\
    \ \"true\"\n  elif [[ \"$lower\" -gt 0 && \"$upper\" -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=true\n\
    \    local upper_case=true\n    local empty=true\n    while IFS=, read -r key\
    \ value; do\n        empty=false\n        if [[ \"$key\" =~ [A-Z] ]]; then\n \
    \           lower_case=false\n        fi\n        if [[ \"$key\" =~ [a-z] ]];\
    \ then\n            upper_case=false\n        fi\n    done <<< \"$dict\"\n   \
    \ if $empty; then\n        echo \"false\"\n    elif $lower_case; then\n      \
    \  echo \"true\"\n    elif $upper_case; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local empty_dict=0\n  local key\n  local value\n  while IFS=, read -r key value;\
    \ do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n    elif [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n      lower_keys=1\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]];\
    \ then\n      upper_keys=1\n    else\n      mixed_keys=1\n    fi\n  done <<< \"\
    $dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $lower_keys\
    \ -eq 1 && $upper_keys -eq 0 && $mixed_keys -eq 0 ]]; then\n    echo \"true\"\n\
    \  elif [[ $lower_keys -eq 0 && $upper_keys -eq 1 && $mixed_keys -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [ \"$dict_size\"\
    \ -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [ \"$dict_keys\" == \"$dict_keys_lower\" ]; then\n    echo \"true\"\n  elif\
    \ [ \"$dict_keys\" == \"$dict_keys_upper\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local lower_case=true\n\
    \  local upper_case=true\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ [A-Z] ]]; then\n      lower_case=false\n    fi\n    if [[ $key =~ [a-z] ]];\
    \ then\n      upper_case=false\n    fi\n  done <<< \"$1\"\n  if [ \"$lower_case\"\
    \ = \"true\" ] || [ \"$upper_case\" = \"true\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local key\n  local value\n  local lower_case=0\n  local\
    \ upper_case=0\n  local mixed_case=0\n  local empty_dict=0\n  local dict_size=0\n\
    \  local dict_size_lower=0\n  local dict_size_upper=0\n  local dict_size_mixed=0\n\
    \  local dict_size_empty=0\n  local dict_size_total=0\n  local dict_size_total_lower=0\n\
    \  local dict_size_total_upper=0\n  local dict_size_total_mixed=0\n  local dict_size_total_empty=0\n\
    \  local dict_size_total_all=0\n  local dict_size_total_all_lower=0\n  local dict_size_total_all_upper=0\n\
    \  local dict_size_total_all_mixed=0\n  local dict_size_total_all_empty=0\n  local\
    \ dict_size_total_all_lower_upper=0\n  local dict_size_total_all_lower_mixed=0\n\
    \  local dict_size_total_all_lower_empty=0\n  local dict_size_total_all_upper_mixed=0\n\
    \  local dict_size_total_all_upper_empty=0\n  local dict_size_total_all_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed=0\n  local dict_size_total_all_lower_upper_empty=0\n\
    \  local dict_size_total_all_lower_mixed_empty=0\n  local dict_size_total_all_upper_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed_empty_lower=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_upper=0\n  local dict_size_total_all_lower_upper_mixed_empty_mixed=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_empty=0\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n\
    \  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local dict_key_case=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_key_case_upper=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [[ \"$dict_keys\" == \"$dict_key_case\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\" == \"$dict_key_case_upper\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=true\n\
    \    local upper_case=true\n    while IFS=, read -r key value; do\n        [[\
    \ $key =~ [a-z] ]] || lower_case=false\n        [[ $key =~ [A-Z] ]] || upper_case=false\n\
    \    done <<< \"$dict\"\n    [[ $lower_case = true || $upper_case = true ]] &&\
    \ echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local\
    \ mixed_case=0\n  local key\n  local value\n  local -a keys\n  local -a values\n\
    \  local -a lower_keys\n  local -a upper_keys\n  local -a lower_values\n  local\
    \ -a upper_values\n  local -a mixed_keys\n  local -a mixed_values\n  local -a\
    \ mixed_keys_values\n  local -a mixed_values_keys\n  local -a mixed_keys_values_keys\n\
    \  local -a mixed_keys_values_values\n  local -a mixed_values_keys_keys\n  local\
    \ -a mixed_values_keys_values\n  local -a mixed_keys_values_keys_keys\n  local\
    \ -a mixed_keys_values_keys_values\n  local -a mixed_keys_values_values_keys\n\
    \  local -a mixed_keys_values_values_values\n  local -a mixed_values_keys_keys_keys\n\
    \  local -a mixed_values_keys_keys_values\n  local -a mixed_values_keys_values_keys\n\
    \  local -a mixed_values_keys_values_values\n  local -a mixed_keys_values_keys_keys_keys\n\
    \  local -a mixed_keys_values_keys_keys_values\n  local -a mixed_keys_values_keys_values_keys\n\
    \  local -a mixed_keys_values_keys_values_values\n  local -a mixed_keys_values_values_keys_keys\n\
    \  local -a mixed_keys_values_values_keys_values\n  local -a mixed_keys_values_values_values_keys\n\
    \  local -a mixed_keys_values_values_values_values\n  local -a mixed_values_keys_keys_keys_keys\n\
    \  local -a mixed_values_keys_keys_keys_values\n  local -a mixed_values_keys_keys_values_keys\n\
    \  local -a mixed_values_keys_keys_values_values\n  local -a mixed_values_keys_values_keys_keys\n\
    \  local -a mixed_values_keys_values_keys_values\n  local -a mixed_values\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local\
    \ dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local dict_keys_lower=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [[ \"$dict_keys\" == \"$dict_keys_lower\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\" == \"$dict_keys_upper\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key_case\n    if [[ -z \"$dict\" ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    key_case=$(echo \"$dict\"\
    \ | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | sort\
    \ | uniq)\n    if [[ \"$key_case\" == \"LOWER\" ]]; then\n        echo \"true\"\
    \n    elif [[ \"$key_case\" == \"UPPER\" ]]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [[ $dict_size\
    \ -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local lower_keys=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local\
    \ upper_keys=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [[ \"$dict_keys\"\
    \ == \"$lower_keys\" ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\" ==\
    \ \"$upper_keys\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local keys=\"$(echo \"$csv\" | cut -d, -f1)\"\n  local\
    \ lower_keys=\"$(echo \"$keys\" | tr '[:upper:]' '[:lower:]')\"\n  local upper_keys=\"\
    $(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$keys\" == \"$lower_keys\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$keys\" == \"$upper_keys\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=false\n  local upper_case_keys=false\n\
    \  local key\n  local value\n  while IFS=, read -r key value\n  do\n    if [[\
    \ \"$key\" =~ ^[a-z]+$ ]]\n    then\n      lower_case_keys=true\n    elif [[ \"\
    $key\" =~ ^[A-Z]+$ ]]\n    then\n      upper_case_keys=true\n    else\n      echo\
    \ \"false\"\n      return\n    fi\n  done <<< \"$dict\"\n  if [[ \"$lower_case_keys\"\
    \ == \"true\" && \"$upper_case_keys\" == \"true\" ]]\n  then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_case_keys=0\n  local upper_case_keys=0\n \
    \ local mixed_case_keys=0\n  local keys=$(echo \"$dict\" | cut -d, -f1)\n  for\
    \ key in $keys; do\n    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\n\
    \  if [[ $lower_case_keys -eq 0 && $upper_case_keys -eq 0 ]]; then\n    echo \"\
    false\"\n  elif [[ $lower_case_keys -eq 0 && $mixed_case_keys -eq 0 ]]; then\n\
    \    echo \"true\"\n  elif [[ $upper_case_keys -eq 0 && $mixed_case_keys -eq 0\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=0\n  local upper_keys=0\n  local\
    \ mixed_keys=0\n  local empty_dict=0\n  local key\n  local value\n  while IFS=,\
    \ read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \      break\n    fi\n    if [[ \"$key\" =~ [a-z] ]]; then\n      lower_keys=1\n\
    \    fi\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      upper_keys=1\n    fi\n  \
    \  if [[ \"$lower_keys\" -eq 1 && \"$upper_keys\" -eq 1 ]]; then\n      mixed_keys=1\n\
    \      break\n    fi\n  done <<< \"$dict\"\n  if [[ \"$empty_dict\" -eq 1 ]];\
    \ then\n    echo \"false\"\n  elif [[ \"$mixed_keys\" -eq 1 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_keys=0\n  local upper_keys=0\n  local key\n\
    \  local value\n  local IFS=','\n  while read key value; do\n    if [[ \"$key\"\
    \ =~ [a-z] ]]; then\n      lower_keys=$((lower_keys + 1))\n    elif [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      upper_keys=$((upper_keys + 1))\n    fi\n  done < <(echo\
    \ \"$csv\")\n  if [[ $lower_keys -gt 0 && $upper_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local keys=$(echo \"$dict\" | cut -d, -f1)\n \
    \   local upper_keys=$(echo \"$keys\" | tr '[:lower:]' '[:upper:]')\n    local\
    \ lower_keys=$(echo \"$keys\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$keys\"\
    \ == \"$upper_keys\" ]]; then\n        echo \"true\"\n    elif [[ \"$keys\" ==\
    \ \"$lower_keys\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ ^[a-z]+$ ]]; then\n      ((lower++))\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n\
    \      ((upper++))\n    else\n      ((mixed++))\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ $lower -gt 0 && $upper -gt 0 ]]; then\n    echo \"false\"\n  elif [[\
    \ $mixed -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local upper=0\n    local lower=0\n    local mixed=0\n\
    \    local key\n    local value\n    local IFS=','\n    while read key value;\
    \ do\n        if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper=$((upper+1))\n\
    \        elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower=$((lower+1))\n\
    \        else\n            mixed=$((mixed+1))\n        fi\n    done < <(echo \"\
    $dict\")\n    if [[ $mixed -gt 0 ]]; then\n        echo \"false\"\n    elif [[\
    \ $upper -gt 0 && $lower -gt 0 ]]; then\n        echo \"false\"\n    else\n  \
    \      echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local\
    \ mixed_case=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n   \
    \ fi\n  done <<< \"$dict\"\n  if [[ $lower_case -eq 1 && $upper_case -eq 0 &&\
    \ $mixed_case -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower_case_keys=0\n    local upper_case_keys=0\n\
    \    while IFS=, read -r key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]];\
    \ then\n            lower_case_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]];\
    \ then\n            upper_case_keys=1\n        else\n            echo \"false\"\
    \n            return\n        fi\n    done <<< \"$dict\"\n    if [[ $lower_case_keys\
    \ -eq 1 && $upper_case_keys -eq 1 ]]; then\n        echo \"false\"\n    else\n\
    \        echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local all_lower=true\n\
    \  local all_upper=true\n  while IFS=, read -r key value; do\n    if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      all_lower=false\n    fi\n    if [[ \"$key\" =~ [a-z]\
    \ ]]; then\n      all_upper=false\n    fi\n  done <<< \"$dict\"\n  if $all_lower\
    \ || $all_upper; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -r dict=\"$1\"\n  local -r lower_keys=$(echo \"$dict\" | cut -d,\
    \ -f1 | grep -v '[A-Z]')\n  local -r upper_keys=$(echo \"$dict\" | cut -d, -f1\
    \ | grep -v '[a-z]')\n  if [[ -z \"$dict\" ]]; then\n    echo \"false\"\n  elif\
    \ [[ -z \"$lower_keys\" ]] && [[ -z \"$upper_keys\" ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower_keys=0\n    local upper_keys=0\n \
    \   local mixed_keys=0\n    local key\n    local value\n    while IFS=, read -r\
    \ key value; do\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            (( lower_keys++\
    \ ))\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            (( upper_keys++\
    \ ))\n        else\n            (( mixed_keys++ ))\n        fi\n    done <<< \"\
    $dict\"\n    if (( lower_keys > 0 && upper_keys > 0 )); then\n        echo \"\
    false\"\n    elif (( lower_keys > 0 || upper_keys > 0 )); then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local -a keys\n  local -a values\n  local -a upper_keys\n\
    \  local -a lower_keys\n  local -a upper_values\n  local -a lower_values\n  local\
    \ -a upper_keys_values\n  local -a lower_keys_values\n  local -a upper_values_keys\n\
    \  local -a lower_values_keys\n  local -a upper_keys_values_keys\n  local -a lower_keys_values_keys\n\
    \  local -a upper_values_keys_values\n  local -a lower_values_keys_values\n  local\
    \ -a upper_keys_values_keys_values\n  local -a lower_keys_values_keys_values\n\
    \  local -a upper_values_keys_values_keys\n  local -a lower_values_keys_values_keys\n\
    \  local -a upper_keys_values_keys_values_keys\n  local -a lower_keys_values_keys_values_keys\n\
    \  local -a upper_values_keys_values_keys_values\n  local -a lower_values_keys_values_keys_values\n\
    \  local -a upper_keys_values_keys_values_keys_values\n  local -a lower_keys_values_keys_values_keys_values\n\
    \  local -a upper_values_keys_values_keys_values_keys\n  local -a lower_values_keys_values_keys_values_keys\n\
    \  local -a upper_keys_values_keys_values_keys_values_keys\n  local -a lower_keys_values_keys_values_keys_values_keys\n\
    \  local -a upper_values_keys_values_keys_values_keys_values\n  local -a lower_values_keys_values_keys_values_keys_values\n\
    \  local -a upper_keys_values_keys_values_keys_values_keys_values\n  local -a\
    \ lower_keys_values_keys_values_keys_values_keys_values\n  local -a upper_values_keys_values_keys_values_keys_values_keys\n\
    \  local -a lower_values_keys_values_keys_values_keys_values_keys\n  local -a\
    \ upper_keys_values_\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=0\n\
    \    local upper_case=0\n    local mixed_case=0\n    local empty_dict=0\n    while\
    \ IFS=, read -r key value; do\n        if [[ -z \"$key\" ]]; then\n          \
    \  empty_dict=1\n            break\n        fi\n        if [[ \"$key\" =~ [a-z]\
    \ ]]; then\n            lower_case=1\n        fi\n        if [[ \"$key\" =~ [A-Z]\
    \ ]]; then\n            upper_case=1\n        fi\n        if [[ $lower_case -eq\
    \ 1 && $upper_case -eq 1 ]]; then\n            mixed_case=1\n            break\n\
    \        fi\n    done <<< \"$dict\"\n    if [[ $empty_dict -eq 1 ]]; then\n  \
    \      echo \"false\"\n    elif [[ $mixed_case -eq 1 ]]; then\n        echo \"\
    false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local key\n  local value\n  local -a keys\n  local -a values\n  local -A dict_map\n\
    \  local -A lower_map\n  local -A upper_map\n  local -A mixed_map\n  local -A\
    \ empty_map\n  local -A lower_keys_map\n  local -A upper_keys_map\n  local -A\
    \ mixed_keys_map\n  local -A empty_keys_map\n  local -A lower_values_map\n  local\
    \ -A upper_values_map\n  local -A mixed_values_map\n  local -A empty_values_map\n\
    \  local -A lower_keys_values_map\n  local -A upper_keys_values_map\n  local -A\
    \ mixed_keys_values_map\n  local -A empty_keys_values_map\n  local -A lower_keys_values_map\n\
    \  local -A upper_keys_values_map\n  local -A mixed_keys_values_map\n  local -A\
    \ empty_keys_values_map\n  local -A lower_keys_values_map\n  local -A upper_keys_values_map\n\
    \  local -A mixed_keys_values_map\n  local -A empty_keys_values_map\n  local -A\
    \ lower_keys_values_map\n  local -A upper_keys_values_map\n  local -A mixed_keys_values_map\n\
    \  local -A empty_keys_values_map\n  local -A lower_keys_values_map\n  local -A\
    \ upper_keys_values_map\n  local -A mixed_keys_values_map\n  local -A empty_keys_values_map\n\
    \  local -A lower_keys_values_map\n  local -A upper_keys_values_map\n  local -A\
    \ mixed_keys_values_map\n  local -A empty_keys_values_map\n  local -A lower_keys_values_map\n\
    \  local -A upper_keys_values_map\n  local -A mixed_keys_values_map\n  local -A\
    \ empty_keys_values_map\n  local -A lower\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local all_lower=1\n    local all_upper=1\n   \
    \ local key\n    local value\n    while IFS=',' read -r key value; do\n      \
    \  if [[ $key =~ [A-Z] ]]; then\n            all_lower=0\n        fi\n       \
    \ if [[ $key =~ [a-z] ]]; then\n            all_upper=0\n        fi\n    done\
    \ <<< \"$dict\"\n    if [[ $all_lower -eq 1 || $all_upper -eq 1 ]]; then\n   \
    \     echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case=\"\"\n  local key=\"\"\n  local value=\"\
    \"\n  local is_lower=false\n  local is_upper=false\n  local is_mixed=false\n \
    \ local is_empty=false\n  local is_valid=false\n  local is_all_lower=false\n \
    \ local is_all_upper=false\n  local is_all_mixed=false\n  local is_all_valid=false\n\
    \  local is_all_invalid=false\n  local is_all_empty=false\n  local is_all_lower_upper=false\n\
    \  local is_all_lower_mixed=false\n  local is_all_lower_invalid=false\n  local\
    \ is_all_upper_mixed=false\n  local is_all_upper_invalid=false\n  local is_all_mixed_invalid=false\n\
    \  local is_all_lower_upper_mixed=false\n  local is_all_lower_upper_invalid=false\n\
    \  local is_all_lower_mixed_invalid=false\n  local is_all_upper_mixed_invalid=false\n\
    \  local is_all_lower_upper_mixed_invalid=false\n  local is_all_lower_upper_mixed_empty=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty=false\n  local is_all_lower_upper_mixed_empty_invalid=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty_invalid=false\n  local is_all_lower_upper_mixed_invalid_empty_invalid_empty=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty_invalid_empty_invalid=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty_invalid_empty_invalid_empty=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty_invalid_empty_invalid_empty_invalid=false\n\
    \  local is_all_lower_upper_mixed_invalid_empty_invalid_empty_invalid_empty_in\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local is_lower=false\n  local is_upper=false\n  local\
    \ key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n      is_lower=true\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n     \
    \ is_upper=true\n    else\n      echo \"false\"\n      return\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $is_lower == true && $is_upper == true ]]; then\n   \
    \ echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [[\
    \ $dict_size -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d',' -f1)\n  local dict_keys_size=$(echo \"$dict_keys\" | wc\
    \ -l)\n  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ \"$dict_keys\" == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n\
    \  elif [[ \"$dict_keys\" == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_regex=\"^[a-z]+$\"\n  local upper_key_regex=\"\
    ^[A-Z]+$\"\n  local lower_key_regex=\"^[a-z]+$\"\n  local all_lower=true\n  local\
    \ all_upper=true\n  local key\n  local value\n  while IFS=, read -r key value;\
    \ do\n    if [[ ! $key =~ $key_regex ]]; then\n      echo \"false\"\n      return\n\
    \    fi\n    if [[ ! $key =~ $lower_key_regex ]]; then\n      all_lower=false\n\
    \    fi\n    if [[ ! $key =~ $upper_key_regex ]]; then\n      all_upper=false\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $all_lower == true ]] || [[ $all_upper\
    \ == true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"\
    false\"\n  elif [[ $lower_case_keys -eq 1 && $upper_case_keys -eq 0 && $mixed_case_keys\
    \ -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $lower_case_keys -eq 0 && $upper_case_keys\
    \ -eq 1 && $mixed_case_keys -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case\n  local key\n  local value\n  local\
    \ dict_size\n  local dict_size_lower\n  local dict_size_upper\n  local dict_size_mixed\n\
    \  local dict_size_numeric\n  local dict_size_other\n  local dict_size_empty\n\
    \  local dict_size_total\n  local dict_size_lower_percent\n  local dict_size_upper_percent\n\
    \  local dict_size_mixed_percent\n  local dict_size_numeric_percent\n  local dict_size_other_percent\n\
    \  local dict_size_empty_percent\n  local dict_size_total_percent\n  local dict_size_lower_percent_rounded\n\
    \  local dict_size_upper_percent_rounded\n  local dict_size_mixed_percent_rounded\n\
    \  local dict_size_numeric_percent_rounded\n  local dict_size_other_percent_rounded\n\
    \  local dict_size_empty_percent_rounded\n  local dict_size_total_percent_rounded\n\
    \  local dict_size_lower_rounded\n  local dict_size_upper_rounded\n  local dict_size_mixed_rounded\n\
    \  local dict_size_numeric_rounded\n  local dict_size_other_rounded\n  local dict_size_empty_rounded\n\
    \  local dict_size_total_rounded\n  local dict_size_lower_rounded_percent\n  local\
    \ dict_size_upper_rounded_percent\n  local dict_size_mixed_rounded_percent\n \
    \ local dict_size_numeric_rounded_percent\n  local dict_size_other_rounded_percent\n\
    \  local dict_size_empty_rounded_percent\n  local dict_size_total_rounded_percent\n\
    \  local dict_size_lower_rounded_percent_rounded\n  local dict_size_upper_rounded_percent_rounded\n\
    \  local dict_size_mixed_rounded_percent_rounded\n  local dict_size_numeric_rounded_percent_rounded\n\
    \  local dict_size_other_rounded_percent_rounded\n  local dict_size_empty_rounded_percent_rounded\n\
    \  local dict_size_total_rounded_percent_rounded\n  local dict_size_lower_rounded\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local key_case\n  local key\n  local value\n  local\
    \ all_lower=true\n  local all_upper=true\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ [a-z] ]]; then\n      all_upper=false\n    elif [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      all_lower=false\n    else\n      echo \"false\"\n \
    \     return\n    fi\n  done <<< \"$csv\"\n  if $all_lower || $all_upper; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  # Get the\
    \ first key\n  local key=$(echo \"$1\" | cut -d, -f1)\n  # Get the first value\n\
    \  local value=$(echo \"$1\" | cut -d, -f2)\n  # Get the first character of the\
    \ key\n  local first_char=$(echo \"$key\" | cut -c1)\n  # Check if the first character\
    \ is lower case\n  local is_lower=$(echo \"$first_char\" | grep -q \"[a-z]\" &&\
    \ echo \"true\" || echo \"false\")\n  # Check if the first character is upper\
    \ case\n  local is_upper=$(echo \"$first_char\" | grep -q \"[A-Z]\" && echo \"\
    true\" || echo \"false\")\n  # If the first character is not lower case or upper\
    \ case, return false\n  if [ \"$is_lower\" == \"false\" ] && [ \"$is_upper\" ==\
    \ \"false\" ]; then\n    echo \"false\"\n    return\n  fi\n  # If the first character\
    \ is lower case, check if the rest of the characters are lower case\n  if [ \"\
    $is_lower\" == \"true\" ]; then\n    local is_lower_rest=$(echo \"$key\" | grep\
    \ -q \"[^a-z]\" && echo \"false\" || echo \"true\")\n    if [ \"$is_lower_rest\"\
    \ == \"false\" ]; then\n      echo \"false\"\n      return\n    fi\n  fi\n  #\
    \ If the first character is upper case, check if the rest of the characters are\
    \ upper case\n  if [ \"$is_upper\" == \"true\" ]; then\n    local is_upper_rest=$(echo\
    \ \"$key\" | grep -q \"[^A-Z]\" && echo \"false\" || echo \"true\")\n    if [\
    \ \"$is_upper_rest\" == \"false\" ]; then\n      echo \"false\"\n      return\n\
    \    fi\n  fi\n  # Check the rest of the keys\n  local rest=$(echo \"$1\" | cut\
    \ -d, -f3-)\n  local rest_result=$(check_dict_case \"$rest\")\n  if [ \"$rest_result\"\
    \ == \"false\" ]; then\n   \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp096ajyov.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp096ajyov.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower_keys=0\n    local upper_keys=0\n    local\
    \ mixed_keys=0\n    local empty_dict=0\n    while IFS=, read -r key value; do\n\
    \        if [[ -z \"$key\" ]]; then\n            empty_dict=1\n            break\n\
    \        fi\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower_keys=1\n\
    \        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper_keys=1\n   \
    \     else\n            mixed_keys=1\n            break\n        fi\n    done\
    \ <<< \"$dict\"\n    if [[ \"$lower_keys\" -eq 1 && \"$upper_keys\" -eq 0 && \"\
    $mixed_keys\" -eq 0 && \"$empty_dict\" -eq 0 ]]; then\n        echo \"true\"\n\
    \    elif [[ \"$lower_keys\" -eq 0 && \"$upper_keys\" -eq 1 && \"$mixed_keys\"\
    \ -eq 0 && \"$empty_dict\" -eq 0 ]]; then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local mixed_case=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"\
    $key\" =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n    fi\n  done <<<\
    \ \"$csv\"\n  if [[ $lower_case -eq 1 && $upper_case -eq 0 && $mixed_case -eq\
    \ 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower_case=0\n    local upper_case=0\n \
    \   local mixed_case=0\n    local key\n    local value\n    local -a keys\n  \
    \  local -a values\n    local -a lower_keys\n    local -a upper_keys\n    local\
    \ -a lower_values\n    local -a upper_values\n    local -a mixed_keys\n    local\
    \ -a mixed_values\n    local -a lower_keys_values\n    local -a upper_keys_values\n\
    \    local -a mixed_keys_values\n    local -a lower_keys_upper_values\n    local\
    \ -a upper_keys_lower_values\n    local -a mixed_keys_mixed_values\n    local\
    \ -a lower_keys_mixed_values\n    local -a upper_keys_mixed_values\n    local\
    \ -a mixed_keys_lower_values\n    local -a mixed_keys_upper_values\n    local\
    \ -a lower_keys_lower_values\n    local -a upper_keys_upper_values\n    local\
    \ -a mixed_keys_lower_values\n    local -a mixed_keys_upper_values\n    local\
    \ -a lower_keys_upper_values\n    local -a upper_keys_lower_values\n    local\
    \ -a mixed_keys_mixed_values\n    local -a lower_keys_mixed_values\n    local\
    \ -a upper_keys_mixed_values\n    local -a mixed_keys_lower_values\n    local\
    \ -a mixed_keys_upper_values\n    local -a lower_keys_lower_values\n    local\
    \ -a upper_keys_upper_values\n    local -a mixed_keys_lower_values\n    local\
    \ -a mixed_keys_upper_values\n    local -a lower_keys_upper_values\n    local\
    \ -a upper_keys_lower_values\n    local -a mixed_keys_mixed_values\n    local\
    \ -a lower_keys_mixed_values\n    local -a upper_keys_mixed_values\n    local\
    \ -a mixed_keys_lower_values\n    local -a mixed_keys_upper_values\n    local\
    \ -a lower_keys_lower_values\n    local -a upper_keys_upper_values\n\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local lower_case=true\n\
    \  local upper_case=true\n  while IFS=, read -r key value; do\n    if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      lower_case=false\n    fi\n    if [[ \"$key\" =~ [a-z]\
    \ ]]; then\n      upper_case=false\n    fi\n  done <<< \"$dict\"\n  if [[ \"$lower_case\"\
    \ = true || \"$upper_case\" = true ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local csv=\"$1\"\n    local lower_case_keys=0\n    local upper_case_keys=0\n\
    \    local key\n    while IFS=, read -r key value; do\n        if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n            lower_case_keys=1\n        elif [[ $key =~ ^[A-Z]+$ ]];\
    \ then\n            upper_case_keys=1\n        else\n            echo \"false\"\
    \n            return\n        fi\n    done < <(echo \"$csv\")\n    if [[ $lower_case_keys\
    \ -eq 1 && $upper_case_keys -eq 1 ]]; then\n        echo \"false\"\n    else\n\
    \        echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case_keys=true\n  local upper_case_keys=true\n\
    \  local key\n  while IFS=, read -r key value; do\n    if [[ \"$key\" =~ [A-Z]\
    \ ]]; then\n      lower_case_keys=false\n    fi\n    if [[ \"$key\" =~ [a-z] ]];\
    \ then\n      upper_case_keys=false\n    fi\n  done <<< \"$csv\"\n  if $lower_case_keys\
    \ || $upper_case_keys; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=$1\n  local keys=$(echo \"$csv\" | cut -d, -f1)\n  local lower_keys=$(echo\
    \ \"$keys\" | tr '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo \"$keys\"\
    \ | tr '[:lower:]' '[:upper:]')\n  if [[ \"$keys\" == \"$lower_keys\" ]] || [[\
    \ \"$keys\" == \"$upper_keys\" ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local -a keys\n    local -a values\n    local -a lower_keys\n    local\
    \ -a upper_keys\n    local -a lower_values\n    local -a upper_values\n    local\
    \ -a lower_keys_values\n    local -a upper_keys_values\n    local -a lower_keys_upper_values\n\
    \    local -a upper_keys_lower_values\n    local -a lower_keys_lower_values\n\
    \    local -a upper_keys_upper_values\n    local -a lower_keys_upper_values_lower_values\n\
    \    local -a upper_keys_lower_values_upper_values\n    local -a lower_keys_lower_values_upper_values\n\
    \    local -a upper_keys_upper_values_lower_values\n    local -a lower_keys_upper_values_upper_values\n\
    \    local -a upper_keys_lower_values_lower_values\n    local -a lower_keys_lower_values_lower_values\n\
    \    local -a upper_keys_upper_values_upper_values\n    local -a lower_keys_upper_values_lower_values_upper_values\n\
    \    local -a upper_keys_lower_values_upper_values_lower_values\n    local -a\
    \ lower_keys_lower_values_upper_values_lower_values\n    local -a upper_keys_upper_values_lower_values_upper_values\n\
    \    local -a lower_keys_upper_values_upper_values_lower_values\n    local -a\
    \ upper_keys_lower_values_lower_values_upper_values\n    local -a lower_keys_lower_values_lower_values_upper_values\n\
    \    local -a upper_keys_upper_values_upper_values_lower_values\n    local -a\
    \ lower_keys_upper_values_lower_values_lower_values\n    local -a upper_keys_lower_values_upper_values_upper_values\n\
    \    local -a lower_keys_lower_values_upper_values_upper_values\n    local -a\
    \ upper_keys_upper_values_lower_values_lower_values\n    local -a lower_keys_upper_values_upper_values_upper_values\n\
    \    local -a upper_keys_lower_values\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_len=$(echo \"$dict\" | wc -l)\n  if [[\
    \ $dict_len -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ \"$dict_keys\" == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n\
    \  elif [[ \"$dict_keys\" == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_keys_lower=$(echo \"\
    $dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo \"\
    $dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict_keys\" = \"$dict_keys_lower\"\
    \ ]; then\n    echo \"true\"\n  elif [ \"$dict_keys\" = \"$dict_keys_upper\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local key\n  for key in $(echo \"$dict\" | cut -d, -f1); do\n    if [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys + 1))\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys + 1))\n    else\n     \
    \ mixed_keys=$((mixed_keys + 1))\n    fi\n  done\n  if [[ $lower_keys -gt 0 &&\
    \ $upper_keys -gt 0 ]]; then\n    echo \"false\"\n  elif [[ $mixed_keys -gt 0\
    \ ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=true\n  local upper_case=true\n \
    \ local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"\
    $key\" =~ [A-Z] ]]; then\n      lower_case=false\n    fi\n    if [[ \"$key\" =~\
    \ [a-z] ]]; then\n      upper_case=false\n    fi\n  done <<< \"$dict\"\n  if [[\
    \ \"$lower_case\" = true || \"$upper_case\" = true ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local -r csv=\"$1\"\n    local -r lower_keys=\"$(echo \"$csv\" | cut\
    \ -d, -f1 | tr '[:upper:]' '[:lower:]')\"\n    local -r upper_keys=\"$(echo \"\
    $csv\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\"\n    local -r lower_keys_csv=\"\
    $(paste <(echo \"$lower_keys\") <(echo \"$csv\" | cut -d, -f2))\"\n    local -r\
    \ upper_keys_csv=\"$(paste <(echo \"$upper_keys\") <(echo \"$csv\" | cut -d, -f2))\"\
    \n    if [[ \"$csv\" == \"$lower_keys_csv\" ]]; then\n        echo \"true\"\n\
    \    elif [[ \"$csv\" == \"$upper_keys_csv\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\
    \n  local dict_values=\"$(echo \"$dict\" | cut -d, -f2)\"\n  local dict_key_count=\"\
    $(echo \"$dict_keys\" | wc -l)\"\n  local dict_value_count=\"$(echo \"$dict_values\"\
    \ | wc -l)\"\n  local dict_key_lower_count=\"$(echo \"$dict_keys\" | grep -c '^[a-z]*$')\"\
    \n  local dict_key_upper_count=\"$(echo \"$dict_keys\" | grep -c '^[A-Z]*$')\"\
    \n  if [[ \"$dict_key_count\" -eq 0 ]]; then\n    echo \"false\"\n  elif [[ \"\
    $dict_key_count\" -eq \"$dict_value_count\" ]]; then\n    if [[ \"$dict_key_count\"\
    \ -eq \"$dict_key_lower_count\" ]]; then\n      echo \"true\"\n    elif [[ \"\
    $dict_key_count\" -eq \"$dict_key_upper_count\" ]]; then\n      echo \"true\"\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local\
    \ other=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n \
    \   if [[ $key =~ [a-z] ]]; then\n      lower_case=1\n    elif [[ $key =~ [A-Z]\
    \ ]]; then\n      upper_case=1\n    else\n      other=1\n    fi\n  done <<< \"\
    $dict\"\n  if [[ $lower_case -eq 1 && $upper_case -eq 1 ]]; then\n    echo \"\
    false\"\n  elif [[ $lower_case -eq 1 && $upper_case -eq 0 && $other -eq 0 ]];\
    \ then\n    echo \"true\"\n  elif [[ $lower_case -eq 0 && $upper_case -eq 1 &&\
    \ $other -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case=true\n  local upper_case=true\n  local\
    \ key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      lower_case=false\n    fi\n    if [[ \"$key\" =~ [a-z]\
    \ ]]; then\n      upper_case=false\n    fi\n  done <<< \"$csv\"\n  if [[ \"$lower_case\"\
    \ = true || \"$upper_case\" = true ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # TODO: implement\n  echo \"false\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local csv=\"$1\"\n    local key\n    local value\n    local upper=0\n\
    \    local lower=0\n    local mixed=0\n    local empty=0\n    local num=0\n  \
    \  while IFS=\",\" read -r key value; do\n        if [[ -z \"$key\" ]]; then\n\
    \            empty=1\n            continue\n        fi\n        if [[ \"$key\"\
    \ =~ ^[0-9]+$ ]]; then\n            num=1\n            continue\n        fi\n\
    \        if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper=1\n        elif\
    \ [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower=1\n        else\n      \
    \      mixed=1\n        fi\n    done <<< \"$csv\"\n    if [[ $empty -eq 1 ]];\
    \ then\n        echo \"false\"\n    elif [[ $num -eq 1 ]]; then\n        echo\
    \ \"false\"\n    elif [[ $mixed -eq 1 ]]; then\n        echo \"false\"\n    elif\
    \ [[ $upper -eq 1 && $lower -eq 1 ]]; then\n        echo \"false\"\n    else\n\
    \        echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local lower=0\n\
    \  local upper=0\n  local mixed=0\n  local key\n  while IFS=, read -r key value;\
    \ do\n    if [ \"$key\" = \"$(tr '[:upper:]' '[:lower:]' <<< \"$key\")\" ]; then\n\
    \      lower=$((lower + 1))\n    elif [ \"$key\" = \"$(tr '[:lower:]' '[:upper:]'\
    \ <<< \"$key\")\" ]; then\n      upper=$((upper + 1))\n    else\n      mixed=$((mixed\
    \ + 1))\n    fi\n  done <<< \"$1\"\n  if [ $mixed -gt 0 ]; then\n    echo \"false\"\
    \n  elif [ $lower -gt 0 ] && [ $upper -gt 0 ]; then\n    echo \"false\"\n  else\n\
    \    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [[\
    \ $dict_size -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ \"$dict_keys\" == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n\
    \  elif [[ \"$dict_keys\" == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower=0\n    local upper=0\n    local key\n\
    \    local value\n    while IFS=, read -r key value; do\n        if [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n            lower=1\n        elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n            upper=1\n        else\n            echo \"false\"\n  \
    \          return\n        fi\n    done <<< \"$dict\"\n    if [[ $lower -eq 1\
    \ && $upper -eq 1 ]]; then\n        echo \"false\"\n    else\n        echo \"\
    true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"\
    false\"\n  elif [[ $lower_case_keys -eq 1 && $upper_case_keys -eq 0 && $mixed_case_keys\
    \ -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $lower_case_keys -eq 0 && $upper_case_keys\
    \ -eq 1 && $mixed_case_keys -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local value\n    local lower_count=0\n\
    \    local upper_count=0\n    local all_lower=true\n    local all_upper=true\n\
    \    local empty=true\n    while IFS=, read -r key value; do\n        empty=false\n\
    \        if [[ $key =~ ^[a-z]+$ ]]; then\n            lower_count=$((lower_count\
    \ + 1))\n        else\n            all_lower=false\n        fi\n        if [[\
    \ $key =~ ^[A-Z]+$ ]]; then\n            upper_count=$((upper_count + 1))\n  \
    \      else\n            all_upper=false\n        fi\n    done <<< \"$dict\"\n\
    \    if $empty; then\n        echo \"false\"\n    elif $all_lower; then\n    \
    \    echo \"true\"\n    elif $all_upper; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict=\"$1\"\n  local key\n  local value\n  local lower_case_keys=true\n  local\
    \ upper_case_keys=true\n  while IFS=, read -r key value; do\n    if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n      lower_case_keys=false\n    fi\n    if [[ \"$key\" =~\
    \ [a-z] ]]; then\n      upper_case_keys=false\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ \"$lower_case_keys\" == \"true\" ]] || [[ \"$upper_case_keys\" == \"\
    true\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=true\n\
    \    local upper_case=true\n    while IFS=, read -r key value; do\n        if\
    \ [[ \"$key\" =~ [A-Z] ]]; then\n            lower_case=false\n        fi\n  \
    \      if [[ \"$key\" =~ [a-z] ]]; then\n            upper_case=false\n      \
    \  fi\n    done <<< \"$dict\"\n    if [[ \"$lower_case\" = true ]] || [[ \"$upper_case\"\
    \ = true ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=0\n\
    \    local upper_case=0\n    local mixed_case=0\n    local empty_dict=0\n    local\
    \ dict_size=0\n    local dict_size_lower=0\n    local dict_size_upper=0\n    local\
    \ dict_size_mixed=0\n    local dict_size_empty=0\n    local dict_size_total=0\n\
    \    local dict_size_total_lower=0\n    local dict_size_total_upper=0\n    local\
    \ dict_size_total_mixed=0\n    local dict_size_total_empty=0\n    local dict_size_total_all=0\n\
    \    local dict_size_total_all_lower=0\n    local dict_size_total_all_upper=0\n\
    \    local dict_size_total_all_mixed=0\n    local dict_size_total_all_empty=0\n\
    \    local dict_size_total_all_lower_upper=0\n    local dict_size_total_all_lower_mixed=0\n\
    \    local dict_size_total_all_lower_empty=0\n    local dict_size_total_all_upper_mixed=0\n\
    \    local dict_size_total_all_upper_empty=0\n    local dict_size_total_all_mixed_empty=0\n\
    \    local dict_size_total_all_lower_upper_mixed=0\n    local dict_size_total_all_lower_upper_empty=0\n\
    \    local dict_size_total_all_lower_mixed_empty=0\n    local dict_size_total_all_upper_mixed_empty=0\n\
    \    local dict_size_total_all_lower_upper_mixed_empty=0\n    local dict_size_total_all_lower_upper_mixed_empty_null=0\n\
    \    local dict_size_total_all_lower_upper_mixed_empty_null_null=0\n    local\
    \ dict_size_total_all_lower_upper_mixed_empty_null_null_null=0\n    local dict_size_total_all_lower_upper_mixed\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local key\n  local\
    \ value\n  while IFS=, read -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]];\
    \ then\n      lower=$((lower + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \      upper=$((upper + 1))\n    else\n      echo \"false\"\n      return\n  \
    \  fi\n  done <<< \"$dict\"\n  if [[ $lower -gt 0 && $upper -gt 0 ]]; then\n \
    \   echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local all_lower=true\n  local all_upper=true\n  local\
    \ key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key =~ [A-Z]\
    \ ]]; then\n      all_lower=false\n    fi\n    if [[ $key =~ [a-z] ]]; then\n\
    \      all_upper=false\n    fi\n  done <<< \"$dict\"\n  if $all_lower || $all_upper;\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local\
    \ dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local dict_keys_lower=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [[ \"$dict_keys\" == \"$dict_keys_lower\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\" == \"$dict_keys_upper\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=\"$(echo \"$dict\" | wc -l)\"\n  if\
    \ [[ \"$dict_size\" -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\n  local dict_values=\"$(echo\
    \ \"$dict\" | cut -d, -f2)\"\n  local dict_keys_lower=\"$(echo \"$dict_keys\"\
    \ | tr '[:upper:]' '[:lower:]')\"\n  local dict_keys_upper=\"$(echo \"$dict_keys\"\
    \ | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$dict_keys\" == \"$dict_keys_lower\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\" == \"$dict_keys_upper\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local -r csv=\"$1\"\n    local -r lower_case_keys=\"$(echo \"$csv\" |\
    \ cut -d, -f1 | tr '[:upper:]' '[:lower:]')\"\n    local -r upper_case_keys=\"\
    $(echo \"$csv\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\"\n    if [[ \"$csv\"\
    \ == \"$lower_case_keys\" ]]; then\n        echo \"true\"\n    elif [[ \"$csv\"\
    \ == \"$upper_case_keys\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower=0\n\
    \    local upper=0\n    local mixed=0\n    local empty=0\n    local i=0\n    while\
    \ IFS=, read -r key value; do\n        if [[ -z \"$key\" ]]; then\n          \
    \  empty=1\n            break\n        fi\n        if [[ \"$key\" =~ [a-z] ]];\
    \ then\n            lower=1\n        fi\n        if [[ \"$key\" =~ [A-Z] ]]; then\n\
    \            upper=1\n        fi\n        if [[ $lower -eq 1 && $upper -eq 1 ]];\
    \ then\n            mixed=1\n            break\n        fi\n        i=$((i+1))\n\
    \    done <<< \"$dict\"\n    if [[ $i -eq 0 ]]; then\n        empty=1\n    fi\n\
    \    if [[ $empty -eq 1 ]]; then\n        echo \"false\"\n    elif [[ $mixed -eq\
    \ 1 ]]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local key\n  local value\n  local lower_case_keys=true\n\
    \  local upper_case_keys=true\n  while IFS=, read -r key value; do\n    [[ $key\
    \ =~ [a-z] ]] || lower_case_keys=false\n    [[ $key =~ [A-Z] ]] || upper_case_keys=false\n\
    \  done <<< \"$dict\"\n  if [[ $lower_case_keys == true || $upper_case_keys ==\
    \ true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=$1\n  local dict=$(echo \"$csv\" | tr ',' '\\n')\n  local lower=$(echo\
    \ \"$dict\" | grep -v '[A-Z]' | wc -l)\n  local upper=$(echo \"$dict\" | grep\
    \ -v '[a-z]' | wc -l)\n  if [ \"$lower\" -eq \"$upper\" ]; then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local -a keys=($(echo \"$dict\" | cut -d, -f1))\n\
    \    local -a values=($(echo \"$dict\" | cut -d, -f2))\n    local -a lower_keys=($(echo\
    \ \"$dict\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]'))\n    local -a upper_keys=($(echo\
    \ \"$dict\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]'))\n    if [ ${#keys[@]}\
    \ -eq 0 ]; then\n        echo \"false\"\n    elif [ \"${keys[*]}\" == \"${lower_keys[*]}\"\
    \ ]; then\n        echo \"true\"\n    elif [ \"${keys[*]}\" == \"${upper_keys[*]}\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # TODO: implement this function\n  echo \"false\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower_case_keys=true\n    local upper_case_keys=true\n\
    \    local key\n    while IFS=, read -r key value; do\n        if [[ \"$key\"\
    \ =~ [A-Z] ]]; then\n            lower_case_keys=false\n        fi\n        if\
    \ [[ \"$key\" =~ [a-z] ]]; then\n            upper_case_keys=false\n        fi\n\
    \    done <<< \"$dict\"\n    if $lower_case_keys || $upper_case_keys; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local\
    \ dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local lower_keys=$(echo \"$dict_keys\"\
    \ | tr '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo \"$dict_keys\" | tr\
    \ '[:lower:]' '[:upper:]')\n  if [[ \"$dict_keys\" == \"$lower_keys\" ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$dict_keys\" == \"$upper_keys\" ]]; then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local key\n  local value\n  local -a keys\n  local -a values\n  local -a mixed_keys\n\
    \  local -a mixed_values\n  local -a lower_keys\n  local -a lower_values\n  local\
    \ -a upper_keys\n  local -a upper_values\n  local -a all_keys\n  local -a all_values\n\
    \  local -a all_keys_values\n  local -a lower_keys_values\n  local -a upper_keys_values\n\
    \  local -a mixed_keys_values\n  local -a all_keys_values_sorted\n  local -a lower_keys_values_sorted\n\
    \  local -a upper_keys_values_sorted\n  local -a mixed_keys_values_sorted\n  local\
    \ -a all_keys_values_sorted_uniq\n  local -a lower_keys_values_sorted_uniq\n \
    \ local -a upper_keys_values_sorted_uniq\n  local -a mixed_keys_values_sorted_uniq\n\
    \  local -a all_keys_values_sorted_uniq_joined\n  local -a lower_keys_values_sorted_uniq_joined\n\
    \  local -a upper_keys_values_sorted_uniq_joined\n  local -a mixed_keys_values_sorted_uniq_joined\n\
    \  local -a all_keys_values_sorted_uniq_joined_sorted\n  local -a lower_keys_values_sorted_uniq_joined_sorted\n\
    \  local -a upper_keys_values_sorted_uniq_joined_sorted\n  local -a mixed_keys_values_sorted_uniq_joined_sorted\n\
    \  local -a all_keys_values_sorted_uniq_joined_sorted_uniq\n  local -a lower_keys_values_sorted_uniq_joined_sorted_uniq\n\
    \  local -a upper_keys_values_sorted_uniq_joined_sorted_uniq\n  local -a mixed_keys_values_sorted_uniq_joined\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_keys_lower=$(echo \"\
    $dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo \"\
    $dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict_keys\" == \"$dict_keys_lower\"\
    \ ] || [ \"$dict_keys\" == \"$dict_keys_upper\" ]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $lower_case_keys -gt 0 && $mixed_case_keys\
    \ -gt 0 ]]; then\n    echo \"false\"\n  elif [[ $upper_case_keys -gt 0 && $mixed_case_keys\
    \ -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n\
    \      mixed_case_keys=1\n    fi\n  done <<< \"$dict\"\n  if [[ \"$lower_case_keys\"\
    \ -eq 1 && \"$upper_case_keys\" -eq 0 && \"$mixed_case_keys\" -eq 0 ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$lower_case_keys\" -eq 0 && \"$upper_case_keys\"\
    \ -eq 1 && \"$mixed_case_keys\" -eq 0 ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case_keys=0\n\
    \    local upper_case_keys=0\n    local mixed_case_keys=0\n    local empty_dict=0\n\
    \    local dict_size=0\n    local lower_case_keys_size=0\n    local upper_case_keys_size=0\n\
    \    local mixed_case_keys_size=0\n    local lower_case_keys_size_percent=0\n\
    \    local upper_case_keys_size_percent=0\n    local mixed_case_keys_size_percent=0\n\
    \    local lower_case_keys_size_percent_rounded=0\n    local upper_case_keys_size_percent_rounded=0\n\
    \    local mixed_case_keys_size_percent_rounded=0\n    local lower_case_keys_size_percent_rounded_int=0\n\
    \    local upper_case_keys_size_percent_rounded_int=0\n    local mixed_case_keys_size_percent_rounded_int=0\n\
    \    local lower_case_keys_size_percent_rounded_int_str=0\n    local upper_case_keys_size_percent_rounded_int_str=0\n\
    \    local mixed_case_keys_size_percent_rounded_int_str=0\n    local lower_case_keys_size_percent_rounded_int_str_len=0\n\
    \    local upper_case_keys_size_percent_rounded_int_str_len=0\n    local mixed_case_keys_size_percent_rounded_int_str_len=0\n\
    \    local lower_case_keys_size_percent_rounded_int_str_len_diff=0\n    local\
    \ upper_case_keys_size_percent_rounded_int_str_len_diff=0\n    local mixed_case_keys_size_percent_rounded_int_str_len_diff=0\n\
    \    local lower_case_keys_size_percent_rounded_int_str_len_diff_zeros=0\n   \
    \ local upper_case_keys_size_percent_rounded_int_str_len_diff_zeros=0\n    local\
    \ mixed_case_keys_size_percent_rounded_int_str\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower_case=0\n\
    \    local upper_case=0\n    local mixed_case=0\n    local empty_dict=0\n    local\
    \ result=\"false\"\n    while IFS=, read -r key value; do\n        if [[ -z \"\
    $key\" ]]; then\n            empty_dict=1\n            break\n        fi\n   \
    \     if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower_case=1\n        elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper_case=1\n        else\n \
    \           mixed_case=1\n            break\n        fi\n    done <<< \"$dict\"\
    \n    if [[ \"$empty_dict\" -eq 0 ]]; then\n        if [[ \"$lower_case\" -eq\
    \ 1 && \"$upper_case\" -eq 0 && \"$mixed_case\" -eq 0 ]]; then\n            result=\"\
    true\"\n        elif [[ \"$lower_case\" -eq 0 && \"$upper_case\" -eq 1 && \"$mixed_case\"\
    \ -eq 0 ]]; then\n            result=\"true\"\n        fi\n    fi\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=0\n  local upper_keys=0\n  local\
    \ mixed_keys=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ [a-z] ]]; then\n      lower_keys=$((lower_keys + 1))\n\
    \    elif [[ \"$key\" =~ [A-Z] ]]; then\n      upper_keys=$((upper_keys + 1))\n\
    \    else\n      mixed_keys=$((mixed_keys + 1))\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ $lower_keys -gt 0 && $upper_keys -gt 0 ]]; then\n    echo \"false\"\n\
    \  elif [[ $mixed_keys -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"\
    true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key_case\n    local key\n    local value\n\
    \    local lower_case_keys=true\n    local upper_case_keys=true\n    while IFS=,\
    \ read -r key value; do\n        key_case=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n\
    \        if [[ \"$key\" != \"$key_case\" ]]; then\n            lower_case_keys=false\n\
    \        fi\n        key_case=$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\n\
    \        if [[ \"$key\" != \"$key_case\" ]]; then\n            upper_case_keys=false\n\
    \        fi\n    done <<< \"$dict\"\n    if [[ \"$lower_case_keys\" == \"true\"\
    \ ]] || [[ \"$upper_case_keys\" == \"true\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # Check for empty dictionary\n  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  # Check for lower case keys\n  if [ \"$(echo \"$1\" | awk\
    \ -F, '{print tolower($1)}' | sort -u | wc -l)\" -eq 1 ]; then\n    echo \"true\"\
    \n    return\n  fi\n  # Check for upper case keys\n  if [ \"$(echo \"$1\" | awk\
    \ -F, '{print toupper($1)}' | sort -u | wc -l)\" -eq 1 ]; then\n    echo \"true\"\
    \n    return\n  fi\n  # Otherwise, return false\n  echo \"false\"\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ $dict_size -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local dict_lower_keys=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_upper_keys=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [ \"$dict_keys\" == \"$dict_lower_keys\" ]; then\n    echo \"true\"\n  elif\
    \ [ \"$dict_keys\" == \"$dict_upper_keys\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ ^[a-z]+$ ]]; then\n      lower=1\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n\
    \      upper=1\n    else\n      mixed=1\n    fi\n  done < <(echo \"$dict\")\n\
    \  if [[ $lower == 1 && $upper == 0 && $mixed == 0 ]]; then\n    echo \"true\"\
    \n  elif [[ $lower == 0 && $upper == 1 && $mixed == 0 ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local key\n  local value\n  local lower_keys=0\n  local\
    \ upper_keys=0\n  local lower_keys_count=0\n  local upper_keys_count=0\n  local\
    \ lower_values=0\n  local upper_values=0\n  local lower_values_count=0\n  local\
    \ upper_values_count=0\n  local lower_keys_count_max=0\n  local upper_keys_count_max=0\n\
    \  local lower_values_count_max=0\n  local upper_values_count_max=0\n  local lower_keys_count_min=0\n\
    \  local upper_keys_count_min=0\n  local lower_values_count_min=0\n  local upper_values_count_min=0\n\
    \  local lower_keys_count_avg=0\n  local upper_keys_count_avg=0\n  local lower_values_count_avg=0\n\
    \  local upper_values_count_avg=0\n  local lower_keys_count_sum=0\n  local upper_keys_count_sum=0\n\
    \  local lower_values_count_sum=0\n  local upper_values_count_sum=0\n  local lower_keys_count_median=0\n\
    \  local upper_keys_count_median=0\n  local lower_values_count_median=0\n  local\
    \ upper_values_count_median=0\n  local lower_keys_count_mode=0\n  local upper_keys_count_mode=0\n\
    \  local lower_values_count_mode=0\n  local upper_values_count_mode=0\n  local\
    \ lower_keys_count_stddev=0\n  local upper_keys_count_stddev=0\n  local lower_values_count_stddev=0\n\
    \  local upper_values_count_stddev=0\n  local lower_keys_count_variance=0\n  local\
    \ upper_keys_count_variance=0\n  local lower_values_count_variance=0\n  local\
    \ upper_values_count_variance=0\n  local lower_keys_count_skewness=0\n  local\
    \ upper\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower_keys=0\n    local upper_keys=0\n    local\
    \ mixed_keys=0\n    local empty_dict=0\n    local key\n    local value\n    while\
    \ IFS=, read -r key value; do\n        if [[ -z \"$key\" ]]; then\n          \
    \  empty_dict=1\n            break\n        elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \            lower_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n   \
    \         upper_keys=1\n        else\n            mixed_keys=1\n            break\n\
    \        fi\n    done <<< \"$dict\"\n    if [[ $empty_dict -eq 1 ]]; then\n  \
    \      echo \"false\"\n    elif [[ $mixed_keys -eq 1 ]]; then\n        echo \"\
    false\"\n    elif [[ $lower_keys -eq 1 && $upper_keys -eq 1 ]]; then\n       \
    \ echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local lower=0\n  local upper=0\n  local\
    \ mixed=0\n  local empty=0\n  local i=0\n  while IFS=, read -r key value; do\n\
    \    if [[ -z \"$key\" ]]; then\n      empty=1\n    elif [[ \"$key\" =~ [a-z]\
    \ ]]; then\n      lower=1\n    elif [[ \"$key\" =~ [A-Z] ]]; then\n      upper=1\n\
    \    else\n      mixed=1\n    fi\n    i=$((i+1))\n  done < <(echo \"$dict\")\n\
    \  if [[ $i -eq 0 ]]; then\n    echo \"false\"\n  elif [[ $empty -eq 1 ]]; then\n\
    \    echo \"false\"\n  elif [[ $lower -eq 1 && $upper -eq 1 ]]; then\n    echo\
    \ \"false\"\n  elif [[ $mixed -eq 1 ]]; then\n    echo \"false\"\n  else\n   \
    \ echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n\
    \    local key_case\n    local key\n    local value\n    while IFS=, read -r key\
    \ value; do\n        if [ -z \"$key_case\" ]; then\n            if [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n                key_case=\"lower\"\n            elif [[\
    \ \"$key\" =~ ^[A-Z]+$ ]]; then\n                key_case=\"upper\"\n        \
    \    else\n                echo \"false\"\n                return\n          \
    \  fi\n        elif [ \"$key_case\" == \"lower\" ]; then\n            if [[ !\
    \ \"$key\" =~ ^[a-z]+$ ]]; then\n                echo \"false\"\n            \
    \    return\n            fi\n        elif [ \"$key_case\" == \"upper\" ]; then\n\
    \            if [[ ! \"$key\" =~ ^[A-Z]+$ ]]; then\n                echo \"false\"\
    \n                return\n            fi\n        fi\n    done <<< \"$1\"\n  \
    \  echo \"true\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"\
    false\"\n  elif [[ $lower_case_keys -eq 1 && $upper_case_keys -eq 0 && $mixed_case_keys\
    \ -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $lower_case_keys -eq 0 && $upper_case_keys\
    \ -eq 1 && $mixed_case_keys -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n  # Convert\
    \ the CSV to a bash array\n  IFS=',' read -r -a dict_array <<< \"$1\"\n  # Get\
    \ the first key\n  first_key=\"${dict_array[0]}\"\n  # Check if the first key\
    \ is upper case\n  if [[ \"$first_key\" =~ ^[A-Z]+$ ]]; then\n    # Check if all\
    \ keys are upper case\n    for key in \"${dict_array[@]}\"; do\n      if [[ !\
    \ \"$key\" =~ ^[A-Z]+$ ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n    done\n    echo \"true\"\n    return\n  fi\n  # Check if the first key\
    \ is lower case\n  if [[ \"$first_key\" =~ ^[a-z]+$ ]]; then\n    # Check if all\
    \ keys are lower case\n    for key in \"${dict_array[@]}\"; do\n      if [[ !\
    \ \"$key\" =~ ^[a-z]+$ ]]; then\n        echo \"false\"\n        return\n    \
    \  fi\n    done\n    echo \"true\"\n    return\n  fi\n  # The first key is not\
    \ upper or lower case\n  echo \"false\"\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty_dict=1\n\
    \    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n    elif\
    \ [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n      mixed_case_keys=1\n\
    \    fi\n  done <<< \"$dict\"\n  if [[ $lower_case_keys -eq 1 && $upper_case_keys\
    \ -eq 0 && $mixed_case_keys -eq 0 && $empty_dict -eq 0 ]]; then\n    echo \"true\"\
    \n  elif [[ $lower_case_keys -eq 0 && $upper_case_keys -eq 1 && $mixed_case_keys\
    \ -eq 0 && $empty_dict -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -r dict=\"$1\"\n  local -r lower_case_keys=\"$(echo \"$dict\" | cut\
    \ -d, -f1 | tr '[:upper:]' '[:lower:]')\"\n  local -r upper_case_keys=\"$(echo\
    \ \"$dict\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\"\n  local -r lower_case_keys_count=\"\
    $(echo \"$lower_case_keys\" | wc -l)\"\n  local -r upper_case_keys_count=\"$(echo\
    \ \"$upper_case_keys\" | wc -l)\"\n  if [[ \"$lower_case_keys_count\" -eq \"$upper_case_keys_count\"\
    \ ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case\n  local key\n  local value\n  local\
    \ all_lower=true\n  local all_upper=true\n  local IFS=','\n  while read key value;\
    \ do\n    key_case=$(echo \"$key\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"\
    $key\" != \"$key_case\" ]]; then\n      all_lower=false\n    fi\n    key_case=$(echo\
    \ \"$key\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$key\" != \"$key_case\"\
    \ ]]; then\n      all_upper=false\n    fi\n  done < <(echo \"$dict\")\n  if [[\
    \ \"$all_lower\" == \"true\" || \"$all_upper\" == \"true\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # Check for empty dictionary\n  if [ -z \"$1\" ]; then\n    echo \"false\"\
    \n    return\n  fi\n  # Check for all lower case keys\n  if [ \"$(echo \"$1\"\
    \ | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | sort | uniq -c | wc -l)\" -eq 1\
    \ ]; then\n    echo \"true\"\n    return\n  fi\n  # Check for all upper case keys\n\
    \  if [ \"$(echo \"$1\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]' | sort | uniq\
    \ -c | wc -l)\" -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n  # If we\
    \ got here, the dictionary is not all lower or all upper case\n  echo \"false\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [[\
    \ $dict_size -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\" | cut -d, -f2)\n\
    \  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ \"$dict_keys\" == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n\
    \  elif [[ \"$dict_keys\" == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case\n  local key_case_prev\n  local key\n\
    \  local value\n  local IFS=','\n  while read key value; do\n    key_case=$(echo\
    \ \"$key\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$key_case\" != \"$key\"\
    \ ]]; then\n      key_case=$(echo \"$key\" | tr '[:lower:]' '[:upper:]')\n   \
    \   if [[ \"$key_case\" != \"$key\" ]]; then\n        echo \"false\"\n       \
    \ return\n      fi\n    fi\n    if [[ -z \"$key_case_prev\" ]]; then\n      key_case_prev=\"\
    $key_case\"\n    elif [[ \"$key_case\" != \"$key_case_prev\" ]]; then\n      echo\
    \ \"false\"\n      return\n    fi\n  done <<< \"$dict\"\n  echo \"true\"\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local dict_size=$(echo \"$dict\" | wc -l)\n  \
    \  if [ $dict_size -eq 0 ]; then\n        echo \"false\"\n        return\n   \
    \ fi\n    local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n    local dict_values=$(echo\
    \ \"$dict\" | cut -d, -f2)\n    local lower_keys=$(echo \"$dict_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n    local upper_keys=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \    if [ \"$dict_keys\" == \"$lower_keys\" ]; then\n        echo \"true\"\n \
    \   elif [ \"$dict_keys\" == \"$upper_keys\" ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n\
    \    elif [[ $key =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n  \
    \    mixed_case_keys=1\n    fi\n  done <<< \"$dict\"\n  if [[ $lower_case_keys\
    \ -eq 1 && $upper_case_keys -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $mixed_case_keys\
    \ -eq 1 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\
    \n  local dict_values=\"$(echo \"$dict\" | cut -d, -f2)\"\n  local dict_keys_lower=\"\
    $(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\"\n  local dict_keys_upper=\"\
    $(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$dict_keys\"\
    \ == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\"\
    \ == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\
    \n  local dict_values=\"$(echo \"$dict\" | cut -d, -f2)\"\n  local dict_keys_lower=\"\
    $(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\"\n  local dict_keys_upper=\"\
    $(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\"\n  if [ \"$dict_keys\" ==\
    \ \"$dict_keys_lower\" ]; then\n    echo \"true\"\n  elif [ \"$dict_keys\" ==\
    \ \"$dict_keys_upper\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local all_lower=true\n    local all_upper=true\n\
    \    while IFS=, read -r key value; do\n        if [[ $key =~ [A-Z] ]]; then\n\
    \            all_lower=false\n        fi\n        if [[ $key =~ [a-z] ]]; then\n\
    \            all_upper=false\n        fi\n    done <<< \"$dict\"\n    if [[ $all_lower\
    \ == true || $all_upper == true ]]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\
    \n  local dict_values=\"$(echo \"$dict\" | cut -d, -f2)\"\n  local dict_keys_lower=\"\
    $(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\"\n  local dict_keys_upper=\"\
    $(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$dict_keys\"\
    \ == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\"\
    \ == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_case_keys=0\n  local upper_case_keys=0\n \
    \ local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r key\
    \ value; do\n    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=\"true\"\n  local upper_case=\"true\"\
    \n  while IFS=, read -r key value; do\n    if [[ \"$key\" =~ [a-z] ]]; then\n\
    \      upper_case=\"false\"\n    elif [[ \"$key\" =~ [A-Z] ]]; then\n      lower_case=\"\
    false\"\n    else\n      lower_case=\"false\"\n      upper_case=\"false\"\n  \
    \  fi\n  done <<< \"$dict\"\n  if [[ \"$lower_case\" == \"true\" ]]; then\n  \
    \  echo \"true\"\n  elif [[ \"$upper_case\" == \"true\" ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key\n    local value\n    local lower=0\n\
    \    local upper=0\n    local mixed=0\n    local empty=0\n    local is_dict_case=false\n\
    \    while IFS=, read -r key value; do\n        if [[ -z \"$key\" ]]; then\n \
    \           empty=1\n            break\n        fi\n        if [[ \"$key\" =~\
    \ ^[a-z]+$ ]]; then\n            lower=1\n        elif [[ \"$key\" =~ ^[A-Z]+$\
    \ ]]; then\n            upper=1\n        else\n            mixed=1\n         \
    \   break\n        fi\n    done <<< \"$dict\"\n    if [[ $empty -eq 0 ]]; then\n\
    \        if [[ $mixed -eq 0 ]]; then\n            if [[ $lower -eq 1 && $upper\
    \ -eq 0 ]]; then\n                is_dict_case=true\n            elif [[ $lower\
    \ -eq 0 && $upper -eq 1 ]]; then\n                is_dict_case=true\n        \
    \    fi\n        fi\n    fi\n    echo \"$is_dict_case\"\n}\n\ncandidate() {\n\
    \    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\\
    nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\"\
    ) = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") =\
    \ \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n \
    \   [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local is_lower=0\n  local is_upper=0\n  local key\n\
    \  local value\n  while IFS=, read -r key value; do\n    if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n      is_lower=1\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n      is_upper=1\n\
    \    else\n      echo \"false\"\n      return\n    fi\n  done <<< \"$dict\"\n\
    \  if [[ $is_lower -eq 1 && $is_upper -eq 1 ]]; then\n    echo \"false\"\n  else\n\
    \    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n  local key_case\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [ -z\
    \ \"$key_case\" ]; then\n      if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n        key_case=\"\
    lower\"\n      elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n        key_case=\"upper\"\
    \n      else\n        echo \"false\"\n        return\n      fi\n    elif [ \"\
    $key_case\" == \"lower\" ]; then\n      if [[ ! \"$key\" =~ ^[a-z]+$ ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n    elif [ \"$key_case\" ==\
    \ \"upper\" ]; then\n      if [[ ! \"$key\" =~ ^[A-Z]+$ ]]; then\n        echo\
    \ \"false\"\n        return\n      fi\n    fi\n  done <<< \"$1\"\n  echo \"true\"\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case=\"\"\n  local key_case_regex=\"\"\n\
    \  local key=\"\"\n  local value=\"\"\n  local key_is_lower_case=false\n  local\
    \ key_is_upper_case=false\n  local key_is_mixed_case=false\n  local key_is_not_case=false\n\
    \  local key_is_not_string=false\n  local key_is_not_number=false\n  local key_is_not_alpha=false\n\
    \  local key_is_not_alphanum=false\n  local key_is_not_alphanum_underscore=false\n\
    \  local key_is_not_alphanum_underscore_dash=false\n  local key_is_not_alphanum_underscore_dash_dot=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon=false\n  local key_is_not_alphanum_underscore_dash_dot_colon_slash=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at=false\n  local\
    \ key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus=false\n  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus_equal=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus_equal_amp=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus_equal_amp_tilde=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus_equal_amp_tilde_pipe=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_colon_slash_at_plus_equal_amp_tilde_pipe_backtick=false\n\
    \  local key_is_not_alphanum_underscore_dash_dot_col\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\"\
    \ | cut -d, -f2)\n  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]'\
    \ '[:upper:]')\n  if [ \"$dict_keys\" = \"$dict_keys_lower\" ]; then\n    echo\
    \ \"true\"\n  elif [ \"$dict_keys\" = \"$dict_keys_upper\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local other=0\n  local total=0\n  local key\n  local value\n  while IFS=, read\
    \ -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower=$((lower+1))\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper=$((upper+1))\n    elif\
    \ [[ \"$key\" =~ ^[a-zA-Z]+$ ]]; then\n      mixed=$((mixed+1))\n    else\n  \
    \    other=$((other+1))\n    fi\n    total=$((total+1))\n  done <<< \"$dict\"\n\
    \  if [[ $total -eq 0 ]]; then\n    echo \"false\"\n  elif [[ $lower -eq $total\
    \ ]]; then\n    echo \"true\"\n  elif [[ $upper -eq $total ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -r dict=\"$1\"\n  local -r lower_keys=$(echo \"$dict\" | cut -d,\
    \ -f1 | tr '[:upper:]' '[:lower:]')\n  local -r upper_keys=$(echo \"$dict\" |\
    \ cut -d, -f1 | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict\" = \"$lower_keys\"\
    \ ] || [ \"$dict\" = \"$upper_keys\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local lower_keys=0\n \
    \ local upper_keys=0\n  local lower_keys_only=0\n  local upper_keys_only=0\n \
    \ local mixed_keys=0\n  local non_string_keys=0\n  local num_keys=0\n  while IFS=,\
    \ read -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys\
    \ + 1))\n    else\n      non_string_keys=$((non_string_keys + 1))\n    fi\n  \
    \  num_keys=$((num_keys + 1))\n  done <<< \"$dict\"\n  if [[ $num_keys -eq 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $lower_keys -eq $num_keys ]]; then\n   \
    \ echo \"true\"\n  elif [[ $upper_keys -eq $num_keys ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=false\n  local upper_case=false\n\
    \  local key\n  local value\n  local IFS=','\n  while read key value; do\n   \
    \ if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case=true\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_case=true\n    else\n      echo \"false\"\n\
    \      return\n    fi\n  done < <(echo \"$dict\")\n  if [[ \"$lower_case\" = true\
    \ && \"$upper_case\" = true ]]; then\n    echo \"false\"\n  else\n    echo \"\
    true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower_keys=0\n    local upper_keys=0\n    local\
    \ mixed_keys=0\n    local empty_dict=0\n    local key\n    local value\n    while\
    \ IFS=, read -r key value; do\n        if [[ -z \"$key\" ]]; then\n          \
    \  empty_dict=1\n            break\n        fi\n        if [[ \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n            lower_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]];\
    \ then\n            upper_keys=1\n        else\n            mixed_keys=1\n   \
    \         break\n        fi\n    done <<< \"$dict\"\n    if [[ $empty_dict -eq\
    \ 1 ]]; then\n        echo \"false\"\n    elif [[ $mixed_keys -eq 1 ]]; then\n\
    \        echo \"false\"\n    elif [[ $lower_keys -eq 1 && $upper_keys -eq 1 ]];\
    \ then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\n\
    candidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local key_case\n    local key\n    local value\n\
    \    local retval=\"true\"\n    while IFS=, read -r key value; do\n        if\
    \ [[ -z \"$key_case\" ]]; then\n            if [[ \"$key\" =~ [a-z] ]]; then\n\
    \                key_case=\"lower\"\n            elif [[ \"$key\" =~ [A-Z] ]];\
    \ then\n                key_case=\"upper\"\n            else\n               \
    \ retval=\"false\"\n                break\n            fi\n        elif [[ \"\
    $key_case\" == \"lower\" ]]; then\n            if [[ \"$key\" =~ [A-Z] ]]; then\n\
    \                retval=\"false\"\n                break\n            fi\n   \
    \     elif [[ \"$key_case\" == \"upper\" ]]; then\n            if [[ \"$key\"\
    \ =~ [a-z] ]]; then\n                retval=\"false\"\n                break\n\
    \            fi\n        fi\n    done <<< \"$dict\"\n    echo \"$retval\"\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local csv=\"$1\"\n    local lower_case=true\n    local upper_case=true\n\
    \    local key\n    local value\n    while IFS=, read -r key value; do\n     \
    \   if [[ \"$key\" =~ [A-Z] ]]; then\n            lower_case=false\n        fi\n\
    \        if [[ \"$key\" =~ [a-z] ]]; then\n            upper_case=false\n    \
    \    fi\n    done <<< \"$csv\"\n    if [[ \"$lower_case\" = true ]] || [[ \"$upper_case\"\
    \ = true ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local lower=0\n  local\
    \ upper=0\n  local mixed=0\n  local empty=0\n  local other=0\n  local total=0\n\
    \  while IFS=, read -r key value; do\n    if [[ -z \"$key\" ]]; then\n      empty=$((empty\
    \ + 1))\n    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower=$((lower + 1))\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper=$((upper + 1))\n    elif\
    \ [[ \"$key\" =~ ^[a-zA-Z]+$ ]]; then\n      mixed=$((mixed + 1))\n    else\n\
    \      other=$((other + 1))\n    fi\n    total=$((total + 1))\n  done <<< \"$dict\"\
    \n  if [[ $total -eq 0 ]]; then\n    echo \"false\"\n  elif [[ $lower -eq $total\
    \ ]]; then\n    echo \"true\"\n  elif [[ $upper -eq $total ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local csv=\"$1\"\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n\
    \    local -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local\
    \ -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n\
    \    local -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local\
    \ -i Q=0\n    local -i R=0\n    local -i S=0\n    local -i T=0\n    local -i U=0\n\
    \    local -i V=0\n    local -i W=0\n    local -i X=0\n    local -i Y=0\n    local\
    \ -i Z=0\n    local -i upper=0\n    local -i lower=0\n    local -i total=0\n \
    \   local -i non_alpha=0\n    local -i non_alpha_upper=0\n    local -i non_alpha_lower=0\n\
    \    local -i non_alpha_total=0\n    local -i alpha=0\n    local -i alpha_upper=0\n\
    \    local -i alpha_lower=0\n    local -i alpha_total=0\n    local -i alpha_upper_total=0\n\
    \    local -i alpha_lower_total=0\n    local -i alpha_upper_non_alpha=0\n    local\
    \ -i\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local all_lower=true\n  local all_upper=true\n  while\
    \ IFS=, read -r key value; do\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      all_lower=false\n\
    \    fi\n    if [[ \"$key\" =~ [a-z] ]]; then\n      all_upper=false\n    fi\n\
    \  done <<< \"$csv\"\n  if [[ \"$all_lower\" == \"true\" ]] || [[ \"$all_upper\"\
    \ == \"true\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local key\n\
    \  local value\n  while IFS=, read -r key value; do\n    if [[ $key =~ ^[a-z]+$\
    \ ]]; then\n      ((lower_keys++))\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n  \
    \    ((upper_keys++))\n    else\n      echo \"false\"\n      return\n    fi\n\
    \  done <<< \"$dict\"\n  if [[ $lower_keys -gt 0 && $upper_keys -gt 0 ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local key\n    local lower_case=0\n    local upper_case=0\n\
    \    local mixed_case=0\n    local empty_dict=0\n    local dict_size=0\n    local\
    \ dict_size_lower_case=0\n    local dict_size_upper_case=0\n    local dict_size_mixed_case=0\n\
    \    local dict_size_empty_dict=0\n    local dict_size_empty_key=0\n    local\
    \ dict_size_empty_value=0\n    local dict_size_empty_key_value=0\n    local dict_size_empty_key_value_dict=0\n\
    \    local dict_size_empty_key_value_dict_lower_case=0\n    local dict_size_empty_key_value_dict_upper_case=0\n\
    \    local dict_size_empty_key_value_dict_mixed_case=0\n    local dict_size_empty_key_value_dict_empty_dict=0\n\
    \    local dict_size_empty_key_value_dict_empty_key=0\n    local dict_size_empty_key_value_dict_empty_value=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value=0\n    local dict_size_empty_key_value_dict_empty_key_value_dict=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_lower_case=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_upper_case=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_mixed_case=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_empty_dict=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_empty_key=0\n \
    \   local dict_size_empty_key_value_dict_empty_key_value_dict_empty_value=0\n\
    \    local dict_size_empty_key_value_dict_empty_key_value_dict_\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local lower_keys=0\n    local upper_keys=0\n    local\
    \ mixed_keys=0\n    local key\n    local value\n    while IFS=, read -r key value;\
    \ do\n        if [[ $key =~ ^[a-z]+$ ]]; then\n            ((lower_keys++))\n\
    \        elif [[ $key =~ ^[A-Z]+$ ]]; then\n            ((upper_keys++))\n   \
    \     else\n            ((mixed_keys++))\n        fi\n    done <<< \"$dict\"\n\
    \    if [[ $lower_keys -gt 0 && $upper_keys -gt 0 ]]; then\n        echo \"false\"\
    \n    elif [[ $mixed_keys -gt 0 ]]; then\n        echo \"false\"\n    else\n \
    \       echo \"true\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $lower_case_keys -gt 0 || $upper_case_keys\
    \ -gt 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local value\n  local upper_count=0\n\
    \  local lower_count=0\n  local dict_size=0\n  while IFS=',' read -r key value;\
    \ do\n    if [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_count=$((upper_count\
    \ + 1))\n    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_count=$((lower_count\
    \ + 1))\n    fi\n    dict_size=$((dict_size + 1))\n  done <<< \"$dict\"\n  if\
    \ [[ \"$dict_size\" -eq 0 ]]; then\n    echo \"false\"\n  elif [[ \"$upper_count\"\
    \ -eq \"$dict_size\" ]]; then\n    echo \"true\"\n  elif [[ \"$lower_count\" -eq\
    \ \"$dict_size\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local upper=0\n  local lower=0\n  local mixed=0\n\
    \  local key\n  local value\n  local IFS=','\n  while read key value; do\n   \
    \ if [[ $key =~ ^[A-Z]+$ ]]; then\n      upper=$((upper+1))\n    elif [[ $key\
    \ =~ ^[a-z]+$ ]]; then\n      lower=$((lower+1))\n    else\n      mixed=$((mixed+1))\n\
    \    fi\n  done < <(echo \"$dict\")\n  if [[ $upper -gt 0 && $lower -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed -gt 0 ]]; then\n    echo \"false\"\
    \n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=$1\n    local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n\
    \    local dict_values=$(echo \"$dict\" | cut -d, -f2)\n    local lower_keys=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n    local upper_keys=$(echo \"\
    $dict_keys\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$dict_keys\" == \"$lower_keys\"\
    \ ]]; then\n        echo \"true\"\n    elif [[ \"$dict_keys\" == \"$upper_keys\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local -i lower_count=0\n  local -i upper_count=0\n\
    \  local -i total_count=0\n  local -i i=0\n  local key\n  local -a keys\n  local\
    \ -a values\n  local -a dict_array\n  local -a dict_array_sorted\n  local -a dict_array_sorted_keys\n\
    \  local -a dict_array_sorted_values\n  local -i dict_array_sorted_count\n  local\
    \ -i dict_array_sorted_count_minus_one\n  local -i dict_array_sorted_count_minus_two\n\
    \  local -i dict_array_sorted_count_minus_three\n  local -i dict_array_sorted_count_minus_four\n\
    \  local -i dict_array_sorted_count_minus_five\n  local -i dict_array_sorted_count_minus_six\n\
    \  local -i dict_array_sorted_count_minus_seven\n  local -i dict_array_sorted_count_minus_eight\n\
    \  local -i dict_array_sorted_count_minus_nine\n  local -i dict_array_sorted_count_minus_ten\n\
    \  local -i dict_array_sorted_count_minus_eleven\n  local -i dict_array_sorted_count_minus_twelve\n\
    \  local -i dict_array_sorted_count_minus_thirteen\n  local -i dict_array_sorted_count_minus_fourteen\n\
    \  local -i dict_array_sorted_count_minus_fifteen\n  local -i dict_array_sorted_count_minus_sixteen\n\
    \  local -i dict_array_sorted_count_minus_seventeen\n  local -i dict_array_sorted_count_minus_eighteen\n\
    \  local -i dict_array_sorted_count_minus_nineteen\n  local -i dict_array_sorted_count_minus_twenty\n\
    \  local -i dict_array_sorted_count_minus_twenty_one\n  local -i dict_array_sorted_count_minus_twenty_two\n\
    \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case=$(echo \"$dict\" | awk -F, '{print\
    \ $1}' | head -1 | tr '[:upper:]' '[:lower:]')\n  local key_case_check=$(echo\
    \ \"$dict\" | awk -F, '{print $1}' | head -1 | tr '[:lower:]' '[:upper:]')\n \
    \ local key_case_check_result=$(echo \"$dict\" | awk -F, '{print $1}' | head -1\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]')\n  if [[ \"$dict\"\
    \ == \"\" ]]; then\n    echo \"false\"\n  elif [[ \"$key_case\" == \"$key_case_check_result\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys + 1))\n    elif [[ $key\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys + 1))\n    else\n     \
    \ mixed_keys=$((mixed_keys + 1))\n    fi\n  done <<< \"$dict\"\n  if [[ $lower_keys\
    \ -gt 0 && $upper_keys -gt 0 ]]; then\n    echo \"false\"\n  elif [[ $mixed_keys\
    \ -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local -r dict=\"$1\"\n  local -r lower_keys=$(echo \"$dict\" | cut -d,\
    \ -f1 | tr '[:upper:]' '[:lower:]')\n  local -r upper_keys=$(echo \"$dict\" |\
    \ cut -d, -f1 | tr '[:lower:]' '[:upper:]')\n  local -r lower_keys_count=$(echo\
    \ \"$lower_keys\" | wc -l)\n  local -r upper_keys_count=$(echo \"$upper_keys\"\
    \ | wc -l)\n  local -r dict_count=$(echo \"$dict\" | wc -l)\n  if [[ \"$dict_count\"\
    \ -eq 0 ]]; then\n    echo \"false\"\n  elif [[ \"$lower_keys_count\" -eq \"$dict_count\"\
    \ ]]; then\n    echo \"true\"\n  elif [[ \"$upper_keys_count\" -eq \"$dict_count\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    if [ -z \"$1\" ]; then\n        echo \"false\"\n        return\n    fi\n\
    \    local key_list=$(echo \"$1\" | cut -d, -f1)\n    local lower_key_list=$(echo\
    \ \"$key_list\" | tr '[:upper:]' '[:lower:]')\n    local upper_key_list=$(echo\
    \ \"$key_list\" | tr '[:lower:]' '[:upper:]')\n    if [ \"$key_list\" = \"$lower_key_list\"\
    \ ]; then\n        echo \"true\"\n    elif [ \"$key_list\" = \"$upper_key_list\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"\
    p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
    n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
    nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\")\
    \ = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lc_keys=0\n  local uc_keys=0\n  local key\n \
    \ local value\n  while IFS=, read -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n      ((lc_keys++))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n \
    \     ((uc_keys++))\n    else\n      echo \"false\"\n      return\n    fi\n  done\
    \ <<< \"$csv\"\n  if [[ \"$lc_keys\" -gt 0 && \"$uc_keys\" -gt 0 ]]; then\n  \
    \  echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local all_lower=true\n  local all_upper=true\n  while\
    \ IFS=, read -r key value; do\n    if [[ $key =~ [A-Z] ]]; then\n      all_lower=false\n\
    \    fi\n    if [[ $key =~ [a-z] ]]; then\n      all_upper=false\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $all_lower = true ]]; then\n    echo \"true\"\n  elif\
    \ [[ $all_upper = true ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local lower_keys=0\n  local upper_keys=0\n  local mixed_keys=0\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ $key\
    \ =~ ^[a-z]+$ ]]; then\n      lower_keys=$((lower_keys + 1))\n    elif [[ $key\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_keys=$((upper_keys + 1))\n    else\n     \
    \ mixed_keys=$((mixed_keys + 1))\n    fi\n  done <<< \"$dict\"\n  if [[ $lower_keys\
    \ -gt 0 && $upper_keys -gt 0 ]]; then\n    echo \"false\"\n  elif [[ $mixed_keys\
    \ -gt 0 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local empty_dict=0\n  local key\n  local value\n\
    \  local IFS=','\n  while read key value; do\n    if [[ -z \"$key\" ]]; then\n\
    \      empty_dict=1\n    elif [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=1\n\
    \    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=1\n    else\n\
    \      mixed_case_keys=1\n    fi\n  done < <(echo \"$dict\")\n  if [[ $empty_dict\
    \ -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $lower_case_keys -eq 1 && $upper_case_keys\
    \ -eq 0 && $mixed_case_keys -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $lower_case_keys\
    \ -eq 0 && $upper_case_keys -eq 1 && $mixed_case_keys -eq 0 ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local dict=\"$1\"\n    local lower=0\n    local upper=0\n    local mixed=0\n\
    \    local key\n    local value\n    while IFS=, read -r key value; do\n     \
    \   if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n            lower=1\n        elif [[\
    \ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper=1\n        else\n         \
    \   mixed=1\n        fi\n    done <<< \"$dict\"\n    if [[ $lower -eq 1 && $upper\
    \ -eq 0 && $mixed -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $lower -eq\
    \ 0 && $upper -eq 1 && $mixed -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case=0\n  local upper_case=0\n  local\
    \ mixed_case=0\n  local key\n  local value\n  while IFS=, read -r key value; do\n\
    \    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper_case=1\n    else\n      mixed_case=1\n   \
    \ fi\n  done <<< \"$dict\"\n  if [[ $lower_case -eq 1 && $upper_case -eq 0 &&\
    \ $mixed_case -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=()\n  local upper_keys=()\n  local\
    \ keys=()\n  local key\n  local value\n  local i\n  local lower_count=0\n  local\
    \ upper_count=0\n  local key_count=0\n  local lower_keys_count=0\n  local upper_keys_count=0\n\
    \  local lower_keys_count_str\n  local upper_keys_count_str\n  local lower_keys_str\n\
    \  local upper_keys_str\n  local lower_keys_str_len\n  local upper_keys_str_len\n\
    \  local lower_keys_str_len_str\n  local upper_keys_str_len_str\n  local lower_keys_str_len_str_len\n\
    \  local upper_keys_str_len_str_len\n  local lower_keys_str_len_str_len_str\n\
    \  local upper_keys_str_len_str_len_str\n  local lower_keys_str_len_str_len_str_len\n\
    \  local upper_keys_str_len_str_len_str_len\n  local lower_keys_str_len_str_len_str_len_str\n\
    \  local upper_keys_str_len_str_len_str_len_str\n  local lower_keys_str_len_str_len_str_len_str_len\n\
    \  local upper_keys_str_len_str_len_str_len_str_len\n  local lower_keys_str_len_str_len_str_len_str_len_str\n\
    \  local upper_keys_str_len_str_len_str_len_str_len_str\n  local lower_keys_str_len_str_len_str_len_str_len_str_len\n\
    \  local upper_keys_str_len_str_len_str_len_str_len_str_len\n  local lower_keys_str_len_str_len_str_len_str_len_str_len_str\n\
    \  local upper_keys_str_len_str_len_str_len_str_len_str_len_str\n  local lower_keys_str_len\n\
    }\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key\n  local val\n  local lower_keys=0\n  local\
    \ upper_keys=0\n  local mixed_keys=0\n  local empty_dict=0\n  local lower_keys_regex=\"\
    ^[a-z]+$\"\n  local upper_keys_regex=\"^[A-Z]+$\"\n  local mixed_keys_regex=\"\
    ^[a-zA-Z]+$\"\n  while IFS=, read -r key val; do\n    if [[ $key =~ $lower_keys_regex\
    \ ]]; then\n      lower_keys=1\n    elif [[ $key =~ $upper_keys_regex ]]; then\n\
    \      upper_keys=1\n    elif [[ $key =~ $mixed_keys_regex ]]; then\n      mixed_keys=1\n\
    \    else\n      empty_dict=1\n    fi\n  done <<< \"$dict\"\n  if [[ $lower_keys\
    \ -eq 1 && $upper_keys -eq 0 && $mixed_keys -eq 0 && $empty_dict -eq 0 ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ \"$lower_case_keys\" -gt 0 && \"$upper_case_keys\" -gt\
    \ 0 ]]; then\n    echo \"false\"\n  elif [[ \"$mixed_case_keys\" -gt 0 ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\\
    nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\"\
    ) = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"\
    false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\"\
    \ ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n    local csv=\"$1\"\n    local key\n    local value\n    local all_lower=true\n\
    \    local all_upper=true\n    while IFS=, read -r key value; do\n        if [[\
    \ \"$key\" =~ [A-Z] ]]; then\n            all_lower=false\n        fi\n      \
    \  if [[ \"$key\" =~ [a-z] ]]; then\n            all_upper=false\n        fi\n\
    \    done <<< \"$csv\"\n    if $all_lower || $all_upper; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case=\"$(echo \"$dict\" | cut -d, -f1 |\
    \ head -1 | tr '[:upper:]' '[:lower:]')\"\n  local key_case_lower=\"$(echo \"\
    $key_case\" | tr '[:upper:]' '[:lower:]')\"\n  local key_case_upper=\"$(echo \"\
    $key_case\" | tr '[:lower:]' '[:upper:]')\"\n  local key_case_mixed=\"$(echo \"\
    $key_case\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]')\"\n  if\
    \ [[ \"$key_case\" == \"$key_case_lower\" ]]; then\n    echo \"$dict\" | cut -d,\
    \ -f1 | tr '[:upper:]' '[:lower:]' | uniq -c | grep -q \"^ *1 \"\n  elif [[ \"\
    $key_case\" == \"$key_case_upper\" ]]; then\n    echo \"$dict\" | cut -d, -f1\
    \ | tr '[:lower:]' '[:upper:]' | uniq -c | grep -q \"^ *1 \"\n  else\n    echo\
    \ \"false\"\n    return\n  fi\n  if [[ $? -eq 0 ]]; then\n    echo \"false\"\n\
    \  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower=0\n  local upper=0\n  local mixed=0\n\
    \  local key\n  local val\n  while IFS=, read -r key val; do\n    if [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n      lower=1\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \      upper=1\n    else\n      mixed=1\n    fi\n  done <<< \"$dict\"\n  if [[\
    \ $lower -eq 1 && $upper -eq 0 && $mixed -eq 0 ]]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") =\
    \ \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=\",\" read\
    \ -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ [a-z] ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ [A-Z] ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$csv\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]]; then\n\
    \    echo \"false\"\n  elif [[ $lower_case_keys -gt 0 || $upper_case_keys -gt\
    \ 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d',' -f1)\n  local dict_keys_lower=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local dict_keys_upper=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict_keys\" = \"$dict_keys_lower\"\
    \ ]; then\n    echo \"true\"\n  elif [ \"$dict_keys\" = \"$dict_keys_upper\" ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [\
    \ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local\
    \ dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo \"$dict\"\
    \ | cut -d, -f2)\n  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]'\
    \ '[:upper:]')\n  if [ \"$dict_keys\" == \"$dict_keys_lower\" ]; then\n    echo\
    \ \"true\"\n  elif [ \"$dict_keys\" == \"$dict_keys_upper\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local key_case_type=\"\"\n  local key_case_type_new=\"\
    \"\n  local key=\"\"\n  local value=\"\"\n  local IFS=\",\"\n  while read key\
    \ value; do\n    if [ \"$key_case_type\" == \"\" ]; then\n      if [[ \"$key\"\
    \ =~ [a-z] ]]; then\n        key_case_type=\"lower\"\n      elif [[ \"$key\" =~\
    \ [A-Z] ]]; then\n        key_case_type=\"upper\"\n      else\n        echo \"\
    false\"\n        return\n      fi\n    else\n      if [[ \"$key\" =~ [a-z] ]];\
    \ then\n        key_case_type_new=\"lower\"\n      elif [[ \"$key\" =~ [A-Z] ]];\
    \ then\n        key_case_type_new=\"upper\"\n      else\n        echo \"false\"\
    \n        return\n      fi\n      if [ \"$key_case_type\" != \"$key_case_type_new\"\
    \ ]; then\n        echo \"false\"\n        return\n      fi\n    fi\n  done <<<\
    \ \"$dict\"\n  echo \"true\"\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_keys=()\n  local upper_keys=()\n  local\
    \ keys=()\n  local key\n  local value\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local\
    \ g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n \n}\n\ncandidate() {\n    check_dict_case \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"\
    true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n\
    \    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n  \
    \  [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_keys=\"$(echo \"$dict\" | cut -d, -f1)\"\
    \n  local dict_values=\"$(echo \"$dict\" | cut -d, -f2)\"\n  local dict_keys_lower=\"\
    $(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\"\n  local dict_keys_upper=\"\
    $(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\"\n  if [[ \"$dict_keys\"\
    \ == \"$dict_keys_lower\" ]]; then\n    echo \"true\"\n  elif [[ \"$dict_keys\"\
    \ == \"$dict_keys_upper\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local is_upper=false\n  local is_lower=false\n  local\
    \ key\n  local value\n  while IFS=, read -r key value; do\n    if [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      is_upper=true\n    elif [[ \"$key\" =~ ^[a-z]+$\
    \ ]]; then\n      is_lower=true\n    else\n      echo \"false\"\n      return\n\
    \    fi\n  done <<< \"$csv\"\n  if [[ \"$is_upper\" == true && \"$is_lower\" ==\
    \ true ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate()\
    \ {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\\
    nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\\
    na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\"\
    ) = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n\
    \    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate\
    \ \"\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local csv=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local non_alpha_keys=0\n  local num_keys=0\n  while\
    \ IFS=, read -r key value; do\n    if [[ $key =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ $key =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    elif [[ $key =~ ^[a-zA-Z]+$ ]]; then\n      mixed_case_keys=$((mixed_case_keys\
    \ + 1))\n    else\n      non_alpha_keys=$((non_alpha_keys + 1))\n    fi\n    num_keys=$((num_keys\
    \ + 1))\n  done <<< \"$csv\"\n  if [[ $num_keys -eq 0 ]]; then\n    echo \"false\"\
    \n  elif [[ $lower_case_keys -eq $num_keys ]]; then\n    echo \"true\"\n  elif\
    \ [[ $upper_case_keys -eq $num_keys ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_keys=$(echo $dict | cut -d, -f1)\n  local dict_values=$(echo\
    \ $dict | cut -d, -f2)\n  local dict_keys_lower=$(echo $dict_keys | tr '[:upper:]'\
    \ '[:lower:]')\n  local dict_keys_upper=$(echo $dict_keys | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ $dict_keys == $dict_keys_lower ]]; then\n    echo \"true\"\n  elif [[\
    \ $dict_keys == $dict_keys_upper ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n \
    \   [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n   \
    \ [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[\
    \ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate\
    \ \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 2
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  # TODO: Implement this function\n  # Hint: Use awk to split the input into\
    \ two columns\n  # Hint: Use awk to check if the first column is all lower case\n\
    \  # Hint: Use awk to check if the first column is all upper case\n  # Hint: Use\
    \ awk to check if the first column is empty\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  # Hint: Use awk to print the result\n  # Hint: Use awk to print the result\n\
    \  #\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
    \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"\
    p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\\
    nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\"\
    ) = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\"\
    \ ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8zy7fht4.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmp8zy7fht4.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=$1\n  local dict_size=$(echo \"$dict\" | wc -l)\n  if [ \"$dict_size\"\
    \ -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local lower_keys=$(echo\
    \ \"$dict\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]')\n  local upper_keys=$(echo\
    \ \"$dict\" | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict\" = \"\
    $lower_keys,$(echo \"$dict\" | cut -d, -f2)\" ]; then\n    echo \"true\"\n  elif\
    \ [ \"$dict\" = \"$upper_keys,$(echo \"$dict\" | cut -d, -f2)\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local dict_len=$(echo \"$dict\" | wc -l)\n  if [ \"\
    $dict_len\" -eq 0 ]; then\n    echo \"false\"\n    return\n  fi\n  local dict_keys=$(echo\
    \ \"$dict\" | cut -d, -f1)\n  local dict_keys_len=$(echo \"$dict_keys\" | wc -l)\n\
    \  local dict_keys_lower=$(echo \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n\
    \  local dict_keys_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [ \"$dict_keys\" == \"$dict_keys_lower\" ]; then\n    echo \"true\"\n  elif\
    \ [ \"$dict_keys\" == \"$dict_keys_upper\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\"\
    \ ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n\
    \    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\" ]]\n   \
    \ [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n    [[\
    \ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\\
    ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017848
- exit_code: 1
  program: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings\
    \ in lower \n# case or all keys are strings in upper case, else return False.\n\
    # The function should return False is the given dictionary is empty.\n# Examples:\n\
    # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
    \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"\
    a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\\
    nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\"\
    )\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case()\
    \ {\n  local dict=\"$1\"\n  local lower_case_keys=0\n  local upper_case_keys=0\n\
    \  local mixed_case_keys=0\n  local key\n  local value\n  while IFS=, read -r\
    \ key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower_case_keys=$((lower_case_keys\
    \ + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n      upper_case_keys=$((upper_case_keys\
    \ + 1))\n    else\n      mixed_case_keys=$((mixed_case_keys + 1))\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ $lower_case_keys -gt 0 && $upper_case_keys -gt 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $mixed_case_keys -gt 0 ]]; then\n    echo\
    \ \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n    check_dict_case\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"p,pineapple\\nb,banana\"\
    ) = \"true\" ]]\n    [[ $(candidate \"p,pineapple\\nA,banana\\nB,banana\") = \"\
    false\" ]]\n    [[ $(candidate \"p,pineapple\\n5,banana\\na,apple\") = \"false\"\
    \ ]]\n    [[ $(candidate \"Name,John\\nAge,36\\nCity,Houston\") = \"false\" ]]\n\
    \    [[ $(candidate \"STATE,NC\\nZIP,12345\") = \"true\" ]]\n    [[ $(candidate\
    \ \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n    [[ $(candidate \"\") = \"\
    false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017847
