name: HumanEval_78_hex_key
language: sh
prompt: "#!/bin/bash\n# You have been tasked to write a function that receives \n\
  # a hexadecimal number as a string and counts the number of hexadecimal \n# digits\
  \ that are primes (prime number, or a prime, is a natural number \n# greater than\
  \ 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3,\
  \ 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the\
  \ input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always\
  \ uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"\
  1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\"\
  )\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n"
tests: "}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n   \
  \ [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\"\
  \ ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"\
  112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
completions: ["  local hex_num=\"$1\"\n  local count=0\n  local hex_digits=\"0123456789ABCDEF\"\
    \n  local primes=\"2357BD\"\n  local i=0\n  local j=0\n  for ((i=0; i<${#hex_num};\
    \ i++)); do\n    for ((j=0; j<${#primes}; j++)); do\n      if [[ ${hex_num:$i:1}\
    \ == ${primes:$j:1} ]]; then\n        ((count++))\n      fi\n    done\n  done\n\
    \  echo \"$count\"", "    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n\
    \    local -i num=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n  \
    \  local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n\
    \    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n    local\
    \ -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local\
    \ -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local\
    \ -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local\
    \ -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local\
    \ -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local\
    \ -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local\
    \ -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local\
    \ -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=", "    local\
    \ -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n \
    \   local -i prime=0\n    local -i rem=0\n    local -i sqrt=0\n    local -i sum=0\n\
    \    local -i temp=0\n    local -i val=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -iA array=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n   \
    \ local -iA primes=(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73\
    \ 79 83 89 97)\n    local -iA values=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -iA hex=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -iA dec=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -iA oct=(0 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15)\n    local -iA bin=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n\
    \    local -iA hex_prime=(0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0)\n    local -iA dec_prime=(0\
    \ 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0)\n    local -iA oct_prime=(0 0 1 0 1 0 1 0 0 0\
    \ 0 1 0 1 0 0)\n    local -iA bin_prime=(0 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0)\n  \
    \  local -iA hex_values=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -iA\
    \ dec_values=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -iA oct_values=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -iA bin_values=(0 1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15)\n    local", "    local -i i=0\n    local -i count=0\n\
    \    local -i len=${#1}\n    local -i value=0\n    local -i is_prime=0\n    local\
    \ -i is_hex=0\n    local -i is_digit=0\n    local -i is_upper=0\n    local -i\
    \ is_lower=0\n    local -i is_alpha=0\n    local -i is_alnum=0\n    local -i is_space=0\n\
    \    local -i is_xdigit=0\n    local -i is_print=0\n    local -i is_graph=0\n\
    \    local -i is_cntrl=0\n    local -i is_punct=0\n    local -i is_blank=0\n \
    \   local -i is_ascii=0\n    local -i is_digit=0\n    local -i is_alpha=0\n  \
    \  local -i is_alnum=0\n    local -i is_space=0\n    local -i is_xdigit=0\n  \
    \  local -i is_print=0\n    local -i is_graph=0\n    local -i is_cntrl=0\n   \
    \ local -i is_punct=0\n    local -i is_blank=0\n    local -i is_ascii=0\n    local\
    \ -i is_digit=0\n    local -i is_alpha=0\n    local -i is_alnum=0\n    local -i\
    \ is_space=0\n    local -i is_xdigit=0\n    local -i is_print=0\n    local -i\
    \ is_graph=0\n    local -i is_cntrl=0\n    local -i is_punct=0\n    local -i is_blank=0\n\
    \    local -i is_ascii=0\n    local -i is_digit=0\n    local -i is_alpha=0\n \
    \   local -i is_alnum=0\n    local -i is_space=0\n    local -i is_xdigit=0\n \
    \   local -i is_print=0\n    local -i is_graph=0\n    local -i is_cntrl=0\n   ",
  "    echo $1 | grep -o '[2357BD]' | wc -l", "    local -i count=0\n    local -i\
    \ i=0\n    local -i len=${#1}\n    local -i j=0\n    local -i k=0\n    local -i\
    \ l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n\
    \    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local\
    \ -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n\
    \    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    local\
    \ -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local -i h=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i bb=0\n\
    \    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n\
    \    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local -i nnn=0\n\
    \    local -i ooo", "    local -i count=0\n    for ((i=0; i<${#1}; i++)); do\n\
    \        case ${1:i:1} in\n            [2357BDF])\n                ((count++))\n\
    \                ;;\n        esac\n    done\n    echo $count", "    local -i count=0\n\
    \    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n    local -i prime=0\n\
    \    local -i tmp=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n  \
    \  local -a primes=(2 3 5 7 11 13 17)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15)\n    local -a hex_str=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"\
    6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n    local -a hex_num=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_prime=(0 0 1 0 1 0 1\
    \ 0 0 0 0 1 0 1 0 0)\n    local -a hex_num_str=(\"0\" \"1\" \"2\" \"3\" \"4\"\
    \ \"5\" \"6\" \"7\" \"8\" \"9\" \"10\" \"11\" \"12\" \"13\" \"14\" \"15\")\n \
    \   local -a hex_prime_str=(\"0\" \"0\" \"1\" \"0\" \"1\" \"0\" \"1\" \"0\" \"\
    0\" \"0\" \"0\" \"1\" \"0\" \"1\" \"0\" \"0\")\n    local -a hex_prime_num=(0\
    \ 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0)\n    local -a hex_prime_num_str=(\"0\" \"0\"\
    \ \"1\" \"0\" \"1\" \"0\" \"1\" \"0\" \"0\" \"0\" \"0\" \"1\" \"0\" \"1\" \"0\"\
    \ \"0\")\n    local -a hex_prime_num_str_rev=(0 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0)\n\
    \    local -a hex_prime_num_str_rev_num=(0 0 1 0 1 0 1 0 0 0 0 1 0 1 0 0)\n  \
    \  local -a hex_prime_num_str_rev_", '    echo $1 | tr -d [:alpha:] | tr -d [:digit:]
    | wc -c', "\tlocal hex_digits=\"$1\"\n\tlocal count=0\n\tlocal digit\n\tfor ((\
    \ i=0; i<${#hex_digits}; i++ )); do\n\t\tdigit=\"${hex_digits:$i:1}\"\n\t\tif\
    \ [[ \"$digit\" == \"2\" || \"$digit\" == \"3\" || \"$digit\" == \"5\" || \"$digit\"\
    \ == \"7\" || \"$digit\" == \"B\" || \"$digit\" == \"D\" ]]; then\n\t\t\t(( count++\
    \ ))\n\t\tfi\n\tdone\n\techo \"$count\"", "\tlocal -i count=0\n\tlocal -i i=0\n\
    \tlocal -i len=${#1}\n\tlocal -i num\n\tlocal -i num_2\n\tlocal -i num_3\n\tlocal\
    \ -i num_5\n\tlocal -i num_7\n\tlocal -i num_11\n\tlocal -i num_13\n\tlocal -i\
    \ num_17\n\tlocal -i num_19\n\tlocal -i num_23\n\tlocal -i num_29\n\tlocal -i\
    \ num_31\n\tlocal -i num_37\n\tlocal -i num_41\n\tlocal -i num_43\n\tlocal -i\
    \ num_47\n\tlocal -i num_53\n\tlocal -i num_59\n\tlocal -i num_61\n\tlocal -i\
    \ num_67\n\tlocal -i num_71\n\tlocal -i num_73\n\tlocal -i num_79\n\tlocal -i\
    \ num_83\n\tlocal -i num_89\n\tlocal -i num_97\n\tlocal -i num_101\n\tlocal -i\
    \ num_103\n\tlocal -i num_107\n\tlocal -i num_109\n\tlocal -i num_113\n\tlocal\
    \ -i num_127\n\tlocal -i num_131\n\tlocal -i num_137\n\tlocal -i num_139\n\tlocal\
    \ -i num_149\n\tlocal -i num_151\n\tlocal -i num_157\n\tlocal -i num_163\n\tlocal\
    \ -i num_167\n\tlocal -i num_173\n\tlocal -i num_179\n\tlocal -i num_181\n\tlocal\
    \ -i num_191\n\tlocal -i num_193\n\tlocal -i num_197\n\tlocal -i num_199\n\tlocal\
    \ -i num_211\n\tlocal -i num_223\n\tlocal -i num_227\n\tlocal -i num_229\n\tlocal\
    \ -i num_233\n\tlocal -i num_239\n\tlocal -i num_241\n\tlocal -i num_251\n\tlocal\
    \ -i num_257\n\tlocal -i num_263\n\tlocal -i num_269\n\tlocal -i num_271\n\tlocal\
    \ -i num_277\n\tlocal -i num_", "    local -i count=0\n    local -a primes=(2\
    \ 3 5 7 11 13)\n    local -a hex=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local\
    \ -a hex_primes=(0 1 2 3 4 5 6 7 8 9 B D)\n    for ((i=0; i<${#1}; i++)); do\n\
    \        for ((j=0; j<${#hex[@]}; j++)); do\n            if [[ ${1:i:1} == ${hex[j]}\
    \ ]]; then\n                for ((k=0; k<${#hex_primes[@]}; k++)); do\n      \
    \              if [[ ${hex_primes[k]} == ${hex[j]} ]]; then\n                \
    \        ((count++))\n                    fi\n                done\n         \
    \   fi\n        done\n    done\n    echo $count", "    local -i count=0\n    local\
    \ -i i=0\n    local -i len=${#1}\n    local -i num=0\n    local -i j=0\n    local\
    \ -i k=0\n    local -i is_prime=0\n    local -i is_hex=0\n    local -i is_valid=0\n\
    \    local -i is_valid_hex=0\n    local -i is_valid_prime=0\n    local -i is_valid_hex_prime=0\n\
    \    local -i is_valid_hex_prime_count=0\n    local -i is_valid_hex_prime_count_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final=0\n    local -i is_valid_hex_prime_count_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final=0\n    local -i\
    \ is_valid_hex_prime_count_final_final_final_final_final=0\n    local -i is_valid_hex_prime_count_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_final_final_final_final_final=0\n\
    \    local -i is_valid_hex_prime_count_final_final_final_final_final_final_final_",
  "    local -i count=0\n    local -i i=0\n    local -i len=${#1}\n    local -i num=0\n\
    \    local -i j=0\n    local -i is_prime=0\n    local -i max_divisor=0\n    local\
    \ -i divisor=0\n    local -i remainder=0\n    local -a primes=(2 3 5 7 11 13 17)\n\
    \    local -a hex_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_primes=(2\
    \ 3 5 7 B D)\n    local -a hex_digits_to_num=(0 1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15)\n    local -a hex_num_to_digits=(0 1 2 3 4 5 6 7 8 9 A B C D E F)\n \
    \   local -a hex_num_to_primes=(0 0 0 0 0 0 0 0 0 0 0 B D 0 0 0)\n    local -a\
    \ hex_primes_to_num=(0 0 0 0 0 0 0 0 0 0 0 11 13 0 0 0)\n    local -a hex_num_to_digits_to_num=(0\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)\n    local -a hex_num_to_primes_to_num=(0\
    \ 0 0 0 0 0 0 0 0 0 0 11 13 0 0 0)\n    local -a hex_digits_to_num_to_primes=(0\
    \ 0 0 0 0 0 0 0 0 0 0 B D 0 0 0)\n    local -a hex_digits_to_num_to_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a hex_primes_to_num_to_digits=(0\
    \ 0 0 0 0 0 0 0 0 0 0 B D 0 0 0)\n    local -a hex_primes_to_num_to_primes=(0\
    \ 0 0 0 0 0 0 0 0 0 0 B D 0 0 0)\n    local -a hex_digits_to_num_to_primes_to_num=(0\
    \ 0 0 0 0 0 0 0", "    echo $1 | grep -o '[2357BD]' | wc -l", "    local -i count=0\n\
    \    local -i i\n    local -i len=${#1}\n    local -i digit\n    for ((i=0; i<len;\
    \ i++)); do\n        digit=${1:i:1}\n        case $digit in\n            2|3|5|7|B|D)\n\
    \                ((count++))\n                ;;\n        esac\n    done\n   \
    \ echo $count", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"My answer is $RESULT\"\n    echo\
    \ \"1\"", "\tlocal -i count=0\n\tlocal -i i=0\n\tlocal -i len=${#1}\n\tlocal -i\
    \ num=0\n\tlocal -i prime=0\n\tlocal -i rem=0\n\tlocal -i sum=0\n\tlocal -i temp=0\n\
    \tlocal -i val=0\n\tlocal -i x=0\n\tlocal -i y=0\n\tlocal -i z=0\n\tlocal -iA\
    \ arr=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\tlocal -iA primes=(2 3 5 7 11 13 17\
    \ 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127\
    \ 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229\
    \ 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347\
    \ 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457\
    \ 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587\
    \ 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701\
    \ 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829\
    \ 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971\
    \ 977 983 991 997)\n\tlocal -iA tempArr=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\t\
    local -iA tempArr2=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\tlocal -iA tempArr3=(0\
    \ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\tlocal -iA tempArr4=(0 0 0 0 0 0 0 0 0 0 0\
    \ 0 0 0 0 0)\n\tlocal -iA tempArr5=(0 0 0 0 0 0 0 0 0", "\tlocal hex_string=$1\n\
    \tlocal hex_digits_count=0\n\tlocal hex_prime_digits_count=0\n\tlocal hex_digit\n\
    \tlocal hex_digit_decimal\n\tlocal hex_digit_is_prime\n\tlocal hex_prime_digits=(2\
    \ 3 5 7 B D)\n\tlocal hex_prime_digit\n\n\tif [ -z \"$hex_string\" ]; then\n\t\
    \techo 0\n\t\treturn\n\tfi\n\n\tfor (( i=0; i<${#hex_string}; i++ )); do\n\t\t\
    hex_digit=${hex_string:$i:1}\n\t\thex_digit_decimal=$(printf \"%d\" \"'$hex_digit\"\
    )\n\t\thex_digit_is_prime=0\n\t\tfor hex_prime_digit in ${hex_prime_digits[@]};\
    \ do\n\t\t\tif [ \"$hex_prime_digit\" == \"$hex_digit\" ]; then\n\t\t\t\thex_digit_is_prime=1\n\
    \t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [ $hex_digit_is_prime -eq 1 ]; then\n\
    \t\t\t(( hex_prime_digits_count++ ))\n\t\tfi\n\t\t(( hex_digits_count++ ))\n\t\
    done\n\n\techo $hex_prime_digits_count", "    local -i count=0\n    local -a hex_digits=(0\
    \ 1 2 3 4 5 6 7 8 9 A B C D E F)\n    local -a primes=(2 3 5 7 B D)\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=${#1}\n    local -i is_prime=0\n\
    \    local -i is_hex=0\n    local -i is_hex_prime=0\n    local -i is_hex_prime_count=0\n\
    \    local -i is_hex_prime_count_max=0\n    local -i is_hex_prime_count_max_index=0\n\
    \    local -i is_hex_prime_count_max_index_prev=0\n    local -i is_hex_prime_count_max_index_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev=0\n    local -i is_hex_prime_count_max_index_prev_prev_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev=0\n    local\
    \ -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev=0\n    local -i\
    \ is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local\
    \ -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local -i is_hex_prime_count_max_index_prev_prev_prev_prev_"]
stop_tokens:
- "\n}"
