name: HumanEval_46_fib4
language: sh
prompt: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
  \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  # Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"\
  6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n"
tests: "}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"\
  10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
completions: ["    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d", "    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n    \
    \    a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d", "  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local\
    \ i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n\
    \    i=$((i+1))\n  done\n  echo $d", "    if [ $1 -eq 0 ]; then\n        echo\
    \ 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n\
    \        echo 2\n    elif [ $1 -eq 3 ]; then\n        echo 0\n    else\n     \
    \   a=0\n        b=0\n        c=2\n        d=0\n        for ((i=4; i<=$1; i++));\
    \ do\n            e=$((a+b+c+d))\n            a=$b\n            b=$c\n       \
    \     c=$d\n            d=$e\n        done\n        echo $e\n    fi", "    local\
    \ n=$1\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n    local\
    \ i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n        a=$b\n     \
    \   b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo $d", "  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$(($a + $b + $c))\n    a=$b\n    b=$c\n    c=$d\n    i=$(($i\
    \ + 1))\n  done\n  echo $d", "    local n=$1\n    local a=0\n    local b=0\n \
    \   local c=2\n    local d=0\n    local i=3\n    while [ $i -le $n ]; do\n   \
    \     d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n\
    \    done\n    echo $d", "    local n=$1\n    local a=0\n    local b=0\n    local\
    \ c=2\n    local d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d", "  local n=$1\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local\
    \ i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n\
    \    i=$((i+1))\n  done\n  echo $d", "  local n=$1\n  local a=0\n  local b=0\n\
    \  local c=2\n  local d=0\n  local i=3\n  while [ $i -le $n ]; do\n    d=$((a+b+c))\n\
    \    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n  done\n  echo $d", "  local n=$1\n\
    \  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local i=3\n  while [ $i\
    \ -le $n ]; do\n    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n\
    \  done\n  echo $d", "    local n=$1\n    local a=0\n    local b=0\n    local\
    \ c=2\n    local d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n    done\n    echo\
    \ $d", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        # The first 4 numbers\
    \ are 0, 0, 2, 0\n        # The next 4 numbers are 2, 2, 4, 4\n        # The next\
    \ 4 numbers are 6, 6, 10, 10\n        # The next 4 numbers are 16, 16, 26, 26\n\
    \        # The next 4 numbers are 42, 42, 68, 68\n        # The next 4 numbers\
    \ are 110, 110, 178, 178\n        # The next 4 numbers are 288, 288, 466, 466\n\
    \        # The next 4 numbers are 756, 756, 1222, 1222\n        # The next 4 numbers\
    \ are 1968, 1968, 3190, 3190\n        # The next 4 numbers are 5084, 5084, 8274,\
    \ 8274\n        # The next 4 numbers are 13300, 13300, 21574, 21574\n        #\
    \ The next 4 numbers are 34392, 34392, 55966, 55966\n        # The next 4 numbers\
    \ are 89884, 89884, 145348, 145348\n        # The next 4 numbers are 235416, 235416,\
    \ 379864, 379864\n        # The next 4 numbers are 616628, 616628, 996492, 996492\n\
    \        # The next 4 numbers are 1615100, 1615100, 2598592, 2598592\n       \
    \ # The next 4 numbers are 4292184, 4292184, 6888876, 6888876\n        # The next\
    \ 4 numbers are 11304916, 11304916, 18193792, 18193792\n        # The next 4 numbers\
    \ are 30045156, 30045156, 48238948, 48238948\n        # The next 4 numbers are\
    \ 79716252, 79716252, 128154900, 128154900\n        # The next 4 numbers are 211148108,\
    \ 211148108, 339303092, 339303092\n        # The next 4 numbers are 563921995,\
    \ 563921995, 907874997, 9078", "    local n=$1\n    local a=0\n    local b=0\n\
    \    local c=2\n    local d=0\n    local i=3\n    while [ $i -le $n ]; do\n  \
    \      d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n        i=$((i+1))\n\
    \    done\n    echo $d", "    local n=$1\n    local a=0\n    local b=0\n    local\
    \ c=2\n    local d=0\n    local i=3\n    while [ $i -le $n ]; do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n        ((i++))\n    done\n    echo\
    \ $d", "    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local\
    \ d=0\n    local i=3\n    local tmp=0\n    if [ $n -eq 0 ]; then\n        echo\
    \ $a\n    elif [ $n -eq 1 ]; then\n        echo $b\n    elif [ $n -eq 2 ]; then\n\
    \        echo $c\n    elif [ $n -eq 3 ]; then\n        echo $d\n    else\n   \
    \     while [ $i -lt $n ]; do\n            tmp=$((a+b+c+d))\n            a=$b\n\
    \            b=$c\n            c=$d\n            d=$tmp\n            i=$((i+1))\n\
    \        done\n        echo $tmp\n    fi", "    local n=$1\n    local a=0\n  \
    \  local b=0\n    local c=2\n    local d=0\n    local i=3\n    while [ $i -le\
    \ $n ]; do\n        d=$((a+b+c))\n        a=$b\n        b=$c\n        c=$d\n \
    \       i=$((i+1))\n    done\n    echo $d", "  if [ $1 -eq 0 ]; then\n    echo\
    \ 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif [ $1 -eq 2 ]; then\n    echo\
    \ 2\n  elif [ $1 -eq 3 ]; then\n    echo 0\n  else\n    echo $(($(fib4 $(($1-1)))\
    \ + $(fib4 $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n  fi", "    if\
    \ [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo\
    \ 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n\
    \        echo 0\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n\
    \        for (( i=4; i<=$1; i++ )); do\n            e=$((a+b+c+d))\n         \
    \   a=$b\n            b=$c\n            c=$d\n            d=$e\n        done\n\
    \        echo $e\n    fi", "    if [ $1 -lt 0 ]; then\n        echo \"Error: fib4\
    \ only accepts positive integers\"\n        return 1\n    fi\n    if [ $1 -eq\
    \ 0 ]; then\n        echo 0\n        return 0\n    fi\n    if [ $1 -eq 1 ]; then\n\
    \        echo 0\n        return 0\n    fi\n    if [ $1 -eq 2 ]; then\n       \
    \ echo 2\n        return 0\n    fi\n    if [ $1 -eq 3 ]; then\n        echo 0\n\
    \        return 0\n    fi\n    if [ $1 -eq 4 ]; then\n        echo 2\n       \
    \ return 0\n    fi\n    if [ $1 -eq 5 ]; then\n        echo 4\n        return\
    \ 0\n    fi\n    if [ $1 -eq 6 ]; then\n        echo 8\n        return 0\n   \
    \ fi\n    if [ $1 -eq 7 ]; then\n        echo 14\n        return 0\n    fi\n \
    \   if [ $1 -eq 8 ]; then\n        echo 24\n        return 0\n    fi\n    if [\
    \ $1 -eq 9 ]; then\n        echo 42\n        return 0\n    fi\n    if [ $1 -eq\
    \ 10 ]; then\n        echo 72\n        return 0\n    fi\n    if [ $1 -eq 11 ];\
    \ then\n        echo 122\n        return 0\n    fi\n    if [ $1 -eq 12 ]; then\n\
    \        echo 204\n        return 0\n    fi\n    if [ $1 -eq 13 ]; then\n    \
    \    echo 340\n        return 0\n    fi\n    if [ $1 -eq 14 ]; then\n        echo\
    \ 564\n        return 0\n    fi\n    if [ $1 -eq 15 ]; then\n        echo 924\n\
    \        return 0\n    fi\n    if [ $1 -eq 16 ]; then\n        echo 1520\n   \
    \     return 0\n    fi\n    if [ $1 -eq 17 ]; then\n        echo 2484\n      \
    \  return 0\n    fi\n    if [ $1 -eq 18 ]; then\n        echo 4092\n        return\
    \ 0\n    fi\n    if [ $1 -eq 19 ]; then\n        echo 6684\n        return 0\n\
    \    fi\n    if [ $1 -eq 20 ]; then\n        echo 10976\n        return 0\n  \
    \  fi\n    if [ $1 -eq 21 ]; then\n"]
stop_tokens:
- "\n}"
