name: HumanEval_87_get_row
language: sh
prompt: "#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n#\
  \ which is similar to matrix, however, unlike matrices,\n# each row may contain\
  \ a different number of columns.\n# Given lst, and integer x, find integers x in\
  \ the list,\n# and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n#\
  \ each tuple is a coordinate - (row, columns), starting with 0.\n# Sort coordinates\
  \ initially by rows in ascending order.\n# Also, sort coordinates of the row by\
  \ columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2\
  \ 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"\
  1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"\
  1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n\
  # $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row()\
  \ {\n"
tests: "}\n\ncandidate() {\n    get_row \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1 4\\\
  n1 0\\n2 5\\n2 0\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4\
  \ 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 2 3 4 5 6\" \"2\") = \"0 1\\n1 1\\n2 1\\n3\
  \ 1\\n4 1\\n5 1\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\\n1 2 3 4 5 6\\n1 1 3 4 5\
  \ 6\\n1 2 1 4 5 6\\n1 2 3 1 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\") = \"0 0\\n1\
  \ 0\\n2 1\\n2 0\\n3 2\\n3 0\\n4 3\\n4 0\\n5 4\\n5 0\\n6 5\\n6 0\" ]]\n    [[ $(candidate\
  \ \"\" \"1\") = \"\" ]]\n    [[ $(candidate \"1\" \"2\") = \"\" ]]\n    [[ $(candidate\
  \ \"\\n1\\n1 2 3\" \"3\") = \"2 2\" ]]\n}\n\nrun_test"
completions: ["    local lst=\"$1\"\n    local x=\"$2\"\n    local row=0\n    local\
    \ col=0\n    local res=()\n    while read -r line; do\n        col=0\n       \
    \ for y in $line; do\n            if [[ \"$y\" == \"$x\" ]]; then\n          \
    \      res+=(\"[\\\"$row\\\", \\\"$col\\\"]\")\n            fi\n            col=$((col\
    \ + 1))\n        done\n        row=$((row + 1))\n    done <<< \"$lst\"\n    echo\
    \ \"${res[@]}\"", "    local lst=$1\n    local x=$2\n    local row=0\n    local\
    \ col=0\n    local res=()\n    for i in $(echo \"$lst\" | tr ' ' '\\n'); do\n\
    \        if [[ $i == $x ]]; then\n            res+=(\"[\\\"$row\\\", \\\"$col\\\
    \"]\")\n        fi\n        if [[ $i == $'\\n' ]]; then\n            row=$((row\
    \ + 1))\n            col=0\n        else\n            col=$((col + 1))\n     \
    \   fi\n    done\n    echo \"${res[@]}\" | tr ' ' ',' | sed 's/^/[/;s/$/]/'",
  "    local lst=$1\n    local x=$2\n    local row=0\n    local col=0\n    local res=()\n\
    \    for i in $lst; do\n        if [ \"$i\" == \"$x\" ]; then\n            res+=(\"\
    [\\\"$row\\\", \\\"$col\\\"]\")\n        fi\n        if [ \"$i\" == \"\" ]; then\n\
    \            row=$((row + 1))\n            col=0\n        else\n            col=$((col\
    \ + 1))\n        fi\n    done\n    echo \"${res[@]}\"", "    local lst=\"$1\"\n\
    \    local x=\"$2\"\n    local row=0\n    local col=0\n    local result=()\n \
    \   while read -r line; do\n        col=0\n        for y in $line; do\n      \
    \      if [[ \"$y\" == \"$x\" ]]; then\n                result+=(\"[\\\"$row\\\
    \", \\\"$col\\\"]\")\n            fi\n            col=$((col + 1))\n        done\n\
    \        row=$((row + 1))\n    done <<< \"$lst\"\n    echo \"${result[@]}\"",
  "    local lst=$1\n    local x=$2\n    local row=0\n    local col=0\n    local res=()\n\
    \    for i in $lst; do\n        if [[ $i == $x ]]; then\n            res+=(\"\
    [\\\"$row\\\", \\\"$col\\\"]\")\n        fi\n        if [[ $i == \"\" ]]; then\n\
    \            row=$((row + 1))\n            col=0\n        else\n            col=$((col\
    \ + 1))\n        fi\n    done\n    echo \"${res[@]}\" | tr ' ' ',' | sed -e 's/^/[/'\
    \ -e 's/$/]/'", "    local lst=$1\n    local x=$2\n    local row=0\n    local\
    \ col=0\n    local res=()\n    while read -r line; do\n        col=0\n       \
    \ for i in $line; do\n            if [[ $i == $x ]]; then\n                res+=(\"\
    [\\\"$row\\\", \\\"$col\\\"]\")\n            fi\n            col=$((col+1))\n\
    \        done\n        row=$((row+1))\n    done <<< \"$lst\"\n    echo \"${res[@]}\"",
  "    local lst=$1\n    local x=$2\n    local row=0\n    local col=0\n    local res=()\n\
    \    while read -r line; do\n        col=0\n        for i in $line; do\n     \
    \       if [[ $i == $x ]]; then\n                res+=(\"[\\\"$row\\\", \\\"$col\\\
    \"]\")\n            fi\n            col=$((col+1))\n        done\n        row=$((row+1))\n\
    \    done <<< \"$lst\"\n    echo \"${res[@]}\"", "    local lst=$1\n    local\
    \ x=$2\n    local result=()\n    local row=0\n    local col=0\n    local row_count=0\n\
    \    local col_count=0\n    local row_max=0\n    local col_max=0\n    local row_col_counts=()\n\
    \    local row_col_count=0\n    local row_col_max=0\n    local row_col_count_max=0\n\
    \    local row_col_count_max_index=0\n    local row_col_count_max_index_prev=0\n\
    \    local row_col_count_max_index_prev_prev=0\n    local row_col_count_max_index_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev=0\n    local row_col_count_max_index_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev=0\n    local\
    \ row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev=0\n    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local row_col_count_max_index_prev_prev_prev_prev_prev_prev_prev_prev", " \
    \   local lst=$1\n    local x=$2\n    local row=0\n    local col=0\n    local\
    \ result=()\n    for i in $(echo \"$lst\" | tr ' ' '\\n'); do\n        if [[ $i\
    \ == $x ]]; then\n            result+=(\"[\\\"$row\\\", \\\"$col\\\"]\")\n   \
    \     fi\n        if [[ $i == \"\" ]]; then\n            row=$((row + 1))\n  \
    \          col=0\n        else\n            col=$((col + 1))\n        fi\n   \
    \ done\n    echo \"${result[@]}\" | tr ' ' ',' | sed -e 's/^/[/' -e 's/$/]/'",
  "  local -a rows=($(echo \"$1\" | tr ' ' '\\n'))\n  local -a coordinates=()\n  local\
    \ -i row=0\n  for row_data in \"${rows[@]}\"; do\n    local -a columns=($(echo\
    \ \"$row_data\" | tr ' ' '\\n'))\n    local -i column=0\n    for column_data in\
    \ \"${columns[@]}\"; do\n      if [[ \"$column_data\" == \"$2\" ]]; then\n   \
    \     coordinates+=(\"[\\\"$row\\\", \\\"$column\\\"]\")\n      fi\n      column+=1\n\
    \    done\n    row+=1\n  done\n  echo \"${coordinates[@]}\"", "    local lst=\"\
    $1\"\n    local x=\"$2\"\n    local row=0\n    local col=0\n    local result=()\n\
    \    while read -r line; do\n        col=0\n        for i in $line; do\n     \
    \       if [ \"$i\" = \"$x\" ]; then\n                result+=([\"$row,$col\"\
    ]=\"$row,$col\")\n            fi\n            col=$((col+1))\n        done\n \
    \       row=$((row+1))\n    done <<< \"$lst\"\n    if [ ${#result[@]} -eq 0 ];\
    \ then\n        echo \"[]\"\n    else\n        echo \"$(sort_by_row \"$(declare\
    \ -p result)\" | sort_by_col)\"\n    fi", "  local lst=\"$1\"\n  local x=\"$2\"\
    \n  local row=0\n  local col=0\n  local res=()\n  for line in $lst; do\n    col=0\n\
    \    for num in $line; do\n      if [[ \"$num\" == \"$x\" ]]; then\n        res+=(\"\
    [\\\"$row\\\", \\\"$col\\\"]\")\n      fi\n      col=$((col+1))\n    done\n  \
    \  row=$((row+1))\n  done\n  echo \"${res[@]}\" | tr ' ' '\\n' | sort -t '\"'\
    \ -k 1n -k 3nr | tr '\\n' ' '", "    local lst=$1\n    local x=$2\n    local row=0\n\
    \    local col=0\n    local result=()\n    local row_result=()\n    while read\
    \ line; do\n        col=0\n        row_result=()\n        for i in $line; do\n\
    \            if [[ $i -eq $x ]]; then\n                row_result+=(\"[\\\"$row\\\
    \", \\\"$col\\\"]\")\n            fi\n            col=$((col+1))\n        done\n\
    \        if [[ ${#row_result[@]} -gt 0 ]]; then\n            result+=(\"${row_result[@]}\"\
    )\n        fi\n        row=$((row+1))\n    done <<< \"$lst\"\n    echo \"[${result[@]}]\"",
  "    local -a rows\n    local -a row\n    local -a res\n    local -a res_row\n \
    \   local -a res_col\n    local -a res_row_col\n    local -a res_row_col_sorted\n\
    \    local -a res_row_col_sorted_rev\n    local -a res_row_col_sorted_rev_str\n\
    \    local -a res_row_col_sorted_rev_str_joined\n    local -a res_row_col_sorted_rev_str_joined_sorted\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev\n    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined\n    local\
    \ -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted\n    local\
    \ -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev\n    local\
    \ -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str_joined\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str_joined_sorted\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str\n\
    \    local -a res_row_col_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev_str_joined_sorted_rev",
  "    local lst=\"$1\"\n    local x=\"$2\"\n    local row=0\n    local col=0\n  \
    \  local result=()\n    for i in $lst; do\n        if [ \"$i\" == \"$x\" ]; then\n\
    \            result+=(\"[\\\"$row\\\", \\\"$col\\\"]\")\n        fi\n        col=$((col+1))\n\
    \        if [ \"$i\" == \"\" ]; then\n            row=$((row+1))\n           \
    \ col=0\n        fi\n    done\n    echo \"${result[@]}\"", "    local -a matrix=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n    local -a row_indexes=()\n    local -a column_indexes=()\n\
    \    local -a row_indexes_sorted=()\n    local -a column_indexes_sorted=()\n \
    \   local -a result=()\n    local -a row_indexes_sorted_unique=()\n    local -a\
    \ column_indexes_sorted_unique=()\n    local -a result_sorted=()\n    local -a\
    \ result_sorted_unique=()\n    local -a result_sorted_unique_sorted=()\n    local\
    \ -a result_sorted_unique_sorted_sorted=()\n    local -a result_sorted_unique_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted=()\n    local -a\
    \ result_sorted_unique_sorted_sorted_sorted_sorted_sorted=()\n    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a result_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted",
  "    local lst=$1\n    local x=$2\n    local -a res=()\n    local -a rows=()\n \
    \   local -a cols=()\n    local -a row=()\n    local -a col=()\n    local -a row_col=()\n\
    \    local -a row_cols=()\n    local -a row_cols_sorted=()\n    local -a row_cols_sorted_rev=()\n\
    \    local -a row_cols_sorted_rev_str=()\n    local -a row_cols_sorted_rev_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str=()\n    local -a row_cols_sorted_rev_str_sorted_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str=()\n    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str=()\n  \
    \  local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str_sorted_str=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str_sorted_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str_sorted_str_sorted_str=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_sorted_str_sorted_str_sorted_str_sorted_str_sorted=()\n\
    \    local -a row_cols_sorted_rev_str_sorted_str_s", "    local lst=$1\n    local\
    \ x=$2\n    local row=0\n    local col=0\n    local result=\"\"\n    for i in\
    \ $lst; do\n        if [[ $i == $x ]]; then\n            result+=\"[\\\"$row\\\
    \", \\\"$col\\\"],\"\n        fi\n        if [[ $i == \"\" ]]; then\n        \
    \    row=$((row+1))\n            col=0\n        else\n            col=$((col+1))\n\
    \        fi\n    done\n    echo \"[${result::-1}]\"", "    local lst=$1\n    local\
    \ x=$2\n    local row=0\n    local col=0\n    local result=()\n    for i in $(echo\
    \ \"$lst\" | tr ' ' '\\n'); do\n        if [[ $i == $x ]]; then\n            result+=(\"\
    [\\\"$row\\\", \\\"$col\\\"]\")\n        fi\n        if [[ $i == \"\" ]]; then\n\
    \            row=$((row + 1))\n            col=0\n        else\n            col=$((col\
    \ + 1))\n        fi\n    done\n    echo \"${result[@]}\" | tr ' ' ',' | sed 's/^/[/;s/$/]/'",
  "    local -a rows=($(echo \"$1\" | tr ' ' '\\n'))\n    local -a row_indexes=()\n\
    \    local -a column_indexes=()\n    local -a row_column_indexes=()\n    local\
    \ -a row_column_indexes_sorted=()\n    local -a row_column_indexes_sorted_unique=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted=()\n    local -a row_column_indexes_sorted_unique_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted=()\n    local\
    \ -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted=()\n    local\
    \ -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \    local -a row_column_indexes_sorted_unique_sorted_sorted_sorted"]
stop_tokens:
- "\n}"
