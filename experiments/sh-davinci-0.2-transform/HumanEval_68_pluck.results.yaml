language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_index=-1\n\
    \  local -i min_even_value=100000000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if (( nodes[i] % 2 == 0 )); then\n      if (( nodes[i] < min_even_value ));\
    \ then\n        min_even_value=nodes[i]\n        min_even_index=i\n      fi\n\
    \    fi\n  done\n  if (( min_even_index >= 0 )); then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indexes=()\n\
    \  local -a even_indexes_sorted=()\n  local -a even_indexes_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min=()\n  local -a even_indexes_sorted_unique_min_index=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted=()\n  local -a even_indexes_sorted_unique_min_index_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min=()\n  local\
    \ -a even_indexes_sorted_unique_min_index_sorted_unique_min_index=()\n  local\
    \ -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min=999999999\n  local -i\
    \ index=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    if ((nodes[i] < min && nodes[i] % 2 == 0)); then\n      min=nodes[i]\n\
    \      index=i\n    fi\n  done\n  if ((min == 999999)); then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min\\\", \\\"$index\\\"]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [ $((node % 2)) -eq 0\
    \ ]; then\n      if [ -z \"$smallest_even_value\" ] || [ $node -lt $smallest_even_value\
    \ ]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\",\
    \ \\\"$smallest_even_value_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((value < min_even_value)); then\n\
    \        min_even_value=$value\n        min_even_index=$i\n      elif ((value\
    \ == min_even_value)); then\n        if ((i < min_even_index)); then\n       \
    \   min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if ((min_even_value\
    \ == 1000000000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a evens_index_sorted_unique=()\n\
    \  local -a evens_sorted_unique=()\n  local -a evens_index_sorted_unique_sorted=()\n\
    \  local -a evens_sorted_unique_sorted=()\n  local -a evens_index_sorted_unique_sorted_min=()\n\
    \  local -a evens_sorted_unique_sorted_min=()\n  local -a evens_index_sorted_unique_sorted_min_index=()\n\
    \  local -a evens_sorted_unique_sorted_min_index=()\n  local -a evens_index_sorted_unique_sorted_min_index_sorted=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted=()\n  local -a evens_index_sorted_unique_sorted_min_index_sorted_min=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted_min=()\n  local -a evens_index_sorted_unique_sorted_min_index_sorted_min_index=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted_min_index=()\n  local\
    \ -a evens_index_sorted_unique_sorted_min_index_sorted_min_index_sorted=()\n \
    \ local -a evens_sorted_unique_sorted_min_index_sorted_min_index_sorted=()\n \
    \ local -a evens_index_sorted_unique_sorted_min_index_sorted_min_index_sorted_min=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted_min_index_sorted_min=()\n\
    \  local -a evens_index_sorted\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local -i\
    \ i=0\n    local -i min_index=0\n    local -i min_value=0\n    local -i value=0\n\
    \    local -i index=0\n    local -i len=${#nodes[@]}\n    local -i even_len=0\n\
    \    local -i even_index=0\n    local -i even_value=0\n    local -i even_min_index=0\n\
    \    local -i even_min_value=0\n    local -i even_min_index_value=0\n    local\
    \ -i even_min_index_index=0\n    local -i even_min_value_index=0\n    local -i\
    \ even_min_value_value=0\n    local -i even_min_value_index_value=0\n    local\
    \ -i even_min_index_index_value=0\n    local -i even_min_index_value_index=0\n\
    \    local -i even_min_index_value_value=0\n    local -i even_min_index_index_value_value=0\n\
    \    local -i even_min_index_index_value_index=0\n    local -i even_min_index_value_index_value=0\n\
    \    local -i even_min_index_value_value_index=0\n    local -i even_min_index_value_value_value=0\n\
    \    local -i even_min_index_index_value_value_value=0\n    local -i even_min_index_index_value_value_index=0\n\
    \    local -i even_min_index_index_value_index_value=0\n    local -i even_min_index_index_value_index_index=0\n\
    \    local -i even_min_index_value_index_value_value=0\n    local -i even_min_index_value_index_value_index=0\n\
    \    local -i even_min_index_value_value_index_value=0\n    local -i even_min_index_value_value_value_index=0\n\
    \    local -i even_min_index_\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  for\
    \ ((i=0; i<n; i++)); do\n    if ((nodes[i] % 2 == 0 && nodes[i] < min_even_value));\
    \ then\n      min_even_value=${nodes[i]}\n      min_even_index=$i\n    fi\n  done\n\
    \  if ((min_even_value == 100000000)); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((nodes[i] % 2 == 0)); then\n\
    \      if [[ -z $min_even ]]; then\n        min_even=${nodes[i]}\n        min_even_index=$i\n\
    \      elif ((nodes[i] < min_even)); then\n        min_even=${nodes[i]}\n    \
    \    min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local min=0\n\
    \  local min_index=0\n  local len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n\
    \    if [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n\
    \      evens_index[$j]=$i\n      ((j++))\n    fi\n  done\n  if [[ ${#evens[@]}\
    \ -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  min=${evens[0]}\n  min_index=${evens_index[0]}\n\
    \  for ((k=1; k<${#evens[@]}; k++)); do\n    if [[ ${evens[$k]} -lt $min ]]; then\n\
    \      min=${evens[$k]}\n      min_index=${evens_index[$k]}\n    fi\n  done\n\
    \  result[0]=$min\n  result[1]=$min_index\n  echo \"[\\\"${result[0]}\\\", \\\"\
    ${result[1]}\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even ]] ||\
    \ [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n    \
    \    min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a result=()\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local aa\n  local bb\n  local cc\n\
    \  local dd\n  local ee\n  local ff\n  local gg\n  local hh\n  local ii\n  local\
    \ jj\n  local kk\n  local ll\n  local mm\n  local nn\n  local oo\n  local pp\n\
    \  local qq\n  local rr\n  local ss\n  local tt\n  local uu\n  local vv\n  local\
    \ ww\n  local xx\n  local yy\n  local zz\n  local aaa\n  local bbb\n  local ccc\n\
    \  local ddd\n  local eee\n  local fff\n  local ggg\n  local hhh\n  local iii\n\
    \  local jjj\n  local kkk\n  local lll\n  local mmm\n  local nnn\n  local ooo\n\
    \  local ppp\n  local qqq\n  local rrr\n  local sss\n  local ttt\n  local uuu\n\
    \  local vvv\n  local www\n  local xxx\n  local yyy\n  local zzz\n  local aaaa\n\
    \  local bbbb\n  local cccc\n  local dddd\n  local eeee\n  local ffff\n  local\
    \ gggg\n  local hhhh\n  local iiii\n  local jjjj\n  local kkkk\n  local llll\n\
    \  local mmmm\n  local nnnn\n  local oooo\n  local pppp\n  local qqqq\n  local\
    \ rrrr\n  local ssss\n  local tttt\n  local uuuu\n  local vvvv\n \n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min=${evens[0]}\n    local min_index=0\n    i=0\n\
    \    for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min ]]; then\n  \
    \      min=$even\n        min_index=$i\n      fi\n      i=$((i + 1))\n    done\n\
    \    result+=($min)\n    result+=(${evens_index[$min_index]})\n    echo \"[\\\"\
    ${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=($1)\n  declare -a evens\n  declare -a odds\n\
    \  declare -a result\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2))\
    \ -eq 0 ]]; then\n      evens+=($node)\n    else\n      odds+=($node)\n    fi\n\
    \  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=()\n  else\n    result=($(printf\
    \ \"%s\\n\" \"${evens[@]}\" | sort -n | head -n 1))\n  fi\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      even_indices+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=0\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=$i\n      fi\n \
    \   done\n    result+=($min_even)\n    result+=(${even_indices[$min_even_index]})\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\"\"\n  local\
    \ min_even_index=\"\"\n  local index=0\n  for node in $nodes; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_index=0\n  local min_value=0\n\
    \  local index=0\n  local value=0\n  for node in $nodes; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ $min_value -eq 0 ]]; then\n        min_value=$node\n\
    \        min_index=$index\n      elif [[ $node -lt $min_value ]]; then\n     \
    \   min_value=$node\n        min_index=$index\n      fi\n    fi\n    index=$((index\
    \ + 1))\n  done\n  if [[ $min_value -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_value=10000\n  local\
    \ -i min_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ (( node % 2 == 0 && node < min_value )); then\n      min_value=$node\n     \
    \ min_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_value == 10000 ));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    ((index++))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_value=0\n  local -i min_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i found=0\n  for ((i=0; i<n;\
    \ i++)); do\n    if ((nodes[i] % 2 == 0)); then\n      if ((found == 0)); then\n\
    \        min_value=nodes[i]\n        min_index=i\n        found=1\n      elif\
    \ ((nodes[i] < min_value)); then\n        min_value=nodes[i]\n        min_index=i\n\
    \      fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 )); then\n      if (( node < min_even_value )); then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   (( i++ ))\n  done\n  if (( min_even_value == 10000 )); then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min_even=${evens[0]}\n    local min_even_index=${evens_index[0]}\n\
    \    for i in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]];\
    \ then\n        min_even=${evens[$i]}\n        min_even_index=${evens_index[$i]}\n\
    \      fi\n    done\n    result=($min_even $min_even_index)\n    echo \"[\\\"\
    ${result[0]}\\\", \\\"${result[1]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=0\n  local\
    \ -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i node_value=0\n\
    \  local -i found_even=0\n  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n\
    \    if ((node_value % 2 == 0)); then\n      if ((found_even == 0)); then\n  \
    \      min_even_value=$node_value\n        min_even_index=$i\n        found_even=1\n\
    \      else\n        if ((node_value < min_even_value)); then\n          min_even_value=$node_value\n\
    \          min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if ((found_even\
    \ == 0)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\",\
    \ \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=-1\n  local -i n=${#nodes[@]}\n  for ((i=0; i<n; i++));\
    \ do\n    if [[ ${nodes[i]} -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"$i\\\"\
    ]\"\n      return\n    fi\n    if [[ ${nodes[i]} -lt min_even_value && ${nodes[i]}\
    \ -gt 0 && $((nodes[i] % 2)) -eq 0 ]]; then\n      min_even_value=${nodes[i]}\n\
    \      min_even_index=$i\n    fi\n  done\n  if [[ min_even_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i is_even=0\n  local -i is_first_even=0\n  local -i is_first_value=0\n\
    \  local -i is_first_index=0\n  local -i is_first_even_value=0\n  local -i is_first_even_index=0\n\
    \  local -i is_first_even_value_index=0\n  local -i is_first_even_index_value=0\n\
    \  local -i is_first_even_index_value_index=0\n  local -i is_first_even_value_index_index=0\n\
    \  local -i is_first_even_index_value_index_index=0\n  local -i is_first_even_value_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index=0\n  local -i is_first_even_value_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index=0\n  local -i is_first_even_value_index_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index_index=0\n  local\
    \ -i is_first_even_value_index_index_index_index_index_index=0\n  local -i is_first_even_index_value_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_index_value_index_index_index_index_index_index_index=0\n\
    \  local -i is_first_even_value_index_index_index_index_index_index_index_index=0\n\
    \  local -i is_first\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens\n  local -a odds\n\
    \  local -a evens_indexes\n  local -a odds_indexes\n  local -i i=0\n  local -i\
    \ j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n\
    \  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n \
    \ local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i\
    \ qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n \
    \ local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i\
    \ zz=0\n  local -i aaa=0\n  local -i bbb=0\n  local -i ccc=0\n  local -i ddd=0\n\
    \  local -i eee=0\n  local -i fff=0\n  local -i ggg=0\n  local -i hhh=0\n  local\
    \ -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  for ((i=0; i<n; i++)); do\n \
    \   node_value=${nodes[$i]}\n    node_index=$i\n    if ((node_value % 2 == 0 &&\
    \ node_value < min_even_value)); then\n      min_even_value=$node_value\n    \
    \  min_even_index=$node_index\n    fi\n  done\n  if ((min_even_value == 10000000000));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]} -lt $min_even_value ]] && [[ $((nodes[$i] % 2))\
    \ -eq 0 ]]; then\n      min_even_value=${nodes[$i]}\n      min_even_index=$i\n\
    \    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node -eq 0 ]]; then\n      smallest_value=0\n      smallest_index=$i\n    \
    \  break\n    elif [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]]; then\n      if [[\
    \ -z $smallest_value ]] || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  local -i found=0\n  while (( i < n ));\
    \ do\n    value=${nodes[i]}\n    if (( value % 2 == 0 )); then\n      if (( value\
    \ < min_even_value )); then\n        min_even_value=$value\n        min_even_index=$i\n\
    \        found=1\n      elif (( value == min_even_value )); then\n        if ((\
    \ i < min_even_index )); then\n          min_even_index=$i\n          found=1\n\
    \        fi\n      fi\n    fi\n    (( i++ ))\n  done\n  if (( found == 1 )); then\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n   \
    \ echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100001\n \
    \ local -i min_even_index=100001\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ $min_even_value -eq 100001 ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min=\n  local min_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $node\
    \ -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"$i\\\"]\"\n      return\n    elif\
    \ [[ $node -gt 0 ]] && [[ $node%2 -eq 0 ]]; then\n      if [[ -z $min ]] || [[\
    \ $node -lt $min ]]; then\n        min=$node\n        min_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    ((index++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 100000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_value_index=-1\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    fi\n    fi\n    i+=1\n  done\n  if [[ $min_even_value_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $node =~ ^[0-9]+$ ]]; then\n      if [[ $node -eq 0 ]]; then\n        smallest_even_value=0\n\
    \        smallest_even_value_index=$i\n        break\n      elif [[ $node -gt\
    \ 0 ]] && [[ $node%2 -eq 0 ]]; then\n        if [[ -z $smallest_even_value ]]\
    \ || [[ $node -lt $smallest_even_value ]]; then\n          smallest_even_value=$node\n\
    \          smallest_even_value_index=$i\n        fi\n      fi\n    fi\n  done\n\
    \  if [[ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -i i=0\n\
    \  local -i j=0\n  local -i min_index=0\n  local -i min_value=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_first=1\n  local -i is_min=0\n\
    \  local -i is_min_index=0\n  local -i is_min_value=0\n  local -i is_min_first=0\n\
    \  local -i is_min_even=0\n  local -i is_min_even_first=0\n  local -i is_min_even_first_index=0\n\
    \  local -i is_min_even_first_value=0\n  local -i is_min_even_first_index_value=0\n\
    \  local -i is_min_even_first_index_value_min=0\n  local -i is_min_even_first_index_value_min_index=0\n\
    \  local -i is_min_even_first_index_value_min_value=0\n  local -i is_min_even_first_index_value_min_index_value=0\n\
    \  local -i is_min_even_first_index_value_min_index_value_min=0\n  local -i is_min_even_first_index_value_min_index_value_min_index=0\n\
    \  local -i is_min_even_first_index_value_min_index_value_min_value=0\n  local\
    \ -i is_min_even_first_index_value_min_index_value_min_index_value=0\n  local\
    \ -i is_min_even_first_index_value_min_index_value_min_index_value_min=0\n  local\
    \ -i is_min_even_first_index_value_min_index_value_min_index_value_min_index=0\n\
    \  local -i is_min_even_first_index_value_min_index_value_min_index_\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $node -eq 0 ]]; then\n\
    \      smallest_value=0\n      smallest_index=$i\n      break\n    elif [[ $node\
    \ -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$i\n      fi\n    fi\n    ((i++))\n  done\n  if [[ -z\
    \ $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min=10000\n  local -i index=0\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  local -i node=0\n  for ((i=0;\
    \ i<len; i++)); do\n    node=${nodes[i]}\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ $node -lt $min ]]; then\n        min=$node\n        index=$i\n  \
    \    fi\n    fi\n  done\n  if [[ $min -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min\\\", \\\"$index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local -a\
    \ evens_index=()\n    local -a result=()\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local min=0\n    local min_index=0\n    local len=${#nodes[@]}\n  \
    \  for ((i=0; i<len; i++)); do\n        if [[ ${nodes[$i]} -eq 0 ]]; then\n  \
    \          evens[$j]=${nodes[$i]}\n            evens_index[$j]=$i\n          \
    \  ((j++))\n        elif [[ $((${nodes[$i]} % 2)) -eq 0 ]]; then\n           \
    \ evens[$j]=${nodes[$i]}\n            evens_index[$j]=$i\n            ((j++))\n\
    \        fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        result=()\n\
    \    else\n        min=${evens[0]}\n        min_index=0\n        for ((k=1; k<${#evens[@]};\
    \ k++)); do\n            if [[ ${evens[$k]} -lt $min ]]; then\n              \
    \  min=${evens[$k]}\n                min_index=$k\n            fi\n        done\n\
    \        result[0]=$min\n        result[1]=${evens_index[$min_index]}\n    fi\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local min_even_value=\n    local\
    \ min_even_index=\n    local index=0\n    for node in \"${nodes[@]}\"; do\n  \
    \      if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$index\n            fi\n        fi\n        index=$((index\
    \ + 1))\n    done\n    if [[ -z $min_even_value ]]; then\n        echo \"[]\"\n\
    \    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_index=${#nodes[@]}\n\
    \  local -i min_value=${nodes[0]}\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  while (( i < len )); do\n    if (( nodes[i] % 2 == 0 && nodes[i] < min_value\
    \ )); then\n      min_value=${nodes[i]}\n      min_index=$i\n    fi\n    (( i++\
    \ ))\n  done\n  if (( min_index == ${#nodes[@]} )); then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=-1\n  local -i i=0\n  for node in \"${nodes[@]}\";\
    \ do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_index\
    \ == -1 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\"\
    , \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a arr=($1)\n  local -a evens=()\n  local -a odds=()\n\
    \  local -a result=()\n  local -i i=0\n  local -i len=${#arr[@]}\n  local -i min_even=0\n\
    \  local -i min_odd=0\n  local -i min_even_index=0\n  local -i min_odd_index=0\n\
    \  local -i even_count=0\n  local -i odd_count=0\n  local -i even_index=0\n  local\
    \ -i odd_index=0\n  local -i curr_even=0\n  local -i curr_odd=0\n  local -i curr_even_index=0\n\
    \  local -i curr_odd_index=0\n  local -i curr_index=0\n  local -i curr_value=0\n\
    \  local -i curr_value_index=0\n  local -i curr_value_index_index=0\n  local -i\
    \ curr_value_index_value=0\n  local -i curr_value_index_value_index=0\n  local\
    \ -i curr_value_index_value_value=0\n  local -i curr_value_index_value_value_index=0\n\
    \  local -i curr_value_index_value_value_value=0\n  local -i curr_value_index_value_value_value_index=0\n\
    \  local -i curr_value_index_value_value_value_value=0\n  local -i curr_value_index_value_value_value_value_index=0\n\
    \  local -i curr_value_index_value_value_value_value_value=0\n  local -i curr_value_index_value_value_value_value_value_index=0\n\
    \  local -i curr_value_index_value_value_value_value_value_value=0\n  local -i\
    \ curr_value_index_value_value_value_value_value_value_index=0\n  local -i curr_value_index_value_value_value_value_value_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i is_even=0\n  local -i is_first=1\n  local -i is_smaller=0\n  local -i is_smaller_index=0\n\
    \  local -i is_smaller_value=0\n  local -i is_smaller_even=0\n  local -i is_smaller_first=0\n\
    \  local -i is_smaller_index_first=0\n  local -i is_smaller_value_first=0\n  local\
    \ -i is_smaller_even_first=0\n  local -i is_smaller_first_first=0\n  local -i\
    \ is_smaller_index_first_first=0\n  local -i is_smaller_value_first_first=0\n\
    \  local -i is_smaller_even_first_first=0\n  local -i is_smaller_first_first_first=0\n\
    \  local -i is_smaller_index_first_first_first=0\n  local -i is_smaller_value_first_first_first=0\n\
    \  local -i is_smaller_even_first_first_first=0\n  local -i is_smaller_first_first_first_first=0\n\
    \  local -i is_smaller_index_first_first_first_first=0\n  local -i is_smaller_value_first_first_first_first=0\n\
    \  local -i is_smaller_even_first_first_first_first=0\n  local -i is_smaller_first_first_first_first_first=0\n\
    \  local -i is_smaller_index_first_first_first_first_first=0\n  local -i is_smaller_value_first_first_first_first_first=0\n\
    \  local -i is_smaller_even_first_first_first_first_first=0\n  local -i is_smaller_first_\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even=\n  local min_even_idx=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even ]] || [[ $node -lt $min_even ]]; then\n \
    \       min_even=$node\n        min_even_idx=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min_even\\\", \\\"$min_even_idx\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes\n  local -i i\n  local -i min_even_value\n\
    \  local -i min_even_index\n  local -i min_even_value_count\n  local -i value\n\
    \  local -i count\n  local -i index\n\n  nodes=($1)\n  min_even_value=100000000\n\
    \  min_even_index=0\n  min_even_value_count=0\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    value=${nodes[$i]}\n    if ((value % 2 == 0)); then\n      if ((value\
    \ < min_even_value)); then\n        min_even_value=$value\n        min_even_index=$i\n\
    \        min_even_value_count=1\n      elif ((value == min_even_value)); then\n\
    \        ((min_even_value_count++))\n      fi\n    fi\n  done\n  if ((min_even_value_count\
    \ > 0)); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  local node=\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for (( i=0; i<${#nodes[@]}; i++ )); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ $(( ${nodes[$i]} % 2 )) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i len=${#nodes[@]}\n  local\
    \ -i node_value=0\n  local -i found_even=0\n  for ((i=0; i<len; i++)); do\n  \
    \  node_value=${nodes[i]}\n    if ((node_value % 2 == 0)); then\n      found_even=1\n\
    \      if ((node_value < min_even_value)); then\n        min_even_value=$node_value\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if ((found_even)); then\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n   \
    \ echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even ]] || [[ $node -lt $min_even ]]; then\n \
    \       min_even=$node\n        min_even_index=$i\n      fi\n    fi\n    ((i++))\n\
    \  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min=0\n  local min_index=0\n  local\
    \ index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $node -eq 0 ]]; then\n\
    \      echo \"[\\\"0\\\", \\\"$index\\\"]\"\n      return\n    fi\n    if [[ $((\
    \ node % 2 )) -eq 0 ]]; then\n      if [[ $min -eq 0 ]]; then\n        min=$node\n\
    \        min_index=$index\n      elif [[ $node -lt $min ]]; then\n        min=$node\n\
    \        min_index=$index\n      fi\n    fi\n    index=$(( index + 1 ))\n  done\n\
    \  if [[ $min -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\"\
    , \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i index=0\n  for node in \"${nodes[@]}\";\
    \ do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq 10000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \   i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i is_first=1\n  local -i is_even=0\n  local\
    \ -i is_smaller=0\n  local -i is_first_even=1\n  local -i is_first_smaller=1\n\
    \  local -i is_first_even_smaller=1\n  local -i node_value=0\n  local -i node_index=0\n\
    \  local -i min_even_value=0\n  local -i min_even_index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    node_value=${node}\n    node_index=${i}\n    is_even=$((node_value %\
    \ 2))\n    is_smaller=$((node_value < min_value))\n    is_first=$((is_first_even_smaller))\n\
    \    is_first_even=$((is_first_even_smaller))\n    is_first_smaller=$((is_first_even_smaller))\n\
    \    is_first_even_smaller=$((is_first_even_smaller && is_even && is_smaller))\n\
    \    min_value=$((is_smaller ? node_value : min_value))\n    min_index=$((is_smaller\
    \ ? node_index : min_index))\n    min_even_value=$((is_first_even ? node_value\
    \ : min_even_value))\n    min_even_index=$((is_first_even ? node_index : min_even_index))\n\
    \    min_even_value=$((is_even && is_smaller ? node_value : min_even_value))\n\
    \    min_even_index=$((is_even && is_smaller ? node_index : min_even_index))\n\
    \    min_even_value=$((is_even && is_first ? node_value : min_even_value))\n \
    \   min_even_index=$((is_even && is_first ? node_index : min_even_index))\n  \
    \  i=$((i + 1))\n  done\n  if\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5nv5hlof.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmp5nv5hlof.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i min_even_first_index=0\n\
    \  local -i min_even_last_index=0\n  local -i node_value=0\n  local -i node_count=0\n\
    \  local -i node_first_index=0\n  local -i node_last_index=0\n  local -i node_index=0\n\
    \  local -i node_count_even=0\n  local -i node_count_odd=0\n  local -i node_first_index_even=0\n\
    \  local -i node_first_index_odd=0\n  local -i node_last_index_even=0\n  local\
    \ -i node_last_index_odd=0\n  local -i node_index_even=0\n  local -i node_index_odd=0\n\
    \  local -i node_value_even=0\n  local -i node_value_odd=0\n  local -i node_count_even_min=0\n\
    \  local -i node_count_odd_min=0\n  local -i node_first_index_even_min=0\n  local\
    \ -i node_first_index_odd_min=0\n  local -i node_last_index_even_min=0\n  local\
    \ -i node_last_index_odd_min=0\n  local -i node_index_even_min=0\n  local -i node_index_odd_min=0\n\
    \  local -i node_value_even_min=0\n  local -i node_value_odd_min=0\n  local -i\
    \ node_count_even_max=0\n  local -i node_count_odd_max=0\n  local -i node_first_index_even_max=0\n\
    \  local -i node_first_index_odd_max=0\n  local -i node_last_index_even_max=0\n\
    \  local -i node_last_index_odd_max=0\n  local -i node_index\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_index=${#nodes[@]}\n\
    \  local -i min_even_value=${nodes[min_even_index-1]}\n  local -i i=0\n  for node\
    \ in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value\
    \ ]]; then\n      min_even_value=$node\n      min_even_index=$i\n    fi\n    ((i++))\n\
    \  done\n  if [[ $min_even_index -eq ${#nodes[@]} ]]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      elif\
    \ [[ $node -eq $min_even_value ]]; then\n        if [[ $i -lt $min_even_index\
    \ ]]; then\n          min_even_index=$i\n        fi\n      fi\n    fi\n    i+=1\n\
    \  done\n  if [[ $min_even_value -eq 1000000000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n\
    \  local -i min_value=-1\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    if ((nodes[i] % 2 == 0)); then\n      if ((min_value == -1 || nodes[i]\
    \ < min_value)); then\n        min_value=nodes[i]\n        min_index=i\n     \
    \ fi\n    fi\n  done\n  if ((min_index == -1)); then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"${min_value}\\\", \\\"${min_index}\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n  local -a arr=()\n  local -i i=0\n  local\
    \ -i min=0\n  local -i min_index=0\n  local -i min_found=0\n  local -i arr_len=0\n\
    \  local -i arr_len_minus_one=0\n  local -i arr_len_minus_two=0\n  local -i arr_len_minus_three=0\n\
    \  local -i arr_len_minus_four=0\n  local -i arr_len_minus_five=0\n  local -i\
    \ arr_len_minus_six=0\n  local -i arr_len_minus_seven=0\n  local -i arr_len_minus_eight=0\n\
    \  local -i arr_len_minus_nine=0\n  local -i arr_len_minus_ten=0\n  local -i arr_len_minus_eleven=0\n\
    \  local -i arr_len_minus_twelve=0\n  local -i arr_len_minus_thirteen=0\n  local\
    \ -i arr_len_minus_fourteen=0\n  local -i arr_len_minus_fifteen=0\n  local -i\
    \ arr_len_minus_sixteen=0\n  local -i arr_len_minus_seventeen=0\n  local -i arr_len_minus_eighteen=0\n\
    \  local -i arr_len_minus_nineteen=0\n  local -i arr_len_minus_twenty=0\n  local\
    \ -i arr_len_minus_twenty_one=0\n  local -i arr_len_minus_twenty_two=0\n  local\
    \ -i arr_len_minus_twenty_three=0\n  local -i arr_len_minus_twenty_four=0\n  local\
    \ -i arr_len_minus_twenty_five=0\n  local -i arr_len_minus_twenty_six=0\n  local\
    \ -i arr_len_minus_twenty_seven=0\n  local -i arr_len_minus_twenty_eight=0\n \
    \ local -i arr_len_minus_twenty_nine=0\n  local -i arr_len\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  local -i found_even=0\n  for ((i=0; i<n;\
    \ i++)); do\n    value=${nodes[i]}\n    if ((value % 2 == 0)); then\n      found_even=1\n\
    \      if ((value < min_even_value)); then\n        min_even_value=$value\n  \
    \      min_even_index=$i\n      elif ((value == min_even_value)); then\n     \
    \   if ((i < min_even_index)); then\n          min_even_index=$i\n        fi\n\
    \      fi\n    fi\n  done\n  if ((found_even == 0)); then\n    echo \"[]\"\n \
    \ else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  local\
    \ -i value\n  local -i found_even=0\n  while (( i < n )); do\n    value=${nodes[i]}\n\
    \    if (( value % 2 == 0 )); then\n      if (( value < min_even_value )); then\n\
    \        min_even_value=$value\n        min_even_index=$i\n        found_even=1\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( found_even )); then\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"\
    []\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 )); then\n      if (( node < min_even_value ));\
    \ then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n  \
    \  fi\n    (( i++ ))\n  done\n  if (( min_even_value == 100000000 )); then\n \
    \   echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value ]] ||\
    \ [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n      \
    \  min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i n=${#nodes[@]}\n  local -i is_empty=1\n  local -i is_even=0\n  local\
    \ -i is_first_even=1\n  local -i is_first_value=1\n  local -i is_first_index=1\n\
    \  local -i is_first_even_value=1\n  local -i is_first_even_index=1\n  local -i\
    \ is_first_even_value_index=1\n  local -i is_first_even_index_value=1\n  local\
    \ -i is_first_even_index_value_index=1\n  local -i is_first_even_value_index_index=1\n\
    \  local -i is_first_even_value_index_value=1\n  local -i is_first_even_index_value_value=1\n\
    \  local -i is_first_even_index_value_index_index=1\n  local -i is_first_even_index_value_index_value=1\n\
    \  local -i is_first_even_index_value_value_index=1\n  local -i is_first_even_index_value_value_value=1\n\
    \  local -i is_first_even_value_index_index_index=1\n  local -i is_first_even_value_index_index_value=1\n\
    \  local -i is_first_even_value_index_value_index=1\n  local -i is_first_even_value_index_value_value=1\n\
    \  local -i is_first_even_value_value_index_index=1\n  local -i is_first_even_value_value_index_value=1\n\
    \  local -i is_first_even_value_value_value_index=1\n  local -i is_first_even_value_value_value_value=1\n\
    \  local -i is_first\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=-1\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n  \
    \  if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n  \
    \  fi\n    ((i++))\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_index=1000000\n  local\
    \ -i min_value=1000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n  for ((i=0;\
    \ i<n; i++)); do\n    local -i value=${nodes[i]}\n    if ((value % 2 == 0 && value\
    \ < min_value)); then\n      min_value=$value\n      min_index=$i\n    fi\n  done\n\
    \  if ((min_value < 1000000)); then\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i is_even\n  for ((i=0;\
    \ i<len; i++)); do\n    node_value=${nodes[$i]}\n    node_index=$i\n    is_even=$((node_value\
    \ % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if [[ $node_value -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node_value\n        min_even_index=$node_index\n\
    \      fi\n    fi\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=100000000\n\
    \    local -i min_even_value_index=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i node_value=0\n    local -i found_even=0\n    for ((i=0; i<n; i++));\
    \ do\n        node_value=${nodes[i]}\n        if ((node_value % 2 == 0)); then\n\
    \            found_even=1\n            if ((node_value < min_even_value)); then\n\
    \                min_even_value=$node_value\n                min_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if ((found_even)); then\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n    else\n   \
    \     echo \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $node -eq 0 ]]; then\n\
    \      smallest_value=0\n      smallest_index=$i\n      break\n    elif [[ $node\
    \ -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ $node -lt $smallest_value ]]; then\n        smallest_value=$node\n\
    \        smallest_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ -z $smallest_value ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i is_even=0\n  local -i is_first_even=0\n  local -i is_first_value=0\n\
    \  local -i is_first_index=0\n  for i in \"${!nodes[@]}\"; do\n    is_even=$((nodes[i]\
    \ % 2))\n    if [[ $is_even -eq 0 ]]; then\n      if [[ $is_first_even -eq 0 ]];\
    \ then\n        min_even_value=${nodes[i]}\n        min_even_index=$i\n      \
    \  is_first_even=1\n      elif [[ ${nodes[i]} -lt $min_even_value ]]; then\n \
    \       min_even_value=${nodes[i]}\n        min_even_index=$i\n      fi\n    fi\n\
    \    if [[ $is_first_value -eq 0 ]]; then\n      min_value=${nodes[i]}\n     \
    \ min_index=$i\n      is_first_value=1\n    elif [[ ${nodes[i]} -lt $min_value\
    \ ]]; then\n      min_value=${nodes[i]}\n      min_index=$i\n    fi\n  done\n\
    \  if [[ $is_first_even -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    fi\n    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_value min_index\n  local\
    \ value index\n  local i=0\n  for value in $nodes; do\n    if [ $((value % 2))\
    \ -eq 0 ]; then\n      if [ -z \"$min_value\" ] || [ $value -lt $min_value ];\
    \ then\n        min_value=$value\n        min_index=$i\n      fi\n    fi\n   \
    \ i=$((i + 1))\n  done\n  if [ -z \"$min_value\" ]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i value=0\n  local -i len=${#nodes[@]}\n  local\
    \ -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min_value=$value\n\
    \        min_index=$i\n        found=1\n      else\n        if ((value < min_value));\
    \ then\n          min_value=$value\n          min_index=$i\n        fi\n     \
    \ fi\n    fi\n  done\n  if ((found == 0)); then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=10000\n  local min_even_index=10000\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[\
    \ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value ]]; then\n\
    \        min_even_value=$node\n        min_even_index=$i\n      fi\n    fi\n \
    \ done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i smallest_index=0\n\
    \  local -i smallest_value=0\n  local -i smallest_even_value=0\n  local -i smallest_even_index=0\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_first_even=0\n  local\
    \ -i is_first_value=0\n  local -i is_first_node=0\n  local -i is_first_even_node=0\n\
    \  local -i is_smaller_even_value=0\n  local -i is_smaller_even_index=0\n  local\
    \ -i is_smaller_value=0\n  local -i is_smaller_index=0\n  local -i is_smaller_even_value_or_index=0\n\
    \  local -i is_smaller_value_or_index=0\n  local -i is_smaller_even_value_and_index=0\n\
    \  local -i is_smaller_value_and_index=0\n  local -i is_smaller_even_value_xor_index=0\n\
    \  local -i is_smaller_value_xor_index=0\n  local -i is_smaller_even_value_nand_index=0\n\
    \  local -i is_smaller_value_nand_index=0\n  local -i is_smaller_even_value_nor_index=0\n\
    \  local -i is_smaller_value_nor_index=0\n  local -i is_smaller_even_value_xnor_index=0\n\
    \  local -i is_smaller_value_xnor_index=0\n  local -i is_smaller_even_value_implies_index=0\n\
    \  local -i is_smaller_value_implies_index=0\n  local -i is_smaller_even_value_implied_by_index=0\n\
    \  local -i is_smaller_value_implied_by_index=0\n  local -i is_smaller_even_value_iff_index=0\n\
    \  local -i\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0 && value < min_even_value)); then\n      min_even_value=$value\n\
    \      min_even_index=$i\n    fi\n  done\n  if ((min_even_value < 1000000000));\
    \ then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local -a\
    \ odds=()\n    local -a result=()\n    for i in \"${!nodes[@]}\"; do\n       \
    \ if [[ \"${nodes[$i]}\" -eq 0 ]]; then\n            evens+=(\"$i\")\n       \
    \ elif [[ \"${nodes[$i]}\" -eq 1 ]]; then\n            odds+=(\"$i\")\n      \
    \  elif [[ \"${nodes[$i]}\" -gt 1 ]]; then\n            if [[ \"$((nodes[$i] %\
    \ 2))\" -eq 0 ]]; then\n                evens+=(\"$i\")\n            else\n  \
    \              odds+=(\"$i\")\n            fi\n        fi\n    done\n    if [[\
    \ \"${#evens[@]}\" -eq 0 ]]; then\n        result=(\"${odds[0]}\" \"${nodes[${odds[0]}]}\"\
    )\n    elif [[ \"${#odds[@]}\" -eq 0 ]]; then\n        result=(\"${evens[0]}\"\
    \ \"${nodes[${evens[0]}]}\")\n    else\n        local -i even_min=${nodes[${evens[0]}]}\n\
    \        local -i odd_min=${nodes[${odds[0]}]}\n        for i in \"${evens[@]:1}\"\
    ; do\n            if [[ \"${nodes[$i]}\" -lt \"$even_min\" ]]; then\n        \
    \        even_min=${nodes[$i]}\n            fi\n        done\n        for i in\
    \ \"${odds[@]:1}\"; do\n            if [[ \"${nodes[$i]}\" -lt \"$odd_min\" ]];\
    \ then\n                odd_min=${nodes[$i]}\n            fi\n        done\n \
    \       if [[ \"$even_min\" -lt \"$odd_min\" ]]; then\n            result=(\"\
    ${evens[0]}\" \"$even_min\")\n        else\n            result=(\"${odds[0]}\"\
    \ \"$odd_min\")\n        fi\n    fi\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=0\n  \
    \  local -i min_even_index=0\n    local -i found_even=0\n    local -i i=0\n  \
    \  for node in \"${nodes[@]}\"; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n\
    \            if [[ $found_even -eq 0 ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n                found_even=1\n           \
    \ elif [[ $node -lt $min_even_value ]]; then\n                min_even_value=$node\n\
    \                min_even_index=$i\n            fi\n        fi\n        ((i++))\n\
    \    done\n    if [[ $found_even -eq 0 ]]; then\n        echo \"[]\"\n    else\n\
    \        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_value_index=\"\"\n  local i=0\n  for node in $nodes; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]]; then\n\
    \        smallest_even_value=$node\n        smallest_even_value_index=$i\n   \
    \   elif [[ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [[ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i i=0\n    local -i min_index=0\n\
    \    local -i min_value=0\n    local -i min_even_index=0\n    local -i min_even_value=0\n\
    \    local -i len=${#nodes[@]}\n    local -i value=0\n    local -i is_even=0\n\
    \    local -i is_first_even=1\n    local -i is_first_min=1\n    local -i is_first_min_even=1\n\
    \    local -i is_first_min_even_index=1\n    local -i is_first_min_index=1\n \
    \   local -i is_first_min_value=1\n    local -i is_first_value=1\n    local -i\
    \ is_min=0\n    local -i is_min_even=0\n    local -i is_min_even_index=0\n   \
    \ local -i is_min_index=0\n    local -i is_min_value=0\n    local -i is_min_even_value=0\n\
    \    local -i is_min_even_index=0\n    local -i is_min_index=0\n    local -i is_min_value=0\n\
    \    local -i is_min_even_value=0\n    local -i is_min_even_index=0\n    local\
    \ -i is_min_index=0\n    local -i is_min_value=0\n    local -i is_min_even_value=0\n\
    \    local -i is_min_even_index=0\n    local -i is_min_index=0\n    local -i is_min_value=0\n\
    \    local -i is_min_even_value=0\n    local -i is_min_even_index=0\n    local\
    \ -i is_min_index=0\n    local -i is_min_value=0\n    local -i is_min_even_value=0\n\
    \    local -i is_min_even_index=0\n    local -i is_min_index=0\n    local -i is_min_value=0\n\
    \    local -\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i is_empty=1\n  local -i is_even=0\n  local -i is_first_even=1\n  local\
    \ -i is_first_value=1\n  local -i is_first_index=1\n  local -i is_first_even_value=1\n\
    \  local -i is_first_even_index=1\n  local -i is_first_even_index_value=1\n  local\
    \ -i is_first_even_value_index=1\n  local -i is_first_even_index_value_index=1\n\
    \  local -i is_first_even_value_index_index=1\n  local -i is_first_even_index_value_index_index=1\n\
    \  local -i is_first_even_value_index_index_index=1\n  local -i is_first_even_index_value_index_index_index=1\n\
    \  local -i is_first_even_value_index_index_index_index=1\n  local -i is_first_even_index_value_index_index_index_index=1\n\
    \  local -i is_first_even_value_index_index_index_index_index=1\n  local -i is_first_even_index_value_index_index_index_index_index=1\n\
    \  local -i is_first_even_value_index_index_index_index_index_index=1\n  local\
    \ -i is_first_even_index_value_index_index_index_index_index_index=1\n  local\
    \ -i is_first_even_value_index_index_index_index_index_index_index=1\n  local\
    \ -i is_first_even_index_value_index_index_index_index_index_index_index=1\n \
    \ local -i is_first_even_value_index_index_index_index_index_index_index_index\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i i=0\n    local -i min_index=-1\n\
    \    local -i min_value=-1\n    local -i min_even_index=-1\n    local -i min_even_value=-1\n\
    \    for i in \"${!nodes[@]}\"; do\n        local -i value=${nodes[$i]}\n    \
    \    if [[ $value -lt $min_value || $min_value -eq -1 ]]; then\n            min_value=$value\n\
    \            min_index=$i\n        fi\n        if [[ $value -lt $min_even_value\
    \ || $min_even_value -eq -1 ]] && [[ $value -eq 0 || $value%2 -eq 0 ]]; then\n\
    \            min_even_value=$value\n            min_even_index=$i\n        fi\n\
    \    done\n    if [[ $min_even_value -eq -1 ]]; then\n        echo \"[]\"\n  \
    \  else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local evens=\"$(echo \"$nodes\" | tr\
    \ ' ' '\\n' | grep -E '^[0-9]+$' | grep -E '^[0-9]*[02468]$')\"\n  local min_even=\"\
    $(echo \"$evens\" | sort -n | head -n 1)\"\n  local min_even_index=\"$(echo \"\
    $nodes\" | tr ' ' '\\n' | grep -n \"$min_even\" | head -n 1 | cut -d ':' -f 1)\"\
    \n  if [ -z \"$min_even\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=100001\n  local\
    \ min_even_index=100001\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]] && [[ $node -lt $min_even_value ]]; then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    i=$((i + 1))\n  done\n  if [[ $min_even_value\
    \ -eq 100001 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      if [[ -z $min_even_value ]]; then\n        min_even_value=0\n        min_even_index=$i\n\
    \      fi\n    elif [[ ${nodes[$i]} -gt 0 ]] && [[ $((${nodes[$i]} % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value\
    \ ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n \
    \     fi\n    fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_value=0\n      smallest_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $smallest_value\
    \ ]] || [[ ${nodes[$i]} -lt $smallest_value ]]; then\n        smallest_value=${nodes[$i]}\n\
    \        smallest_index=$i\n      fi\n    fi\n  done\n  if [[ -z $smallest_value\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=100000000\n\
    \    local -i min_even_index=100000000\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i value\n    local -i index\n    local -i is_even\n    for ((i=0;\
    \ i<n; i++)); do\n        value=${nodes[i]}\n        is_even=$((value % 2))\n\
    \        if [[ $is_even -eq 0 ]]; then\n            if [[ $value -lt $min_even_value\
    \ ]]; then\n                min_even_value=$value\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ $min_even_value -eq 100000000\
    \ ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i len=${#nodes[@]}\n  local -i node_value=0\n  local -i is_even=0\n\
    \  local -i is_first_even=1\n  local -i is_first_value=1\n  local -i is_first_even_value=1\n\
    \  local -i is_first_even_index=1\n  local -i is_first_even_value_index=1\n  local\
    \ -i is_first_even_value_index_found=0\n  local -i is_first_even_value_found=0\n\
    \  local -i is_first_even_index_found=0\n  local -i is_first_even_found=0\n  local\
    \ -i is_first_value_found=0\n  local -i is_first_index_found=0\n  local -i is_first_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even_value_index_found=0\n\
    \  local -i is_first_even_value_index_found=0\n  local -i is_first_even\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=-1\n  local -i i=0\n  local -i n=${#nodes[@]}\n  while\
    \ (( i < n )); do\n    local -i node=${nodes[$i]}\n    if (( node % 2 == 0 &&\
    \ node < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_index == -1 )); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i value=0\n  local\
    \ -i is_first=1\n  for ((i=0; i<len; i++)); do\n    value=${nodes[i]}\n    if\
    \ ((value % 2 == 0)); then\n      if ((is_first == 1)); then\n        min_value=$value\n\
    \        min_index=$i\n        is_first=0\n      elif ((value < min_value)); then\n\
    \        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if\
    \ ((is_first == 1)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_idx=-1\n  local -i min_val=1000000000\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n\
    \    if [[ ${nodes[i]} -eq 0 ]]; then\n      echo \"[\\\"0\\\", \\\"$i\\\"]\"\n\
    \      return\n    fi\n    if [[ ${nodes[i]} -lt min_val && ${nodes[i]} -gt 0\
    \ && ${nodes[i]}%2 -eq 0 ]]; then\n      min_val=${nodes[i]}\n      min_idx=$i\n\
    \    fi\n  done\n  if [[ min_idx -eq -1 ]]; then\n    echo \"[]\"\n  else\n  \
    \  echo \"[\\\"$min_val\\\", \\\"$min_idx\\\"]\"\n  fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i is_first_even=1\n\
    \  for ((i=0; i<len; i++)); do\n    local -i value=${nodes[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((is_first_even)); then\n        min_value=$value\n\
    \        min_index=$i\n        is_first_even=0\n      elif ((value < min_value));\
    \ then\n        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n\
    \  if ((is_first_even)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i is_even\n  local -i is_first_even=1\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -lt $min_value ]]; then\n      min_value=${nodes[$i]}\n\
    \      min_index=$i\n    fi\n    is_even=$(( ${nodes[$i]} % 2 ))\n    if [[ $is_even\
    \ -eq 0 ]]; then\n      if [[ $is_first_even -eq 1 ]]; then\n        min_even_value=${nodes[$i]}\n\
    \        min_even_index=$i\n        is_first_even=0\n      elif [[ ${nodes[$i]}\
    \ -lt $min_even_value ]]; then\n        min_even_value=${nodes[$i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ $is_first_even -eq 0 ]]; then\n    echo \"\
    [\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_index=\n  local min_even_value=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a evens_sorted_index=()\n\
    \  local -a evens_sorted_index_sorted=()\n  local -a evens_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_index=()\n  local -a evens_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_index_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_index=()\n  local -a evens_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n  local\
    \ -a evens_sorted_sorted\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  local -i min_even_value_count=0\n\
    \  for ((i=0; i<n; i++)); do\n    node_value=${nodes[i]}\n    node_index=$i\n\
    \    if ((node_value % 2 == 0)); then\n      if ((node_value < min_even_value));\
    \ then\n        min_even_value=$node_value\n        min_even_index=$node_index\n\
    \        min_even_value_count=1\n      elif ((node_value == min_even_value));\
    \ then\n        min_even_value_count+=1\n      fi\n    fi\n  done\n  if ((min_even_value_count\
    \ > 0)); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\
    \n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 1000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i value=0\n  local -i is_even=0\n  local -i is_first_even=0\n  local\
    \ -i is_first_value=0\n  local -i is_first_index=0\n  local -i is_first_node=0\n\
    \  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n  local -i\
    \ is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
    \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i\
    \ is_first_even_value=0\n  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n\
    \  local -i is_first_even_value=0\n  local -i is_first_even_index=0\n  local -i\
    \ is_first_even_node=0\n  local -i is_first_even_value=0\n  local -i is_first_even_index=0\n\
    \  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n  local -i\
    \ is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i is_first_even_value=0\n\
    \  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n  local -i\
    \ is_first_even_value=0\n  local -i is_first_even_index=0\n  local -i is_first_even_node=0\n\
    \  local -i is_first_even_value=0\n  local -i is_first_even_index=0\n  local -i\
    \ is\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i node_value\n  local -i node_index\n  for ((i=0; i<n; i++)); do\n \
    \   node_value=${nodes[$i]}\n    if ((node_value % 2 == 0)); then\n      if ((node_value\
    \ < min_even_value)); then\n        min_even_value=$node_value\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if ((min_even_value == 100000000)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens\n    local -a evens_indexes\n\
    \    local -a evens_indexes_sorted\n    local -a evens_sorted\n    local -a evens_sorted_indexes\n\
    \    local -a evens_sorted_indexes_sorted\n    local -a evens_sorted_sorted\n\
    \    local -a evens_sorted_sorted_indexes\n    local -a evens_sorted_sorted_indexes_sorted\n\
    \    local -a evens_sorted_sorted_sorted\n    local -a evens_sorted_sorted_sorted_indexes\n\
    \    local -a evens_sorted_sorted_sorted_indexes_sorted\n    local -a evens_sorted_sorted_sorted_sorted\n\
    \    local -a evens_sorted_sorted_sorted_sorted_indexes\n    local -a evens_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \    local -a evens_sorted_sorted_sorted_sorted_sorted\n    local -a evens_sorted_sorted_sorted_sorted_sorted_indexes\n\
    \    local -a evens_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n    local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n\
    \    local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n\
    \    local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes\n    local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indexes_sorted\n \
    \   local -a evens_sorted\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i is_even=0\n  local -i is_min_even_set=0\n  local -i is_min_set=0\n\
    \  local -i is_empty=0\n  local -i is_all_odd=0\n  local -i is_all_even=0\n  local\
    \ -i is_all_zero=0\n  local -i is_all_non_zero=0\n  local -i is_all_negative=0\n\
    \  local -i is_all_positive=0\n  local -i is_all_non_negative=0\n  local -i is_all_positive_or_zero=0\n\
    \  local -i is_all_negative_or_zero=0\n  local -i is_all_positive_or_negative=0\n\
    \  local -i is_all_positive_or_non_negative=0\n  local -i is_all_negative_or_non_negative=0\n\
    \  local -i is_all_positive_or_negative_or_zero=0\n  local -i is_all_positive_or_non_negative_or_zero=0\n\
    \  local -i is_all_negative_or_non_negative_or_zero=0\n  local -i is_all_positive_or_negative_or_non_negative=0\n\
    \  local -i is_all_positive_or_negative_or_non_negative_or_zero=0\n  local -i\
    \ is_all_non_negative_or_zero=0\n  local -i is_all_non_positive=0\n  local -i\
    \ is_all_non_negative=0\n  local -i is_all_non_positive_or_zero=0\n  local -i\
    \ is_all_non_negative_or_zero=0\n  local -i is_all_non_positive_or_negative=0\n\
    \  local -i is_all_non_positive_or_non_negative=0\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a evens_sorted_index=()\n\
    \  local -a evens_sorted_index_sorted=()\n  local -a evens_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_index=()\n  local -a evens_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_index_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_index=()\n  local -a evens_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n  local\
    \ -a evens_sorted_sorted\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_value=0\n  local -i min_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i is_first_even=1\n  for\
    \ ((i=0; i<n; i++)); do\n    local -i node=${nodes[$i]}\n    if ((node % 2 ==\
    \ 0)); then\n      if ((is_first_even == 1)); then\n        min_value=$node\n\
    \        min_index=$i\n        is_first_even=0\n      else\n        if ((node\
    \ < min_value)); then\n          min_value=$node\n          min_index=$i\n   \
    \     fi\n      fi\n    fi\n  done\n  if ((is_first_even == 1)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100001\n \
    \ local -i min_even_index=100001\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 100001 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a even_indices=()\n\
    \  local -a even_values=()\n  local -a even_index_values=()\n  local -a even_index_values_sorted=()\n\
    \  local -a even_index_values_sorted_indices=()\n  local -a even_index_values_sorted_indices_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices=()\n  local -a even_index_values_sorted_indices_sorted_indices_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n\
    \  local -a even_index_values_sorted_indices_sorted_indices_sorted_sorted_sorted\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo []\n\
    \  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n  local -a evens_sorted_index=()\n\
    \  local -a evens_sorted_index_sorted=()\n  local -a evens_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_index=()\n  local -a evens_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_index_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_index=()\n  local -a evens_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_index_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_index=()\n  local\
    \ -a evens_sorted_sorted\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a array=($1)\n  local -i i=0\n  local -i min=0\n \
    \ local -i min_index=0\n  local -i len=${#array[@]}\n  local -i value=0\n  local\
    \ -i found=0\n  for ((i=0; i<len; i++)); do\n    value=${array[i]}\n    if ((value\
    \ % 2 == 0)); then\n      if ((found == 0)); then\n        min=value\n       \
    \ min_index=i\n        found=1\n      elif ((value < min)); then\n        min=value\n\
    \        min_index=i\n      fi\n    fi\n  done\n  if ((found == 0)); then\n  \
    \  echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n  local -a arr=()\n  local -a evens=()\n\
    \  local -a evens_idx=()\n  local -a result=()\n  local -i i=0\n  local -i j=0\n\
    \  local -i k=0\n  local -i len=0\n  local -i len_evens=0\n  local -i len_evens_idx=0\n\
    \  local -i min_even=0\n  local -i min_even_idx=0\n  local -i min_even_idx_idx=0\n\
    \  local -i min_even_idx_idx_idx=0\n  local -i min_even_idx_idx_idx_idx=0\n  local\
    \ -i min_even_idx_idx_idx_idx_idx=0\n  local -i min_even_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_even_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_even_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_even_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_even_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n\
    \  local -i min_even_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i\
    \ min_even_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=0\n  local -i min_even_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx_idx=\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even_value=0\n      min_even_value_index=$i\n      break\n    elif\
    \ [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z\
    \ $min_even_value ]] || [[ ${nodes[$i]} -lt $min_even_value ]]; then\n       \
    \ min_even_value=${nodes[$i]}\n        min_even_value_index=$i\n      fi\n   \
    \ fi\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n  echo \"not implemented\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_value_index=10000\n  local -i min_even_value_count=0\n  local -i\
    \ i=0\n  for node in \"${nodes[@]}\"; do\n    if (( node % 2 == 0 )); then\n \
    \     if (( node < min_even_value )); then\n        min_even_value=$node\n   \
    \     min_even_value_index=$i\n        min_even_value_count=1\n      elif (( node\
    \ == min_even_value )); then\n        (( min_even_value_count++ ))\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_value_count > 0 )); then\n  \
    \  echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even=\n  local min_even_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min_even=0\n      min_even_index=$i\n      break\n    elif [[ ${nodes[$i]}\
    \ -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min_even ]] ||\
    \ [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n    \
    \    min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$index\n    fi\n    (( index++ ))\n  done\n  if (( min_even_value\
    \ == 100000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_index=\n  local min_even_value=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=10000\n\
    \    local -i min_even_value_index=-1\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if (( node % 2 == 0 && node < min_even_value )); then\n        \
    \    min_even_value=$node\n            min_even_value_index=$i\n        fi\n \
    \       (( i++ ))\n    done\n    if (( min_even_value_index == -1 )); then\n \
    \       echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local min_even=\n  local min_even_index=\n\
    \  local i=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n\
    \      if [[ -z $min_even ]] || [[ $node -lt $min_even ]]; then\n        min_even=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[\
    \ -z $min_even ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\"\
    , \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a arr\n  IFS=' ' read -r -a arr <<< \"$1\"\n  local\
    \ min_even_value=\n  local min_even_index=\n  for i in \"${!arr[@]}\"; do\n  \
    \  if [[ \"${arr[$i]}\" -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n\
    \      break\n    elif [[ \"${arr[$i]}\" -gt 0 ]] && [[ \"${arr[$i]}\" -lt \"\
    $min_even_value\" ]] && [[ \"${arr[$i]}\"%2 -eq 0 ]]; then\n      min_even_value=\"\
    ${arr[$i]}\"\n      min_even_index=$i\n    fi\n  done\n  if [[ -z \"$min_even_value\"\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"\
    $min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i min_even=0\n\
    \  local -i min_even_index=0\n  local -i min_even_index_index=0\n  local -i len=${#nodes[@]}\n\
    \  if [ $len -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0; i<len;\
    \ i++)); do\n    if [ $((nodes[i] % 2)) -eq 0 ]; then\n      evens[j]=${nodes[i]}\n\
    \      evens_index[j]=$i\n      j=$((j+1))\n    fi\n  done\n  if [ ${#evens[@]}\
    \ -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  min_even=${evens[0]}\n \
    \ min_even_index=${evens_index[0]}\n  min_even_index_index=0\n  for ((i=1; i<${#evens[@]};\
    \ i++)); do\n    if [ ${evens[i]} -lt $min_even ]; then\n      min_even=${evens[i]}\n\
    \      min_even_index=${evens_index[i]}\n      min_even_index_index=$i\n    fi\n\
    \  done\n  result[0]=$min_even\n  result[1]=$min_even_index\n  echo \"[\\\"${result[0]}\\\
    \", \\\"${result[1]}\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_index+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    result=()\n\
    \  else\n    local min_even=${evens[0]}\n    local min_even_index=0\n    for i\
    \ in \"${!evens[@]}\"; do\n      if [[ ${evens[$i]} -lt $min_even ]]; then\n \
    \       min_even=${evens[$i]}\n        min_even_index=$i\n      fi\n    done\n\
    \    result=($min_even ${evens_index[$min_even_index]})\n  fi\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i smallest_even_value=10000000000\n\
    \  local -i smallest_even_index=10000000000\n  local -i i=0\n  for node in \"\
    ${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt\
    \ $smallest_even_value ]]; then\n        smallest_even_value=$node\n        smallest_even_index=$i\n\
    \      fi\n    fi\n    i+=1\n  done\n  if [[ $smallest_even_value -eq 10000000000\
    \ ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i node_value=0\n\
    \  local -i min_even_value=0\n  local -i min_even_index=0\n  local -i found_even=0\n\
    \  for ((i=0; i<len; i++)); do\n    node_value=${nodes[i]}\n    if ((node_value\
    \ % 2 == 0)); then\n      if ((found_even == 0)); then\n        min_even_value=node_value\n\
    \        min_even_index=i\n        found_even=1\n      elif ((node_value < min_even_value));\
    \ then\n        min_even_value=node_value\n        min_even_index=i\n      fi\n\
    \    fi\n  done\n  if ((found_even == 0)); then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_value=\n  local smallest_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ $node -lt $smallest_value\
    \ ]]; then\n        smallest_value=$node\n        smallest_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $smallest_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ < 1000000000 )); then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_value=0\n  local min_index=0\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $node -eq 0 ]]; then\n\
    \      echo \"[\\\"0\\\", \\\"$i\\\"]\"\n      return\n    fi\n    if [[ $node\
    \ -lt $min_value && $node -eq 0 ]]; then\n      min_value=$node\n      min_index=$i\n\
    \    fi\n    i=$((i+1))\n  done\n  if [[ $min_value -eq 0 ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=100000000\n\
    \    local -i min_even_index=-1\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if (( node % 2 == 0 )); then\n            if (( node < min_even_value\
    \ )); then\n                min_even_value=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n        (( i++ ))\n    done\n    if (( min_even_index\
    \ == -1 )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 0
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a odds=()\n\
    \  local -a even_indexes=()\n  local -a odd_indexes=()\n  local -a result=()\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      evens+=($node)\n      even_indexes+=($i)\n    else\n      odds+=($node)\n\
    \      odd_indexes+=($i)\n    fi\n    ((i++))\n  done\n  if [[ ${#evens[@]} -eq\
    \ 0 ]]; then\n    result=()\n  else\n    local min_even=${evens[0]}\n    local\
    \ min_even_index=${even_indexes[0]}\n    for i in \"${!evens[@]}\"; do\n     \
    \ if [[ ${evens[$i]} -lt $min_even ]]; then\n        min_even=${evens[$i]}\n \
    \       min_even_index=${even_indexes[$i]}\n      fi\n    done\n    result=($min_even\
    \ $min_even_index)\n  fi\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i smallest_even_value=10000\n\
    \  local -i smallest_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 )); then\n      if (( node < smallest_even_value\
    \ )); then\n        smallest_even_value=$node\n        smallest_even_index=$i\n\
    \      fi\n    fi\n    (( i++ ))\n  done\n  if (( smallest_even_value == 10000\
    \ )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\"\
    , \\\"$smallest_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    local -a nodes=($1)\n    local -a evens=()\n    local -i i=0\n  \
    \  local -i min_index=0\n    local -i min_value=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [ $((node % 2)) -eq 0 ]; then\n            evens+=($node)\n \
    \       fi\n    done\n    if [ ${#evens[@]} -eq 0 ]; then\n        echo \"[]\"\
    \n        return\n    fi\n    min_value=${evens[0]}\n    for value in \"${evens[@]}\"\
    ; do\n        if [ $value -lt $min_value ]; then\n            min_value=$value\n\
    \        fi\n    done\n    for node in \"${nodes[@]}\"; do\n        if [ $node\
    \ -eq $min_value ]; then\n            echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n            return\n        fi\n        ((i++))\n    done\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i node_value\n  local -i node_index\n\
    \  local -i node_count=${#nodes[@]}\n  local -i found_even=0\n  while (( i < node_count\
    \ )); do\n    node_value=${nodes[$i]}\n    if (( node_value % 2 == 0 )); then\n\
    \      found_even=1\n      if (( node_value < min_even_value )); then\n      \
    \  min_even_value=$node_value\n        min_even_index=$i\n      fi\n    fi\n \
    \   (( i++ ))\n  done\n  if (( found_even )); then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=0\n  \
    \  local -i min_even_index=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n\
    \    local -i node_value=0\n    local -i found_even=0\n    for ((i=0; i<n; i++));\
    \ do\n        node_value=${nodes[i]}\n        if ((node_value % 2 == 0)); then\n\
    \            found_even=1\n            if ((node_value < min_even_value)); then\n\
    \                min_even_value=$node_value\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n    if ((found_even)); then\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    else\n        echo\
    \ \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n\
    \  local -a evens_index_sorted=()\n  local -a result=()\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local n=0\n  local m=0\n  local min=0\n  local min_index=0\n\
    \  local min_index_sorted=0\n  local min_index_sorted_index=0\n  local min_index_sorted_index_index=0\n\
    \  local min_index_sorted_index_index_index=0\n  local min_index_sorted_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index=0\n  local min_index_sorted_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index=0\n  local\
    \ min_index_sorted_index_index_index_index_index_index_index_index=0\n  local\
    \ min_index_sorted_index_index_index_index_index_index_index_index_index=0\n \
    \ local min_index_sorted_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    \  local min_index_sorted_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index=0\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_value_index=$i\n  \
    \    fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i i=0\n    local -i min_even_value=10000000000\n\
    \    local -i min_even_index=0\n    local -i min_even_count=0\n    local -i min_even_first_index=0\n\
    \    local -i min_even_last_index=0\n    local -i min_even_first_index_found=0\n\
    \    local -i min_even_last_index_found=0\n    local -i min_even_first_index_found_count=0\n\
    \    local -i min_even_last_index_found_count=0\n    local -i min_even_first_index_found_count_max=0\n\
    \    local -i min_even_last_index_found_count_max=0\n    local -i min_even_first_index_found_count_max_index=0\n\
    \    local -i min_even_last_index_found_count_max_index=0\n    local -i min_even_first_index_found_count_max_index_value=0\n\
    \    local -i min_even_last_index_found_count_max_index_value=0\n    local -i\
    \ min_even_first_index_found_count_max_index_value_index=0\n    local -i min_even_last_index_found_count_max_index_value_index=0\n\
    \    local -i min_even_first_index_found_count_max_index_value_index_count=0\n\
    \    local -i min_even_last_index_found_count_max_index_value_index_count=0\n\
    \    local -i min_even_first_index_found_count_max_index_value_index_count_max=0\n\
    \    local -i min_even_last_index_found_count_max_index_value_index_count_max=0\n\
    \    local -i min_even_first_index_found_count_max_index_value_index_count_max_index=0\n\
    \    local -i min_even_last_index_found_count_max_index_value_index_count_max\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens\n    local -a odds\n\
    \    local -a even_indexes\n    local -a odd_indexes\n    local -a even_indexes_sorted\n\
    \    local -a odd_indexes_sorted\n    local -a even_indexes_sorted_uniq\n    local\
    \ -a odd_indexes_sorted_uniq\n    local -a even_indexes_sorted_uniq_sorted\n \
    \   local -a odd_indexes_sorted_uniq_sorted\n    local -a even_indexes_sorted_uniq_sorted_uniq\n\
    \    local -a odd_indexes_sorted_uniq_sorted_uniq\n    local -a even_indexes_sorted_uniq_sorted_uniq_sorted\n\
    \    local -a odd_indexes_sorted_uniq_sorted_uniq_sorted\n    local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq\n\
    \    local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq\n    local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \    local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n    local\
    \ -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq\n    local -a\
    \ odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq\n    local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \    local -a odd_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted\n\
    \    local -a even_indexes_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq_sorted_uniq\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_index=0\n  local -i min_value=0\n\
    \  local -i i=0\n  local -i len=${#nodes[@]}\n  local -i min_even_index=0\n  local\
    \ -i min_even_value=0\n  local -i found_even=0\n  while (( i < len )); do\n  \
    \  if (( nodes[i] % 2 == 0 )); then\n      if (( found_even == 0 )); then\n  \
    \      min_even_index=$i\n        min_even_value=${nodes[i]}\n        found_even=1\n\
    \      elif (( nodes[i] < min_even_value )); then\n        min_even_index=$i\n\
    \        min_even_value=${nodes[i]}\n      fi\n    fi\n    if (( nodes[i] < min_value\
    \ )); then\n      min_index=$i\n      min_value=${nodes[i]}\n    fi\n    (( i++\
    \ ))\n  done\n  if (( found_even == 0 )); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min=0\n  local -i min_index=0\n\
    \  local -i i=0\n  local -i n=${#nodes[@]}\n  local -i value=0\n  local -i found=0\n\
    \  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n    if [[ $((value % 2))\
    \ -eq 0 ]]; then\n      if [[ $found -eq 0 ]]; then\n        min=$value\n    \
    \    min_index=$i\n        found=1\n      elif [[ $value -lt $min ]]; then\n \
    \       min=$value\n        min_index=$i\n      fi\n    fi\n  done\n  if [[ $found\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$min_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ []\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_index=${#nodes[@]}\n\
    \  local -i min_even_value=${nodes[0]}\n  for (( i=0; i<${#nodes[@]}; i++ ));\
    \ do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_index=$i\n      min_even_value=0\n\
    \      break\n    elif [[ ${nodes[$i]} -lt $min_even_value && ${nodes[$i]}%2 -eq\
    \ 0 ]]; then\n      min_even_index=$i\n      min_even_value=${nodes[$i]}\n   \
    \ fi\n  done\n  if [[ $min_even_index -eq ${#nodes[@]} ]]; then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min=\n  local min_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n  \
    \    min=0\n      min_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0 ]]\
    \ && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min ]] || [[ ${nodes[$i]}\
    \ -lt $min ]]; then\n        min=${nodes[$i]}\n        min_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"\
    [\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100001\n \
    \ local -i min_even_index=100001\n  local -i index=0\n  local -i value\n  for\
    \ value in \"${nodes[@]}\"; do\n    if (( value % 2 == 0 && value < min_even_value\
    \ )); then\n      min_even_value=$value\n      min_even_index=$index\n    fi\n\
    \    (( index++ ))\n  done\n  if (( min_even_value < 100001 )); then\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"\
    []\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq\
    \ 0 ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]];\
    \ then\n    echo '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  for i in \"${!nodes[@]}\"; do\n    local node=${nodes[$i]}\n    if [[ $node\
    \ -eq 0 ]]; then\n      min_even_value=0\n      min_even_index=$i\n      break\n\
    \    elif [[ $node -gt 0 ]] && [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z\
    \ $min_even_value ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even_value\
    \ ]]; then\n    echo '[]'\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      smallest_even_value=0\n      smallest_even_value_index=$i\n      break\n\
    \    elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n     \
    \ if [[ -z $smallest_even_value ]] || [[ ${nodes[$i]} -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=${nodes[$i]}\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $smallest_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000\n  local\
    \ -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=()\n  local -i i=0\n  local -i min_even_value=0\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  local -i node_value=0\n\
    \  local -i node_count=0\n  local -i node_index=0\n  local -i node_value_is_even=0\n\
    \  local -i node_value_is_min_even=0\n  local -i node_value_is_min_even_and_first=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index=0\n  local -i\
    \ node_value_is_min_even_and_first_and_smallest_index_and_first_even=0\n  local\
    \ -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even_and_first_node=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even_and_first_node_and_first_even_node=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even_and_first_node_and_first_even_node_and_first_min_even_node=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even_and_first_node_and_first_even_node_and_first_min_even_node_and_first_node=0\n\
    \  local -i node_value_is_min_even_and_first_and_smallest_index_and_first_even_and_first_min_even_and\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_value=0\n    local\
    \ -i min_index=0\n    local -i i=0\n    local -i n=${#nodes[@]}\n    local -i\
    \ found=0\n    for ((i=0; i<n; i++)); do\n        if ((nodes[i] % 2 == 0)); then\n\
    \            if ((found == 0)); then\n                min_value=nodes[i]\n   \
    \             min_index=i\n                found=1\n            else\n       \
    \         if ((nodes[i] < min_value)); then\n                    min_value=nodes[i]\n\
    \                    min_index=i\n                fi\n            fi\n       \
    \ fi\n    done\n    if ((found == 0)); then\n        echo \"[]\"\n    else\n \
    \       echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i min_even_index=0\n  local -i min_even_value=0\n\
    \  local -i len=${#nodes[@]}\n  local -i value=0\n  local -i even=0\n  local -i\
    \ found_even=0\n  local -i found_min=0\n  local -i found_min_even=0\n  while ((\
    \ i < len )); do\n    value=${nodes[i]}\n    even=$(( value % 2 ))\n    if ((\
    \ even == 0 )); then\n      found_even=1\n      if (( found_min_even == 0 ));\
    \ then\n        min_even_index=$i\n        min_even_value=$value\n        found_min_even=1\n\
    \      elif (( value < min_even_value )); then\n        min_even_index=$i\n  \
    \      min_even_value=$value\n      fi\n    fi\n    if (( found_min == 0 )); then\n\
    \      min_index=$i\n      min_value=$value\n      found_min=1\n    elif (( value\
    \ < min_value )); then\n      min_index=$i\n      min_value=$value\n    fi\n \
    \   (( i++ ))\n  done\n  if (( found_even == 0 )); then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local min=\n  local min_index=\n \
    \ for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n\
    \      min=0\n      min_index=$i\n      break\n    elif [[ ${nodes[$i]} -gt 0\
    \ ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if [[ -z $min ]] || [[ ${nodes[$i]}\
    \ -lt $min ]]; then\n        min=${nodes[$i]}\n        min_index=$i\n      fi\n\
    \    fi\n  done\n  if [[ -z $min ]]; then\n    echo '[]'\n  else\n    echo \"\
    [\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=-1\n\
    \  local -i min_value=-1\n  local -i len=${#nodes[@]}\n  while ((i < len)); do\n\
    \    if ((nodes[i] % 2 == 0)); then\n      if ((min_value == -1 || nodes[i] <\
    \ min_value)); then\n        min_value=${nodes[i]}\n        min_index=$i\n   \
    \   fi\n    fi\n    ((i++))\n  done\n  if ((min_index == -1)); then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_value_index=\"\"\n  local index=0\n  for node in $nodes; do\n\
    \    if [ $(($node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ $node -lt $smallest_even_value ]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$index\n      fi\n    fi\n    index=$(($index\
    \ + 1))\n  done\n  if [ -z \"$smallest_even_value\" ]; then\n    echo \"[]\"\n\
    \  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ $min_even_value -eq 100000000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    if [ ${#nodes[@]} -eq 0 ]; then\n\
    \        echo \"[]\"\n        return\n    fi\n    local -i min_even_value=1000000000\n\
    \    local -i min_even_index=1000000000\n    local -i i=0\n    for node in \"\
    ${nodes[@]}\"; do\n        if [ $((node % 2)) -eq 0 ] && [ $node -lt $min_even_value\
    \ ]; then\n            min_even_value=$node\n            min_even_index=$i\n \
    \       fi\n        i=$((i + 1))\n    done\n    if [ $min_even_value -eq 1000000000\
    \ ]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i len=${#nodes[@]}\n  local -i value\n\
    \  local -i index\n  local -i found_even=0\n  while (( i < len )); do\n    value=${nodes[i]}\n\
    \    if (( value % 2 == 0 )); then\n      found_even=1\n      if (( value < min_even_value\
    \ )); then\n        min_even_value=$value\n        min_even_index=$i\n      fi\n\
    \    fi\n    (( i++ ))\n  done\n  if (( found_even )); then\n    echo \"[\\\"\
    $min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=-1\n  local -i index=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$index\n    \
    \  fi\n    fi\n    ((index++))\n  done\n  if [[ $min_even_index -eq -1 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  for node in \"${nodes[@]}\"; do\n\
    \    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 1000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min=10000\n  local min_index=10000\n\
    \  for ((i=0; i<${#nodes[@]}; i++)); do\n    if ((${nodes[$i]} < min)) && ((${nodes[$i]}\
    \ % 2 == 0)); then\n      min=${nodes[$i]}\n      min_index=$i\n    fi\n  done\n\
    \  if ((min == 10000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\"\
    , \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i len=${#nodes[@]}\n  local -i is_empty=1\n\
    \  local -i is_even=0\n  local -i is_first=1\n  local -i is_smaller=0\n  local\
    \ -i is_smaller_index=0\n  local -i is_first_even=1\n  local -i is_first_even_index=0\n\
    \  local -i is_first_even_smaller=0\n  local -i is_first_even_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller=0\n  local -i is_first_even_smaller_index_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller=0\n  local -i is_first_even_smaller_index_smaller_index_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index_smaller=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index_smaller_index_smaller=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index_smaller_index_smaller_index=0\n\
    \  local -i is_first_even_smaller_index_smaller_index_smaller_index_smaller_index_smaller_index_smaller\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i len=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<len; i++)); do\n    value=${nodes[$i]}\n\
    \    if ((value % 2 == 0 && value < min_even_value)); then\n      min_even_value=$value\n\
    \      min_even_index=$i\n    fi\n  done\n  if ((min_even_value == 100000000));\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  while\
    \ (( i < n )); do\n    local -i node=${nodes[$i]}\n    if (( node % 2 == 0 &&\
    \ node < min_even_value )); then\n      min_even_value=$node\n      min_even_index=$i\n\
    \    fi\n    (( i++ ))\n  done\n  if (( min_even_value == 1000000000 )); then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local min=\n  local min_index=\n  for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n    local node=${nodes[$i]}\n    if [[ $node\
    \ =~ ^[0-9]+$ ]]; then\n      if [[ $node -eq 0 ]]; then\n        min=0\n    \
    \    min_index=$i\n        break\n      elif [[ $node -gt 0 ]] && [[ $node%2 -eq\
    \ 0 ]]; then\n        if [[ -z $min ]] || [[ $node -lt $min ]]; then\n       \
    \   min=$node\n          min_index=$i\n        fi\n      fi\n    fi\n  done\n\
    \  if [[ -z $min ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\",\
    \ \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local -a\
    \ evens_index=()\n    local -a result=()\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local min=0\n    local min_index=0\n    for i in \"${nodes[@]}\"; do\n\
    \        if [[ $((i % 2)) -eq 0 ]]; then\n            evens[j]=$i\n          \
    \  evens_index[j]=$k\n            ((j++))\n        fi\n        ((k++))\n    done\n\
    \    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    min=${evens[0]}\n    min_index=0\n    for ((i=1; i<${#evens[@]};\
    \ i++)); do\n        if [[ ${evens[i]} -lt $min ]]; then\n            min=${evens[i]}\n\
    \            min_index=$i\n        fi\n    done\n    result[0]=$min\n    result[1]=${evens_index[min_index]}\n\
    \    echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=($1)\n  declare -i min_even_value=100000000\n\
    \  declare -i min_even_index=100000000\n  declare -i index=0\n  for node in \"\
    ${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt\
    \ $min_even_value ]]; then\n        min_even_value=$node\n        min_even_index=$index\n\
    \      fi\n    fi\n    index=$((index + 1))\n  done\n  if [[ $min_even_value -eq\
    \ 100000000 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_index=0\n\
    \  local -i min_value=0\n  local -i node_value=0\n  local -i node_index=0\n  local\
    \ -i min_even_value=0\n  local -i min_even_index=0\n  local -i even_value=0\n\
    \  local -i even_index=0\n  local -i is_even=0\n  local -i is_first_even=0\n \
    \ local -i is_first_node=0\n  local -i is_first_even_node=0\n  local -i is_first_min_even_node=0\n\
    \  local -i is_first_min_node=0\n  local -i is_first_min_even_node=0\n  local\
    \ -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i\
    \ is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n\
    \  local -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local\
    \ -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i\
    \ is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n\
    \  local -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local\
    \ -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i\
    \ is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n  local -i is_first_min_even_node=0\n\
    \  local -i is_first_min_even\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=0\n  local -i min_even_count=0\n  for ((i=0; i<${#nodes[@]};\
    \ i++)); do\n    if [[ ${nodes[$i]} -eq 0 ]]; then\n      min_even_value=0\n \
    \     min_even_index=$i\n      min_even_count=1\n      break\n    elif [[ ${nodes[$i]}\
    \ -lt $min_even_value && ${nodes[$i]} -gt 0 && $(( ${nodes[$i]} % 2 )) -eq 0 ]];\
    \ then\n      min_even_value=${nodes[$i]}\n      min_even_index=$i\n      min_even_count=1\n\
    \    elif [[ ${nodes[$i]} -eq $min_even_value && ${nodes[$i]} -gt 0 && $(( ${nodes[$i]}\
    \ % 2 )) -eq 0 ]]; then\n      min_even_count=$(( min_even_count + 1 ))\n    fi\n\
    \  done\n  if [[ $min_even_count -eq 0 ]]; then\n    echo \"[]\"\n  else\n   \
    \ echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -i min_even_value=10000\n\
    \    local -i min_even_index=10000\n    local -i i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            if [[ $node -lt\
    \ $min_even_value ]]; then\n                min_even_value=$node\n           \
    \     min_even_index=$i\n            fi\n        fi\n        ((i++))\n    done\n\
    \    if [[ $min_even_value -eq 10000 ]]; then\n        echo \"[]\"\n    else\n\
    \        echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local smallest_even_value=\"\"\n  local\
    \ smallest_even_index=\"\"\n  local index=0\n  for node in $nodes; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_even_value ]] || [[\
    \ $node -lt $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n\
    \  done\n  if [[ -z $smallest_even_value ]]; then\n    echo \"[]\"\n  else\n \
    \   echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=100000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0 && value < min_even_value)); then\n      min_even_value=$value\n\
    \      min_even_index=$i\n    fi\n  done\n  if ((min_even_value < 100000000));\
    \ then\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  local -i found=0\n  for ((i=0; i<n; i++));\
    \ do\n    value=${nodes[i]}\n    if ((value % 2 == 0)); then\n      if ((value\
    \ < min_even_value)); then\n        min_even_value=$value\n        min_even_index=$i\n\
    \        found=1\n      elif ((value == min_even_value)); then\n        if ((i\
    \ < min_even_index)); then\n          min_even_index=$i\n        fi\n      fi\n\
    \    fi\n  done\n  if ((found)); then\n    echo \"[\\\"$min_even_value\\\", \\\
    \"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -i min_even_value=10000000000\n\
    \  local -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n  echo \"not implemented\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_indices=()\n\
    \  local -a evens_indices_sorted=()\n  local -a evens_sorted=()\n  local -a evens_sorted_indices=()\n\
    \  local -a evens_sorted_indices_sorted=()\n  local -a evens_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_indices=()\n  local -a evens_sorted_sorted_indices_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_indices=()\n\
    \  local -a evens_sorted_sorted_sorted_indices_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_indices=()\n  local -a evens_sorted_sorted_sorted_sorted_indices_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_indices=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_indices_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indices=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_indices_sorted=()\n\
    \  local -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted=()\n  local\
    \ -a evens_sorted_sorted_sorted_sorted_sorted_sorted_sorted_indices\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes=($1)\n  local -a evens=()\n  local -a evens_indices=()\n\
    \  local -a result=()\n  local i=0\n  for node in \"${nodes[@]}\"; do\n    if\
    \ [[ $((node % 2)) -eq 0 ]]; then\n      evens+=($node)\n      evens_indices+=($i)\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    local min=${evens[0]}\n    local min_index=0\n    i=0\n\
    \    for even in \"${evens[@]}\"; do\n      if [[ $even -lt $min ]]; then\n  \
    \      min=$even\n        min_index=$i\n      fi\n      i=$((i + 1))\n    done\n\
    \    result=($min ${evens_indices[$min_index]})\n    echo \"[\\\"${result[0]}\\\
    \", \\\"${result[1]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    local -a evens=()\n    local -a\
    \ evens_index=()\n    local -a result=()\n    local i=0\n    for node in \"${nodes[@]}\"\
    ; do\n        if [[ $((node % 2)) -eq 0 ]]; then\n            evens+=($node)\n\
    \            evens_index+=($i)\n        fi\n        i=$((i + 1))\n    done\n \
    \   if [[ ${#evens[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n       \
    \ local min_even=${evens[0]}\n        local min_even_index=${evens_index[0]}\n\
    \        for i in \"${!evens[@]}\"; do\n            if [[ ${evens[$i]} -lt $min_even\
    \ ]]; then\n                min_even=${evens[$i]}\n                min_even_index=${evens_index[$i]}\n\
    \            fi\n        done\n        result=($min_even $min_even_index)\n  \
    \      echo \"[\\\"${result[0]}\\\", \\\"${result[1]}\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018194
