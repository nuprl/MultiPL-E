name: HumanEval_6_parse_nested_parens
language: sh
prompt: "#!/bin/bash\n# Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n# For each of the group, output the\
  \ deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((()))\
  \ () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\n\
  parse_nested_parens() {\n"
tests: "}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
  \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
  \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
completions: ["  local parens_str=$1\n  local parens_arr=()\n  local parens_arr_len=0\n\
    \  local parens_arr_idx=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_idx_start=0\n  local parens_str_idx_end=0\n  local parens_str_idx_end_prev=0\n\
    \  local parens_str_idx_end_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
  "    local str=\"$1\"\n    local max_level=0\n    local level=0\n    local output=\"\
    \"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n    \
    \    local char=${str:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n       \
    \     level=$((level+1))\n            if [ $level -gt $max_level ]; then\n   \
    \             max_level=$level\n            fi\n        elif [ \"$char\" == \"\
    )\" ]; then\n            level=$((level-1))\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $max_level", "    local paren_str=\"$1\"\n    local paren_list=($paren_str)\n\
    \    local paren_list_len=${#paren_list[@]}\n    local paren_list_idx=0\n    local\
    \ paren_list_item\n    local paren_list_item_len\n    local paren_list_item_idx\n\
    \    local paren_list_item_char\n    local paren_list_item_stack\n    local paren_list_item_stack_len\n\
    \    local paren_list_item_stack_idx\n    local paren_list_item_stack_char\n \
    \   local paren_list_item_stack_max_len\n    local paren_list_item_stack_max_len_idx\n\
    \    local paren_list_item_stack_max_len_char\n    local paren_list_item_stack_max_len_str\n\
    \    local paren_list_item_stack_max_len_str_len\n    local paren_list_item_stack_max_len_str_idx\n\
    \    local paren_list_item_stack_max_len_str_char\n    local paren_list_item_stack_max_len_str_stack\n\
    \    local paren_list_item_stack_max_len_str_stack_len\n    local paren_list_item_stack_max_len_str_stack_idx\n\
    \    local paren_list_item_stack_max_len_str_stack_char\n    local paren_list_item_stack_max_len_str_stack_max_len\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len_idx\n    local paren_list_item_stack_max_len_str_stack_max_len_char\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len_str\n    local paren_list_item_stack_max_len_str_stack_max_len_str_len\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len_str_idx\n   ", "  local\
    \ input_string=$1\n  local result=()\n  local current_level=0\n  local max_level=0\n\
    \  local current_char\n  local i\n  for ((i=0; i<${#input_string}; i++)); do\n\
    \    current_char=${input_string:$i:1}\n    if [[ \"$current_char\" == \"(\" ]];\
    \ then\n      ((current_level++))\n      if ((current_level > max_level)); then\n\
    \        max_level=$current_level\n      fi\n    elif [[ \"$current_char\" ==\
    \ \")\" ]]; then\n      ((current_level--))\n    fi\n  done\n  result+=($max_level)\n\
    \  echo \"${result[@]}\"", "    local -a paren_stack\n    local -i paren_count=0\n\
    \    local -i max_nesting=0\n    local -i nesting_count=0\n    local -a output\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local\
    \ -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n\
    \    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local\
    \ -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n\
    \    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i dd=0\n\
    \    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i hh=0\n\
    \    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i ll=0\n\
    \    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i pp=0\n\
    \    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i tt=0\n\
    \    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i xx=0\n\
    \    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i bbb=0\n\
    \    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local -i fff=0\n\
    \    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local -i jjj=0\n\
    \    local -i kkk", "    local input=$1\n    local result=()\n    local max_nesting=0\n\
    \    local nesting=0\n    local i=0\n    local len=${#input}\n    local char\n\
    \n    while [ $i -lt $len ]; do\n        char=${input:$i:1}\n        if [ \"$char\"\
    \ == \"(\" ]; then\n            ((nesting++))\n            if [ $nesting -gt $max_nesting\
    \ ]; then\n                max_nesting=$nesting\n            fi\n        elif\
    \ [ \"$char\" == \")\" ]; then\n            ((nesting--))\n        elif [ \"$char\"\
    \ == \" \" ]; then\n            result+=(\"$max_nesting\")\n            max_nesting=0\n\
    \            nesting=0\n        fi\n        ((i++))\n    done\n    result+=(\"\
    $max_nesting\")\n    echo \"${result[@]}\"", "    local parens=$1\n    local max_nesting=0\n\
    \    local current_nesting=0\n    local output=()\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((current_nesting++))\n\
    \            if ((current_nesting > max_nesting)); then\n                max_nesting=$current_nesting\n\
    \            fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n          \
    \  ((current_nesting--))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n \
    \           output+=(\"\\\"$max_nesting\\\"\")\n            max_nesting=0\n  \
    \          current_nesting=0\n        fi\n    done\n    output+=(\"\\\"$max_nesting\\\
    \"\")\n    echo \"${output[@]}\"", "    local parens=$1\n    local paren_groups=($parens)\n\
    \    local paren_group\n    local paren_levels=()\n    local paren_level\n   \
    \ local paren_stack=()\n    local paren_stack_top\n    local paren_stack_top_level\n\
    \    local paren_stack_top_level_max\n    local paren_stack_top_level_max_index\n\
    \    local paren_stack_top_level_max_index_prev\n    local paren_stack_top_level_max_index_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev\n    local paren_stack_top_level_max_index_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev\n    local\
    \ paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev\n    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev",
  "    local input_str=$1\n    local output_str=\"\"\n    local max_depth=0\n    local\
    \ curr_depth=0\n    local i=0\n    local len=${#input_str}\n    for ((i=0; i<len;\
    \ i++)); do\n        if [[ ${input_str:$i:1} == \"(\" ]]; then\n            ((curr_depth++))\n\
    \            if ((curr_depth > max_depth)); then\n                max_depth=$curr_depth\n\
    \            fi\n        elif [[ ${input_str:$i:1} == \")\" ]]; then\n       \
    \     ((curr_depth--))\n        elif [[ ${input_str:$i:1} == \" \" ]]; then\n\
    \            output_str+=\"\\\"$max_depth\\\" \"\n            max_depth=0\n  \
    \          curr_depth=0\n        fi\n    done\n    echo $output_str", "  local\
    \ string=$1\n  local parens_array=($string)\n  local result=()\n  for parens in\
    \ \"${parens_array[@]}\"; do\n    local stack=()\n    local max_depth=0\n    local\
    \ current_depth=0\n    for ((i=0; i<${#parens}; i++)); do\n      local char=${parens:$i:1}\n\
    \      if [[ $char == \"(\" ]]; then\n        stack+=($char)\n        current_depth=$(($current_depth\
    \ + 1))\n        if [[ $current_depth -gt $max_depth ]]; then\n          max_depth=$current_depth\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n          echo \"ERROR: Unbalanced parentheses\"\n         \
    \ exit 1\n        fi\n        stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\")\n\
    \        current_depth=$(($current_depth - 1))\n      else\n        echo \"ERROR:\
    \ Invalid character $char\"\n        exit 1\n      fi\n    done\n    if [[ ${#stack[@]}\
    \ -ne 0 ]]; then\n      echo \"ERROR: Unbalanced parentheses\"\n      exit 1\n\
    \    fi\n    result+=($max_depth)\n  done\n  echo \"${result[@]}\"", "  local\
    \ parens_string=$1\n  local parens_array=($parens_string)\n  local parens_array_len=${#parens_array[@]}\n\
    \  local parens_array_idx=0\n  local parens_array_item\n  local parens_array_item_len\n\
    \  local parens_array_item_idx\n  local parens_array_item_char\n  local parens_array_item_parens_count\n\
    \  local parens_array_item_parens_count_max\n  local parens_array_item_parens_count_max_array=()\n\
    \  while [[ $parens_array_idx -lt $parens_array_len ]]; do\n    parens_array_item=${parens_array[$parens_array_idx]}\n\
    \    parens_array_item_len=${#parens_array_item}\n    parens_array_item_idx=0\n\
    \    parens_array_item_parens_count=0\n    parens_array_item_parens_count_max=0\n\
    \    while [[ $parens_array_item_idx -lt $parens_array_item_len ]]; do\n     \
    \ parens_array_item_char=${parens_array_item:$parens_array_item_idx:1}\n     \
    \ if [[ $parens_array_item_char == \"(\" ]]; then\n        parens_array_item_parens_count=$((parens_array_item_parens_count\
    \ + 1))\n      elif [[ $parens_array_item_char == \")\" ]]; then\n        parens_array_item_parens_count=$((parens_array_item_parens_count\
    \ - 1))\n      fi\n      if [[ $parens_array_item_parens_count -gt $parens_array_item_parens_count_max\
    \ ]]; then\n        parens_array_item_parens_count_max=$parens_array_item_parens_count\n\
    \      fi\n      parens_array", "    local input=$1\n    local output=()\n   \
    \ local max_nesting=0\n    local current_nesting=0\n    local i\n    for ((i=0;\
    \ i<${#input}; i++)); do\n        local char=${input:$i:1}\n        if [[ \"$char\"\
    \ == \"(\" ]]; then\n            ((current_nesting++))\n            if ((current_nesting\
    \ > max_nesting)); then\n                max_nesting=$current_nesting\n      \
    \      fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((current_nesting--))\n\
    \        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            current_nesting=0\n        fi\n    done\n\
    \    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"", "  local parens_str=\"\
    $1\"\n  local parens_arr=($parens_str)\n  local parens_arr_len=${#parens_arr[@]}\n\
    \  local max_nesting_arr=()\n  local max_nesting=0\n  local i=0\n  local j=0\n\
    \  local parens_str_len=0\n  local parens_str_curr=0\n  local parens_str_prev=0\n\
    \  local parens_str_next=0\n  local parens_str_prev_prev=0\n  local parens_str_next_next=0\n\
    \  local parens_str_curr_char=''\n  local parens_str_prev_char=''\n  local parens_str_next_char=''\n\
    \  local parens_str_prev_prev_char=''\n  local parens_str_next_next_char=''\n\
    \  local parens_str_curr_char_is_parens=false\n  local parens_str_prev_char_is_parens=false\n\
    \  local parens_str_next_char_is_parens=false\n  local parens_str_prev_prev_char_is_parens=false\n\
    \  local parens_str_next_next_char_is_parens=false\n  local parens_str_curr_char_is_open_parens=false\n\
    \  local parens_str_prev_char_is_open_parens=false\n  local parens_str_next_char_is_open_parens=false\n\
    \  local parens_str_prev_prev_char_is_open_parens=false\n  local parens_str_next_next_char_is_open_parens=false\n\
    \  local parens_str_curr_char_is_close_parens=false\n  local parens_str_prev_char_is_close_parens=false\n\
    \  local parens_str_next_char_is_close_parens=false\n  local parens_", "    local\
    \ str=$1\n    local max_depth=0\n    local cur_depth=0\n    local result=\"\"\n\
    \    local i=0\n    local len=${#str}\n    local c=\"\"\n    local start_paren=\"\
    (\"\n    local end_paren=\")\"\n    local start_paren_char_code=$(printf \"%d\"\
    \ \"'$start_paren\")\n    local end_paren_char_code=$(printf \"%d\" \"'$end_paren\"\
    )\n    local space_char_code=$(printf \"%d\" \"' '\")\n    local char_code=0\n\
    \    local is_paren=0\n    local is_space=0\n    local is_start_paren=0\n    local\
    \ is_end_paren=0\n    local is_start_paren_or_space=0\n    local is_end_paren_or_space=0\n\
    \    local is_end_paren_or_start_paren=0\n    local is_start_paren_or_end_paren=0\n\
    \    local is_start_paren_or_end_paren_or_space=0\n    local is_end_paren_or_start_paren_or_space=0\n\
    \    local is_start_paren_or_end_paren_or_start_paren=0\n    local is_end_paren_or_start_paren_or_end_paren=0\n\
    \    local is_start_paren_or_end_paren_or_start_paren_or_space=0\n    local is_end_paren_or_start_paren_or_end_paren_or_space=0\n\
    \    local is_start_paren_or_end_paren_or_end_paren=0\n    local is_end_paren_or_start_paren_or_start_paren=0\n\
    \    local is_start_paren_or_end_paren_or_end_paren_or_space=0\n    local is_end_paren_or_start_paren_or_start_paren_or_space=0\n\
    \    local is_start_paren_or_end_paren_or_end_paren_or_start_paren=0\n    local\
    \ is_end_paren_or_start_paren_or_start_paren_or_end", "  local paren_stack=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local output=()\n  local paren_group\n\
    \  for paren_group in $1; do\n    max_depth=0\n    current_depth=0\n    for ((\
    \ i=0; i<${#paren_group}; i++ )); do\n      if [[ ${paren_group:$i:1} == \"(\"\
    \ ]]; then\n        paren_stack+=(1)\n        current_depth=$(($current_depth\
    \ + 1))\n        if [[ $current_depth -gt $max_depth ]]; then\n          max_depth=$current_depth\n\
    \        fi\n      elif [[ ${paren_group:$i:1} == \")\" ]]; then\n        paren_stack+=(-1)\n\
    \        current_depth=$(($current_depth - 1))\n      fi\n    done\n    output+=($max_depth)\n\
    \  done\n  echo ${output[@]}", "  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  local max_nested_parens=0\n  local parens_count=0\n  local parens_str_len=0\n\
    \  local parens_str_char=''\n  local parens_str_char_ascii=0\n  local parens_str_char_ascii_open=40\n\
    \  local parens_str_char_ascii_close=41\n  local parens_str_char_ascii_space=32\n\
    \  local i=0\n  local j=0\n\n  for ((i=0; i<parens_arr_len; i++)); do\n    parens_str=${parens_arr[$i]}\n\
    \    parens_str_len=${#parens_str}\n    parens_count=0\n    max_nested_parens=0\n\
    \n    for ((j=0; j<parens_str_len; j++)); do\n      parens_str_char=${parens_str:$j:1}\n\
    \      parens_str_char_ascii=$(printf \"%d\" \"'$parens_str_char\")\n\n      if\
    \ [ $parens_str_char_ascii -eq $parens_str_char_ascii_open ]; then\n        parens_count=$((parens_count+1))\n\
    \      elif [ $parens_str_char_ascii -eq $parens_str_char_ascii_close ]; then\n\
    \        parens_count=$((parens_count-1))\n      elif [ $parens_str_char_ascii\
    \ -eq $parens_str_char_ascii_space ]; then\n        continue\n      else\n   \
    \     echo \"Invalid character found in input string.\"\n        exit 1\n    \
    \  fi\n\n      if [ $parens_count -gt $max_nested_parens ]; then\n        max_n",
  "    local input=$1\n    local output=()\n    local max_nesting=0\n    local nesting=0\n\
    \    local char\n    for (( i=0; i<${#input}; i++ )); do\n        char=${input:$i:1}\n\
    \        if [[ \"$char\" == \"(\" ]]; then\n            (( nesting++ ))\n    \
    \        if (( nesting > max_nesting )); then\n                max_nesting=$nesting\n\
    \            fi\n        elif [[ \"$char\" == \")\" ]]; then\n            (( nesting--\
    \ ))\n        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            nesting=0\n        fi\n    done\n  \
    \  output+=(\"$max_nesting\")\n    echo \"${output[@]}\"", "  local input=$1\n\
    \  local result=()\n  local max_depth=0\n  local depth=0\n  local i=0\n  local\
    \ len=${#input}\n  local curr_paren=''\n  local curr_char=''\n  local curr_group=''\n\
    \  local curr_group_len=0\n  local curr_group_depth=0\n  local curr_group_max_depth=0\n\
    \  local curr_group_max_depth_index=0\n  local curr_group_max_depth_paren=''\n\
    \  local curr_group_max_depth_paren_index=0\n  local curr_group_max_depth_paren_len=0\n\
    \  local curr_group_max_depth_paren_depth=0\n  local curr_group_max_depth_paren_max_depth=0\n\
    \  local curr_group_max_depth_paren_max_depth_index=0\n  local curr_group_max_depth_paren_max_depth_paren=''\n\
    \  local curr_group_max_depth_paren_max_depth_paren_index=0\n  local curr_group_max_depth_paren_max_depth_paren_len=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_depth=0\n  local curr_group_max_depth_paren_max_depth_paren_max_depth=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_max_depth_index=0\n  local\
    \ curr_group_max_depth_paren_max_depth_paren_max_depth_paren=''\n  local curr_group_max_depth_paren_max_depth_paren_max_depth_paren_index=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_max_depth_paren_len=0\n  local\
    \ curr_group_max_depth_paren_max_depth_paren_max_depth_paren_depth=0\n  local\
    \ curr_group_max_depth_paren_max_depth_paren_max_depth_paren_max_depth=0\n", " \
    \   local input=$1\n    local output=()\n    local max_nesting=0\n    local current_nesting=0\n\
    \    local i=0\n    local c\n    local len=${#input}\n    while [ $i -lt $len\
    \ ]; do\n        c=${input:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n     \
    \       current_nesting=$((current_nesting + 1))\n            if [ $current_nesting\
    \ -gt $max_nesting ]; then\n                max_nesting=$current_nesting\n   \
    \         fi\n        elif [ \"$c\" == \")\" ]; then\n            current_nesting=$((current_nesting\
    \ - 1))\n        fi\n        i=$((i + 1))\n    done\n    echo $max_nesting", " \
    \ local parens_str=$1\n  local parens_arr=()\n  local parens_arr_idx=0\n  local\
    \ parens_str_len=${#parens_str}\n  local parens_str_idx=0\n  local parens_str_char=''\n\
    \  local parens_str_char_prev=''\n  local parens_str_char_next=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_next_next_next=''\n  local parens_str_char_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char"]
stop_tokens:
- "\n}"
