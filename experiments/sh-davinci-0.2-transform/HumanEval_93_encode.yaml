name: HumanEval_93_encode
language: sh
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n\
  # >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\n\
  encode() {\n"
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
completions: ["    local result=\"\"\n    local char=\"\"\n    local char_code=\"\"\
    \n    local char_code_new=\"\"\n    local char_new=\"\"\n    local vowels=\"aeiou\"\
    \n    local vowels_new=\"cfilor\"\n    local i=0\n    local j=0\n    local len=${#1}\n\
    \    for ((i=0; i<len; i++)); do\n        char=${1:$i:1}\n        char_code=$(printf\
    \ \"%d\" \"'$char\")\n        if [[ \"${vowels}\" =~ \"${char}\" ]]; then\n  \
    \          j=$(expr index \"$vowels\" \"$char\")\n            char_new=${vowels_new:$j:1}\n\
    \        elif [[ \"${vowels^^}\" =~ \"${char}\" ]]; then\n            j=$(expr\
    \ index \"$vowels^^\" \"$char\")\n            char_new=${vowels_new^^:$j:1}\n\
    \        else\n            char_new=$char\n        fi\n        result=\"$result$char_new\"\
    \n    done\n    echo \"$result\"", "    echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKO' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cgkos'",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRVX' | tr '[:upper:]' '[:lower:]'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    # TODO: Write your code here\n    echo \"TODO\"", "    #\
    \ TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEIOU' 'CGFKP'", "    local str=\"$1\"\n    local new_str=\"\"\n    local i=0\n\
    \    local len=${#str}\n    local char=\"\"\n    local char_code=0\n    local\
    \ new_char_code=0\n    local new_char=\"\"\n    local vowels=\"aeiouAEIOU\"\n\
    \    local vowel_index=0\n    local vowel_len=${#vowels}\n    local vowel=\"\"\
    \n    local vowel_code=0\n    local new_vowel_code=0\n    local new_vowel=\"\"\
    \n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        char_code=$(printf\
    \ \"%d\" \"'$char\")\n        if [[ \"$vowels\" =~ \"$char\" ]]; then\n      \
    \      vowel_index=0\n            while [ $vowel_index -lt $vowel_len ]; do\n\
    \                vowel=\"${vowels:$vowel_index:1}\"\n                vowel_code=$(printf\
    \ \"%d\" \"'$vowel\")\n                if [ $vowel_code -eq $char_code ]; then\n\
    \                    new_vowel_code=$((vowel_code + 2))\n                    new_vowel=$(printf\
    \ \"\\x$(printf %x $new_vowel_code)\")\n                    new_str=\"$new_str$new_vowel\"\
    \n                    break\n                fi\n                vowel_index=$((vowel_index\
    \ + 1))\n            done\n        else\n            if [ $char_code -gt 64 ]\
    \ && [ $char_code -lt 91 ]; then\n                new_char_code=$((char_code +\
    \ 32))\n            elif [ $char_code -gt 96 ] && [ $char_code -lt 123 ]; then\n\
    \                new_char_code=$((char_code - 32))\n            else\n       \
    \         new_char_code=$char_code\n            fi\n            new_char=$(printf\
    \ \"\\x$(printf %x $new_char_code)\")\n            new_str=\"$new_str$new_char\"\
    \n        fi\n        i=$((i + 1))\n    done\n    echo \"$new_str\"", "    echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo \"$1\"\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CFKPV'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEGIOU' 'CFLRVX'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEIOU' 'CGFKP'", "    local str=$1\n    local newstr=\"\"\n    local chr=\"\
    \"\n    local i=0\n    local len=${#str}\n    local vowels=\"aeiou\"\n    local\
    \ newchr=\"\"\n    local newvowel=\"\"\n    local newvowelindex=0\n    local newvowelindex2=0\n\
    \    local newvowelindex3=0\n    local newvowelindex4=0\n    local newvowelindex5=0\n\
    \    local newvowelindex6=0\n    local newvowelindex7=0\n    local newvowelindex8=0\n\
    \    local newvowelindex9=0\n    local newvowelindex10=0\n    local newvowelindex11=0\n\
    \    local newvowelindex12=0\n    local newvowelindex13=0\n    local newvowelindex14=0\n\
    \    local newvowelindex15=0\n    local newvowelindex16=0\n    local newvowelindex17=0\n\
    \    local newvowelindex18=0\n    local newvowelindex19=0\n    local newvowelindex20=0\n\
    \    local newvowelindex21=0\n    local newvowelindex22=0\n    local newvowelindex23=0\n\
    \    local newvowelindex24=0\n    local newvowelindex25=0\n    local newvowelindex26=0\n\
    \    local newvowelindex27=0\n    local newvowelindex28=0\n    local newvowelindex29=0\n\
    \    local newvowelindex30=0\n    local newvowelindex31=0\n    local newvowelindex32=0\n\
    \    local newvowelindex33=0\n    local newvowelindex34=0\n    local newvowelindex35=0\n\
    \    local newvowelindex36=0\n    local newvowelindex37=0\n    local newvowelindex38=0\n\
    \    local newvowelindex39=0\n    local newvowelindex40=0\n    local newvowelindex41=0\n\
    \    local new", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo \"$1\" | tr 'a-zA-Z' 'b-zaB-ZA' | tr 'aeiou' 'cgjkr'", "    echo $1 |\
    \ tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKOV' | tr '[:upper:]' '[:lower:]'",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'\
    \ | tr '[:upper:]' '[:lower:]'", "    # TODO: write this function\n    # Hint:\
    \ use the tr command\n    echo \"$1\" | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'",
  "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFJKPV' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    # TODO: Write your code here\n    echo $1 | tr '[a-z]' '[c-za-b]'\
    \ | tr '[aeiou]' '[eoiu]'", "    # TODO: Implement this function\n    echo \"\
    Not implemented\"", "    # TODO: write this function\n    echo \"TODO\"", "  \
    \  # TODO: write your code here\n    echo \"TODO\"", "    # TODO: write your code\
    \ here\n    echo \"TODO\"", "    # TODO: Your code here\n    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEGIOU' 'CFLRVX'", "    # TODO: Implement this function\n\
    \    # Hint: You can use the tr command to swap case\n    # Hint: You can use\
    \ the tr command to replace characters\n    # Hint: You can use the awk command\
    \ to find the index of a character in a string\n    # Hint: You can use the expr\
    \ command to perform arithmetic\n    # Hint: You can use the modulus operator\
    \ to wrap around the alphabet\n    # Hint: You can use the length function to\
    \ find the length of a string\n    # Hint: You can use the substr function to\
    \ extract substrings\n    # Hint: You can use the ord function to find the ASCII\
    \ value of a character\n    # Hint: You can use the chr function to find the character\
    \ of an ASCII value\n    # Hint: You can use the split function to split a string\
    \ into an array\n    # Hint: You can use the join function to join an array into\
    \ a string\n    # Hint: You can use the tolower function to convert a string to\
    \ lowercase\n    # Hint: You can use the toupper function to convert a string\
    \ to uppercase\n    # Hint: You can use the gsub function to replace all occurrences\
    \ of a pattern in a string\n    # Hint: You can use the match function to find\
    \ the index of the first occurrence of a pattern in a string\n    # Hint: You\
    \ can use the substr function to extract a substring from a string\n    # Hint:\
    \ You can use the index function to find the index of the first occurrence of\
    \ a character in a string\n    # Hint: You can use the gensub function to replace\
    \ all occurrences of a pattern in a string\n    # Hint: You can use the gsub function\
    \ to replace all occurrences of a pattern in a string\n    # Hint: You can use\
    \ the gsub function to replace all occurrences of a pattern in a string\n    #\
    \ Hint: You can use the gsub function to replace all occurrences of a pattern\
    \ in a string\n    # Hint: You can use the gsub function to replace all occurrences\
    \ of a pattern in a string\n    # Hint: You can use the gsub function to replace\
    \ all occurrences of a pattern in a string\n    # Hint: You can use the gsub function\
    \ to replace all occurrences of a pattern in a string\n    # Hint", "    echo\
    \ $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGKOS'", "    local encoded=\"\
    \"\n    for (( i=0; i<${#1}; i++ )); do\n        local char=${1:$i:1}\n      \
    \  if [[ \"$char\" =~ [a-z] ]]; then\n            char=$(echo \"$char\" | tr '[a-z]'\
    \ '[A-Z]')\n        elif [[ \"$char\" =~ [A-Z] ]]; then\n            char=$(echo\
    \ \"$char\" | tr '[A-Z]' '[a-z]')\n        fi\n        if [[ \"$char\" =~ [aeiou]\
    \ ]]; then\n            char=$(echo \"$char\" | tr 'aeiou' 'EIOUA')\n        elif\
    \ [[ \"$char\" =~ [AEIOU] ]]; then\n            char=$(echo \"$char\" | tr 'AEIOU'\
    \ 'EIOUA')\n        fi\n        encoded+=\"$char\"\n    done\n    echo \"$encoded\"",
  "  echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cgjkr'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKOV' | tr '[:upper:]' '[:lower:]'",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[A,E,I,O,U]' '[C,G,K,S,Y]'", " \
    \   # TODO: write your code here\n    echo \"$1\"", "    local message=$1\n  \
    \  local encoded=\"\"\n    local char=\"\"\n    local char_ascii=\"\"\n    local\
    \ char_encoded=\"\"\n    local char_encoded_ascii=\"\"\n    local char_encoded_ascii_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod=\"\"\n    local char_encoded_ascii_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod=\"\"\n    local char_encoded_ascii_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod=\"\"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod=\"\"\n    local\
    \ char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local char_encoded_ascii_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod_mod=\"\
    \"\n    local", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CFKPV'\
    \ | tr '[:upper:]' '[:lower:]'", "    # TODO: Write your code here\n    echo $1\
    \ | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiouAEIOU' 'cgkosCGKOS'", "  # TODO: Implement\
    \ this function\n  echo \"TODO\"", "    echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ tr 'AEGIOU' 'CFLRTX' | tr '[:upper:]' '[:lower:]'", '    # TODO', '    # Your
    code here', "    # TODO: Write your code here\n    echo \"TODO\"", "    echo $1\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    # TODO:\
    \ your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    # TODO: Your code here\n    echo \"TODO\"", "    # TODO: Write me\n    echo\
    \ \"Not yet implemented\"", "  # TODO: Write me\n  echo \"Not yet implemented\"",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'\
    \ | tr '[:upper:]' '[:lower:]'", "    # TODO: Implement this function\n    echo\
    \ $1 | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiouAEIOU' 'cgjkCGNK'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRVX'", "  echo \"$1\" | tr\
    \ '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKOV' | tr '[:upper:]' '[:lower:]'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "  # TODO:\
    \ Write me\n  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CFKPS' |\
    \ tr '[:upper:]' '[:lower:]'", "    # TODO: write your code here\n    echo \"\
    Not implemented\"", "    # Your code here\n    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "    # TODO: write your code here\n    echo \"TODO\"", "\techo $1\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEGIOU' 'CFLRVX'", "    echo \"$1\" | tr '[a-z]' '[c-za-b]'\
    \ | tr '[aeiou]' '[eoiu]' | tr '[AEIOU]' '[EOIU]'", '    # TODO: Your code here',
  "    # TODO: write your code here\n    echo \"TODO\"", "\t#echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]'\n\t#echo \"$1\" | tr '[:upper:]' '[:lower:]'\n\t#echo \"$1\" | tr\
    \ '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\t#echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\t#echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\t#echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n\t#echo \"$1\" | tr '[:lower:]' '[:upper:]' |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\n\t#echo \"$1\" |\
    \ tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n\t#echo \"$1\" | tr '[:lower:]' '[:upper:]' |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\
    \ | tr '[:upper:]' '[:lower:]'\n\t#echo \"$", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    # TODO: write code\
    \ here\n    # Hint: use tr and sed\n    # Hint: use the function is_vowel\n  \
    \  # Hint: use the function next_letter\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter\
    \ again\n    # Hint: use the function next_letter again\n    # Hint: use the function\
    \ next_letter again\n    # Hint: use the function next_letter again\n    # Hint:\
    \ use the function next_letter again\n    # Hint: use the function next_letter",
  "    # TODO: Implement\n    echo \"Not implemented\"", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEGIOU' 'CFJKPV' | tr '[:upper:]' '[:lower:]'", "    # TODO:\
    \ write your code here\n    echo \"TODO\"", "    # TODO: Write a function that\
    \ takes a message, and encodes in such a \n    # way that it swaps case of all\
    \ letters, replaces all vowels in \n    # the message with the letter that appears\
    \ 2 places ahead of that \n    # vowel in the english alphabet. \n    # Assume\
    \ only letters. \n    # Examples:\n    # >>> $(encode \"test\")\n    # \"TGST\"\
    \n    # >>> $(encode \"This is a message\")\n    # \"tHKS KS C MGSSCGG\"\n   \
    \ #\n    # $1 is a string\n    echo \"TODO\"", "  echo \"$1\" | tr '[a-z]' '[c-za-b]'\
    \ | tr '[aeiou]' '[eoiu]' | tr '[AEIOU]' '[EOIU]'", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    local message=$1\n\
    \    local encoded=\"\"\n    local char=\"\"\n    local i=0\n    local char_code=0\n\
    \    local vowels=\"aeiou\"\n    local vowel_index=0\n    local vowel_code=0\n\
    \    local vowel_char=\"\"\n    local vowel_char_code=0\n    local vowel_char_code_next=0\n\
    \    local vowel_char_code_next_next=0\n    local vowel_char_next=\"\"\n    local\
    \ vowel_char_next_next=\"\"\n    local vowel_char_next_next_code=0\n    local\
    \ vowel_char_next_next_char=\"\"\n    local vowel_char_next_next_char_code=0\n\
    \    local vowel_char_next_next_char_code_next=0\n    local vowel_char_next_next_char_code_next_next=0\n\
    \    local vowel_char_next_next_char_next=\"\"\n    local vowel_char_next_next_char_next_next=\"\
    \"\n    local vowel_char_next_next_char_next_next_code=0\n    local vowel_char_next_next_char_next_next_char=\"\
    \"\n    local vowel_char_next_next_char_next_next_char_code=0\n    local vowel_char_next_next_char_next_next_char_code_next=0\n\
    \    local vowel_char_next_next_char_next_next_char_code_next_next=0\n    local\
    \ vowel_char_next_next_char_next_next_char_next=\"\"\n    local vowel_char_next_next_char_next_next_char_next_next=\"\
    \"\n    local vowel_char_next_next_char_next_next_char_next_next_code=0\n    local\
    \ vowel_char_next_next_char_next_next_char_next_next_char=\"\"\n    local vowel_char_next_next_char_next_next_char_next_next_char_code=0\n\
    \    local vowel_char_next_next_char_next_next_char_next_next_char_code_next=0\n\
    \    local vowel_char_next_next_char_next_next", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # TODO: implement\
    \ this function\n    # Hint: use the tr command\n    echo $1 | tr '[a-z]' '[c-za-b]'\
    \ | tr '[aeiou]' '[eoiu]'", "    # TODO: Implement this function\n    echo \"\
    Not implemented\"", "  echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOSZ' 'CFLORUY'\
    \ | tr '[:upper:]' '[:lower:]'", "    # TODO: your code here\n    echo \"$1\"\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # Your code here\n\
    \    echo \"$1\" | tr '[a-z]' '[c-za-b]' | tr '[aeiou]' '[eoiu]'", "    # TODO:\
    \ Write your code here\n    echo \"TODO\"", "    # TODO: implement this function\n\
    \    echo \"TODO\"", "    # TODO: Write your code here\n    echo \"TODO\"", " \
    \   echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # Your code\
    \ here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    # TODO: Implement this function\n    echo \"TODO\"", "  \
    \  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKOV' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'\
    \ | tr '[:upper:]' '[:lower:]'", "    # TODO: Implement this function\n    echo\
    \ \"TODO\"", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' |\
    \ tr '[:upper:]' '[:lower:]'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEGIOU' 'CFLORT' | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "  echo $1 |\
    \ tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGKPV' | tr '[:upper:]' '[:lower:]'",
  "    # TODO: Write your code here\n    echo \"TODO\"", "    # TODO: Write your code\
    \ here\n    echo \"TODO\"", "    # TODO: write this function\n    echo \"TODO\"",
  "    # TODO: Write your code here\n    echo \"TODO\"", "    echo $1 | tr 'a-zA-Z'\
    \ 'c-za-bC-ZA-B' | tr 'aeiou' 'cgkos'", '    # Your code here', "    local result=\"\
    \"\n    local char=\"\"\n    local char_code=\"\"\n    local char_code_new=\"\"\
    \n    local char_new=\"\"\n    local vowels=\"aeiou\"\n    local vowels_new=\"\
    cgjkm\"\n    local vowels_new_index=0\n    local vowels_index=0\n    local char_index=0\n\
    \    local char_new_index=0\n    local char_code_new_index=0\n    local char_code_index=0\n\
    \    local char_code_new_index=0\n    local char_new_index=0\n    local char_new_code=0\n\
    \    local char_new_code_index=0\n    local char_new_code_new_index=0\n    local\
    \ char_new_code_new=0\n    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n\
    \    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n  \
    \  local char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local\
    \ char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n\
    \    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n  \
    \  local char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local\
    \ char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n\
    \    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n  \
    \  local char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local\
    \ char_new_code_new_index=0\n    local char_new_code_new_index=0\n    local char_new_code_new_index=0\n\
    \    local char", "    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cgkos'",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGKOS'", "  echo \"$1\"\
    \ | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cegik'", "    echo \"$1\" | tr '[a-z]'\
    \ '[c-za-b]' | tr '[aeiou]' '[eoiu]'", "    # TODO: write your code here\n   \
    \ echo \"TODO\"", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'\
    \ | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'EGIKO'", "    # TODO: Implement this function\n    echo \"TODO\"",
  "    local -a vowels=(a e i o u)\n    local -a letters=(a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z)\n    local -a new_letters=(c d e f g h i j k l\
    \ m n o p q r s t u v w x y z a b)\n    local -a new_vowels=(c d e f g h i j k\
    \ l m n o p q r s t u v w x y z a b)\n    local -a new_letters_upper=(C D E F\
    \ G H I J K L M N O P Q R S T U V W X Y Z A B)\n    local -a new_vowels_upper=(C\
    \ D E F G H I J K L M N O P Q R S T U V W X Y Z A B)\n    local -a message=($1)\n\
    \    local -a new_message\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i A=0\n    local -i B=0\n    local -i C=0\n\
    \    local -i D=0\n    local -i E=0\n    local -i F=0\n    local -i G=0\n    local\
    \ -i H=0\n    local -i I=0\n    local -i J=0\n    local -i K=0\n    local -i L=0\n\
    \    local -i M=0\n    local -i N=0\n    local -i O=0\n    local -i P=0\n    local\
    \ -i Q=0\n    local -i R=0\n    local -i S", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEGIOU' 'CFLRTX'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "  echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRTX' | tr '[:upper:]' '[:lower:]'",
  "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRTX'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIUC' | tr '[:upper:]' '[:lower:]'",
  "    local message=$1\n    local encoded=\"\"\n    local char=\"\"\n    local ascii=\"\
    \"\n    local new_ascii=\"\"\n    local new_char=\"\"\n    local vowels=\"aeiouAEIOU\"\
    \n    local vowels_encoded=\"cgkosCgKoS\"\n    local i=0\n    local j=0\n    for\
    \ (( i=0; i<${#message}; i++ )); do\n        char=${message:$i:1}\n        ascii=$(printf\
    \ \"%d\" \"'$char\")\n        if [[ \"${vowels/$char}\" != \"$vowels\" ]]; then\n\
    \            for (( j=0; j<${#vowels}; j++ )); do\n                if [[ \"${vowels:$j:1}\"\
    \ == \"$char\" ]]; then\n                    new_char=${vowels_encoded:$j:1}\n\
    \                    break\n                fi\n            done\n        else\n\
    \            if [[ \"$char\" == [a-z] ]]; then\n                new_ascii=$((\
    \ ascii - 32 ))\n            elif [[ \"$char\" == [A-Z] ]]; then\n           \
    \     new_ascii=$(( ascii + 32 ))\n            else\n                new_ascii=$ascii\n\
    \            fi\n            new_char=$(printf \\\\$(printf '%03o' $new_ascii))\n\
    \        fi\n        encoded=\"$encoded$new_char\"\n    done\n    echo \"$encoded\"",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    # TODO: Write this function\n    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # TODO\n    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEGIOU' 'CFLRTX'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'EGIKOV' | tr '[:upper:]' '[:lower:]'", "    local message=$1\n\
    \    local encoded=\"\"\n    local char=\"\"\n    local lower=\"\"\n    local\
    \ upper=\"\"\n    local vowel=\"\"\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local a=0\n    local e=0\n    local i=0\n    local o=0\n    local u=0\n    local\
    \ A=0\n    local E=0\n    local I=0\n    local O=0\n    local U=0\n    local len=0\n\
    \    local index=0\n    local char_code=0\n    local new_char_code=0\n    local\
    \ new_char=\"\"\n    local new_char_lower=\"\"\n    local new_char_upper=\"\"\n\
    \    local new_char_vowel=\"\"\n    local new_char_vowel_lower=\"\"\n    local\
    \ new_char_vowel_upper=\"\"\n    local new_char_vowel_index=0\n    local new_char_vowel_index_lower=0\n\
    \    local new_char_vowel_index_upper=0\n    local new_char_vowel_code=0\n   \
    \ local new_char_vowel_code_lower=0\n    local new_char_vowel_code_upper=0\n \
    \   local new_char_vowel_lower=\"\"\n    local new_char_vowel_upper=\"\"\n   \
    \ local new_char_vowel_lower_code=0\n    local new_char_vowel_upper_code=0\n \
    \   local new_char_vowel_lower_index=0\n    local new_char_vowel_upper_index=0\n\
    \    local new_char_vowel_lower_index_lower=0\n    local new_char_vowel_upper_index_lower=0\n\
    \    local", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    local -a vowels=(a e i o u)\n    local -a alphabet=(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z)\n    local -a message=()\n  \
    \  local -a encoded=()\n    local -a encoded_message=()\n    local -a encoded_vowels=()\n\
    \    local -a encoded_vowels_message=()\n    local -a encoded_vowels_message_upper=()\n\
    \    local -a encoded_vowels_message_lower=()\n    local -a encoded_vowels_message_upper_lower=()\n\
    \    local -a encoded_vowels_message_upper_lower_message=()\n    local -a encoded_vowels_message_upper_lower_message_join=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string=()\n    local\
    \ -a encoded_vowels_message_upper_lower_message_join_string_encoded=()\n    local\
    \ -a encoded_vowels_message_upper_lower_message_join_string_encoded_join=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string_encoded=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string_encoded_join=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string_encoded_join_string=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string_encoded_join_string_encoded=()\n\
    \    local -a encoded_vowels_message_upper_lower_message_join_string_encoded_join_string_encoded_join_string_encoded_join=()\n\
    \    local -a encoded_vowels_message_upper_lower_", "    # TODO: implement this\
    \ function\n    echo \"Not implemented\"", "    # TODO: Implement this function\n\
    \    echo \"TODO\"", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  '    # Write your code here', "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
    \ 'CFLRVY' | tr '[:upper:]' '[:lower:]'", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    # TODO: Implement this\
    \ function\n    echo \"TODO\"", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo $1\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'",
  "    echo $1 | tr '[a-z]' '[n-za-m]' | tr '[aeiou]' '[cdfghjkl]'", "    # TODO:\
    \ Write your code here\n    echo \"$1\" | tr '[a-z]' '[c-za-b]' | tr '[aeiou]'\
    \ '[eoiu]'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "  # TODO: implement this function\n  echo \"TODO: implement this function\"", " \
    \   echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr\
    \ 'aeiou' 'cdfghj'", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIOA'", "    echo \"\
    $1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cegik'", "    # TODO: implement\
    \ this function\n    echo \"TODO\"", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "    # TODO: Write your code here\n    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEGIOU' 'CFLRVX' | tr '[:upper:]' '[:lower:]'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # TODO: your code here\n    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    # TODO: Implement this function\n  \
    \  echo \"Not implemented\"", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' |\
    \ tr 'AEIOU' 'EGIUC'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[A,E,I,O,U]'\
    \ '[C,G,K,O,S]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    # your code here\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'\
    \ | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEGIOU' 'CFLRTX' | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr\
    \ 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cgkos'", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGKOS' | tr '[:upper:]' '[:lower:]'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CFKPV' | tr '[:upper:]' '[:lower:]'",
  "  # TODO: Implement this function\n  echo $1 | tr '[a-z]' '[c-za-b]' | tr '[aeiou]'\
    \ '[eoiu]'", "  echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cdfghj'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRTX'", "    echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'A-Z' 'C-ZA-B' | tr 'AEIOU' 'EIOUA'",
  "    # TODO: Write your code here\n    echo \"TODO\"", "    # TODO: Write your code\
    \ here\n    echo \"TODO\"", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU'\
    \ 'CFLRVY' | tr '[:upper:]' '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEGIOU' 'CFLRTX'", "    echo \"$1\" | tr '[a-z]' '[c-za-b]'\
    \ | tr '[aeiou]' '[eoiu]'", "    # TODO: Implement this function\n    echo \"\
    Not implemented\"", "    local str=$1\n    local newstr=\"\"\n    local i=0\n\
    \    local c=\"\"\n    local lc=\"\"\n    local uc=\"\"\n    local vowels=\"aeiou\"\
    \n    local v=\"\"\n    local v2=\"\"\n    local v3=\"\"\n    local v4=\"\"\n\
    \    local v5=\"\"\n    local v6=\"\"\n    local v7=\"\"\n    local v8=\"\"\n\
    \    local v9=\"\"\n    local v10=\"\"\n    local v11=\"\"\n    local v12=\"\"\
    \n    local v13=\"\"\n    local v14=\"\"\n    local v15=\"\"\n    local v16=\"\
    \"\n    local v17=\"\"\n    local v18=\"\"\n    local v19=\"\"\n    local v20=\"\
    \"\n    local v21=\"\"\n    local v22=\"\"\n    local v23=\"\"\n    local v24=\"\
    \"\n    local v25=\"\"\n    local v26=\"\"\n    local v27=\"\"\n    local v28=\"\
    \"\n    local v29=\"\"\n    local v30=\"\"\n    local v31=\"\"\n    local v32=\"\
    \"\n    local v33=\"\"\n    local v34=\"\"\n    local v35=\"\"\n    local v36=\"\
    \"\n    local v37=\"\"\n    local v38=\"\"\n    local v39=\"\"\n    local v40=\"\
    \"\n    local v41=\"\"\n    local v42=\"\"\n    local v43=\"\"\n    local v44=\"\
    \"\n    local v45=\"\"\n    local v46=\"\"\n    local v47=\"\"\n    local v48=\"\
    \"\n    local v49=\"\"\n    local v50=\"\"\n    local v51=\"\"\n    local v52=\"\
    \"\n    local v53=\"\"\n    local v54=\"\"\n    local v55=\"\"\n    local v56=\"\
    \"\n    local v57=\"\"\n    local v58=\"\"\n    local v59=\"\"\n    local v60=\"\
    \"\n    local v61=\"\"\n    local v62=\"\"\n    local v63=\"\"\n    local v64=\"\
    \"\n    local v65=\"\"\n    local v66=\"\"\n    local v67=\"\"\n    local v68=\"\
    \"\n    local v69=\"\"\n    local v70=\"\"\n    local v71=\"\"\n    local v72=\"\
    \"\n    local v73=\"\"\n    local v74=\"\"\n    local v75=\"\"\n    local v76=\"\
    \"\n    local v77=\"\"\n    local v78=\"\"", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]' '[:lower:]'",
  "    # TODO: implement this function\n    echo \"TODO\"", "    echo \"$1\" | tr\
    \ '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "\t# TODO: write this function\n\
    \techo \"TODO\"", "    # TODO: implement this function\n    echo \"TODO\"", " \
    \   echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRVX' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    # TODO: implement this function\n    echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEIOU' 'CGFKP'", "\techo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "  echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", " \
    \   # TODO: Implement this function\n    # Hint: Use the tr command\n    echo\
    \ $1 | tr 'a-zA-Z' 'c-za-bC-ZA-B'", "    local msg=$1\n    local msg_len=${#msg}\n\
    \    local i=0\n    local encoded_msg=\"\"\n    local char=\"\"\n    local char_ascii=\"\
    \"\n    local char_ascii_encoded=\"\"\n    local char_encoded=\"\"\n    local\
    \ vowels=\"aeiouAEIOU\"\n    local vowel_index=0\n    local vowel_index_encoded=0\n\
    \    local vowel_encoded=\"\"\n    local vowel_encoded_ascii=\"\"\n    local vowel_encoded_ascii_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded=\"\"\n    local vowel_encoded_ascii_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded=\"\"\n    local\
    \ vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded=\"\"\n    local\
    \ vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded=\"\"\n \
    \   local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded_encoded=\"\
    \"\n    local vowel_encoded_ascii_encoded_encoded_", '    # Your code here', " \
    \   # TODO: Write your code here\n    # Hint: You can use the tr command to swap\
    \ case\n    # Hint: You can use the tr command to replace characters\n    # Hint:\
    \ You can use the awk command to get the character 2 places ahead\n    #     \
    \  in the alphabet\n    # Hint: You can use the echo command to print a variable\n\
    \    # Hint: You can use the read command to save the output of a command\n  \
    \  #       to a variable\n    # Hint: You can use the declare command to create\
    \ an array\n    # Hint: You can use the for command to loop through an array\n\
    \    # Hint: You can use the seq command to generate a sequence of numbers\n \
    \   # Hint: You can use the expr command to do arithmetic\n    # Hint: You can\
    \ use the printf command to format a string\n    # Hint: You can use the tr command\
    \ to replace characters\n    # Hint: You can use the echo command to print a variable\n\
    \    # Hint: You can use the read command to save the output of a command\n  \
    \  #       to a variable\n    # Hint: You can use the declare command to create\
    \ an array\n    # Hint: You can use the for command to loop through an array\n\
    \    # Hint: You can use the seq command to generate a sequence of numbers\n \
    \   # Hint: You can use the expr command to do arithmetic\n    # Hint: You can\
    \ use the printf command to format a string\n    # Hint: You can use the tr command\
    \ to replace characters\n    # Hint: You can use the echo command to print a variable\n\
    \    # Hint: You can use the read command to save the output of a command\n  \
    \  #       to a variable\n    # Hint: You can use the declare command to create\
    \ an array\n    # Hint: You can use the for command to loop through an array\n\
    \    # Hint: You can use the seq command to generate a sequence of numbers\n \
    \   # Hint: You can use the expr command to do arithmetic\n    # Hint: You can\
    \ use the printf command to format a string\n    # Hint: You can use the tr command\
    \ to replace characters\n    # Hint: You can use the echo command to print a variable\n\
    \    # Hint: You can use the read command", "    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'"]
stop_tokens:
- "\n}"
