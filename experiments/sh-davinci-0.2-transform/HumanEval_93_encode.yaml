name: HumanEval_93_encode
language: sh
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n\
  # >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\n\
  encode() {\n"
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
completions: ["    local result=\"\"\n    local char=\"\"\n    local char_code=\"\"\
    \n    local char_code_new=\"\"\n    local char_new=\"\"\n    local vowels=\"aeiou\"\
    \n    local vowels_new=\"cfilor\"\n    local i=0\n    local j=0\n    local len=${#1}\n\
    \    for ((i=0; i<len; i++)); do\n        char=${1:$i:1}\n        char_code=$(printf\
    \ \"%d\" \"'$char\")\n        if [[ \"${vowels}\" =~ \"${char}\" ]]; then\n  \
    \          j=$(expr index \"$vowels\" \"$char\")\n            char_new=${vowels_new:$j:1}\n\
    \        elif [[ \"${vowels^^}\" =~ \"${char}\" ]]; then\n            j=$(expr\
    \ index \"$vowels^^\" \"$char\")\n            char_new=${vowels_new^^:$j:1}\n\
    \        else\n            char_new=$char\n        fi\n        result=\"$result$char_new\"\
    \n    done\n    echo \"$result\"", "    echo $1 | tr '[:lower:]' '[:upper:]' |\
    \ tr 'AEIOU' 'CGFKP'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU'\
    \ 'CGFKP'", "    # TODO: Implement this function\n    echo \"Not implemented\"",
  "    echo $1 | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'EGIKO' | tr '[:upper:]'\
    \ '[:lower:]'", "    echo \"$1\" | tr 'a-zA-Z' 'c-za-bC-ZA-B' | tr 'aeiou' 'cgkos'",
  "    # TODO: Implement this function\n    echo \"Not implemented\"", "    echo \"\
    $1\" | tr '[:lower:]' '[:upper:]' | tr 'AEGIOU' 'CFLRVX' | tr '[:upper:]' '[:lower:]'",
  "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP' | tr '[:upper:]'\
    \ '[:lower:]'", "    # TODO: Write your code here\n    echo \"TODO\"", "    #\
    \ TODO: implement this function\n    echo $1 | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEIOU' 'CGFKP'", "    local str=\"$1\"\n    local new_str=\"\"\n    local i=0\n\
    \    local len=${#str}\n    local char=\"\"\n    local char_code=0\n    local\
    \ new_char_code=0\n    local new_char=\"\"\n    local vowels=\"aeiouAEIOU\"\n\
    \    local vowel_index=0\n    local vowel_len=${#vowels}\n    local vowel=\"\"\
    \n    local vowel_code=0\n    local new_vowel_code=0\n    local new_vowel=\"\"\
    \n\n    while [ $i -lt $len ]; do\n        char=\"${str:$i:1}\"\n        char_code=$(printf\
    \ \"%d\" \"'$char\")\n        if [[ \"$vowels\" =~ \"$char\" ]]; then\n      \
    \      vowel_index=0\n            while [ $vowel_index -lt $vowel_len ]; do\n\
    \                vowel=\"${vowels:$vowel_index:1}\"\n                vowel_code=$(printf\
    \ \"%d\" \"'$vowel\")\n                if [ $vowel_code -eq $char_code ]; then\n\
    \                    new_vowel_code=$((vowel_code + 2))\n                    new_vowel=$(printf\
    \ \"\\x$(printf %x $new_vowel_code)\")\n                    new_str=\"$new_str$new_vowel\"\
    \n                    break\n                fi\n                vowel_index=$((vowel_index\
    \ + 1))\n            done\n        else\n            if [ $char_code -gt 64 ]\
    \ && [ $char_code -lt 91 ]; then\n                new_char_code=$((char_code +\
    \ 32))\n            elif [ $char_code -gt 96 ] && [ $char_code -lt 123 ]; then\n\
    \                new_char_code=$((char_code - 32))\n            else\n       \
    \         new_char_code=$char_code\n            fi\n            new_char=$(printf\
    \ \"\\x$(printf %x $new_char_code)\")\n            new_str=\"$new_str$new_char\"\
    \n        fi\n        i=$((i + 1))\n    done\n    echo \"$new_str\"", "    echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo \"$1\"\
    \ | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CFKPV'", "    echo $1 | tr '[:lower:]'\
    \ '[:upper:]' | tr 'AEIOU' 'CGFKP'", "    echo $1 | tr '[:lower:]' '[:upper:]'\
    \ | tr 'AEGIOU' 'CFLRVX'", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr\
    \ 'AEIOU' 'CGFKP'", "    local str=$1\n    local newstr=\"\"\n    local chr=\"\
    \"\n    local i=0\n    local len=${#str}\n    local vowels=\"aeiou\"\n    local\
    \ newchr=\"\"\n    local newvowel=\"\"\n    local newvowelindex=0\n    local newvowelindex2=0\n\
    \    local newvowelindex3=0\n    local newvowelindex4=0\n    local newvowelindex5=0\n\
    \    local newvowelindex6=0\n    local newvowelindex7=0\n    local newvowelindex8=0\n\
    \    local newvowelindex9=0\n    local newvowelindex10=0\n    local newvowelindex11=0\n\
    \    local newvowelindex12=0\n    local newvowelindex13=0\n    local newvowelindex14=0\n\
    \    local newvowelindex15=0\n    local newvowelindex16=0\n    local newvowelindex17=0\n\
    \    local newvowelindex18=0\n    local newvowelindex19=0\n    local newvowelindex20=0\n\
    \    local newvowelindex21=0\n    local newvowelindex22=0\n    local newvowelindex23=0\n\
    \    local newvowelindex24=0\n    local newvowelindex25=0\n    local newvowelindex26=0\n\
    \    local newvowelindex27=0\n    local newvowelindex28=0\n    local newvowelindex29=0\n\
    \    local newvowelindex30=0\n    local newvowelindex31=0\n    local newvowelindex32=0\n\
    \    local newvowelindex33=0\n    local newvowelindex34=0\n    local newvowelindex35=0\n\
    \    local newvowelindex36=0\n    local newvowelindex37=0\n    local newvowelindex38=0\n\
    \    local newvowelindex39=0\n    local newvowelindex40=0\n    local newvowelindex41=0\n\
    \    local new", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr 'AEIOU' 'CGFKP'",
  "    echo \"$1\" | tr 'a-zA-Z' 'b-zaB-ZA' | tr 'aeiou' 'cgjkr'"]
stop_tokens:
- "\n}"
