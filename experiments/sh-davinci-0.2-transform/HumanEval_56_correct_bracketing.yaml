name: HumanEval_56_correct_bracketing
language: sh
prompt: "#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return True if\
  \ every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
  \ \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing\
  \ \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n\
  # $1 is a string\ncorrect_bracketing() {\n"
tests: "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"<>\") = \"true\" ]]\n    [[ $(candidate \"<<><>>\") =\
  \ \"true\" ]]\n    [[ $(candidate \"<><><<><>><>\") = \"true\" ]]\n    [[ $(candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") = \"true\" ]]\n    [[ $(candidate \"<<<><>>>>\"\
  ) = \"false\" ]]\n    [[ $(candidate \"><<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<\") = \"false\" ]]\n    [[ $(candidate \"<<<<\") = \"false\" ]]\n    [[ $(candidate\
  \ \">\") = \"false\" ]]\n    [[ $(candidate \"<<>\") = \"false\" ]]\n    [[ $(candidate\
  \ \"<><><<><>><>><<>\") = \"false\" ]]\n    [[ $(candidate \"<><><<><>><>>><>\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["    local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n           \
    \ (( count-- ))\n        fi\n        if (( count < 0 )); then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if (( count == 0 ));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local count=0\n    for (( i=0; i<${#brackets}; i++\
    \ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            (( count++\
    \ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n            (( count--\
    \ ))\n        fi\n        if (( count < 0 )); then\n            echo \"false\"\
    \n            return\n        fi\n    done\n    if (( count == 0 )); then\n  \
    \      echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=\"\
    $1\"\n  local open_count=0\n  local close_count=0\n  for (( i=0; i<${#brackets};\
    \ i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]]; then\n      (( open_count++\
    \ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n      (( close_count++\
    \ ))\n    fi\n  done\n  if [[ $open_count -eq $close_count ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=$1\n    local\
    \ stack=()\n    local bracket\n    for ((i=0; i<${#brackets}; i++)); do\n    \
    \    bracket=${brackets:$i:1}\n        if [[ $bracket == \"<\" ]]; then\n    \
    \        stack+=($bracket)\n        elif [[ $bracket == \">\" ]]; then\n     \
    \       if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n  \
    \              return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n\
    \    local stack=\"\"\n    for ((i=0; i<${#brackets}; i++)); do\n        local\
    \ bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"<\" ]]; then\n\
    \            stack=\"$stack<\"\n        elif [[ \"$bracket\" == \">\" ]]; then\n\
    \            if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=\"${stack:0:-1}\"\n\
    \        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "  local brackets=$1\n  local\
    \ stack=\"\"\n  local char\n  for ((i=0; i<${#brackets}; i++)); do\n    char=${brackets:$i:1}\n\
    \    if [[ \"$char\" == \"<\" ]]; then\n      stack=\"$stack<\"\n    elif [[ \"\
    $char\" == \">\" ]]; then\n      if [[ -z \"$stack\" ]]; then\n        echo \"\
    false\"\n        return\n      fi\n      stack=${stack%?}\n    fi\n  done\n  if\
    \ [[ -z \"$stack\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "  local brackets=\"$1\"\n  local bracket_stack=()\n  local bracket\n \
    \ local top_bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      bracket_stack+=(\"$bracket\"\
    )\n    elif [[ \"$bracket\" == \">\" ]]; then\n      top_bracket=\"${bracket_stack[-1]}\"\
    \n      if [[ \"$top_bracket\" == \"<\" ]]; then\n        unset bracket_stack[-1]\n\
    \      else\n        echo \"false\"\n        return\n      fi\n    fi\n  done\n\
    \  if [[ ${#bracket_stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  local brackets=\"$1\"\n  local open_count=0\n  local close_count=0\n\
    \  local i\n  for ((i=0; i<${#brackets}; i++)); do\n    local c=${brackets:$i:1}\n\
    \    if [[ \"$c\" == \"<\" ]]; then\n      open_count=$((open_count + 1))\n  \
    \  elif [[ \"$c\" == \">\" ]]; then\n      close_count=$((close_count + 1))\n\
    \    else\n      echo \"error: invalid character: $c\"\n      return 1\n    fi\n\
    \  done\n  if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "  local brackets=\"$1\"\n  local stack=()\n  local\
    \ bracket\n  for ((i=0; i<${#brackets}; i++)); do\n    bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      stack+=(\"$bracket\")\n    elif\
    \ [[ \"$bracket\" == \">\" ]]; then\n      if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n      stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n    fi\n  done\n  if [[ ${#stack[@]} -eq 0 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local count=0\n  for ((\
    \ i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\" == \"<\" ]];\
    \ then\n      (( count++ ))\n    elif [[ \"${brackets:$i:1}\" == \">\" ]]; then\n\
    \      (( count-- ))\n    fi\n    if (( count < 0 )); then\n      echo \"false\"\
    \n      return\n    fi\n  done\n  if (( count == 0 )); then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local brackets=\"$1\"\n  local open=0\n\
    \  local close=0\n  for (( i=0; i<${#brackets}; i++ )); do\n    if [[ \"${brackets:$i:1}\"\
    \ == \"<\" ]]; then\n      open=$(( open + 1 ))\n    elif [[ \"${brackets:$i:1}\"\
    \ == \">\" ]]; then\n      close=$(( close + 1 ))\n    fi\n    if [[ $close -gt\
    \ $open ]]; then\n      echo \"false\"\n      return\n    fi\n  done\n  if [[\
    \ $open -eq $close ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "  local brackets=\"$1\"\n  local open_count=0\n  local close_count=0\n\
    \  for ((i=0; i<${#brackets}; i++)); do\n    local bracket=\"${brackets:$i:1}\"\
    \n    if [[ \"$bracket\" == \"<\" ]]; then\n      open_count=$((open_count + 1))\n\
    \    elif [[ \"$bracket\" == \">\" ]]; then\n      close_count=$((close_count\
    \ + 1))\n    fi\n  done\n  if [[ \"$open_count\" -eq \"$close_count\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local brackets=\"\
    $1\"\n    local count=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if\
    \ [[ ${brackets:$i:1} == \"<\" ]]; then\n            ((count++))\n        elif\
    \ [[ ${brackets:$i:1} == \">\" ]]; then\n            ((count--))\n        fi\n\
    \        if [[ $count -lt 0 ]]; then\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n\
    \    local stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n        local bracket=${brackets:$i:1}\n\
    \        if [[ \"$bracket\" == \"<\" ]]; then\n            stack+=($bracket)\n\
    \        elif [[ \"$bracket\" == \">\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "    local brackets=$1\n    local open_count=0\n\
    \    local close_count=0\n    local i=0\n    local c\n    while [ $i -lt ${#brackets}\
    \ ]; do\n        c=${brackets:$i:1}\n        if [ \"$c\" == \"<\" ]; then\n  \
    \          open_count=$((open_count + 1))\n        elif [ \"$c\" == \">\" ]; then\n\
    \            close_count=$((close_count + 1))\n        else\n            echo\
    \ \"error: invalid character $c\"\n            return 1\n        fi\n        if\
    \ [ $close_count -gt $open_count ]; then\n            echo \"false\"\n       \
    \     return 0\n        fi\n        i=$((i + 1))\n    done\n    if [ $open_count\
    \ -eq $close_count ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    local brackets=$1\n    local count=0\n    for (( i=0; i<${#brackets};\
    \ i++ )); do\n        if [[ ${brackets:$i:1} == \"<\" ]]; then\n            ((\
    \ count++ ))\n        elif [[ ${brackets:$i:1} == \">\" ]]; then\n           \
    \ (( count-- ))\n        fi\n        if (( count < 0 )); then\n            echo\
    \ \"false\"\n            return\n        fi\n    done\n    if (( count == 0 ));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local len=${#brackets}\n    local i\n    local count=0\n\
    \    for ((i=0; i<len; i++)); do\n        local char=${brackets:$i:1}\n      \
    \  if [[ \"$char\" == \"<\" ]]; then\n            ((count++))\n        elif [[\
    \ \"$char\" == \">\" ]]; then\n            ((count--))\n        else\n       \
    \     echo \"error: invalid character: $char\"\n            return 1\n       \
    \ fi\n        if ((count < 0)); then\n            echo \"false\"\n           \
    \ return 0\n        fi\n    done\n    if ((count == 0)); then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n  \
    \  local count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"<\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local count=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1} ==\
    \ \"<\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \">\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi"]
stop_tokens:
- "\n}"
