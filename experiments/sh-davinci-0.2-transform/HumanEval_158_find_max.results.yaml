language: sh
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    # Hint: use the following\
    \ command to sort the list of strings\n    # in lexicographical order:\n    #\
    \ sort <<< \"$1\"\n    #\n    # Hint: use the following command to sort the list\
    \ of strings\n    # by the number of unique characters in each string:\n    #\
    \ sort -k2 <<< \"$(for word in $1; do echo \"$word $(echo $word | fold -w1 | sort\
    \ -u | wc -w)\"; done)\"\n    #\n    # Hint: use the following command to get\
    \ the first word in the list:\n    # head -n1 <<< \"$1\"\n    #\n    # Hint: use\
    \ the following command to get the last word in the list:\n    # tail -n1 <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the number of words\
    \ in the list:\n    # wc -w <<< \"$1\"\n    #\n    # Hint: use the following command\
    \ to get the number of unique characters\n    # in a string:\n    # echo $word\
    \ | fold -w1 | sort -u | wc -w\n    #\n    # Hint: use the following command to\
    \ get the number of unique characters\n    # in a string:\n    # echo $word |\
    \ fold -w1 | sort -u | wc -w\n    #\n    # Hint: use the following command to\
    \ get the first word in the list:\n    # head -n1 <<< \"$1\"\n    #\n    # Hint:\
    \ use the following command to get the last word in the list:\n    # tail -n1\
    \ <<< \"$1\"\n    #\n    # Hint: use the following command to get the number of\
    \ words in the list:\n    # wc -w <<< \"$1\"\n    #\n    # Hint: use the following\
    \ command to get the number of unique characters\n    # in a string:\n    # echo\
    \ $word | fold -w1 | sort -u | wc -w\n    #\n    # Hint: use the following command\
    \ to get the number of unique characters\n    # in a string:\n    # echo $word\
    \ | fold -w1 | sort -u | wc -\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuzni3skq.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpuzni3skq.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use $1 to access the first argument to this\
    \ function\n    #\n    # For example:\n    # echo \"Hello $1\"\n    #\n    # The\
    \ following is the only line of output you need to produce\n    # echo \"string\"\
    \n    echo \"string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    local\
    \ word=\"\"\n    local chars=0\n    for word in $1; do\n        chars=$(echo $word\
    \ | fold -w1 | sort -u | wc -l)\n        if [[ $chars -gt $max_chars ]]; then\n\
    \            max_chars=$chars\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # your code here\n  echo $1 | tr ' ' '\\n' | sort -u |\
    \ sort -r -k1,1 -k2,2n | head -n1\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # Use echo to print the\
    \ result\n    echo \"string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    # You can use the\
    \ following command to sort the input:\n    # sort -nr -k2\n    echo \"string\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | sed 's/\\(.\\)/\\1\\n/g' | sort -u | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_chars=0\n  for word in\
    \ $1; do\n    local chars=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $chars -gt $max_chars ]; then\n      max_chars=$chars\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | sed 's/\\(.\\)/\\1\\\
    n/g' | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n        \
    \    max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=''\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo \"\
    $word\" | sed 's/\\(.\\)/\\1\\n/g' | sort -u | wc -l)\n        if [[ $count -gt\
    \ $max_count ]]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use echo to return your result.\n    echo\
    \ \"name\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #\
    \ ...\n    # ...\n    # ...\n    # ...\n    # ...\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppn0n7jms.sh: line 143: syntax error near unexpected token `}''

    /tmp/tmppn0n7jms.sh: line 143: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word\n    local max_unique=0\n    for word\
    \ in $1; do\n        local unique=$(echo $word | grep -o . | sort | uniq | wc\
    \ -l)\n        if [[ $unique -gt $max_unique ]]; then\n            max_unique=$unique\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_word_len=0\n    local\
    \ word_len=0\n    for word in $1; do\n        word_len=$(echo $word | tr -cd '[[:alnum:]]'\
    \ | wc -c)\n        if [ $word_len -gt $max_word_len ]; then\n            max_word_len=$word_len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo \"\
    $word\" | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use $1 to access the first argument to the\
    \ function\n    local max_word\n    local max_count=0\n    local count\n    for\
    \ word in $1; do\n        count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_count=0\n  local max_word=\"\"\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word max_count\n    for word in $1; do\n \
    \       local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [[ -z $max_count || $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word\n  local max_unique_chars=0\n  for word\
    \ in $1; do\n    local unique_chars=$(echo $word | fold -w1 | sort | uniq | wc\
    \ -l)\n    if [ $unique_chars -gt $max_unique_chars ]; then\n      max_unique_chars=$unique_chars\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  local word=\"\
    \"\n  local count=0\n  for word in $1; do\n    count=$(echo $word | grep -o .\
    \ | sort | uniq | wc -l)\n    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    local word=\n\
    \    local count=\n    for word in $1; do\n        count=$(echo $word | grep -o\
    \ . | sort | uniq | wc -l)\n        if [[ $count -gt $max_count ]]; then\n   \
    \         max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n\
    \    if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # find the word with maximum number of unique characters\n\
    \    # and store it in max_word\n    max_word=$(echo \"$1\" | tr ' ' '\\n' | sort\
    \ -u | tr '\\n' ' ' | awk '{print $1}')\n    # find the number of unique characters\
    \ in max_word\n    max_num=$(echo \"$max_word\" | tr -d -c '\\n' | wc -l)\n  \
    \  # find the word with maximum number of unique characters\n    # and store it\
    \ in max_word\n    max_word=$(echo \"$1\" | tr ' ' '\\n' | sort -u | tr '\\n'\
    \ ' ' | awk '{print $1}')\n    # find the number of unique characters in max_word\n\
    \    max_num=$(echo \"$max_word\" | tr -d -c '\\n' | wc -l)\n    # find the word\
    \ with maximum number of unique characters\n    # and store it in max_word\n \
    \   max_word=$(echo \"$1\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ' | awk '{print\
    \ $1}')\n    # find the number of unique characters in max_word\n    max_num=$(echo\
    \ \"$max_word\" | tr -d -c '\\n' | wc -l)\n    # find the word with maximum number\
    \ of unique characters\n    # and store it in max_word\n    max_word=$(echo \"\
    $1\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ' | awk '{print $1}')\n    # find the\
    \ number of unique characters in max_word\n    max_num=$(echo \"$max_word\" |\
    \ tr -d -c '\\n' | wc -l)\n    # find the word with maximum number of unique characters\n\
    \    # and store it in max_word\n    max_word=$(echo \"$1\" | tr ' ' '\\n' | sort\
    \ -u | tr '\\n' ' ' | awk '{print $1}')\n    # find the number of unique characters\
    \ in max_word\n    max_num=$(echo \"$max_word\" | tr -\n}\n\ncandidate() {\n \
    \   find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprvoubr5y.sh: line 39: unexpected EOF while looking for matching
    `)''

    /tmp/tmprvoubr5y.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # your code here\n  max=0\n  max_word=\"\"\n  for word\
    \ in $1; do\n    unique_char=$(echo $word | fold -w1 | sort | uniq | wc -l)\n\
    \    if [ $unique_char -gt $max ]; then\n      max=$unique_char\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please note that\
    \ the following line is a placeholder.\n    # Please remove it and implement your\
    \ solution.\n    echo \"TODO\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_word=\"\"\n    max_count=0\n    for word in $1;\
    \ do\n        count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use $1 to access the first argument to the\
    \ function\n    #\n    # For example:\n    # echo $1\n    #\n    # You can use\
    \ echo to print out the result\n    #\n    # For example:\n    # echo \"Hello\
    \ World\"\n    #\n    # You can use return to return a value\n    #\n    # For\
    \ example:\n    # return 1\n    #\n    # You can use read to read a variable from\
    \ the user\n    #\n    # For example:\n    # read -p \"Enter a number: \" number\n\
    \    #\n    # You can use $number to access the value of the variable\n    #\n\
    \    # For example:\n    # echo $number\n    #\n    # You can use $# to access\
    \ the number of arguments passed to the function\n    #\n    # For example:\n\
    \    # echo $#\n    #\n    # You can use $@ to access all arguments passed to\
    \ the function\n    #\n    # For example:\n    # echo $@\n    #\n    # You can\
    \ use $? to access the exit status of the last command\n    #\n    # For example:\n\
    \    # echo $?\n    #\n    # You can use $0 to access the name of the script\n\
    \    #\n    # For example:\n    # echo $0\n    #\n    # You can use $1 to access\
    \ the first argument passed to the script\n    #\n    # For example:\n    # echo\
    \ $1\n    #\n    # You can use $2 to access the second argument passed to the\
    \ script\n    #\n    # For example:\n    # echo $2\n    #\n    # You can use $3\
    \ to access the third argument passed to the script\n    #\n    # For example:\n\
    \    # echo $3\n    #\n    # You can use $4 to access the fourth argument passed\
    \ to the script\n    #\n    # For example:\n    # echo $4\n    #\n    # You can\
    \ use $5 to access the fifth argument passed to the script\n    #\n    # For example:\n\
    \    # echo $5\n    #\n    # You can use $6 to access the sixth\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1acm9m18.sh: line 88: syntax error near unexpected token `}''

    /tmp/tmp1acm9m18.sh: line 88: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo $word | tr -cd '[[:alnum:]]' | wc -c)\n\
    \        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n        \
    \    max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # $1 is a space-separated list\n    # $2 is the word\
    \ to compare\n    # $3 is the current max word\n    # $4 is the current max unique\
    \ chars\n    local word=$2\n    local max_word=$3\n    local max_unique=$4\n \
    \   local unique_chars=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if\
    \ [ $unique_chars -gt $max_unique ]; then\n        max_word=$word\n        max_unique=$unique_chars\n\
    \    elif [ $unique_chars -eq $max_unique ]; then\n        if [ $word \\< $max_word\
    \ ]; then\n            max_word=$word\n        fi\n    fi\n    if [ -z $1 ]; then\n\
    \        echo $max_word\n    else\n        find_max \"${1#* }\" \"${1%% *}\" $max_word\
    \ $max_unique\n    fi\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=36 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=23 encoding='utf-8'>
  timestamp: 1660018414
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_unique_chars=0\n  for\
    \ word in $1; do\n    local unique_chars=$(echo $word | fold -w1 | sort | uniq\
    \ | wc -l)\n    if [ $unique_chars -gt $max_unique_chars ]; then\n      max_unique_chars=$unique_chars\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use the echo\
    \ command to print the result\n    # in the following format:\n    # echo \"word\"\
    \n    #\n    # Hint: You can use the following command to sort the\n    # words\
    \ in lexicographical order:\n    # echo \"$1\" | tr ' ' '\\n' | sort\n    #\n\
    \    # Hint: You can use the following command to count the\n    # number of unique\
    \ characters in a word:\n    # echo \"$word\" | fold -w1 | sort -u | wc -l\n \
    \   #\n    # Hint: You can use the following command to get the\n    # first word\
    \ in lexicographical order:\n    # echo \"$1\" | tr ' ' '\\n' | sort | head -n1\n\
    \    #\n    # Hint: You can use the following command to get the\n    # word with\
    \ maximum number of unique characters:\n    # echo \"$1\" | tr ' ' '\\n' | sort\
    \ -k2 | tail -n1\n    #\n    # Hint: You can use the following command to get\
    \ the\n    # word with maximum number of unique characters in\n    # lexicographical\
    \ order:\n    # echo \"$1\" | tr ' ' '\\n' | sort -k2 | tail -n1 | sort | head\
    \ -n1\n    #\n    # Hint: You can use the following command to get the\n    #\
    \ word with maximum number of unique characters in\n    # lexicographical order:\n\
    \    # echo \"$1\" | tr ' ' '\\n' | sort -k2 | tail -n1 | sort | head -n1\n  \
    \  #\n    # Hint: You can use the following command to get the\n    # word with\
    \ maximum number of unique characters in\n    # lexicographical order:\n    #\
    \ echo \"$1\" | tr ' ' '\\n' | sort -k2 | tail -n1 | sort | head -n1\n    #\n\
    \    # Hint: You can use the following command to get the\n    # word with maximum\
    \ number of unique characters in\n    # lexicographical order:\n    # echo \"\
    $1\" | tr ' ' '\\n' | sort -k2 | tail -n1 | sort | head -n\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp41vs91ux.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp41vs91ux.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_word=\"\"\n    max_len=0\n    for word in $1; do\n\
    \        len=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort -u | wc -l)\n    \
    \    if [ $len -gt $max_len ]; then\n            max_len=$len\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    local\
    \ word=\"\"\n    local len=0\n    for word in $1; do\n        len=$(echo $word\
    \ | tr -d -c 'a-zA-Z' | wc -c)\n        if [ $len -gt $max_len ]; then\n     \
    \       max_len=$len\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: Write your code here\n  max_count=0\n  max_word=\"\
    \"\n  for word in $1; do\n    count=0\n    for ((i=0; i<${#word}; i++)); do\n\
    \      char=${word:$i:1}\n      if [[ \"${word/$char}\" == \"$word\" ]]; then\n\
    \        count=$((count+1))\n      fi\n    done\n    if [[ $count -gt $max_count\
    \ ]]; then\n      max_count=$count\n      max_word=$word\n    fi\n  done\n  echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u\n    # Hint: use the following\
    \ command to get the length of a string\n    # ${#string}\n    # Hint: use the\
    \ following command to get the first word in a string\n    # ${string%% *}\n \
    \   # Hint: use the following command to get the rest of the words in a string\n\
    \    # ${string#* }\n    # Hint: use the following command to get the first character\
    \ in a string\n    # ${string:0:1}\n    # Hint: use the following command to get\
    \ the rest of the characters in a string\n    # ${string:1}\n    # Hint: use the\
    \ following command to get the length of a string\n    # ${#string}\n    # Hint:\
    \ use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the length of a string\n    # ${#string}\n\
    \    # Hint: use the following command to get the\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9emwxwyd.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp9emwxwyd.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo $word | grep -o . |\
    \ sort | uniq | wc -l)\n        if [ $unique_chars -gt $max_unique_chars ]; then\n\
    \            max_unique_chars=$unique_chars\n            max_word=$word\n    \
    \    fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word max_count\n    for word in $1; do\n \
    \       local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n    \
    \    if [[ -z $max_count || $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to get the number of unique characters\n    # in a string:\n\
    \    # $ echo \"string\" | grep -o . | sort | uniq | wc -l\n    #\n    # Hint:\
    \ use the following command to sort a list of strings\n    # $ echo \"string1\
    \ string2 string3\" | tr ' ' '\\n' | sort\n    #\n    # Hint: use the following\
    \ command to get the first string in a list\n    # $ echo \"string1 string2 string3\"\
    \ | tr ' ' '\\n' | head -n 1\n    #\n    # Hint: use the following command to\
    \ get the last string in a list\n    # $ echo \"string1 string2 string3\" | tr\
    \ ' ' '\\n' | tail -n 1\n    #\n    # Hint: use the following command to get the\
    \ nth string in a list\n    # $ echo \"string1 string2 string3\" | tr ' ' '\\\
    n' | head -n n | tail -n 1\n    #\n    # Hint: use the following command to get\
    \ the number of strings in a list\n    # $ echo \"string1 string2 string3\" |\
    \ tr ' ' '\\n' | wc -l\n    #\n    # Hint: use the following command to get the\
    \ number of strings in a list\n    # $ echo \"string1 string2 string3\" | tr '\
    \ ' '\\n' | wc -l\n    #\n    # Hint: use the following command to get the number\
    \ of strings in a list\n    # $ echo \"string1 string2 string3\" | tr ' ' '\\\
    n' | wc -l\n    #\n    # Hint: use the following command to get the number of\
    \ strings in a list\n    # $ echo \"string1 string2 string3\" | tr ' ' '\\n' |\
    \ wc -l\n    #\n    # Hint: use the following command to get the number of strings\
    \ in a list\n    # $ echo \"string1 string2 string3\" | tr ' ' '\\n' | wc -l\n\
    \    #\n    # Hint: use the following command to get the number of strings in\
    \ a list\n    # $ echo\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvnj1t8un.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpvnj1t8un.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Split the input into an array\n    local -a words=($1)\n\
    \    # Initialize variables\n    local max_word=\"\"\n    local max_count=0\n\
    \    local count=0\n    local word=\"\"\n    # Loop through the words\n    for\
    \ word in \"${words[@]}\"; do\n        # Count the number of unique characters\n\
    \        count=$(echo \"$word\" | fold -w1 | sort -u | wc -l)\n        # If the\
    \ count is greater than the max, update the max\n        if [ $count -gt $max_count\
    \ ]; then\n            max_count=$count\n            max_word=$word\n        #\
    \ If the count is equal to the max, update the max if the word\n        # is lexicographically\
    \ less than the current max\n        elif [ $count -eq $max_count ] && [ \"$word\"\
    \ \\< \"$max_word\" ]; then\n            max_word=$word\n        fi\n    done\n\
    \    # Return the max word\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # your code here\n  # hint: use tr, sort, uniq, wc, and\
    \ head\n  # hint: use tr to replace space with newline\n  # hint: use sort to\
    \ sort the list\n  # hint: use uniq -c to count the number of unique characters\n\
    \  # hint: use wc -l to count the number of lines\n  # hint: use head -n 1 to\
    \ get the first line\n  # hint: use cut to get the first column\n  # hint: use\
    \ sort to sort the list again\n  # hint: use head -n 1 to get the first line\n\
    \  echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -n | tail -n 1 | cut -d ' '\
    \ -f 2\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Split the list into an array\n    IFS=' ' read -r\
    \ -a arr <<< \"$1\"\n    # Initialize the variables\n    max_word=\"\"\n    max_count=0\n\
    \    # Loop through the array\n    for word in \"${arr[@]}\"; do\n        # Count\
    \ the number of unique characters in the word\n        count=$(echo \"$word\"\
    \ | grep -o . | sort | uniq | wc -l)\n        # If the count is greater than the\
    \ maximum count\n        if [ \"$count\" -gt \"$max_count\" ]; then\n        \
    \    # Update the maximum count and word\n            max_count=\"$count\"\n \
    \           max_word=\"$word\"\n        # If the count is equal to the maximum\
    \ count\n        elif [ \"$count\" -eq \"$max_count\" ]; then\n            # If\
    \ the word is lexicographically less than the maximum word\n            if [ \"\
    $word\" \\< \"$max_word\" ]; then\n                # Update the maximum word\n\
    \                max_word=\"$word\"\n            fi\n        fi\n    done\n  \
    \  # Print the maximum word\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=0\n    local max_word=\"\"\n    for word\
    \ in $1; do\n        local len=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort\
    \ -u | wc -l)\n        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [ $count -gt $max_count ]; then\n           \
    \ max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word\n    local max_count=0\n    local word\n\
    \    local count\n    for word in $1; do\n        count=$(echo $word | grep -o\
    \ . | sort | uniq | wc -l)\n        if [[ $count -gt $max_count ]]; then\n   \
    \         max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $chars -gt $max_chars ]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | fold -w1 | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"TODO\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u -r\n    # Hint: use the following\
    \ command to count the number of unique characters\n    # tr -dc 'a-zA-Z0-9' |\
    \ wc -c\n    # Hint: use the following command to get the first word in the list\n\
    \    # cut -d ' ' -f 1\n    # Hint: use the following command to get the rest\
    \ of the words in the list\n    # cut -d ' ' -f 2-\n    # Hint: use the following\
    \ command to get the length of the list\n    # wc -w\n    # Hint: use the following\
    \ command to get the first character in the list\n    # cut -c 1\n    # Hint:\
    \ use the following command to get the rest of the characters in the list\n  \
    \  # cut -c 2-\n    # Hint: use the following command to get the length of the\
    \ list\n    # wc -c\n    # Hint: use the following command to get the first line\
    \ in the list\n    # head -n 1\n    # Hint: use the following command to get the\
    \ rest of the lines in the list\n    # tail -n +2\n    # Hint: use the following\
    \ command to get the length of the list\n    # wc -l\n    # Hint: use the following\
    \ command to get the first element in the list\n    # cut -d ' ' -f 1\n    # Hint:\
    \ use the following command to get the rest of the elements in the list\n    #\
    \ cut -d ' ' -f 2-\n    # Hint: use the following command to get the length of\
    \ the list\n    # wc -w\n    # Hint: use the following command to get the first\
    \ element in the list\n    # cut -d ' ' -f 1\n    # Hint: use the following command\
    \ to get the rest of the elements in the list\n    # cut -d ' ' -f 2-\n    # Hint:\
    \ use the following command to get the length of the list\n    # wc -w\n    #\
    \ Hint: use the following command to get the first element in the list\n    #\
    \ cut -d ' ' -f 1\n    # H\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppwvfvgtq.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmppwvfvgtq.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_count=0\n    local max_word=\"\"\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort a list of strings\n    # by the number of unique characters\
    \ in each string:\n    # sort -k2,2 -t: -n <(echo \"$1\" | tr ' ' '\\n' | sed\
    \ 's/.*/&:&/' | uniq -c | sed 's/^ *//')\n    #\n    # Hint: use the following\
    \ command to sort a list of strings\n    # by the lexicographical order:\n   \
    \ # sort -k1,1 <(echo \"$1\" | tr ' ' '\\n')\n    #\n    # Hint: use the following\
    \ command to sort a list of strings\n    # by the lexicographical order, but break\
    \ ties by the number of\n    # unique characters in each string:\n    # sort -k1,1\
    \ -k2,2 -t: -n <(echo \"$1\" | tr ' ' '\\n' | sed 's/.*/&:&/' | uniq -c | sed\
    \ 's/^ *//')\n    #\n    # Hint: use the following command to get the first string\
    \ in a list:\n    # head -n 1 <(echo \"$1\" | tr ' ' '\\n')\n    #\n    # Hint:\
    \ use the following command to get the last string in a list:\n    # tail -n 1\
    \ <(echo \"$1\" | tr ' ' '\\n')\n    #\n    # Hint: use the following command\
    \ to get the second string in a list:\n    # head -n 2 <(echo \"$1\" | tr ' '\
    \ '\\n') | tail -n 1\n    #\n    # Hint: use the following command to get the\
    \ second-to-last string in a list:\n    # tail -n 2 <(echo \"$1\" | tr ' ' '\\\
    n') | head -n 1\n    #\n    # Hint: use the following command to get the third\
    \ string in a list:\n    # head -n 3 <(echo \"$1\" | tr ' ' '\\n') | tail -n 1\n\
    \    #\n    # Hint: use the following command to get the third-to-last string\
    \ in a list:\n    # tail -n\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n \
    \   [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps_yqr7dz.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmps_yqr7dz.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\n  local max_count=0\n  for word in $1;\
    \ do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if\
    \ [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Split the list into an array\n    IFS=' ' read -r\
    \ -a arr <<< \"$1\"\n    # Initialize the variables\n    max_word=\"\"\n    max_count=0\n\
    \    # Loop through the array\n    for word in \"${arr[@]}\"; do\n        # Count\
    \ the number of unique characters in the word\n        count=$(echo -n \"$word\"\
    \ | grep -o . | sort -u | wc -l)\n        # If the count is greater than the maximum\
    \ count, update the variables\n        if [[ $count -gt $max_count ]]; then\n\
    \            max_word=\"$word\"\n            max_count=$count\n        # If the\
    \ count is equal to the maximum count, compare the words\n        elif [[ $count\
    \ -eq $max_count ]]; then\n            # If the word is less than the maximum\
    \ word, update the variables\n            if [[ \"$word\" < \"$max_word\" ]];\
    \ then\n                max_word=\"$word\"\n                max_count=$count\n\
    \            fi\n        fi\n    done\n    # Return the maximum word\n    echo\
    \ \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    local count=0\n\
    \    local word=\n    for word in $1; do\n        count=$(echo $word | grep -o\
    \ . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n     \
    \       max_count=$count\n            max_word=$word\n        fi\n    done\n \
    \   echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Split the list into an array\n    IFS=' ' read -r\
    \ -a array <<< \"$1\"\n    # Loop through the array\n    for i in \"${array[@]}\"\
    ; do\n        # Count the number of unique characters in the word\n        count=$(echo\
    \ \"$i\" | grep -o . | sort | uniq | wc -l)\n        # Check if the count is greater\
    \ than the previous max\n        if [[ $count -gt $max ]]; then\n            #\
    \ If so, update the max and the word\n            max=$count\n            word=$i\n\
    \        fi\n    done\n    # Return the word\n    echo \"$word\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=0\n    local max_word=\"\"\n    for word\
    \ in $1; do\n        local len=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort\
    \ -u | wc -l)\n        if [ $len -gt $max_len ]; then\n            max_len=$len\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use $1 to access the first argument to this\
    \ function\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbtw_5mbn.sh: line 177: syntax error near unexpected token `}''

    /tmp/tmpbtw_5mbn.sh: line 177: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # You can use the following\
    \ command to get the length of a string\n    # ${#string}\n    #\n    # You can\
    \ use the following command to get the length of a string\n    # ${#string}\n\
    \    #\n    # You can use the following command to get the length of a string\n\
    \    # ${#string}\n    #\n    # You can use the following command to get the length\
    \ of a string\n    # ${#string}\n    #\n    # You can use the following command\
    \ to get the length of a string\n    # ${#string}\n    #\n    # You can use the\
    \ following command to get the length of a string\n    # ${#string}\n    #\n \
    \   # You can use the following command to get the length of a string\n    # ${#string}\n\
    \    #\n    # You can use the following command to get the length of a string\n\
    \    # ${#string}\n    #\n    # You can use the following command to get the length\
    \ of a string\n    # ${#string}\n    #\n    # You can use the following command\
    \ to get the length of a string\n    # ${#string}\n    #\n    # You can use the\
    \ following command to get the length of a string\n    # ${#string}\n    #\n \
    \   # You can use the following command to get the length of a string\n    # ${#string}\n\
    \    #\n    # You can use the following command to get the length of a string\n\
    \    # ${#string}\n    #\n    # You can use the following command to get the length\
    \ of a string\n    # ${#string}\n    #\n    # You can use the following command\
    \ to get the length of a string\n    # ${#string}\n    #\n    # You can use the\
    \ following command to get the length of a string\n    # ${#string}\n    #\n \
    \   # You can use the following command to get the length of a string\n    # ${#string}\n\
    \    #\n    # You can use the following command to get the length of a string\n\
    \    # ${#string}\n    #\n    # You can use the following command to get the length\
    \ of a string\n    # ${#string}\n    #\n    # You can use the following command\
    \ to get\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"\
    name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\"\
    \ ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play\
    \ this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna\
    \ rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\"\
    \ ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate\
    \ \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmposi1h2gi.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmposi1h2gi.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Implement this function\n    # Hint: You can\
    \ use the following command to sort a list of strings\n    # by length:\n    #\
    \ sort -n -k1.4\n    #\n    # You can use the following command to sort a list\
    \ of strings\n    # by lexicographical order:\n    # sort -k1\n    #\n    # You\
    \ can use the following command to get the number of unique\n    # characters\
    \ in a string:\n    # echo \"string\" | fold -w1 | sort | uniq | wc -l\n    #\n\
    \    # You can use the following command to get the length of a string:\n    #\
    \ echo \"string\" | wc -c\n    #\n    # You can use the following command to get\
    \ the first word in a string:\n    # echo \"string\" | cut -d' ' -f1\n    #\n\
    \    # You can use the following command to get the rest of the words in a string:\n\
    \    # echo \"string\" | cut -d' ' -f2-\n    #\n    # You can use the following\
    \ command to get the first character in a string:\n    # echo \"string\" | cut\
    \ -c1\n    #\n    # You can use the following command to get the rest of the characters\
    \ in a string:\n    # echo \"string\" | cut -c2-\n    #\n    # You can use the\
    \ following command to get the first line in a string:\n    # echo \"string\"\
    \ | head -n1\n    #\n    # You can use the following command to get the rest of\
    \ the lines in a string:\n    # echo \"string\" | tail -n+2\n    #\n    # You\
    \ can use the following command to get the last character in a string:\n    #\
    \ echo \"string\" | rev | cut -c1 | rev\n    #\n    # You can use the following\
    \ command to get the first character in a string:\n    # echo \"string\" | rev\
    \ | cut -c2- | rev\n    #\n    # You can use the following command to get the\
    \ first word in a string:\n    # echo \"string\" | rev | cut -d' ' -f1 | rev\n\
    \    #\n    # You can use the following command to get the rest of the words in\
    \ a string:\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv_jkn6gp.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpv_jkn6gp.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Use echo to print\
    \ result\n    echo \"string\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | fold -w1 | sort -u | wc -l)\n   \
    \ if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    max_count=0\n    max_word=\"\
    \"\n    for word in $1; do\n        count=0\n        for (( i=0; i<${#word}; i++\
    \ )); do\n            char=${word:$i:1}\n            if [[ $word =~ $char ]];\
    \ then\n                count=$((count+1))\n            fi\n        done\n   \
    \     if [[ $count -gt $max_count ]]; then\n            max_count=$count\n   \
    \         max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: -1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # $1 is a space-separated list\n    # $2 is the word\
    \ with maximum number of unique characters\n    # $3 is the number of unique characters\
    \ in $2\n    find_max_helper() {\n        if [ -z \"$1\" ]; then\n           \
    \ echo \"$2\"\n            return\n        fi\n        local word=$(echo \"$1\"\
    \ | cut -d ' ' -f 1)\n        local rest=$(echo \"$1\" | cut -d ' ' -f 2-)\n \
    \       local num_unique=$(echo \"$word\" | fold -w1 | sort | uniq | wc -l)\n\
    \        if [ \"$num_unique\" -gt \"$3\" ]; then\n            find_max_helper\
    \ \"$rest\" \"$word\" \"$num_unique\"\n        elif [ \"$num_unique\" -eq \"$3\"\
    \ ]; then\n            if [ \"$word\" \\< \"$2\" ]; then\n                find_max_helper\
    \ \"$rest\" \"$word\" \"$num_unique\"\n            else\n                find_max_helper\
    \ \"$rest\" \"$2\" \"$3\"\n            fi\n        else\n            find_max_helper\
    \ \"$rest\" \"$2\" \"$3\"\n        fi\n    }\n    find_max_helper \"$1\" \"\"\
    \ 0\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
    \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
    \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this\
    \ game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\"\
    ) = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n\
    \    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\"\
    ) = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660018414
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Write your code here\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    local max=0\n    local\
    \ max_word=\"\"\n    for word in $1; do\n        local count=0\n        for ((i=0;\
    \ i<${#word}; i++)); do\n            local c=${word:$i:1}\n            if [[ $word\
    \ == *\"$c\"* ]]; then\n                count=$((count+1))\n            fi\n \
    \       done\n        if [[ $count -gt $max ]]; then\n            max=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo $word | fold -w1 | sort -u | wc -l)\n\
    \        if [ $chars -gt $max_chars ]; then\n            max_chars=$chars\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_unique_chars=0\n  local\
    \ word=\"\"\n  local unique_chars=0\n  for word in $1; do\n    unique_chars=$(echo\
    \ $word | grep -o . | sort | uniq | wc -l)\n    if [ $unique_chars -gt $max_unique_chars\
    \ ]; then\n      max_unique_chars=$unique_chars\n      max_word=$word\n    fi\n\
    \  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    max_word=\"\"\n    max_count=0\n    for word in $1;\
    \ do\n        count=$(echo $word | grep -o . | sort | uniq | wc -l)\n        if\
    \ [ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word\n  local max_count=0\n  for word in $1;\
    \ do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if\
    \ [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort the list\n    # sort -u\n    # Hint: use the following\
    \ command to get the length of a string\n    # ${#string}\n    # Hint: use the\
    \ following command to get the first character of a string\n    # ${string:0:1}\n\
    \    # Hint: use the following command to get the last character of a string\n\
    \    # ${string: -1}\n    # Hint: use the following command to get the substring\
    \ of a string\n    # ${string:start:length}\n    # Hint: use the following command\
    \ to get the index of a substring in a string\n    # expr index \"$string\" \"\
    $substring\"\n    # Hint: use the following command to get the length of a list\n\
    \    # ${#list[@]}\n    # Hint: use the following command to get the first element\
    \ of a list\n    # ${list[0]}\n    # Hint: use the following command to get the\
    \ last element of a list\n    # ${list[-1]}\n    # Hint: use the following command\
    \ to get the substring of a list\n    # ${list[@]:start:length}\n    # Hint: use\
    \ the following command to get the index of an element in a list\n    # ${list[@]/$element}\n\
    \    # Hint: use the following command to get the length of a list\n    # ${#list[@]}\n\
    \    # Hint: use the following command to get the first element of a list\n  \
    \  # ${list[0]}\n    # Hint: use the following command to get the last element\
    \ of a list\n    # ${list[-1]}\n    # Hint: use the following command to get the\
    \ substring of a list\n    # ${list[@]:start:length}\n    # Hint: use the following\
    \ command to get the index of an element in a list\n    # ${list[@]/$element}\n\
    \    # Hint: use the following command to get the length of a list\n    # ${#list[@]}\n\
    \    # Hint: use the following command to get the first element of a list\n  \
    \  # ${list[0]}\n    # Hint: use the following command to\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwsdpwobz.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpwsdpwobz.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max=0\n    local max_word=\"\"\n    for word in\
    \ $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $count -gt $max ]; then\n            max=$count\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ count=0\n    local word=\"\"\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    max=0\n    max_word=\"\"\
    \n    for word in $1; do\n        unique_chars=`echo $word | grep -o . | sort\
    \ | uniq | wc -l`\n        if [ $unique_chars -gt $max ]; then\n            max=$unique_chars\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # your code here\n    echo \"Not implemented\"\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort a list of strings\n    # by their length:\n    # sort\
    \ -n -k 1.1,1.1 -k 1.3,1.3 <<< \"$1\"\n    #\n    # Hint: use the following command\
    \ to sort a list of strings\n    # by their lexicographical order:\n    # sort\
    \ <<< \"$1\"\n    #\n    # Hint: use the following command to count the number\
    \ of unique\n    # characters in a string:\n    # tr -dc 'a-zA-Z' <<< \"$1\" |\
    \ wc -c\n    #\n    # Hint: use the following command to get the first word in\
    \ a string:\n    # cut -d ' ' -f 1 <<< \"$1\"\n    #\n    # Hint: use the following\
    \ command to get the rest of the words in a string:\n    # cut -d ' ' -f 2- <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the first word in\
    \ a string:\n    # cut -d ' ' -f 1 <<< \"$1\"\n    #\n    # Hint: use the following\
    \ command to get the rest of the words in a string:\n    # cut -d ' ' -f 2- <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the first word in\
    \ a string:\n    # cut -d ' ' -f 1 <<< \"$1\"\n    #\n    # Hint: use the following\
    \ command to get the rest of the words in a string:\n    # cut -d ' ' -f 2- <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the first word in\
    \ a string:\n    # cut -d ' ' -f 1 <<< \"$1\"\n    #\n    # Hint: use the following\
    \ command to get the rest of the words in a string:\n    # cut -d ' ' -f 2- <<<\
    \ \"$1\"\n    #\n    # Hint: use the following command to get the first word in\
    \ a string:\n    # cut -d ' ' -f 1 <<< \"$1\"\n    #\n    # Hint\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpahh7iw3o.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpahh7iw3o.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # split the list into an array\n    IFS=\" \" read -r\
    \ -a array <<< \"$1\"\n    # initialize the max_word variable\n    max_word=\"\
    \"\n    # initialize the max_count variable\n    max_count=0\n    # iterate over\
    \ the array\n    for word in \"${array[@]}\"; do\n        # get the number of\
    \ unique characters in the word\n        count=$(echo \"$word\" | fold -w1 | sort\
    \ -u | wc -l)\n        # if the number of unique characters is greater than the\
    \ max_count\n        if [ \"$count\" -gt \"$max_count\" ]; then\n            #\
    \ set the max_count to the number of unique characters\n            max_count=\"\
    $count\"\n            # set the max_word to the word\n            max_word=\"\
    $word\"\n        # if the number of unique characters is equal to the max_count\n\
    \        elif [ \"$count\" -eq \"$max_count\" ]; then\n            # if the word\
    \ is lexicographically less than the max_word\n            if [ \"$word\" \\<\
    \ \"$max_word\" ]; then\n                # set the max_word to the word\n    \
    \            max_word=\"$word\"\n            fi\n        fi\n    done\n    # print\
    \ the max_word\n    echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: you can\
    \ use the following command to sort the list\n    # by the number of unique characters:\n\
    \    # sort -u -k2,2 -t' ' -r\n    #\n    # Hint: you can use the following command\
    \ to sort the list\n    # by lexicographical order:\n    # sort -k1,1 -t' '\n\
    \    #\n    # Hint: you can use the following command to get the first\n    #\
    \ word in the list:\n    # cut -d' ' -f1\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\" | tr -d ' ' | wc -c\n    #\n    # Hint: you can use the following\
    \ command to get the number\n    # of unique characters in a word:\n    # echo\
    \ -n \"$1\"\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbiqcdrrg.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpbiqcdrrg.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g' | sort | uniq\
    \ | wc -l)\n    if [ $count -gt $max_count ]; then\n      max_count=$count\n \
    \     max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n \
    \   find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\"\
    ) = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    # Hint: use the\
    \ following command to sort a list of strings\n    # in lexicographical order:\n\
    \    # sort -k1,1V -k2,2V -k3,3V -k4,4V -k5,5V -k6,6V -k7,7V -k8,8V -k9,9V\n \
    \   #\n    # Hint: use the following command to sort a list of strings\n    #\
    \ by the length of each string:\n    # sort -k1,1n -k2,2n -k3,3n -k4,4n -k5,5n\
    \ -k6,6n -k7,7n -k8,8n -k9,9n\n    #\n    # Hint: use the following command to\
    \ sort a list of strings\n    # by the number of unique characters in each string:\n\
    \    # sort -k1,1u -k2,2u -k3,3u -k4,4u -k5,5u -k6,6u -k7,7u -k8,8u -k9,9u\n \
    \   #\n    # Hint: use the following command to sort a list of strings\n    #\
    \ by the number of unique characters in each string,\n    # and then by the length\
    \ of each string:\n    # sort -k1,1u -k2,2u -k3,3u -k4,4u -k5,5u -k6,6u -k7,7u\
    \ -k8,8u -k9,9u -k1,1n -k2,2n -k3,3n -k4,4n -k5,5n -k6,6n -k7,7n -k8,8n -k9,9n\n\
    \    #\n    # Hint: use the following command to sort a list of strings\n    #\
    \ by the number of unique characters in each string,\n    # and then by the length\
    \ of each string,\n    # and then by the lexicographical order of each string:\n\
    \    # sort -k1,1u -k2,2u -k3,3u -k4,4u\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw3hqf4kj.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpw3hqf4kj.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    local\
    \ word=\"\"\n    local count=0\n    for word in $1; do\n        count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    echo \"TODO\"\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # NOTE: For your solution to be graded correctly,\n\
    \    # you need to save the value of the longest word\n    # into the variable\
    \ called `result`\n    result=\n    echo $result\n}\n\ncandidate() {\n    find_max\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") =\
    \ \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[\
    \ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\"\
    ) = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\"\
    \ ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate\
    \ \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo \"$word\" | grep -o . | sort | uniq | wc -l)\n\
    \    if [[ $count -gt $max_count ]]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo \"$max_word\"\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    # You can use the following\
    \ command to get the number of unique characters\n    # in a string:\n    # $(echo\
    \ $string | fold -w1 | sort -u | wc -l)\n    #\n    # You can use the following\
    \ command to sort the list of strings\n    # lexicographically:\n    # $(echo\
    \ $list | tr ' ' '\\n' | sort -u)\n    #\n    # You can use the following command\
    \ to sort the list of strings\n    # by the number of unique characters:\n   \
    \ # $(echo $list | tr ' ' '\\n' | sort -k2 -n)\n    #\n    # You can use the following\
    \ command to get the first string in a list:\n    # $(echo $list | cut -d' ' -f1)\n\
    \    #\n    # You can use the following command to get the second string in a\
    \ list:\n    # $(echo $list | cut -d' ' -f2)\n    #\n    # You can use the following\
    \ command to get the third string in a list:\n    # $(echo $list | cut -d' ' -f3)\n\
    \    #\n    # You can use the following command to get the fourth string in a\
    \ list:\n    # $(echo $list | cut -d' ' -f4)\n    #\n    # You can use the following\
    \ command to get the fifth string in a list:\n    # $(echo $list | cut -d' ' -f5)\n\
    \    #\n    # You can use the following command to get the sixth string in a list:\n\
    \    # $(echo $list | cut -d' ' -f6)\n    #\n    # You can use the following command\
    \ to get the seventh string in a list:\n    # $(echo $list | cut -d' ' -f7)\n\
    \    #\n    # You can use the following command to get the eighth string in a\
    \ list:\n    # $(echo $list | cut -d' ' -f8)\n    #\n    # You can use the following\
    \ command to get the ninth string in a list:\n    # $(echo $list | cut -d' ' -f9)\n\
    \    #\n    # You can use the following command to get the tenth string in a list:\n\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp63smxtq7.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmp63smxtq7.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    local max_word=\"\"\
    \n    local max_count=0\n    for word in $1; do\n        local count=$(echo $word\
    \ | grep -o . | sort | uniq | wc -l)\n        if [[ $count -gt $max_count ]];\
    \ then\n            max_count=$count\n            max_word=$word\n        fi\n\
    \    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    # Please use find_max\
    \ to declare your function\n    # and use $1 to access the first argument to this\
    \ function\n    max=0\n    max_word=\"\"\n    for word in $1; do\n        unique_chars=`echo\
    \ $word | fold -w1 | sort | uniq | wc -l`\n        if [ $unique_chars -gt $max\
    \ ]; then\n            max=$unique_chars\n            max_word=$word\n       \
    \ fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # TODO: Write your code here\n  max_word=\"\"\n  max_count=0\n\
    \  for word in $1; do\n    count=0\n    for (( i=0; i<${#word}; i++ )); do\n \
    \     char=${word:$i:1}\n      if [[ $word =~ $char ]]; then\n        count=$((\
    \ count + 1 ))\n      fi\n    done\n    if [[ $count -gt $max_count ]]; then\n\
    \      max_count=$count\n      max_word=$word\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp11hmpdvw.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmp11hmpdvw.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Your code here\n    echo \"TODO\"\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_chars=0\n  for word in\
    \ $1; do\n    local chars=0\n    for ((i=0; i<${#word}; i++)); do\n      local\
    \ char=${word:$i:1}\n      if [[ \"${word:0:$i}\" != *$char* ]]; then\n      \
    \  ((chars++))\n      fi\n    done\n    if [[ $chars -gt $max_chars ]]; then\n\
    \      max_chars=$chars\n      max_word=$word\n    fi\n  done\n  echo $max_word\n\
    }\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: Write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=''\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_chars=0\n    for\
    \ word in $1; do\n        local chars=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $chars -gt $max_chars ]; then\n            max_chars=$chars\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_len=0\n    for word\
    \ in $1; do\n        local len=$(echo -n $word | grep -o . | sort | uniq | wc\
    \ -l)\n        if [[ $len -gt $max_len ]]; then\n            max_len=$len\n  \
    \          max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo $word | fold -w1 |\
    \ sort | uniq | wc -l)\n        if [ $unique_chars -gt $max_unique_chars ]; then\n\
    \            max_unique_chars=$unique_chars\n            max_word=$word\n    \
    \    fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # your code here\n    echo \"name of string\" | tr '\
    \ ' '\\n' | sort -u | tr '\\n' ' '\n}\n\ncandidate() {\n    find_max \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_unique_chars=0\n\
    \    for word in $1; do\n        local unique_chars=$(echo $word | grep -o . |\
    \ sort | uniq | wc -l)\n        if [[ $unique_chars -gt $max_unique_chars ]];\
    \ then\n            max_unique_chars=$unique_chars\n            max_word=$word\n\
    \        fi\n    done\n    echo $max_word\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    # Hint: use the following\
    \ command to sort the list\n    # sort -u -k1,1 -k2,2n -k3,3n -k4,4n -k5,5n -k6,6n\
    \ -k7,7n -k8,8n -k9,9n\n    # Hint: use the following command to get the length\
    \ of a string\n    # ${#string}\n    # Hint: use the following command to get\
    \ the first character of a string\n    # ${string:0:1}\n    # Hint: use the following\
    \ command to get the substring of a string\n    # ${string:start:length}\n   \
    \ # Hint: use the following command to get the index of a substring in a string\n\
    \    # expr index \"$string\" \"$substring\"\n    # Hint: use the following command\
    \ to get the length of a list\n    # ${#list[@]}\n    # Hint: use the following\
    \ command to get the first element of a list\n    # ${list[0]}\n    # Hint: use\
    \ the following command to get the last element of a list\n    # ${list[-1]}\n\
    \    # Hint: use the following command to get the substring of a list\n    # ${list[@]:start:length}\n\
    \    # Hint: use the following command to get the index of an element in a list\n\
    \    # ${list[@]/$element}\n    # Hint: use the following command to get the length\
    \ of a list\n    # ${#list[@]}\n    # Hint: use the following command to get the\
    \ first element of a list\n    # ${list[0]}\n    # Hint: use the following command\
    \ to get the last element of a list\n    # ${list[-1]}\n    # Hint: use the following\
    \ command to get the substring of a list\n    # ${list[@]:start:length}\n    #\
    \ Hint: use the following command to get the index of an element in a list\n \
    \   # ${list[@]/$element}\n    # Hint: use the following command to get the length\
    \ of a list\n    # ${#list[@]}\n    # Hint: use the following command\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqg1ae2g2.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpqg1ae2g2.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max=0\n  local max_word=\"\"\n  for word in $1;\
    \ do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n    if\
    \ [ $count -gt $max ]; then\n      max=$count\n      max_word=$word\n    fi\n\
    \  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_unique_chars=0\n  for\
    \ word in $1; do\n    local unique_chars=$(echo $word | grep -o . | sort | uniq\
    \ | wc -l)\n    if [[ $unique_chars -gt $max_unique_chars ]]; then\n      max_unique_chars=$unique_chars\n\
    \      max_word=$word\n    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n\
    \    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of\
    \ string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\n    local max_count=0\n    for word\
    \ in $1; do\n        local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | grep -o . | sort | uniq\
    \ | wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | fold -w1 | sort | uniq |\
    \ wc -l)\n        if [[ $count -gt $max_count ]]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo $word | sed 's/\\(.\\)/\\1\\n/g'\
    \ | sort -u | wc -l)\n        if [[ $count -gt $max_count ]]; then\n         \
    \   max_count=$count\n            max_word=$word\n        fi\n    done\n    echo\
    \ $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate\
    \ \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"\
    aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate\
    \ \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are\
    \ gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") =\
    \ \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n  local max_word=\"\"\n  local max_count=0\n  for word in\
    \ $1; do\n    local count=$(echo $word | grep -o . | sort | uniq | wc -l)\n  \
    \  if [ $count -gt $max_count ]; then\n      max_count=$count\n      max_word=$word\n\
    \    fi\n  done\n  echo $max_word\n}\n\ncandidate() {\n    find_max \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\" ]]\n\
    \    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa\
    \ bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\" ]]\n  \
    \  [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n    [[ $(candidate\
    \ \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\"\
    ) = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[\
    \ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Your code here\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n   \n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb4hmna92.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmpb4hmna92.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_len=0\n    local max_word=\"\"\n    for word\
    \ in $1; do\n        local len=$(echo $word | grep -o . | sort | uniq | wc -l)\n\
    \        if [ $len -gt $max_len ]; then\n            max_len=$len\n          \
    \  max_word=$word\n        fi\n    done\n    echo $max_word\n}\n\ncandidate()\
    \ {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name\
    \ of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\") = \"enam\"\
    \ ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate\
    \ \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of footbott\"\
    ) = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n\
    \    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate\
    \ \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n  \
    \  [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    local max_word=\"\"\n    local max_count=0\n    for\
    \ word in $1; do\n        local count=$(echo \"$word\" | fold -w1 | sort -u |\
    \ wc -l)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n\
    \            max_word=$word\n        fi\n    done\n    echo \"$max_word\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # Write your code here\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\n}\n\n\
    candidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph1qklfnq.sh: line 185: syntax error near unexpected token `}''

    /tmp/tmph1qklfnq.sh: line 185: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 2
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: implement this function\n    #\n    # Hint:\n\
    \    #   - use `tr` to remove spaces\n    #   - use `sort` to sort the characters\
    \ in a string\n    #   - use `uniq` to remove duplicates\n    #   - use `wc` to\
    \ count the number of lines\n    #   - use `cut` to extract the first field\n\
    \    #   - use `sort` to sort the list of words\n    #   - use `head` to get the\
    \ first word\n    #\n    # Hint:\n    #   - use `echo` to print the output\n \
    \   #   - use `exit` to exit the script\n    #\n    # Hint:\n    #   - use `$(...)`\
    \ to execute a command\n    #   - use `$1` to get the first argument\n    #  \
    \ - use `$2` to get the second argument\n    #   - use `$3` to get the third argument\n\
    \    #   - use `$4` to get the fourth argument\n    #   - use `$5` to get the\
    \ fifth argument\n    #   - use `$6` to get the sixth argument\n    #   - use\
    \ `$7` to get the seventh argument\n    #   - use `$8` to get the eighth argument\n\
    \    #   - use `$9` to get the ninth argument\n    #   - use `${10}` to get the\
    \ tenth argument\n    #   - use `${11}` to get the eleventh argument\n    #  \
    \ - use `${12}` to get the twelfth argument\n    #   - use `${13}` to get the\
    \ thirteenth argument\n    #   - use `${14}` to get the fourteenth argument\n\
    \    #   - use `${15}` to get the fifteenth argument\n    #   - use `${16}` to\
    \ get the sixteenth argument\n    #   - use `${17}` to get the seventeenth argument\n\
    \    #   - use `${18}` to get the eighteenth argument\n    #   - use `${19}` to\
    \ get the nineteenth argument\n    #   - use `${20}` to get the twentieth argument\n\
    \    #   - use `${21}` to get the twenty\n}\n\ncandidate() {\n    find_max \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"name of string\") = \"string\"\
    \ ]]\n    [[ $(candidate \"name enam game\") = \"enam\" ]]\n    [[ $(candidate\
    \ \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[ $(candidate \"abc cba\") = \"abc\"\
    \ ]]\n    [[ $(candidate \"play this game of footbott\") = \"footbott\" ]]\n \
    \   [[ $(candidate \"we are gonna rock\") = \"gonna\" ]]\n    [[ $(candidate \"\
    we are a mad nation\") = \"nation\" ]]\n    [[ $(candidate \"this is a prrk\"\
    ) = \"this\" ]]\n    [[ $(candidate \"b\") = \"b\" ]]\n    [[ $(candidate \"play\
    \ play play\") = \"play\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpawbzf4zb.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpawbzf4zb.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660018409
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The\
    \ list contains different words. Return the word with maximum number\n# of unique\
    \ characters. If multiple strings have maximum number of unique\n# characters,\
    \ return the one which comes first in lexicographical order.\n# >>> $(find_max\
    \ \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"\
    enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated\
    \ list\nfind_max() {\n    # TODO: write your code here\n    echo \"TODO\"\n}\n\
    \ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam game\")\
    \ = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n    [[\
    \ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game of\
    \ footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") = \"\
    gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n    [[\
    \ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") = \"\
    b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018409
