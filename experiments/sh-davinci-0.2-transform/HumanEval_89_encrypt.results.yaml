language: sh
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function ord and chr\n    # Hint: use the function\
    \ ord and chr\n    # Hint: use the function\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpecvjjy54.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpecvjjy54.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo \"$1\" | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet.\n\
    \    # Hint: You can use the ord and chr functions to convert between characters\
    \ and their ASCII values.\n    # Hint: You can use the echo command to print to\
    \ standard output.\n    # Hint: You can use the seq command to generate a sequence\
    \ of numbers.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the bc command to do floating point arithmetic.\n   \
    \ # Hint: You can use the expr command to do integer arithmetic.\n    # Hint:\
    \ You can use the printf command to format strings.\n    # Hint: You can use the\
    \ read command to read from standard input.\n    # Hint: You can use the set command\
    \ to set variables.\n    # Hint: You can use the local command to create local\
    \ variables.\n    # Hint: You can use the return command to return a value.\n\
    \    # Hint: You can use the exit command to exit the script.\n    # Hint: You\
    \ can use the readonly command to make variables read-only.\n    # Hint: You can\
    \ use the declare command to declare variables and give them attributes.\n   \
    \ # Hint: You can use the typeset command to give variables attributes.\n    #\
    \ Hint: You can use the unset command to remove variables.\n    # Hint: You can\
    \ use the export command to export variables to child processes.\n    # Hint:\
    \ You can use the readarray command to read lines from files into an array.\n\
    \    # Hint: You can use the mapfile command to read lines from files into an\
    \ array.\n    # Hint: You can use the declare command to give an array elements.\n\
    \    # Hint: You can use the local command to create local arrays.\n    # Hint:\
    \ You can use the unset command to remove array elements.\n    # Hint: You can\
    \ use the export command to export arrays to child processes.\n    # Hint: You\
    \ can use the read command to read into an array.\n    # Hint: You can use the\
    \ set command to set array elements.\n    # Hint: You can use the shift command\
    \ to remove an element from the beginning of an array.\n   \n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfo5dpr0k.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpfo5dpr0k.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo \"$1\" | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    # Hint: use the echo command\n\
    \    # Hint: use the $1 variable\n    # Hint: use the $2 variable\n    # Hint:\
    \ use the $3 variable\n    # Hint: use the $4 variable\n    # Hint: use the $5\
    \ variable\n    # Hint: use the $6 variable\n    # Hint: use the $7 variable\n\
    \    # Hint: use the $8 variable\n    # Hint: use the $9 variable\n    # Hint:\
    \ use the ${10} variable\n    # Hint: use the ${11} variable\n    # Hint: use\
    \ the ${12} variable\n    # Hint: use the ${13} variable\n    # Hint: use the\
    \ ${14} variable\n    # Hint: use the ${15} variable\n    # Hint: use the ${16}\
    \ variable\n    # Hint: use the ${17} variable\n    # Hint: use the ${18} variable\n\
    \    # Hint: use the ${19} variable\n    # Hint: use the ${20} variable\n    #\
    \ Hint: use the ${21} variable\n    # Hint: use the ${22} variable\n    # Hint:\
    \ use the ${23} variable\n    # Hint: use the ${24} variable\n    # Hint: use\
    \ the ${25} variable\n    # Hint: use the ${26} variable\n    # Hint: use the\
    \ ${27} variable\n    # Hint: use the ${28} variable\n    # Hint: use the ${29}\
    \ variable\n    # Hint: use the ${30} variable\n    # Hint: use the ${31} variable\n\
    \    # Hint: use the ${32} variable\n    # Hint: use the ${33} variable\n    #\
    \ Hint: use the ${34} variable\n    # Hint: use the ${35} variable\n    # Hint:\
    \ use the ${36} variable\n    # Hint: use the ${37} variable\n    # Hint: use\
    \ the ${38} variable\n    # Hint: use the ${39} variable\n    # Hint: use the\
    \ ${40} variable\n    # Hint: use the ${41} variable\n}\n\ncandidate() {\n   \
    \ encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\"\
    \ ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3cpjq0_m.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp3cpjq0_m.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    #       For example:\n  \
    \  #       >>> $(ord \"a\")\n    #       97\n    #       >>> $(chr 97)\n    #\
    \       \"a\"\n    #       >>> $(ord \"b\")\n    #       98\n    #       >>> $(chr\
    \ 98)\n    #       \"b\"\n    #       >>> $(ord \"c\")\n    #       99\n    #\
    \       >>> $(chr 99)\n    #       \"c\"\n    #       >>> $(ord \"d\")\n    #\
    \       100\n    #       >>> $(chr 100)\n    #       \"d\"\n    #       >>> $(ord\
    \ \"e\")\n    #       101\n    #       >>> $(chr 101)\n    #       \"e\"\n   \
    \ #       >>> $(ord \"f\")\n    #       102\n    #       >>> $(chr 102)\n    #\
    \       \"f\"\n    #       >>> $(ord \"g\")\n    #       103\n    #       >>>\
    \ $(chr 103)\n    #       \"g\"\n    #       >>> $(ord \"h\")\n    #       104\n\
    \    #       >>> $(chr 104)\n    #       \"h\"\n    #       >>> $(ord \"i\")\n\
    \    #       105\n    #       >>> $(chr 105)\n    #       \"i\"\n    #       >>>\
    \ $(ord \"j\")\n    #       106\n    #       >>> $(chr 106)\n    #       \"j\"\
    \n    #       >>> $(ord \"k\")\n    #       107\n    #       >>> $(chr 107)\n\
    \    #       \"k\"\n    #       >>> $(ord \"l\")\n    #       108\n    #     \
    \  >>> $(chr 108)\n    #       \"l\"\n    #       >>> $(ord \"m\")\n    #    \
    \   109\n    #       >>> $(chr 109)\n    #       \"m\"\n    #       >>> $(ord\
    \ \"n\")\n    #       110\n    #       >>> $(chr 110)\n    #       \"n\"\n   \
    \ #       >>> $(ord \"o\")\n    #       111\n    #       >>>\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcsqwigos.sh: line 81: syntax error near unexpected token `}''

    /tmp/tmpcsqwigos.sh: line 81: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    # Hint: You may want to use the ord and chr functions\n    # ord takes a\
    \ character and returns its ASCII code\n    # chr takes an ASCII code and returns\
    \ its character\n    # Example:\n    # >>> ord \"a\"\n    # 97\n    # >>> chr\
    \ 97\n    # \"a\"\n    # >>> chr $(($(ord \"a\") + 1))\n    # \"b\"\n    # >>>\
    \ chr $(($(ord \"a\") + 2))\n    # \"c\"\n    # >>> chr $(($(ord \"a\") + 3))\n\
    \    # \"d\"\n    # >>> chr $(($(ord \"a\") + 4))\n    # \"e\"\n    # >>> chr\
    \ $(($(ord \"a\") + 5))\n    # \"f\"\n    # >>> chr $(($(ord \"a\") + 6))\n  \
    \  # \"g\"\n    # >>> chr $(($(ord \"a\") + 7))\n    # \"h\"\n    # >>> chr $(($(ord\
    \ \"a\") + 8))\n    # \"i\"\n    # >>> chr $(($(ord \"a\") + 9))\n    # \"j\"\n\
    \    # >>> chr $(($(ord \"a\") + 10))\n    # \"k\"\n    # >>> chr $(($(ord \"\
    a\") + 11))\n    # \"l\"\n    # >>> chr $(($(ord \"a\") + 12))\n    # \"m\"\n\
    \    # >>> chr $(($(ord \"a\") + 13))\n    # \"n\"\n    # >>> chr $(($(ord \"\
    a\") + 14))\n    # \"o\"\n    # >>> chr $(($(ord \"a\") + 15))\n    # \"p\"\n\
    \    # >>> chr $(($(ord \"a\") + 16))\n    # \"q\"\n    # >>> chr $(($(ord \"\
    a\") + 17))\n    # \"r\"\n    # >>> chr $(($(ord \"a\") + 18))\n    # \"s\"\n\
    \    # >>> chr $(($(ord \"a\") + 19))\n    # \"t\"\n    # >>> chr $(($(ord \"\
    a\")\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\"\
    \ ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"\
    ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[\
    \ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnffn6xac.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpnffn6xac.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the first argument\n    # Hint: Use the $2 variable to access the second\
    \ argument\n    # Hint: Use the $3 variable to access the third argument\n   \
    \ # Hint: Use the $4 variable to access the fourth argument\n    # Hint: Use the\
    \ $5 variable to access the fifth argument\n    # Hint: Use the $6 variable to\
    \ access the sixth argument\n    # Hint: Use the $7 variable to access the seventh\
    \ argument\n    # Hint: Use the $8 variable to access the eighth argument\n  \
    \  # Hint: Use the $9 variable to access the ninth argument\n    # Hint: Use the\
    \ ${10} variable to access the tenth argument\n    # Hint: Use the ${11} variable\
    \ to access the eleventh argument\n    # Hint: Use the ${12} variable to access\
    \ the twelfth argument\n    # Hint: Use the ${13} variable to access the thirteenth\
    \ argument\n    # Hint: Use the ${14} variable to access the fourteenth argument\n\
    \    # Hint: Use the ${15} variable to access the fifteenth argument\n    # Hint:\
    \ Use the ${16} variable to access the sixteenth argument\n    # Hint: Use the\
    \ ${17} variable to access the seventeenth argument\n    # Hint: Use the ${18}\
    \ variable to access the eighteenth argument\n    # Hint: Use the ${19} variable\
    \ to access the nineteenth argument\n    # Hint: Use the ${20} variable to access\
    \ the twentieth argument\n    # Hint: Use the ${21} variable to access the twenty-first\
    \ argument\n    # Hint: Use the ${22} variable to access the twenty-second argument\n\
    \    # Hint: Use the ${23} variable to access the twenty-third argument\n    #\
    \ Hint: Use the ${24} variable to access the twenty-fourth argument\n    # Hint:\
    \ Use the ${25} variable to access the twenty-fifth argument\n    # Hint: Use\
    \ the ${26} variable to access the twenty-sixth argument\n    # Hint: Use the\
    \ ${27} variable to access the twenty-seventh argument\n   \n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8k9xnjqi.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmp8k9xnjqi.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulus operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the built-in\
    \ string concatenation operator to\n    #       concatenate strings\n    # Hint:\
    \ You can use the built-in string indexing operator to access\n    #       characters\
    \ in a string\n    # Hint: You can use the built-in string slicing operator to\
    \ extract\n    #       substrings from a string\n    # Hint: You can use the built-in\
    \ string length operator to get the\n    #       length of a string\n    # Hint:\
    \ You can use the built-in string comparison operators to compare\n    #     \
    \  strings\n    # Hint: You can use the built-in string assignment operator to\
    \ assign\n    #       values to variables\n    # Hint: You can use the built-in\
    \ arithmetic operators to perform\n    #       arithmetic\n    # Hint: You can\
    \ use the built-in logical operators to perform\n    #       logical operations\n\
    \    # Hint: You can use the built-in if statement to perform conditional\n  \
    \  #       execution\n    # Hint: You can use the built-in for loop to iterate\
    \ over a sequence\n    # Hint: You can use the built-in while loop to iterate\
    \ until a condition\n    #       is met\n    # Hint: You can use the built-in\
    \ break statement to break out of a loop\n    # Hint: You can use the built-in\
    \ continue statement to skip to the next\n    #       iteration of a loop\n  \
    \  # Hint: You can use the built-in return statement to return a value\n    #\
    \ Hint: You can use the built-in echo statement to print a value\n    # Hint:\
    \ You can use the built-in read statement to read input from the\n    #      \
    \ user\n    # Hint: You can use the built-in printf statement to format output\n\
    \    # Hint: You can use the built-in seq statement to generate a sequence\n \
    \   # Hint: You can use the built-in tr statement to translate characters\n  \
    \  # Hint: You can use the built-in sort statement to sort\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq425n_59.sh: line 54: syntax error near unexpected token `}''

    /tmp/tmpq425n_59.sh: line 54: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo \"Write your code here\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord and chr functions to convert between\n    # \
    \      characters and their ASCII values\n    # Hint: You can use the echo -n\
    \ command to print without a newline\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the seq command to generate a\
    \ range of numbers\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the fold command to wrap lines at a certain width\n \
    \   # Hint: You can use the rev command to reverse lines of text\n    # Hint:\
    \ You can use the sort command to sort lines of text\n    # Hint: You can use\
    \ the uniq command to remove duplicate lines of text\n    # Hint: You can use\
    \ the wc command to count the number of lines, words,\n    #       and characters\n\
    \    # Hint: You can use the head command to print the first few lines of text\n\
    \    # Hint: You can use the tail command to print the last few lines of text\n\
    \    # Hint: You can use the diff command to compare two files\n    # Hint: You\
    \ can use the grep command to search for text\n    # Hint: You can use the sed\
    \ command to search and replace text\n    # Hint: You can use the cut command\
    \ to extract columns of text\n    # Hint: You can use the tr command to translate\
    \ characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    #\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ikdgomw.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp3ikdgomw.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm3h6w7ir.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpm3h6w7ir.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: write your\
    \ code here\n    # Hint: you can use the tr command to translate characters\n\
    \    # in a string. For example:\n    # >>> echo \"hi\" | tr \"a-z\" \"b-za\"\n\
    \    # \"ij\"\n    # >>> echo \"hi\" | tr \"a-z\" \"c-za-b\"\n    # \"jk\"\n \
    \   # >>> echo \"hi\" | tr \"a-z\" \"d-za-c\"\n    # \"kl\"\n    # >>> echo \"\
    hi\" | tr \"a-z\" \"e-za-d\"\n    # \"lm\"\n    # >>> echo \"hi\" | tr \"a-z\"\
    \ \"f-za-e\"\n    # \"mn\"\n    # >>> echo \"hi\" | tr \"a-z\" \"g-za-f\"\n  \
    \  # \"no\"\n    # >>> echo \"hi\" | tr \"a-z\" \"h-za-g\"\n    # \"op\"\n   \
    \ # >>> echo \"hi\" | tr \"a-z\" \"i-za-h\"\n    # \"pq\"\n    # >>> echo \"hi\"\
    \ | tr \"a-z\" \"j-za-i\"\n    # \"qr\"\n    # >>> echo \"hi\" | tr \"a-z\" \"\
    k-za-j\"\n    # \"rs\"\n    # >>> echo \"hi\" | tr \"a-z\" \"l-za-k\"\n    # \"\
    st\"\n    # >>> echo \"hi\" | tr \"a-z\" \"m-za-l\"\n    # \"tu\"\n    # >>> echo\
    \ \"hi\" | tr \"a-z\" \"n-za-m\"\n    # \"uv\"\n    # >>> echo \"hi\" | tr \"\
    a-z\" \"o-za-n\"\n    # \"vw\"\n    # >>> echo \"hi\" | tr \"a-z\" \"p-za-o\"\n\
    \    # \"wx\"\n    # >>> echo \"hi\" | tr \"a-z\" \"q-za-p\"\n    # \"xy\"\n \
    \   # >>> echo \"hi\" | tr \"a-z\" \"r-za-q\"\n    # \"\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx3i2_jot.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpx3i2_jot.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement me\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord and chr functions to convert between\n    #    \
    \   characters and their ASCII values\n    # Hint: You can use the echo -n command\
    \ to print without a newline\n    # Hint: You can use the tr command to translate\
    \ characters\n    # Hint: You can use the fold command to wrap lines\n    # Hint:\
    \ You can use the rev command to reverse lines\n    # Hint: You can use the sort\
    \ command to sort lines\n    # Hint: You can use the uniq command to remove duplicate\
    \ lines\n    # Hint: You can use the head command to get the first line\n    #\
    \ Hint: You can use the tail command to get all but the first line\n    # Hint:\
    \ You can use the wc command to count lines\n    # Hint: You can use the cut command\
    \ to get a range of characters\n    # Hint: You can use the seq command to generate\
    \ a sequence of numbers\n    # Hint: You can use the paste command to merge lines\n\
    \    # Hint: You can use the tr command to delete characters\n    # Hint: You\
    \ can use the tr command to squeeze repeated characters\n    # Hint: You can use\
    \ the tr command to translate characters\n    # Hint: You can use the tr command\
    \ to complement characters\n    # Hint: You can use the tr command to translate\
    \ characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    #\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjfmpxsn2.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpjfmpxsn2.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       in a string. For example:\n    #       echo \"hello\" | tr \"a-z\"\
    \ \"b-za\"\n    #       will translate all characters in the string \"hello\"\n\
    \    #       to the next character in the alphabet.\n    #       The above command\
    \ will output \"ifmmp\"\n    #       You can also use the tr command to translate\
    \ characters\n    #       in a string to a range of characters. For example:\n\
    \    #       echo \"hello\" | tr \"a-z\" \"c-za-b\"\n    #       will translate\
    \ all characters in the string \"hello\"\n    #       to the character that is\
    \ two places before it in the\n    #       alphabet. The above command will output\
    \ \"fcjjm\"\n    #       You can also use the tr command to translate characters\n\
    \    #       in a string to a range of characters. For example:\n    #       echo\
    \ \"hello\" | tr \"a-z\" \"c-za-b\"\n    #       will translate all characters\
    \ in the string \"hello\"\n    #       to the character that is two places before\
    \ it in the\n    #       alphabet. The above command will output \"fcjjm\"\n \
    \   #       You can also use the tr command to translate characters\n    #   \
    \    in a string to a range of characters. For example:\n    #       echo \"hello\"\
    \ | tr \"a-z\" \"c-za-b\"\n    #       will translate all characters in the string\
    \ \"hello\"\n    #       to the character that is two places before it in the\n\
    \    #       alphabet. The above command will output \"fcjjm\"\n    #       You\
    \ can also use the tr command to translate characters\n    #       in a string\
    \ to a range of characters. For example:\n    #       echo \"hello\" | tr \"a-z\"\
    \ \"c-za-b\"\n    #       will translate all characters in the string \"hello\"\
    \n    #       to the character that is two places before it in the\n    #    \
    \   alphabet. The above command will output \"fcjjm\"\n    #       You can also\
    \ use the tr command to translate characters\n    #       in a string to a range\
    \ of characters. For\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm79faqb6.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpm79faqb6.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: write your\
    \ code here\n    # Hint: you can use the following command to get the length of\
    \ a string:\n    # len=${#1}\n    # Hint: you can use the following command to\
    \ get the character at a certain index:\n    # char=${1:index:1}\n    # Hint:\
    \ you can use the following command to get the ASCII value of a character:\n \
    \   # ascii=$(printf '%d' \"'$char\")\n    # Hint: you can use the following command\
    \ to convert an ASCII value to a character:\n    # char=$(printf \\\\$(printf\
    \ '%03o' $ascii))\n    # Hint: you can use the following command to append a character\
    \ to a string:\n    # str=\"$str$char\"\n    # Hint: you can use the following\
    \ command to convert a string to lowercase:\n    # str=$(echo \"$str\" | tr '[:upper:]'\
    \ '[:lower:]')\n    # Hint: you can use the following command to convert a string\
    \ to uppercase:\n    # str=$(echo \"$str\" | tr '[:lower:]' '[:upper:]')\n   \
    \ # Hint: you can use the following command to convert a string to a list of characters:\n\
    \    # list=($(echo \"$str\" | fold -w1))\n    # Hint: you can use the following\
    \ command to convert a list of characters to a string:\n    # str=$(printf \"\
    %s\" \"${list[@]}\")\n    # Hint: you can use the following command to get the\
    \ length of a list:\n    # len=${#list[@]}\n    # Hint: you can use the following\
    \ command to get the character at a certain index in a list:\n    # char=${list[index]}\n\
    \    # Hint: you can use the following command to append a character to a list:\n\
    \    # list=(\"${list[@]}\" \"$char\")\n    # Hint: you can use the following\
    \ command to remove the last character from a list:\n    # list=(\"${list[@]:0:$(($len-1))}\"\
    )\n    # Hint: you can use the following command to remove the first character\
    \ from a list:\n    #\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpub6bogi6.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmpub6bogi6.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Implement this\
    \ function\n\t# Hint: You can use the ord() and chr() functions to convert between\n\
    \t# ASCII characters and their integer values.\n\t# ord(char) returns the integer\
    \ value of char\n\t# chr(int) returns the ASCII character of int\n\t#\n\t# For\
    \ example:\n\t# >>> ord(\"a\")\n\t# 97\n\t# >>> chr(97)\n\t# \"a\"\n\t#\n\t# You\
    \ can also use the built-in tr command to translate characters.\n\t# For example:\n\
    \t# >>> echo \"abc\" | tr \"abc\" \"def\"\n\t# \"def\"\n\t#\n\t# You can also\
    \ use the built-in echo command to print strings.\n\t# For example:\n\t# >>> echo\
    \ \"hello\"\n\t# \"hello\"\n\t#\n\t# You can also use the built-in read command\
    \ to read input from stdin.\n\t# For example:\n\t# >>> read input\n\t# \"hello\"\
    \n\t# >>> echo $input\n\t# \"hello\"\n\t#\n\t# You can also use the built-in printf\
    \ command to format strings.\n\t# For example:\n\t# >>> printf \"hello %s\" \"\
    world\"\n\t# \"hello world\"\n\t#\n\t# You can also use the built-in seq command\
    \ to generate a sequence of numbers.\n\t# For example:\n\t# >>> seq 1 10\n\t#\
    \ 1\n\t# 2\n\t# 3\n\t# 4\n\t# 5\n\t# 6\n\t# 7\n\t# 8\n\t# 9\n\t# 10\n\t#\n\t#\
    \ You can also use the built-in wc command to count the number of lines in a file.\n\
    \t# For example:\n\t# >>> echo \"hello\" > file.txt\n\t# >>> wc -l file.txt\n\t\
    # 1 file.txt\n\t#\n\t# You can also use the built-in bc command to perform arithmetic\
    \ operations.\n\t# For example:\n\t# >>> echo \"2 + 2\" | bc\n\t# 4\n\t#\n\t#\
    \ You can also use the built-in cat command to print the contents of a file.\n\
    \t# For example:\n\t# >>> echo \"hello\" > file\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppx2fztg8.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmppx2fztg8.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    echo $1 | tr '[a-z]' '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: write your\
    \ code here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpadacdz92.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpadacdz92.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the tr command to translate characters\n \
    \   #       in a string.\n    # Hint: You can use the expr command to perform\
    \ arithmetic\n    #       operations.\n    # Hint: You can use the echo command\
    \ to print the output\n    #       of the tr command.\n    # Hint: You can use\
    \ the echo command to print the output\n    #       of the expr command.\n   \
    \ # Hint: You can use the echo command to print the output\n    #       of the\
    \ echo command.\n    # Hint: You can use the echo command to print the output\n\
    \    #       of the echo command.\n    # Hint: You can use the echo command to\
    \ print the output\n    #       of the echo command.\n    # Hint: You can use\
    \ the echo command to print the output\n    #       of the echo command.\n   \
    \ # Hint: You can use the echo command to print the output\n    #       of the\
    \ echo command.\n    # Hint: You can use the echo command to print the output\n\
    \    #       of the echo command.\n    # Hint: You can use the echo command to\
    \ print the output\n    #       of the echo command.\n    # Hint: You can use\
    \ the echo command to print the output\n    #       of the echo command.\n   \
    \ # Hint: You can use the echo command to print the output\n    #       of the\
    \ echo command.\n    # Hint: You can use the echo command to print the output\n\
    \    #       of the echo command.\n    # Hint: You can use the echo command to\
    \ print the output\n    #       of the echo command.\n    # Hint: You can use\
    \ the echo command to print the output\n    #       of the echo command.\n   \
    \ # Hint: You can use the echo command to print the output\n    #       of the\
    \ echo command.\n    # Hint: You can use the echo command to print the output\n\
    \    #       of the echo command.\n    # Hint: You can use the echo command to\
    \ print the output\n    #       of the echo command.\n    # Hint: You can use\
    \ the echo command to print the output\n    #       of the echo command.\n   \
    \ # Hint: You can use\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkmi80dp2.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpkmi80dp2.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: you can use the modulus operator to wrap around the alphabet\n\
    \    # Hint: you can use the ord and chr functions to convert between\n    # \
    \      ascii characters and their integer values\n    # Hint: you can use the\
    \ echo -n command to print without a newline\n    # Hint: you can use the tr command\
    \ to translate characters\n    # Hint: you can use the seq command to generate\
    \ a sequence of numbers\n    # Hint: you can use the fold command to fold a string\
    \ into multiple lines\n    # Hint: you can use the paste command to paste multiple\
    \ lines together\n    # Hint: you can use the tr command to delete characters\n\
    \    # Hint: you can use the echo -e command to interpret escape characters\n\
    \    # Hint: you can use the tr command to squeeze repeated characters\n    #\
    \ Hint: you can use the tr command to delete characters\n    # Hint: you can use\
    \ the echo -e command to interpret escape characters\n    # Hint: you can use\
    \ the tr command to squeeze repeated characters\n    # Hint: you can use the tr\
    \ command to delete characters\n    # Hint: you can use the echo -e command to\
    \ interpret escape characters\n    # Hint: you can use the tr command to squeeze\
    \ repeated characters\n    # Hint: you can use the tr command to delete characters\n\
    \    # Hint: you can use the echo -e command to interpret escape characters\n\
    \    # Hint: you can use the tr command to squeeze repeated characters\n    #\
    \ Hint: you can use the tr command to delete characters\n    # Hint: you can use\
    \ the echo -e command to interpret escape characters\n    # Hint: you can use\
    \ the tr command to squeeze repeated characters\n    # Hint: you can use the tr\
    \ command to delete characters\n    # Hint: you can use the echo -e command to\
    \ interpret escape characters\n    # Hint: you can use the tr command to squeeze\
    \ repeated characters\n    # Hint: you can use the tr command to delete characters\n\
    \    # Hint: you can use the echo -e command to interpret escape characters\n\
    \    # Hint: you can use the tr command to squeeze repeated characters\n    #\
    \ Hint: you can use the tr command to delete characters\n    # Hint: you can\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvs0rps48.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpvs0rps48.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    #       ord takes a character\
    \ and returns its ASCII value\n    #       chr takes an ASCII value and returns\
    \ its character\n    #       Example:\n    #       >>> $(ord \"a\")\n    #   \
    \    97\n    #       >>> $(chr 97)\n    #       \"a\"\n    #       >>> $(chr $(ord\
    \ \"a\"))\n    #       \"a\"\n    #       >>> $(chr $(ord \"a\") + 1)\n    # \
    \      \"b\"\n    #       >>> $(chr $(ord \"a\") + 2)\n    #       \"c\"\n   \
    \ #       >>> $(chr $(ord \"a\") + 3)\n    #       \"d\"\n    #       >>> $(chr\
    \ $(ord \"a\") + 4)\n    #       \"e\"\n    #       >>> $(chr $(ord \"a\") + 5)\n\
    \    #       \"f\"\n    #       >>> $(chr $(ord \"a\") + 6)\n    #       \"g\"\
    \n    #       >>> $(chr $(ord \"a\") + 7)\n    #       \"h\"\n    #       >>>\
    \ $(chr $(ord \"a\") + 8)\n    #       \"i\"\n    #       >>> $(chr $(ord \"a\"\
    ) + 9)\n    #       \"j\"\n    #       >>> $(chr $(ord \"a\") + 10)\n    #   \
    \    \"k\"\n    #       >>> $(chr $(ord \"a\") + 11)\n    #       \"l\"\n    #\
    \       >>> $(chr $(ord \"a\") + 12)\n    #       \"m\"\n    #       >>> $(chr\
    \ $(ord \"a\") + 13)\n    #       \"n\"\n    #       >>> $(chr $(ord \"a\") +\
    \ 14)\n    #       \"o\"\n    #       >>> $(chr $(ord \"a\") + 15)\n    #    \
    \   \"p\"\n    #       >>> $(chr $(ord \"a\") + 16)\n    #       \"q\"\n    #\
    \       >>> $(chr $(ord \"a\") + 17)\n    #       \"r\n}\n\ncandidate() {\n  \
    \  encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxekqn5zi.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpxekqn5zi.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: implement this\
    \ function\n  echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: you can use the ord and chr functions to convert between\n\
    \    # ascii characters and their integer representations\n    # Hint: you can\
    \ use the modulo operator to wrap around the alphabet\n    # Hint: you can use\
    \ the echo command to print a string\n    # Hint: you can use the tr command to\
    \ translate characters\n    # Hint: you can use the seq command to generate a\
    \ sequence of numbers\n    # Hint: you can use the paste command to paste two\
    \ strings together\n    # Hint: you can use the tr command to delete characters\n\
    \    # Hint: you can use the fold command to wrap lines\n    # Hint: you can use\
    \ the rev command to reverse a string\n    # Hint: you can use the sort command\
    \ to sort a string\n    # Hint: you can use the uniq command to remove duplicate\
    \ characters\n    # Hint: you can use the wc command to count words\n    # Hint:\
    \ you can use the bc command to do math\n    # Hint: you can use the expr command\
    \ to do math\n    # Hint: you can use the echo command to print a string\n   \
    \ # Hint: you can use the printf command to print a string\n    # Hint: you can\
    \ use the read command to read input\n    # Hint: you can use the set command\
    \ to set a variable\n    # Hint: you can use the declare command to set a variable\n\
    \    # Hint: you can use the local command to set a variable\n    # Hint: you\
    \ can use the export command to set a variable\n    # Hint: you can use the let\
    \ command to do math\n    # Hint: you can use the echo command to print a string\n\
    \    # Hint: you can use the printf command to print a string\n    # Hint: you\
    \ can use the read command to read input\n    # Hint: you can use the set command\
    \ to set a variable\n    # Hint: you can use the declare command to set a variable\n\
    \    # Hint: you can use the local command to set a variable\n    # Hint: you\
    \ can use the export command to set a variable\n    # Hint: you can use the let\
    \ command to do math\n    # Hint: you can use the echo command to\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2d_ctu7j.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp2d_ctu7j.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the echo\
    \ -n command to print without a newline\n    # Hint: You can use the tr command\
    \ to translate characters\n    # Hint: You can use the seq command to generate\
    \ a sequence of numbers\n    # Hint: You can use the fold command to wrap lines\
    \ at a certain width\n    # Hint: You can use the paste command to merge lines\
    \ of files\n    # Hint: You can use the sort command to sort lines of files\n\
    \    # Hint: You can use the uniq command to remove duplicate lines from a file\n\
    \    # Hint: You can use the head command to print the first few lines of a file\n\
    \    # Hint: You can use the tail command to print the last few lines of a file\n\
    \    # Hint: You can use the wc command to count the number of lines in a file\n\
    \    # Hint: You can use the cut command to print selected parts of lines\n  \
    \  # Hint: You can use the tr command to delete characters from a string\n   \
    \ # Hint: You can use the rev command to reverse lines of a file\n    # Hint:\
    \ You can use the grep command to find lines that match a pattern\n    # Hint:\
    \ You can use the sed command to find and replace text in a string\n    # Hint:\
    \ You can use the xargs command to run a command on every line of input\n    #\
    \ Hint: You can use the find command to find files that match a pattern\n    #\
    \ Hint: You can use the xargs command to run a command on every file found\n \
    \   # Hint: You can use the cat command to print the contents of a file\n    #\
    \ Hint: You can use the tee command to print the output of a command to stdout\
    \ and a file\n    # Hint: You can use the diff command to compare the contents\
    \ of two files\n    # Hint: You can use the comm command to compare the contents\
    \ of two sorted files\n    # Hint: You can use the join command to join the lines\
    \ of two files on a common field\n    # H\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4hm2ty54.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmp4hm2ty54.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    # ASCII characters and their integer values.\n    # ord 'a' -> 97\n    #\
    \ chr 97 -> 'a'\n    #\n    # Hint: You can use the modulo operator to wrap around\
    \ the alphabet\n    # if you go past the end.\n    # 5 % 3 -> 2\n    # 6 % 3 ->\
    \ 0\n    # 7 % 3 -> 1\n    #\n    # Hint: You can use the range operator to iterate\
    \ over the string\n    # for i in {0..2}; do echo $i; done\n    # 0\n    # 1\n\
    \    # 2\n    #\n    # Hint: You can use the expr command to do arithmetic\n \
    \   # expr 5 + 3 -> 8\n    # expr 5 - 3 -> 2\n    # expr 5 \\* 3 -> 15\n    #\
    \ expr 5 / 3 -> 1\n    #\n    # Hint: You can use the echo command to print strings\n\
    \    # echo \"hello\"\n    # hello\n    #\n    # Hint: You can use the read command\
    \ to read input from the user\n    # read -p \"Enter a number: \" num\n    # Enter\
    \ a number: 5\n    # echo $num\n    # 5\n    #\n    # Hint: You can use the bc\
    \ command to do floating point arithmetic\n    # echo \"5 / 3\" | bc\n    # 1.66666667\n\
    \    #\n    # Hint: You can use the printf command to format strings\n    # printf\
    \ \"%d %s\\n\" 5 \"hello\"\n    # 5 hello\n    #\n    # Hint: You can use the\
    \ tr command to translate characters\n    # echo \"hello\" | tr 'el' 'ip'\n  \
    \  # hippi\n    #\n    # Hint: You can use the fold command to wrap text\n   \
    \ # echo \"hello\" | fold -w 3\n    # hel\n    # lo\n    #\n    # Hint: You can\
    \ use the sort command to sort text\n    # echo \"hello\" | sort\n    # ehllo\n\
    \    #\n    # Hint: You can use the uniq command to remove duplicate lines\n \
    \   # echo -e \"hello\\n\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnfjvmnph.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmpnfjvmnph.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the range\
    \ operator to iterate over the characters\n    #       in a string\n    # Hint:\
    \ You can use the string concatenation operator to concatenate\n    #       strings\
    \ together\n    # Hint: You can use the string length operator to get the length\
    \ of a\n    #       string\n    # Hint: You can use the string index operator\
    \ to get the character at\n    #       a given index in a string\n    # Hint:\
    \ You can use the string slice operator to get a substring of a\n    #       string\n\
    \    # Hint: You can use the string assignment operator to assign a value\n  \
    \  #       to a string\n    # Hint: You can use the string comparison operator\
    \ to compare two\n    #       strings\n    # Hint: You can use the string equality\
    \ operator to check if two\n    #       strings are equal\n    # Hint: You can\
    \ use the string inequality operator to check if two\n    #       strings are\
    \ not equal\n    # Hint: You can use the string less than operator to check if\
    \ one\n    #       string is less than another\n    # Hint: You can use the string\
    \ less than or equal to operator to check\n    #       if one string is less than\
    \ or equal to another\n    # Hint: You can use the string greater than operator\
    \ to check if one\n    #       string is greater than another\n    # Hint: You\
    \ can use the string greater than or equal to operator to\n    #       check if\
    \ one string is greater than or equal to another\n    # Hint: You can use the\
    \ string addition operator to concatenate two\n    #       strings together\n\
    \    # Hint: You can use the string multiplication operator to repeat a\n    #\
    \       string a given number of times\n    # Hint: You can use the string repetition\
    \ operator to repeat a string\n    #       a given number of times\n    # Hint:\
    \ You can use the string length operator to get the length of a\n    #       string\n\
    \    # Hint: You can use the string index operator to get\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpeoouzezs.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpeoouzezs.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the ord and chr functions\n    # Hint: Use the modulo\
    \ operator\n    # Hint: Use the range operator\n    # Hint: Use the join function\n\
    \    # Hint: Use the map function\n    # Hint: Use the zip function\n    # Hint:\
    \ Use the list function\n    # Hint: Use the str function\n    # Hint: Use the\
    \ int function\n    # Hint: Use the ord function\n    # Hint: Use the chr function\n\
    \    # Hint: Use the range function\n    # Hint: Use the map function\n    # Hint:\
    \ Use the zip function\n    # Hint: Use the list function\n    # Hint: Use the\
    \ str function\n    # Hint: Use the int function\n    # Hint: Use the ord function\n\
    \    # Hint: Use the chr function\n    # Hint: Use the range function\n    # Hint:\
    \ Use the map function\n    # Hint: Use the zip function\n    # Hint: Use the\
    \ list function\n    # Hint: Use the str function\n    # Hint: Use the int function\n\
    \    # Hint: Use the ord function\n    # Hint: Use the chr function\n    # Hint:\
    \ Use the range function\n    # Hint: Use the map function\n    # Hint: Use the\
    \ zip function\n    # Hint: Use the list function\n    # Hint: Use the str function\n\
    \    # Hint: Use the int function\n    # Hint: Use the ord function\n    # Hint:\
    \ Use the chr function\n    # Hint: Use the range function\n    # Hint: Use the\
    \ map function\n    # Hint: Use the zip function\n    # Hint: Use the list function\n\
    \    # Hint: Use the str function\n    # Hint: Use the int function\n    # Hint:\
    \ Use the ord function\n    # Hint: Use the chr function\n    # Hint: Use the\
    \ range function\n    # Hint: Use the map function\n    # Hint: Use the zip function\n\
    \    # Hint: Use the list function\n    # Hint: Use the str function\n    # Hint:\
    \ Use the int function\n    # H\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcop97he_.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpcop97he_.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not yet implemented\"\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    # ASCII characters and their integer representations.\n    # ord takes a\
    \ character and returns its integer representation\n    # chr takes an integer\
    \ and returns its ASCII character\n    #\n    # ord 'a' = 97\n    # ord 'b' =\
    \ 98\n    # ...\n    # ord 'z' = 122\n    #\n    # chr 97 = 'a'\n    # chr 98\
    \ = 'b'\n    # ...\n    # chr 122 = 'z'\n    #\n    # You can use the modulo operator\
    \ to wrap around the alphabet.\n    # For example:\n    # >>> 97 % 26\n    # 97\n\
    \    # >>> 98 % 26\n    # 98\n    # >>> 99 % 26\n    # 99\n    # >>> 100 % 26\n\
    \    # 100\n    # >>> 101 % 26\n    # 101\n    # >>> 102 % 26\n    # 102\n   \
    \ # >>> 103 % 26\n    # 103\n    # >>> 104 % 26\n    # 104\n    # >>> 105 % 26\n\
    \    # 105\n    # >>> 106 % 26\n    # 106\n    # >>> 107 % 26\n    # 107\n   \
    \ # >>> 108 % 26\n    # 108\n    # >>> 109 % 26\n    # 109\n    # >>> 110 % 26\n\
    \    # 110\n    # >>> 111 % 26\n    # 111\n    # >>> 112 % 26\n    # 112\n   \
    \ # >>> 113 % 26\n    # 113\n    # >>> 114 % 26\n    # 114\n    # >>> 115 % 26\n\
    \    # 115\n    # >>> 116 % 26\n    # 116\n    # >>> 117 % 26\n    # 117\n   \
    \ # >>> 118 % 26\n    # 118\n    # >>> 119 % 26\n    # 119\n    # >>> 120 % 26\n\
    \    # 120\n    # >>> 121 % 26\n    # 121\n    # >>> 122 % 26\n    # 122\n   \
    \ # >>> 123 % 26\n    # 97\n    # >>> 124 % 26\n    # 98\n    # >>> 125 % 26\n\
    \    # 99\n    # >>> 126 % 26\n    # 100\n    # >>> 127 % 26\n    # 101\n    #\
    \ >>> 128 % 26\n    # 102\n   \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0yxjpz__.sh: line 101: syntax error near unexpected token `}''

    /tmp/tmp0yxjpz__.sh: line 101: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You may want to use the tr command\n    # Hint: You may\
    \ want to use the seq command\n    # Hint: You may want to use the fold command\n\
    \    # Hint: You may want to use the rev command\n    # Hint: You may want to\
    \ use the cut command\n    # Hint: You may want to use the paste command\n   \
    \ # Hint: You may want to use the sed command\n    # Hint: You may want to use\
    \ the tr command\n    # Hint: You may want to use the rev command\n    # Hint:\
    \ You may want to use the tr command\n    # Hint: You may want to use the rev\
    \ command\n    # Hint: You may want to use the tr command\n    # Hint: You may\
    \ want to use the rev command\n    # Hint: You may want to use the tr command\n\
    \    # Hint: You may want to use the rev command\n    # Hint: You may want to\
    \ use the tr command\n    # Hint: You may want to use the rev command\n    # Hint:\
    \ You may want to use the tr command\n    # Hint: You may want to use the rev\
    \ command\n    # Hint: You may want to use the tr command\n    # Hint: You may\
    \ want to use the rev command\n    # Hint: You may want to use the tr command\n\
    \    # Hint: You may want to use the rev command\n    # Hint: You may want to\
    \ use the tr command\n    # Hint: You may want to use the rev command\n    # Hint:\
    \ You may want to use the tr command\n    # Hint: You may want to use the rev\
    \ command\n    # Hint: You may want to use the tr command\n    # Hint: You may\
    \ want to use the rev command\n    # Hint: You may want to use the tr command\n\
    \    # Hint: You may want to use the rev command\n    # Hint: You may want to\
    \ use the tr command\n    # Hint: You may want to use the rev command\n    # Hint:\
    \ You may want to use the tr command\n    # Hint: You may want to use the rev\
    \ command\n    # Hint: You may want to use the tr\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm51uvalp.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpm51uvalp.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: you can use the ord and chr functions to convert between\n\
    \    # ascii characters and their integer values\n    # Hint: you can use the\
    \ modulus operator to wrap around the alphabet\n    # Hint: you can use the echo\
    \ -n command to print without a newline\n    # Hint: you can use the echo -e command\
    \ to interpret escape sequences\n    # Hint: you can use the echo -e command to\
    \ interpret escape sequences\n    # Hint: you can use the echo -e command to interpret\
    \ escape sequences\n    # Hint: you can use the echo -e command to interpret escape\
    \ sequences\n    # Hint: you can use the echo -e command to interpret escape sequences\n\
    \    # Hint: you can use the echo -e command to interpret escape sequences\n \
    \   # Hint: you can use the echo -e command to interpret escape sequences\n  \
    \  # Hint: you can use the echo -e command to interpret escape sequences\n   \
    \ # Hint: you can use the echo -e command to interpret escape sequences\n    #\
    \ Hint: you can use the echo -e command to interpret escape sequences\n    # Hint:\
    \ you can use the echo -e command to interpret escape sequences\n    # Hint: you\
    \ can use the echo -e command to interpret escape sequences\n    # Hint: you can\
    \ use the echo -e command to interpret escape sequences\n    # Hint: you can use\
    \ the echo -e command to interpret escape sequences\n    # Hint: you can use the\
    \ echo -e command to interpret escape sequences\n    # Hint: you can use the echo\
    \ -e command to interpret escape sequences\n    # Hint: you can use the echo -e\
    \ command to interpret escape sequences\n    # Hint: you can use the echo -e command\
    \ to interpret escape sequences\n    # Hint: you can use the echo -e command to\
    \ interpret escape sequences\n    # Hint: you can use the echo -e command to interpret\
    \ escape sequences\n    # Hint: you can use the echo -e command to interpret escape\
    \ sequences\n    # Hint: you can use the echo -e command to interpret escape sequences\n\
    \    # Hint: you can use the echo -e command to interpret escape sequences\n \
    \   # Hint: you can use the echo -e command to interpret escape sequences\n  \
    \  # H\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp50f6wziu.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp50f6wziu.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the first argument\n    # Hint: Use the $2 variable to access the second\
    \ argument\n    # Hint: Use the $3 variable to access the third argument\n   \
    \ # Hint: Use the $4 variable to access the fourth argument\n    # Hint: Use the\
    \ $5 variable to access the fifth argument\n    # Hint: Use the $6 variable to\
    \ access the sixth argument\n    # Hint: Use the $7 variable to access the seventh\
    \ argument\n    # Hint: Use the $8 variable to access the eighth argument\n  \
    \  # Hint: Use the $9 variable to access the ninth argument\n    # Hint: Use the\
    \ ${10} variable to access the tenth argument\n    # Hint: Use the ${11} variable\
    \ to access the eleventh argument\n    # Hint: Use the ${12} variable to access\
    \ the twelfth argument\n    # Hint: Use the ${13} variable to access the thirteenth\
    \ argument\n    # Hint: Use the ${14} variable to access the fourteenth argument\n\
    \    # Hint: Use the ${15} variable to access the fifteenth argument\n    # Hint:\
    \ Use the ${16} variable to access the sixteenth argument\n    # Hint: Use the\
    \ ${17} variable to access the seventeenth argument\n    # Hint: Use the ${18}\
    \ variable to access the eighteenth argument\n    # Hint: Use the ${19} variable\
    \ to access the nineteenth argument\n    # Hint: Use the ${20} variable to access\
    \ the twentieth argument\n    # Hint: Use the ${21} variable to access the twenty-first\
    \ argument\n    # Hint: Use the ${22} variable to access the twenty-second argument\n\
    \    # Hint: Use the ${23} variable to access the twenty-third argument\n    #\
    \ Hint: Use the ${24} variable to access the twenty-fourth argument\n    # Hint:\
    \ Use the ${25} variable to access the twenty-fifth argument\n    # Hint: Use\
    \ the ${26} variable to access the twenty-sixth argument\n    # Hint: Use the\
    \ ${27} variable to access the twenty-seventh argument\n   \n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8k9xnjqi.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmp8k9xnjqi.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the ord and chr functions\n    # Hint: use the modulo\
    \ operator\n    # Hint: use the range function\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the reduce function\n    # Hint: use the lambda function\n    # Hint: use\
    \ the filter function\n    # Hint: use the enumerate function\n    # Hint: use\
    \ the join function\n    # Hint: use the map function\n    # Hint: use the zip\
    \ function\n    # Hint: use the reduce function\n    # Hint: use the lambda function\n\
    \    # Hint: use the filter function\n    # Hint: use the enumerate function\n\
    \    # Hint: use the join function\n    # Hint: use the map function\n    # Hint:\
    \ use the zip function\n    # Hint: use the reduce function\n    # Hint: use the\
    \ lambda function\n    # Hint: use the filter function\n    # Hint: use the enumerate\
    \ function\n    # Hint: use the join function\n    # Hint: use the map function\n\
    \    # Hint: use the zip function\n    # Hint: use the reduce function\n    #\
    \ Hint: use the lambda function\n    # Hint: use the filter function\n    # Hint:\
    \ use the enumerate function\n    # Hint: use the join function\n    # Hint: use\
    \ the map function\n    # Hint: use the zip function\n    # Hint: use the reduce\
    \ function\n    # Hint: use the lambda function\n    # Hint: use the filter function\n\
    \    # Hint: use the enumerate function\n    # Hint: use the join function\n \
    \   # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the reduce function\n    # Hint: use the lambda function\n    # Hint: use\
    \ the filter function\n    # Hint: use the enumerate function\n    # Hint: use\
    \ the join function\n    # Hint: use the map function\n    # Hint: use the zip\
    \ function\n    # Hint: use the reduce function\n    #\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr1zykhdb.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpr1zykhdb.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the ord and chr functions\n    # Hint: use the modulo\
    \ operator\n    # Hint: use the range function\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the list function\n    # Hint: use the str function\n    # Hint: use the\
    \ int function\n    # Hint: use the len function\n    # Hint: use the range function\n\
    \    # Hint: use the join function\n    # Hint: use the map function\n    # Hint:\
    \ use the zip function\n    # Hint: use the list function\n    # Hint: use the\
    \ str function\n    # Hint: use the int function\n    # Hint: use the len function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the zip function\n    # Hint: use\
    \ the list function\n    # Hint: use the str function\n    # Hint: use the int\
    \ function\n    # Hint: use the len function\n    # Hint: use the range function\n\
    \    # Hint: use the join function\n    # Hint: use the map function\n    # Hint:\
    \ use the zip function\n    # Hint: use the list function\n    # Hint: use the\
    \ str function\n    # Hint: use the int function\n    # Hint: use the len function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the zip function\n    # Hint: use\
    \ the list function\n    # Hint: use the str function\n    # Hint: use the int\
    \ function\n    # Hint: use the len function\n    # Hint: use the range function\n\
    \    # Hint: use the join function\n    # Hint: use the map function\n    # Hint:\
    \ use the zip function\n    # Hint: use the list function\n    # Hint: use the\
    \ str function\n    # Hint: use the int function\n    # Hint: use the len\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps3kasuxy.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmps3kasuxy.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    #       For example:\n  \
    \  #       >>> $(ord \"a\")\n    #       97\n    #       >>> $(chr 97)\n    #\
    \       \"a\"\n    #       >>> $(ord \"b\")\n    #       98\n    #       >>> $(chr\
    \ 98)\n    #       \"b\"\n    #       >>> $(ord \"c\")\n    #       99\n    #\
    \       >>> $(chr 99)\n    #       \"c\"\n    #       >>> $(ord \"d\")\n    #\
    \       100\n    #       >>> $(chr 100)\n    #       \"d\"\n    #       >>> $(ord\
    \ \"e\")\n    #       101\n    #       >>> $(chr 101)\n    #       \"e\"\n   \
    \ #       >>> $(ord \"f\")\n    #       102\n    #       >>> $(chr 102)\n    #\
    \       \"f\"\n    #       >>> $(ord \"g\")\n    #       103\n    #       >>>\
    \ $(chr 103)\n    #       \"g\"\n    #       >>> $(ord \"h\")\n    #       104\n\
    \    #       >>> $(chr 104)\n    #       \"h\"\n    #       >>> $(ord \"i\")\n\
    \    #       105\n    #       >>> $(chr 105)\n    #       \"i\"\n    #       >>>\
    \ $(ord \"j\")\n    #       106\n    #       >>> $(chr 106)\n    #       \"j\"\
    \n    #       >>> $(ord \"k\")\n    #       107\n    #       >>> $(chr 107)\n\
    \    #       \"k\"\n    #       >>> $(ord \"l\")\n    #       108\n    #     \
    \  >>> $(chr 108)\n    #       \"l\"\n    #       >>> $(ord \"m\")\n    #    \
    \   109\n    #       >>> $(chr 109)\n    #       \"m\"\n    #       >>> $(ord\
    \ \"n\")\n    #       110\n    #       >>> $(chr 110)\n    #       \"n\"\n   \
    \ #       >>> $(ord \"o\")\n    #       111\n    #       >>>\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcsqwigos.sh: line 81: syntax error near unexpected token `}''

    /tmp/tmpcsqwigos.sh: line 81: `}''

    '
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Write your code\
    \ here\n  # Hint: You can use the following command to rotate the alphabet\n \
    \ # echo {a..z} | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' '\n  # echo\
    \ {a..z} | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\\
    n' | tail -n +3 | head -n 22 | tr '\\n' ' '\n  # echo {a..z} | tr ' ' '\\n' |\
    \ tail -n +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n +3 | head -n\
    \ 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' '\n\
    \  # echo {a..z} | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' ' | tr\
    \ ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n\
    \ +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr\
    \ '\\n' ' '\n  # echo {a..z} | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\\
    n' ' ' | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\n'\
    \ | tail -n +3 | head -n 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n +3 | head\
    \ -n 22 | tr '\\n' ' ' | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' '\n\
    \  # echo {a..z} | tr ' ' '\\n' | tail -n +3 | head -n 22 | tr '\\n' ' '\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplwramyw9.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmplwramyw9.sh: line 26: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # your code here\n  echo\
    \ $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the built-in tr command to translate characters\n\
    \    #       in a string.\n    #       For example:\n    #       >>> $(echo \"\
    hi\" | tr \"a-z\" \"b-za\")\n    #       \"ij\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"c-za-b\")\n    #       \"jk\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"d-za-c\")\n    #       \"kl\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"e-za-d\")\n    #       \"lm\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"f-za-e\")\n    #       \"mn\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"g-za-f\")\n    #       \"no\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"h-za-g\")\n    #       \"op\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"i-za-h\")\n    #       \"pq\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"j-za-i\")\n    #       \"qr\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"k-za-j\")\n    #       \"rs\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"l-za-k\")\n    #       \"st\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"m-za-l\")\n    #       \"tu\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"n-za-m\")\n    #       \"uv\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"o-za-n\")\n    #       \"vw\"\n    #       >>> $(echo \"hi\"\
    \ | tr \"a-z\" \"p-za-o\")\n    #       \"wx\"\n    #      \n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp29a91ej3.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmp29a91ej3.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the range\
    \ operator to iterate over characters\n    #       in a string\n    # Hint: You\
    \ can use the range operator to iterate over characters\n    #       in a string\n\
    \    # Hint: You can use the range operator to iterate over characters\n    #\
    \       in a string\n    # Hint: You can use the range operator to iterate over\
    \ characters\n    #       in a string\n    # Hint: You can use the range operator\
    \ to iterate over characters\n    #       in a string\n    # Hint: You can use\
    \ the range operator to iterate over characters\n    #       in a string\n   \
    \ # Hint: You can use the range operator to iterate over characters\n    #   \
    \    in a string\n    # Hint: You can use the range operator to iterate over characters\n\
    \    #       in a string\n    # Hint: You can use the range operator to iterate\
    \ over characters\n    #       in a string\n    # Hint: You can use the range\
    \ operator to iterate over characters\n    #       in a string\n    # Hint: You\
    \ can use the range operator to iterate over characters\n    #       in a string\n\
    \    # Hint: You can use the range operator to iterate over characters\n    #\
    \       in a string\n    # Hint: You can use the range operator to iterate over\
    \ characters\n    #       in a string\n    # Hint: You can use the range operator\
    \ to iterate over characters\n    #       in a string\n    # Hint: You can use\
    \ the range operator to iterate over characters\n    #       in a string\n   \
    \ # Hint: You can use the range operator to iterate over characters\n    #   \
    \    in a string\n    # Hint: You can use the range operator to iterate over characters\n\
    \    #       in a string\n    # Hint: You can use the range operator to iterate\
    \ over characters\n    #       in a string\n    # Hint: You can use the range\
    \ operator to iterate over characters\n    #       in a string\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpshkrc_8x.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpshkrc_8x.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord and chr functions to convert between ascii characters\
    \ and their integer values\n    # Hint: You can use the echo -n command to print\
    \ without a newline\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the seq command to generate a sequence of numbers\n \
    \   # Hint: You can use the paste command to merge two strings\n    # Hint: You\
    \ can use the fold command to wrap lines\n    # Hint: You can use the tr command\
    \ to delete characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to squeeze repeated characters\n    #\
    \ Hint: You can use the tr command to translate characters\n    # Hint: You can\
    \ use the tr command to translate characters\n    # Hint: You can use the tr command\
    \ to translate characters\n    # Hint: You can use the tr command to translate\
    \ characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ tr command to translate characters\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the tr command to\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgia8799y.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpgia8799y.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       ascii and characters\n    # Hint: You can use the modulo operator\
    \ to wrap around the alphabet\n    #       if you go past the end of it\n    #\
    \ Hint: You can use the echo -n command to print without a newline\n    # Hint:\
    \ You can use the $1 variable to access the first argument\n    #       passed\
    \ to the function\n    # Hint: You can use the $# variable to access the number\
    \ of arguments\n    #       passed to the function\n    # Hint: You can use the\
    \ $@ variable to access all the arguments\n    #       passed to the function\n\
    \    # Hint: You can use the $0 variable to access the name of the script\n  \
    \  #       that is running\n    # Hint: You can use the $? variable to access\
    \ the exit status of the\n    #       last command that was run\n    # Hint: You\
    \ can use the $! variable to access the process id of the\n    #       last command\
    \ that was run\n    # Hint: You can use the $USER variable to access the username\
    \ of the\n    #       current user\n    # Hint: You can use the $HOSTNAME variable\
    \ to access the hostname of\n    #       the current machine\n    # Hint: You\
    \ can use the $SECONDS variable to access the number of\n    #       seconds since\
    \ the script was started\n    # Hint: You can use the $RANDOM variable to access\
    \ a random number\n    # Hint: You can use the $LINENO variable to access the\
    \ current line\n    #       number in the script\n    # Hint: You can use the\
    \ $IFS variable to access the current\n    #       internal field separator\n\
    \    # Hint: You can use the $PATH variable to access the current path\n    #\
    \ Hint: You can use the $PS1 variable to access the current\n    #       primary\
    \ prompt string\n    # Hint: You can use the $PS2 variable to access the current\n\
    \    #       secondary prompt string\n    # Hint: You can use the $PS3 variable\
    \ to access the current\n    #       select prompt string\n    # Hint: You can\
    \ use the $PS\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmknuu3ma.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpmknuu3ma.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo \"$1\" | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       For example:\n    #       echo \"hello\" | tr 'a-z' 'b-za'\n    #\
    \       echos \"ifmmp\"\n    #       echo \"hello\" | tr 'a-z' 'c-za-b'\n    #\
    \       echos \"jgnnq\"\n    #       echo \"hello\" | tr 'a-z' 'd-za-c'\n    #\
    \       echos \"khoor\"\n    #       echo \"hello\" | tr 'a-z' 'e-za-d'\n    #\
    \       echos \"lipps\"\n    #       echo \"hello\" | tr 'a-z' 'f-za-e'\n    #\
    \       echos \"mjqqt\"\n    #       echo \"hello\" | tr 'a-z' 'g-za-f'\n    #\
    \       echos \"nkrru\"\n    #       echo \"hello\" | tr 'a-z' 'h-za-g'\n    #\
    \       echos \"olssv\"\n    #       echo \"hello\" | tr 'a-z' 'i-za-h'\n    #\
    \       echos \"pmttw\"\n    #       echo \"hello\" | tr 'a-z' 'j-za-i'\n    #\
    \       echos \"qnuux\"\n    #       echo \"hello\" | tr 'a-z' 'k-za-j'\n    #\
    \       echos \"rovvy\"\n    #       echo \"hello\" | tr 'a-z' 'l-za-k'\n    #\
    \       echos \"spwwz\"\n    #       echo \"hello\" | tr 'a-z' 'm-za-l'\n    #\
    \       echos \"tqxxa\"\n    #       echo \"hello\" | tr 'a-z' 'n-za-m'\n    #\
    \       echos \"uryyb\"\n    #       echo \"hello\" | tr 'a-z' 'o-za-n'\n    #\
    \       echos \"vszzc\"\n    #       echo \"\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph4443ibv.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmph4443ibv.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local str=$1\n    local\
    \ str_len=${#str}\n    local i=0\n    local new_str=\"\"\n    local char=\"\"\n\
    \    local char_num=0\n    local new_char_num=0\n    local new_char=\"\"\n   \
    \ while [ $i -lt $str_len ]; do\n        char=${str:$i:1}\n        char_num=$(printf\
    \ \"%d\" \"'$char\")\n        new_char_num=$((char_num + 2 * 2))\n        new_char=$(printf\
    \ \"\\x$(printf %x $new_char_num)\")\n        new_str=\"$new_str$new_char\"\n\
    \        i=$((i + 1))\n    done\n    echo \"$new_str\"\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and integers.\n    # Hint: You can use the built-in echo\
    \ command to print strings\n    # Hint: You can use the built-in read command\
    \ to read strings\n    # Hint: You can use the built-in expr command to do arithmetic\n\
    \    # Hint: You can use the built-in echo -n command to print without a newline\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \    # Hint: You can use the built-in echo -e command to interpret escape characters\n\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0fs56lio.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp0fs56lio.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values\n    # Hint: You can use the modulus\
    \ operator to wrap around the alphabet\n    #       if you go past the end\n \
    \   # Hint: You can use the expr command to do arithmetic\n    # Hint: You can\
    \ use the tr command to translate characters\n    # Hint: You can use the echo\
    \ command to return a string\n    # Hint: You can use the $1 variable to access\
    \ the first argument\n    #       passed to the function\n    # Hint: You can\
    \ use the $# variable to access the number of arguments\n    #       passed to\
    \ the function\n    # Hint: You can use the $@ variable to access all the arguments\n\
    \    #       passed to the function\n    # Hint: You can use the $0 variable to\
    \ access the name of the script\n    #       that is running\n    # Hint: You\
    \ can use the $? variable to access the exit status of the\n    #       last command\
    \ run\n    # Hint: You can use the $! variable to access the process ID of the\n\
    \    #       last command run\n    # Hint: You can use the $USER variable to access\
    \ the username of the\n    #       current user\n    # Hint: You can use the $HOME\
    \ variable to access the home directory of\n    #       the current user\n   \
    \ # Hint: You can use the $PWD variable to access the current working\n    # \
    \      directory\n    # Hint: You can use the $RANDOM variable to access a random\
    \ number\n    # Hint: You can use the $SECONDS variable to access the number of\n\
    \    #       seconds since the script was started\n    # Hint: You can use the\
    \ $LINENO variable to access the current line\n    #       number in the script\n\
    \    # Hint: You can use the $FUNCNAME variable to access the name of the\n  \
    \  #       currently executing function\n    # Hint: You can use the $BASH_VERSION\
    \ variable to access the version\n    #       of bash that is running\n    # Hint:\
    \ You can use the $BASH_SOURCE variable to access the name of\n    #       the\
    \ script that is running\n   \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpywvhf6vs.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpywvhf6vs.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the ord and chr functions\n    # Hint: use the modulo\
    \ operator\n    # Hint: use the range function\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the list function\n    # Hint: use the str function\n    # Hint: use the\
    \ int function\n    # Hint: use the len function\n    # Hint: use the ord function\n\
    \    # Hint: use the chr function\n    # Hint: use the range function\n    # Hint:\
    \ use the join function\n    # Hint: use the map function\n    # Hint: use the\
    \ zip function\n    # Hint: use the list function\n    # Hint: use the str function\n\
    \    # Hint: use the int function\n    # Hint: use the len function\n    # Hint:\
    \ use the ord function\n    # Hint: use the chr function\n    # Hint: use the\
    \ range function\n    # Hint: use the join function\n    # Hint: use the map function\n\
    \    # Hint: use the zip function\n    # Hint: use the list function\n    # Hint:\
    \ use the str function\n    # Hint: use the int function\n    # Hint: use the\
    \ len function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the zip function\n    # Hint: use\
    \ the list function\n    # Hint: use the str function\n    # Hint: use the int\
    \ function\n    # Hint: use the len function\n    # Hint: use the ord function\n\
    \    # Hint: use the chr function\n    # Hint: use the range function\n    # Hint:\
    \ use the join function\n    # Hint: use the map function\n    # Hint: use the\
    \ zip function\n    # Hint: use the list function\n    # Hint: use the str function\n\
    \    # Hint: use the int function\n    # Hint\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfcgjpaon.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpfcgjpaon.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Implement this\
    \ function\n\t# Hint: You can use the modulo operator to wrap around the alphabet\n\
    \t# Hint: You can use the ord and chr functions to convert between ascii and characters\n\
    \t# Hint: You can use the echo -n command to print without a newline\n\t# Hint:\
    \ You can use the tr command to translate characters\n\t# Hint: You can use the\
    \ seq command to generate a sequence of numbers\n\t# Hint: You can use the fold\
    \ command to wrap text to a certain width\n\t# Hint: You can use the tr command\
    \ to delete characters\n\t# Hint: You can use the paste command to merge lines\
    \ of text\n\t# Hint: You can use the sed command to replace text\n\t# Hint: You\
    \ can use the tr command to squeeze repeated characters\n\t# Hint: You can use\
    \ the tr command to delete characters\n\t# Hint: You can use the tr command to\
    \ translate characters\n\t# Hint: You can use the tr command to squeeze repeated\
    \ characters\n\t# Hint: You can use the tr command to translate characters\n\t\
    # Hint: You can use the tr command to squeeze repeated characters\n\t# Hint: You\
    \ can use the tr command to translate characters\n\t# Hint: You can use the tr\
    \ command to squeeze repeated characters\n\t# Hint: You can use the tr command\
    \ to translate characters\n\t# Hint: You can use the tr command to squeeze repeated\
    \ characters\n\t# Hint: You can use the tr command to translate characters\n\t\
    # Hint: You can use the tr command to squeeze repeated characters\n\t# Hint: You\
    \ can use the tr command to translate characters\n\t# Hint: You can use the tr\
    \ command to squeeze repeated characters\n\t# Hint: You can use the tr command\
    \ to translate characters\n\t# Hint: You can use the tr command to squeeze repeated\
    \ characters\n\t# Hint: You can use the tr command to translate characters\n\t\
    # Hint: You can use the tr command to squeeze repeated characters\n\t# Hint: You\
    \ can use the tr command to translate characters\n\t# Hint: You can use the tr\
    \ command to squeeze repeated characters\n\t# Hint: You can use the tr command\
    \ to translate characters\n\t# Hint: You can use the tr command to squeeze repeated\
    \ characters\n\t\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf4c3e8_k.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpf4c3e8_k.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command and capture\
    \ the output\n    # Hint: Use the tr command to translate characters\n   \n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo6re55lv.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpo6re55lv.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: you can use the ord and chr functions to convert between\n\
    \    # ascii characters and their numeric values\n    # Hint: you can use the\
    \ modulo operator to wrap around the alphabet\n    # Hint: you can use the tr\
    \ command to translate characters\n    # Hint: you can use the echo command to\
    \ print a string\n    # Hint: you can use the seq command to generate a sequence\
    \ of numbers\n    # Hint: you can use the paste command to combine two strings\n\
    \    # Hint: you can use the bc command to do math\n    # Hint: you can use the\
    \ xargs command to run a command for each line of input\n    # Hint: you can use\
    \ the tr command to delete characters\n    # Hint: you can use the fold command\
    \ to wrap lines\n    # Hint: you can use the rev command to reverse lines\n  \
    \  # Hint: you can use the sort command to sort lines\n    # Hint: you can use\
    \ the uniq command to remove duplicate lines\n    # Hint: you can use the head\
    \ command to get the first line of output\n    # Hint: you can use the tail command\
    \ to get all but the first line of output\n    # Hint: you can use the wc command\
    \ to count lines\n    # Hint: you can use the cut command to get a substring\n\
    \    # Hint: you can use the tr command to translate characters\n    # Hint: you\
    \ can use the sed command to replace characters\n    # Hint: you can use the grep\
    \ command to find lines that match a pattern\n    # Hint: you can use the awk\
    \ command to do math\n    # Hint: you can use the expr command to do math\n  \
    \  # Hint: you can use the bc command to do math\n    # Hint: you can use the\
    \ expr command to do math\n    # Hint: you can use the expr command to do math\n\
    \    # Hint: you can use the expr command to do math\n    # Hint: you can use\
    \ the expr command to do math\n    # Hint: you can use the expr command to do\
    \ math\n    # Hint: you can use the expr command to do math\n    # Hint: you can\
    \ use the expr command to do math\n    # H\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkxo6ct1c.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpkxo6ct1c.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: implement this\
    \ function\n  # Hint: use the ord and chr functions\n  # Hint: use the modulo\
    \ operator\n  # Hint: use the range operator\n  # Hint: use the join function\n\
    \  # Hint: use the map function\n  # Hint: use the zip function\n  # Hint: use\
    \ the reduce function\n  # Hint: use the filter function\n  # Hint: use the lambda\
    \ function\n  # Hint: use the enumerate function\n  # Hint: use the zip function\n\
    \  # Hint: use the join function\n  # Hint: use the map function\n  # Hint: use\
    \ the zip function\n  # Hint: use the reduce function\n  # Hint: use the filter\
    \ function\n  # Hint: use the lambda function\n  # Hint: use the enumerate function\n\
    \  # Hint: use the zip function\n  # Hint: use the join function\n  # Hint: use\
    \ the map function\n  # Hint: use the zip function\n  # Hint: use the reduce function\n\
    \  # Hint: use the filter function\n  # Hint: use the lambda function\n  # Hint:\
    \ use the enumerate function\n  # Hint: use the zip function\n  # Hint: use the\
    \ join function\n  # Hint: use the map function\n  # Hint: use the zip function\n\
    \  # Hint: use the reduce function\n  # Hint: use the filter function\n  # Hint:\
    \ use the lambda function\n  # Hint: use the enumerate function\n  # Hint: use\
    \ the zip function\n  # Hint: use the join function\n  # Hint: use the map function\n\
    \  # Hint: use the zip function\n  # Hint: use the reduce function\n  # Hint:\
    \ use the filter function\n  # Hint: use the lambda function\n  # Hint: use the\
    \ enumerate function\n  # Hint: use the zip function\n  # Hint: use the join function\n\
    \  # Hint: use the map function\n  # Hint: use the zip function\n  # Hint: use\
    \ the reduce function\n  # Hint: use the filter function\n  # Hint: use the lambda\
    \ function\n  # H\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp17qexwd6.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmp17qexwd6.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr 'a-z'\
    \ 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    # Hint: You can use the built-in tr command\n    # Hint: You can use the\
    \ built-in expr command\n    # Hint: You can use the built-in echo command\n \
    \   # Hint: You can use the built-in printf command\n    # Hint: You can use the\
    \ built-in ord command\n    # Hint: You can use the built-in chr command\n   \
    \ # Hint: You can use the built-in seq command\n    # Hint: You can use the built-in\
    \ read command\n    # Hint: You can use the built-in for command\n    # Hint:\
    \ You can use the built-in while command\n    # Hint: You can use the built-in\
    \ if command\n    # Hint: You can use the built-in case command\n    # Hint: You\
    \ can use the built-in break command\n    # Hint: You can use the built-in continue\
    \ command\n    # Hint: You can use the built-in return command\n    # Hint: You\
    \ can use the built-in readonly command\n    # Hint: You can use the built-in\
    \ declare command\n    # Hint: You can use the built-in typeset command\n    #\
    \ Hint: You can use the built-in local command\n    # Hint: You can use the built-in\
    \ export command\n    # Hint: You can use the built-in unset command\n    # Hint:\
    \ You can use the built-in trap command\n    # Hint: You can use the built-in\
    \ set command\n    # Hint: You can use the built-in shift command\n    # Hint:\
    \ You can use the built-in getopts command\n    # Hint: You can use the built-in\
    \ eval command\n    # Hint: You can use the built-in exec command\n    # Hint:\
    \ You can use the built-in exit command\n    # Hint: You can use the built-in\
    \ time command\n    # Hint: You can use the built-in readarray command\n    #\
    \ Hint: You can use the built-in mapfile command\n    # Hint: You can use the\
    \ built-in declare command\n    # Hint: You can use the built-in typeset command\n\
    \   \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\"\
    \ ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"\
    ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[\
    \ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa1nyh11j.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpa1nyh11j.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6xol2e1g.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp6xol2e1g.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    # Hint: You can use the modulo\
    \ operator to wrap around the alphabet.\n    # Hint: You can use the range operator\
    \ to iterate over the string.\n    # Hint: You can use the concatenation operator\
    \ to append to a string.\n    # Hint: You can use the assignment operator to assign\
    \ to a variable.\n    # Hint: You can use the return statement to return a value.\n\
    \    # Hint: You can use the echo statement to print to the terminal.\n    # Hint:\
    \ You can use the read statement to read from the terminal.\n    # Hint: You can\
    \ use the read -s statement to read from the terminal\n    #       without echoing\
    \ the input to the terminal.\n    # Hint: You can use the read -p statement to\
    \ read from the terminal\n    #       with a prompt.\n    # Hint: You can use\
    \ the read -sp statement to read from the terminal\n    #       with a prompt\
    \ without echoing the input to the terminal.\n    # Hint: You can use the read\
    \ -a statement to read from the terminal\n    #       into an array.\n    # Hint:\
    \ You can use the read -n statement to read from the terminal\n    #       a specific\
    \ number of characters.\n    # Hint: You can use the read -t statement to read\
    \ from the terminal\n    #       with a timeout.\n    # Hint: You can use the\
    \ read -d statement to read from the terminal\n    #       with a delimiter.\n\
    \    # Hint: You can use the read -r statement to read from the terminal\n   \
    \ #       without interpreting backslashes.\n    # Hint: You can use the read\
    \ -s -p -r statement to read from the\n    #       terminal with a prompt without\
    \ echoing the input to the\n    #       terminal without interpreting backslashes.\n\
    \    # Hint: You can use the read -a -p -r statement to read from the\n    # \
    \      terminal with a prompt without interpreting backslashes into\n    #   \
    \    an array.\n    # Hint: You can use the read -n -p -r statement to read from\
    \ the\n   \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv0obhayc.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpv0obhayc.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzlm_6sec.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpzlm_6sec.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\
    \ \n    # ascii characters and their integer values.\n    # Hint: You can use\
    \ the modulus operator to wrap around the alphabet.\n    # Hint: You can use the\
    \ range operator to iterate over the string.\n    # Hint: You can use the string\
    \ concatenation operator to build a string.\n    # Hint: You can use the string\
    \ length operator to get the length of a string.\n    # Hint: You can use the\
    \ string index operator to get the character at a given index.\n    # Hint: You\
    \ can use the string slice operator to get a substring.\n    # Hint: You can use\
    \ the string assignment operator to assign a value to a string.\n    # Hint: You\
    \ can use the string comparison operator to compare two strings.\n    # Hint:\
    \ You can use the string equality operator to check if two strings are equal.\n\
    \    # Hint: You can use the string inequality operator to check if two strings\
    \ are not equal.\n    # Hint: You can use the string concatenation operator to\
    \ concatenate two strings.\n    # Hint: You can use the string length operator\
    \ to get the length of a string.\n    # Hint: You can use the string index operator\
    \ to get the character at a given index.\n    # Hint: You can use the string slice\
    \ operator to get a substring.\n    # Hint: You can use the string assignment\
    \ operator to assign a value to a string.\n    # Hint: You can use the string\
    \ comparison operator to compare two strings.\n    # Hint: You can use the string\
    \ equality operator to check if two strings are equal.\n    # Hint: You can use\
    \ the string inequality operator to check if two strings are not equal.\n    #\
    \ Hint: You can use the string concatenation operator to concatenate two strings.\n\
    \    # Hint: You can use the string length operator to get the length of a string.\n\
    \    # Hint: You can use the string index operator to get the character at a given\
    \ index.\n    # Hint: You can use the string slice operator to get a substring.\n\
    \    # Hint: You can use the string assignment operator to assign a value to a\
    \ string\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptuudfb_f.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmptuudfb_f.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: Use the command line to manipulate strings\n    # Hint:\
    \ Use the command line to manipulate numbers\n    # Hint: Use the command line\
    \ to manipulate arrays\n    # Hint: Use the command line to manipulate files\n\
    \    # Hint: Use the command line to manipulate strings\n    # Hint: Use the command\
    \ line to manipulate numbers\n    # Hint: Use the command line to manipulate arrays\n\
    \    # Hint: Use the command line to manipulate files\n    # Hint: Use the command\
    \ line to manipulate strings\n    # Hint: Use the command line to manipulate numbers\n\
    \    # Hint: Use the command line to manipulate arrays\n    # Hint: Use the command\
    \ line to manipulate files\n    # Hint: Use the command line to manipulate strings\n\
    \    # Hint: Use the command line to manipulate numbers\n    # Hint: Use the command\
    \ line to manipulate arrays\n    # Hint: Use the command line to manipulate files\n\
    \    # Hint: Use the command line to manipulate strings\n    # Hint: Use the command\
    \ line to manipulate numbers\n    # Hint: Use the command line to manipulate arrays\n\
    \    # Hint: Use the command line to manipulate files\n    # Hint: Use the command\
    \ line to manipulate strings\n    # Hint: Use the command line to manipulate numbers\n\
    \    # Hint: Use the command line to manipulate arrays\n    # Hint: Use the command\
    \ line to manipulate files\n    # Hint: Use the command line to manipulate strings\n\
    \    # Hint: Use the command line to manipulate numbers\n    # Hint: Use the command\
    \ line to manipulate arrays\n    # Hint: Use the command line to manipulate files\n\
    \    # Hint: Use the command line to manipulate strings\n    # Hint: Use the command\
    \ line to manipulate numbers\n    # Hint: Use the command line to manipulate arrays\n\
    \    # Hint: Use the command line to manipulate files\n    # Hint: Use the command\
    \ line to manipulate strings\n    # Hint: Use the command line to manipulate numbers\n\
    \    # Hint: Use the command line to manipulate arrays\n    # Hint: Use the command\
    \ line to manipulate files\n    # Hint: Use the command line to manipulate strings\n\
    \    # Hint: Use the command line to manipulate numbers\n    # Hint: Use the\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph16e1d36.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmph16e1d36.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: your code here\n\
    \    # Hint: you can use the tr command to translate characters\n    # tr 'a-z'\
    \ 'c-za-b'\n    # tr 'a-z' 'e-za-d'\n    # tr 'a-z' 'g-za-f'\n    # tr 'a-z' 'i-za-h'\n\
    \    # tr 'a-z' 'k-za-j'\n    # tr 'a-z' 'm-za-l'\n    # tr 'a-z' 'o-za-n'\n \
    \   # tr 'a-z' 'q-za-p'\n    # tr 'a-z' 's-za-r'\n    # tr 'a-z' 'u-za-t'\n  \
    \  # tr 'a-z' 'w-za-v'\n    # tr 'a-z' 'y-za-x'\n    # tr 'a-z' 'a-za'\n    #\
    \ tr 'a-z' 'c-za-b'\n    # tr 'a-z' 'e-za-d'\n    # tr 'a-z' 'g-za-f'\n    # tr\
    \ 'a-z' 'i-za-h'\n    # tr 'a-z' 'k-za-j'\n    # tr 'a-z' 'm-za-l'\n    # tr 'a-z'\
    \ 'o-za-n'\n    # tr 'a-z' 'q-za-p'\n    # tr 'a-z' 's-za-r'\n    # tr 'a-z' 'u-za-t'\n\
    \    # tr 'a-z' 'w-za-v'\n    # tr 'a-z' 'y-za-x'\n    # tr 'a-z' 'a-za'\n   \
    \ # tr 'a-z' 'c-za-b'\n    # tr 'a-z' 'e-za-d'\n    # tr 'a-z' 'g-za-f'\n    #\
    \ tr 'a-z' 'i-za-h'\n    # tr 'a-z' 'k-\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd3qzxuzg.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpd3qzxuzg.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: write your\
    \ code here\n    # Hint: use the ord and chr functions\n    # Hint: use the modulo\
    \ operator\n    # Hint: use the range function\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the int function\n    # Hint:\
    \ use the str function\n    # Hint: use the zip function\n    # Hint: use the\
    \ len function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the int function\n    # Hint: use\
    \ the str function\n    # Hint: use the zip function\n    # Hint: use the len\
    \ function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the int function\n    # Hint: use\
    \ the str function\n    # Hint: use the zip function\n    # Hint: use the len\
    \ function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the int function\n    # Hint: use\
    \ the str function\n    # Hint: use the zip function\n    # Hint: use the len\
    \ function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\
    \ Hint: use the map function\n    # Hint: use the int function\n    # Hint: use\
    \ the str function\n    # Hint: use the zip function\n    # Hint: use the len\
    \ function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the join function\n    #\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo1y6rg09.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpo1y6rg09.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values\n    # Hint: You can use the modulo\
    \ operator to wrap around the alphabet\n    #       if you go past the end\n \
    \   # Hint: You can use the tr command to translate characters\n    #       For\
    \ example, tr '[:lower:]' '[:upper:]' will convert all\n    #       lowercase\
    \ letters to uppercase letters\n    # Hint: You can use the echo command to print\
    \ a string\n    # Hint: You can use the seq command to generate a sequence of\n\
    \    #       numbers\n    # Hint: You can use the rev command to reverse a string\n\
    \    # Hint: You can use the fold command to wrap a string to a certain\n    #\
    \       width\n    # Hint: You can use the sort command to sort a string\n   \
    \ # Hint: You can use the wc command to count the number of lines,\n    #    \
    \   words, and characters in a string\n    # Hint: You can use the head command\
    \ to get the first line of a\n    #       string\n    # Hint: You can use the\
    \ tail command to get all but the first line\n    #       of a string\n    # Hint:\
    \ You can use the cut command to get a substring of a string\n    #       based\
    \ on character position\n    # Hint: You can use the tr command to delete characters\
    \ from a\n    #       string\n    # Hint: You can use the paste command to merge\
    \ lines of files\n    # Hint: You can use the uniq command to remove duplicate\
    \ lines from\n    #       a file\n    # Hint: You can use the tee command to redirect\
    \ output to a file\n    #       and also pass it to stdout\n    # Hint: You can\
    \ use the diff command to compare two files\n    # Hint: You can use the grep\
    \ command to find lines in a file that\n    #       match a pattern\n    # Hint:\
    \ You can use the sed command to find and replace text in a\n    #       file\n\
    \    # Hint: You can use the awk command to do more complex processing\n    #\
    \       of the contents of a file\n    # Hint: You can use the man\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4ln93zjs.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmp4ln93zjs.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: use the tr command\n    echo $1 | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo \"Write your code here\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the following command to get the length of\
    \ a string:\n    # length=$(echo $1 | wc -c)\n    # Hint: You can use the following\
    \ command to get the ASCII value of a character:\n    # ascii=$(echo $1 | od -An\
    \ -tuC)\n    # Hint: You can use the following command to convert an ASCII value\
    \ to a character:\n    # char=$(printf \\\\$(printf '%03o' $ascii))\n    # Hint:\
    \ You can use the following command to convert a character to an ASCII value:\n\
    \    # ascii=$(printf '%d' \"'$char\")\n    # Hint: You can use the following\
    \ command to convert an ASCII value to a character:\n    # char=$(printf \\\\\
    $(printf '%03o' $ascii))\n    # Hint: You can use the following command to convert\
    \ a character to an ASCII value:\n    # ascii=$(printf '%d' \"'$char\")\n    #\
    \ Hint: You can use the following command to convert an ASCII value to a character:\n\
    \    # char=$(printf \\\\$(printf '%03o' $ascii))\n    # Hint: You can use the\
    \ following command to convert a character to an ASCII value:\n    # ascii=$(printf\
    \ '%d' \"'$char\")\n    # Hint: You can use the following command to convert an\
    \ ASCII value to a character:\n    # char=$(printf \\\\$(printf '%03o' $ascii))\n\
    \    # Hint: You can use the following command to convert a character to an ASCII\
    \ value:\n    # ascii=$(printf '%d' \"'$char\")\n    # Hint: You can use the following\
    \ command to convert an ASCII value to a character:\n    # char=$(printf \\\\\
    $(printf '%03o' $ascii))\n    # Hint: You can use the following command to convert\
    \ a character to an ASCII value:\n    # ascii=$(printf '%d' \"'$char\")\n    #\
    \ Hint: You can use the following command to convert an ASCII value to a character:\n\
    \    # char=$(\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0vnquhfh.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp0vnquhfh.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    echo $1 | tr \"a-z\" \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo \"hi\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Your code here\n\
    \t# Hint: You can use the modulo operator to wrap around the alphabet\n\t# Hint:\
    \ You can use the ord() and chr() functions to convert between\n\t#       characters\
    \ and their ASCII values\n\t# Hint: You can use the echo command to output a string\n\
    \t# Hint: You can use the expr command to do arithmetic\n\t# Hint: You can use\
    \ the tr command to replace characters in a string\n\t# Hint: You can use the\
    \ seq command to generate a sequence of numbers\n\t# Hint: You can use the paste\
    \ command to combine two strings\n\t# Hint: You can use the cut command to extract\
    \ a substring\n\t# Hint: You can use the rev command to reverse a string\n\t#\
    \ Hint: You can use the sort command to sort a string\n\t# Hint: You can use the\
    \ uniq command to remove duplicates from a string\n\t# Hint: You can use the wc\
    \ command to count the number of characters in a string\n\t# Hint: You can use\
    \ the head command to extract the first character in a string\n\t# Hint: You can\
    \ use the tail command to extract all but the first character in a string\n\t\
    # Hint: You can use the tr command to translate characters in a string\n\t# Hint:\
    \ You can use the tr command to delete characters in a string\n\t# Hint: You can\
    \ use the tr command to squeeze characters in a string\n\t# Hint: You can use\
    \ the tr command to complement characters in a string\n\t# Hint: You can use the\
    \ tr command to fold characters in a string\n\t# Hint: You can use the tr command\
    \ to translate characters in a string\n\t# Hint: You can use the tr command to\
    \ translate characters in a string\n\t# Hint: You can use the tr command to translate\
    \ characters in a string\n\t# Hint: You can use the tr command to translate characters\
    \ in a string\n\t# Hint: You can use the tr command to translate characters in\
    \ a string\n\t# Hint: You can use the tr command to translate characters in a\
    \ string\n\t# Hint: You can use the tr command to translate characters in a string\n\
    \t# Hint: You can use the tr command to translate characters in a string\n\t#\
    \ Hint:\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3i4bqmde.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp3i4bqmde.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and ASCII values.\n    # Hint: You can use the modulo\
    \ operator to wrap around the alphabet\n    #       if you go past the end.\n\
    \    # Hint: You can use the built-in tr command to do the encryption.\n    #\
    \       For example, tr 'a-z' 'b-za' will shift all letters by one.\n    #   \
    \    You can use the -d option to delete characters.\n    #       For example,\
    \ tr -d 'a-z' will delete all letters.\n    # Hint: You can use the built-in echo\
    \ command to print a string.\n    #       For example, echo \"hello\" will print\
    \ \"hello\".\n    # Hint: You can use the built-in printf command to print a string.\n\
    \    #       For example, printf \"hello\" will print \"hello\".\n    # Hint:\
    \ You can use the built-in read command to read a string.\n    #       For example,\
    \ read -p \"Enter a string: \" str will read a string\n    #       from the user\
    \ and store it in the variable str.\n    # Hint: You can use the built-in read\
    \ command to read a character.\n    #       For example, read -n 1 -p \"Enter\
    \ a character: \" char will read\n    #       a character from the user and store\
    \ it in the variable char.\n    # Hint: You can use the built-in read command\
    \ to read a number.\n    #       For example, read -p \"Enter a number: \" num\
    \ will read a number\n    #       from the user and store it in the variable num.\n\
    \    # Hint: You can use the built-in read command to read a password.\n    #\
    \       For example, read -s -p \"Enter a password: \" pass will read a\n    #\
    \       password from the user and store it in the variable pass.\n    # Hint:\
    \ You can use the built-in read command to read a yes or no.\n    #       For\
    \ example, read -p \"Enter yes or no: \" yn will read a yes or\n    #       no\
    \ from the user and store it in the variable yn.\n    #\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8q48gvak.sh: line 47: syntax error near unexpected token `}''

    /tmp/tmp8q48gvak.sh: line 47: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    # ASCII values and characters.\n    # Hint: You can use the modulo operator\
    \ to wrap around the alphabet.\n    # Hint: You can use the echo command to return\
    \ a string.\n    # Hint: You can use the seq command to generate a sequence of\
    \ numbers.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the tr command to delete characters.\n    # Hint: You\
    \ can use the tr command to squeeze repeated characters.\n    # Hint: You can\
    \ use the tr command to translate characters.\n    # Hint: You can use the tr\
    \ command to delete characters.\n    # Hint: You can use the tr command to squeeze\
    \ repeated characters.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the tr command to delete characters.\n    # Hint: You\
    \ can use the tr command to squeeze repeated characters.\n    # Hint: You can\
    \ use the tr command to translate characters.\n    # Hint: You can use the tr\
    \ command to delete characters.\n    # Hint: You can use the tr command to squeeze\
    \ repeated characters.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the tr command to delete characters.\n    # Hint: You\
    \ can use the tr command to squeeze repeated characters.\n    # Hint: You can\
    \ use the tr command to translate characters.\n    # Hint: You can use the tr\
    \ command to delete characters.\n    # Hint: You can use the tr command to squeeze\
    \ repeated characters.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the tr command to delete characters.\n    # Hint: You\
    \ can use the tr command to squeeze repeated characters.\n    # Hint: You can\
    \ use the tr command to translate characters.\n    # Hint: You can use the tr\
    \ command to delete characters.\n    # Hint: You can use the tr command to squeeze\
    \ repeated characters.\n    # Hint: You can use the tr command to translate characters.\n\
    \    # Hint: You can use the tr command to delete\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3qk4g5d6.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmp3qk4g5d6.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Implement this\
    \ function\n\techo \"Not yet implemented\"\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    # in a string.\n    # Hint: You can use the echo command to print a string.\n\
    \    # Hint: You can use the seq command to generate a sequence\n    # of numbers.\n\
    \    # Hint: You can use the tr command to translate characters\n    # in a string.\n\
    \    # Hint: You can use the echo command to print a string.\n    # Hint: You\
    \ can use the seq command to generate a sequence\n    # of numbers.\n    # Hint:\
    \ You can use the tr command to translate characters\n    # in a string.\n   \
    \ # Hint: You can use the echo command to print a string.\n    # Hint: You can\
    \ use the seq command to generate a sequence\n    # of numbers.\n    # Hint: You\
    \ can use the tr command to translate characters\n    # in a string.\n    # Hint:\
    \ You can use the echo command to print a string.\n    # Hint: You can use the\
    \ seq command to generate a sequence\n    # of numbers.\n    # Hint: You can use\
    \ the tr command to translate characters\n    # in a string.\n    # Hint: You\
    \ can use the echo command to print a string.\n    # Hint: You can use the seq\
    \ command to generate a sequence\n    # of numbers.\n    # Hint: You can use the\
    \ tr command to translate characters\n    # in a string.\n    # Hint: You can\
    \ use the echo command to print a string.\n    # Hint: You can use the seq command\
    \ to generate a sequence\n    # of numbers.\n    # Hint: You can use the tr command\
    \ to translate characters\n    # in a string.\n    # Hint: You can use the echo\
    \ command to print a string.\n    # Hint: You can use the seq command to generate\
    \ a sequence\n    # of numbers.\n    # Hint: You can use the tr command to translate\
    \ characters\n    # in a string.\n    # Hint: You can use the echo command to\
    \ print a string.\n    # Hint: You can use the seq command to generate a sequence\n\
    \    # of numbers.\n    # Hint: You can use the tr command to translate\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnefhgwzu.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpnefhgwzu.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the ord and chr bash functions to convert\n\
    \    # between characters and their ASCII values.\n    # Hint: You can use the\
    \ modulo operator to wrap around the \n    # alphabet.\n    # Hint: You can use\
    \ the echo -n command to print without a newline\n    # and the echo -e command\
    \ to interpret backslash escapes.\n    # Hint: You can use the tr command to translate\
    \ characters.\n    # Hint: You can use the fold command to wrap lines at a certain\n\
    \    # number of characters.\n    # Hint: You can use the rev command to reverse\
    \ lines of text.\n    # Hint: You can use the tac command to reverse lines of\
    \ text.\n    # Hint: You can use the sort command to sort lines of text.\n   \
    \ # Hint: You can use the uniq command to remove duplicate lines of text.\n  \
    \  # Hint: You can use the wc command to count lines, words, and characters.\n\
    \    # Hint: You can use the head command to print the first part of files.\n\
    \    # Hint: You can use the tail command to print the last part of files.\n \
    \   # Hint: You can redirect the output of a command to a file with >.\n    #\
    \ Hint: You can append the output of a command to a file with >>.\n    # Hint:\
    \ You can send the output of a command to another command\n    # with |.\n   \
    \ # Hint: You can send the output of a command to another command\n    # and then\
    \ to a file with | >.\n    # Hint: You can send the output of a command to another\
    \ command\n    # and then append to a file with | >>.\n    # Hint: You can send\
    \ the output of a command to another command\n    # and then send the output of\
    \ that command to another command\n    # with | |.\n    # Hint: You can send the\
    \ output of a command to another command\n    # and then send the output of that\
    \ command to another command\n    # and then to a file with | | >.\n    # Hint:\
    \ You can send the output of a command to another command\n    # and then send\
    \ the output of that command to another command\n    #\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7xy26ec5.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmp7xy26ec5.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Write your code\
    \ here\n\techo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: implement this\
    \ function\n\techo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr 'a-z'\
    \ 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9dfl2p91.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp9dfl2p91.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       ASCII numbers and characters.\n    #       ord returns the ASCII\
    \ number of a character\n    #       chr returns the character of an ASCII number\n\
    \    #       For example:\n    #       >>> $(ord \"a\")\n    #       97\n    #\
    \       >>> $(chr 97)\n    #       \"a\"\n    #       >>> $(chr $(ord \"a\"))\n\
    \    #       \"a\"\n    #       >>> $(chr $(ord \"a\") + 1)\n    #       \"b\"\
    \n    #       >>> $(chr $(ord \"a\") + 2)\n    #       \"c\"\n    #       >>>\
    \ $(chr $(ord \"a\") + 3)\n    #       \"d\"\n    #       >>> $(chr $(ord \"a\"\
    ) + 4)\n    #       \"e\"\n    #       >>> $(chr $(ord \"a\") + 5)\n    #    \
    \   \"f\"\n    #       >>> $(chr $(ord \"a\") + 6)\n    #       \"g\"\n    # \
    \      >>> $(chr $(ord \"a\") + 7)\n    #       \"h\"\n    #       >>> $(chr $(ord\
    \ \"a\") + 8)\n    #       \"i\"\n    #       >>> $(chr $(ord \"a\") + 9)\n  \
    \  #       \"j\"\n    #       >>> $(chr $(ord \"a\") + 10)\n    #       \"k\"\n\
    \    #       >>> $(chr $(ord \"a\") + 11)\n    #       \"l\"\n    #       >>>\
    \ $(chr $(ord \"a\") + 12)\n    #       \"m\"\n    #       >>> $(chr $(ord \"\
    a\") + 13)\n    #       \"n\"\n    #       >>> $(chr $(ord \"a\") + 14)\n    #\
    \       \"o\"\n    #       >>> $(chr $(ord \"a\") + 15)\n    #       \"p\"\n \
    \   #       >>> $(chr $(ord \"a\") + 16)\n    #       \"q\"\n    #       >>> $(chr\
    \ $(ord \"a\") + 17)\n    #       \"r\"\n\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw6z32hp3.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpw6z32hp3.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: implement\n\t\
    echo \"$1\" | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the tr command\
    \ to replace characters with other\n    #       characters\n    # Hint: You can\
    \ use the echo command to return a value\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint: You can use the paste command\
    \ to combine two sequences of\n    #       numbers\n    # Hint: You can use the\
    \ tr command to translate characters to other\n    #       characters\n    # Hint:\
    \ You can use the tr command to delete characters\n    # Hint: You can use the\
    \ tr command to squeeze repeated characters\n    # Hint: You can use the tr command\
    \ to translate characters to other\n    #       characters\n    # Hint: You can\
    \ use the tr command to delete characters\n    # Hint: You can use the tr command\
    \ to squeeze repeated characters\n    # Hint: You can use the tr command to translate\
    \ characters to other\n    #       characters\n    # Hint: You can use the tr\
    \ command to delete characters\n    # Hint: You can use the tr command to squeeze\
    \ repeated characters\n    # Hint: You can use the tr command to translate characters\
    \ to other\n    #       characters\n    # Hint: You can use the tr command to\
    \ delete characters\n    # Hint: You can use the tr command to squeeze repeated\
    \ characters\n    # Hint: You can use the tr command to translate characters to\
    \ other\n    #       characters\n    # Hint: You can use the tr command to delete\
    \ characters\n    # Hint: You can use the tr command to squeeze repeated characters\n\
    \    # Hint: You can use the tr command to translate characters to other\n   \
    \ #       characters\n    # Hint: You can use the tr command to delete characters\n\
    \    # Hint: You can use the tr command to squeeze repeated characters\n    #\
    \ Hint: You can use the tr command to translate characters to other\n    #   \
    \    characters\n    # Hint: You can use the tr command to delete characters\n\
    \    # Hint: You can use the tr command to squeeze repeated characters\n    #\
    \ Hint:\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph2of77r2.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmph2of77r2.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    # Hint: You can use the modulo operator to wrap around the alphabet\n   \
    \ # Hint: You can use the ord and chr functions to convert between\n    #    \
    \   characters and their ASCII values\n    # Hint: You can use the echo command\
    \ to print a string\n    # Hint: You can use the expr command to do arithmetic\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the bc command to do floating point arithmetic\n    # Hint: You can\
    \ use the printf command to format strings\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint: You can use the paste command\
    \ to concatenate strings\n    # Hint: You can use the fold command to wrap lines\n\
    \    # Hint: You can use the sort command to sort lines\n    # Hint: You can use\
    \ the uniq command to remove duplicate lines\n    # Hint: You can use the head\
    \ command to get the first line\n    # Hint: You can use the tail command to get\
    \ all but the first line\n    # Hint: You can use the wc command to count lines\n\
    \    # Hint: You can use the rev command to reverse lines\n    # Hint: You can\
    \ use the cut command to cut fields from lines\n    # Hint: You can use the tr\
    \ command to translate characters\n    # Hint: You can use the sed command to\
    \ replace characters\n    # Hint: You can use the grep command to find lines\n\
    \    # Hint: You can use the awk command to do more advanced line processing\n\
    \    # Hint: You can use the xargs command to run commands on lines\n    # Hint:\
    \ You can use the tee command to send output to multiple places\n    # Hint: You\
    \ can use the find command to find files\n    # Hint: You can use the xargs command\
    \ to run commands on files\n    # Hint: You can use the cat command to read files\n\
    \    # Hint: You can use the sort command to sort lines\n    # Hint: You can use\
    \ the uniq command to remove duplicate lines\n    # Hint: You can use the head\
    \ command to get the first line\n    # Hint: You can use the tail command to get\
    \ all but the\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplc4lc4zk.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmplc4lc4zk.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    #       For example:\n  \
    \  #       >>> $(ord \"a\")\n    #       97\n    #       >>> $(chr 97)\n    #\
    \       \"a\"\n    #\n    #       You can use the modulo operator to wrap around\
    \ the alphabet.\n    #       For example:\n    #       >>> $(($(ord \"z\") + 1))\n\
    \    #       97\n    #       >>> $(chr $(($(ord \"z\") + 1)))\n    #       \"\
    a\"\n    #\n    #       You can use the built-in echo command to print to the\
    \ terminal.\n    #       For example:\n    #       >>> echo \"hello\"\n    # \
    \      hello\n    #\n    #       You can use the built-in read command to read\
    \ from the terminal.\n    #       For example:\n    #       >>> read -p \"Enter\
    \ a string: \" str\n    #       Enter a string: hello\n    #       >>> echo $str\n\
    \    #       hello\n    #\n    #       You can use the built-in printf command\
    \ to format a string.\n    #       For example:\n    #       >>> printf \"The\
    \ string %s has %d characters.\\n\" \"hello\" 5\n    #       The string hello\
    \ has 5 characters.\n    #\n    #       You can use the built-in seq command to\
    \ generate a sequence of\n    #       numbers.\n    #       For example:\n   \
    \ #       >>> seq 1 5\n    #       1\n    #       2\n    #       3\n    #    \
    \   4\n    #       5\n    #\n    #       You can use the built-in tr command to\
    \ translate characters.\n    #       For example:\n    #       >>> echo \"hello\"\
    \ | tr \"el\" \"ip\"\n    #       hippo\n    #\n    #       You can use the built-in\
    \ tr command to delete characters.\n    #       For example:\n    #       >>>\
    \ echo \"hello\" | tr -d \"l\"\n    #       heo\n    #\n    #       You can use\
    \ the built-in tr command to squeeze repeated\n    #       characters.\n\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4us8gtr4.sh: line 74: syntax error near unexpected token `}''

    /tmp/tmp4us8gtr4.sh: line 74: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       in a string.\n    #       For example:\n    #       echo \"hello\"\
    \ | tr 'a-z' 'b-za'\n    #       will output:\n    #       \"ifmmp\"\n    #  \
    \     This is because the first argument to tr is the set of\n    #       characters\
    \ to translate from and the second argument is\n    #       the set of characters\
    \ to translate to.\n    #       The characters in the first set are translated\
    \ to the\n    #       corresponding characters in the second set.\n    #     \
    \  If the second set is shorter than the first set, the\n    #       second set\
    \ is repeated until it is as long as the first\n    #       set.\n    #      \
    \ In the example above, the first set is 'a-z' which means\n    #       all characters\
    \ from 'a' to 'z'.\n    #       The second set is 'b-za' which means all characters\
    \ from\n    #       'b' to 'z' and then 'a'.\n    #       Therefore, 'a' is translated\
    \ to 'b', 'b' is translated to\n    #       'c', 'c' is translated to 'd', and\
    \ so on until 'z' is\n    #       translated to 'a'.\n    #       You can also\
    \ use the tr command to delete characters.\n    #       For example:\n    #  \
    \     echo \"hello\" | tr -d 'l'\n    #       will output:\n    #       \"heo\"\
    \n    #       This is because the -d flag tells tr to delete the\n    #      \
    \ characters in the first set.\n    #       In the example above, the first set\
    \ is 'l' which means\n    #       the letter 'l'.\n    #       Therefore, all\
    \ 'l' characters are deleted.\n    #       You can also use the tr command to\
    \ squeeze repeated\n    #       characters.\n    #       For example:\n    # \
    \      echo \"hello\" | tr -s 'l'\n    #       will output:\n    #       \"helo\"\
    \n    #       This is because the -s flag tells tr to squeeze repeated\n    #\
    \       characters in the first set.\n    #       In the example above\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc7frd44c.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpc7frd44c.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Write your code\
    \ here\n\t# Hint: You can use the ord and chr bash functions to convert between\n\
    \t# ASCII characters and their integer values.\n\t# ord takes a character and\
    \ returns its ASCII value\n\t# chr takes an ASCII value and returns its character\n\
    \t# Example:\n\t# >>> ord \"a\"\n\t# 97\n\t# >>> chr 97\n\t# \"a\"\n\t# >>> ord\
    \ \"b\"\n\t# 98\n\t# >>> chr 98\n\t# \"b\"\n\t# >>> chr $(($(ord \"a\") + 1))\n\
    \t# \"b\"\n\t# >>> chr $(($(ord \"b\") + 1))\n\t# \"c\"\n\t# >>> chr $(($(ord\
    \ \"c\") + 1))\n\t# \"d\"\n\t# >>> chr $(($(ord \"d\") + 1))\n\t# \"e\"\n\t# >>>\
    \ chr $(($(ord \"e\") + 1))\n\t# \"f\"\n\t# >>> chr $(($(ord \"f\") + 1))\n\t\
    # \"g\"\n\t# >>> chr $(($(ord \"g\") + 1))\n\t# \"h\"\n\t# >>> chr $(($(ord \"\
    h\") + 1))\n\t# \"i\"\n\t# >>> chr $(($(ord \"i\") + 1))\n\t# \"j\"\n\t# >>> chr\
    \ $(($(ord \"j\") + 1))\n\t# \"k\"\n\t# >>> chr $(($(ord \"k\") + 1))\n\t# \"\
    l\"\n\t# >>> chr $(($(ord \"l\") + 1))\n\t# \"m\"\n\t# >>> chr $(($(ord \"m\"\
    ) + 1))\n\t# \"n\"\n\t# >>> chr $(($(ord \"n\") + 1))\n\t# \"o\"\n\t# >>> chr\
    \ $(($(ord \"o\") + 1))\n\t# \"p\"\n\t# >>> chr $(($(ord \"p\") + 1))\n\t# \"\
    q\"\n\t# >>> chr $(($(ord \"q\") + 1))\n\t# \"r\"\n\t# >>> chr $(($(ord \"r\"\
    ) + 1))\n\t#\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi2hzpl_9.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmpi2hzpl_9.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Implement this\
    \ function\n\t# Hint: You can use the modulo operator to wrap around the alphabet\n\
    \t# Hint: You can use the ord and chr functions to convert between ascii characters\
    \ and their integer values\n\t# Hint: You can use the string concatenation operator\
    \ to join two strings together\n\t# Hint: You can use the string slicing operator\
    \ to extract a substring from a string\n\t# Hint: You can use the string length\
    \ operator to get the length of a string\n\t# Hint: You can use the string indexing\
    \ operator to get the character at a given index in a string\n\t# Hint: You can\
    \ use the string assignment operator to replace a character at a given index in\
    \ a string\n\t# Hint: You can use the string assignment operator to replace a\
    \ substring at a given index in a string\n\t# Hint: You can use the string assignment\
    \ operator to replace a substring at a given index in a string\n\t# Hint: You\
    \ can use the string assignment operator to replace a substring at a given index\
    \ in a string\n\t# Hint: You can use the string assignment operator to replace\
    \ a substring at a given index in a string\n\t# Hint: You can use the string assignment\
    \ operator to replace a substring at a given index in a string\n\t# Hint: You\
    \ can use the string assignment operator to replace a substring at a given index\
    \ in a string\n\t# Hint: You can use the string assignment operator to replace\
    \ a substring at a given index in a string\n\t# Hint: You can use the string assignment\
    \ operator to replace a substring at a given index in a string\n\t# Hint: You\
    \ can use the string assignment operator to replace a substring at a given index\
    \ in a string\n\t# Hint: You can use the string assignment operator to replace\
    \ a substring at a given index in a string\n\t# Hint: You can use the string assignment\
    \ operator to replace a substring at a given index in a string\n\t# Hint: You\
    \ can use the string assignment operator to replace a substring at a given index\
    \ in a string\n\t# Hint: You can use the string assignment operator to replace\
    \ a substring at a given index in a string\n\t# Hint: You can use the string assignment\
    \ operator to replace a substring at a given index in a\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfqaewr_5.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpfqaewr_5.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord and chr functions to convert between\n    # \
    \      ascii characters and their integer values\n    # Hint: You can use the\
    \ expr command to perform arithmetic\n    # Hint: You can use the echo command\
    \ to print\n    # Hint: You can use the tr command to replace characters\n   \
    \ # Hint: You can use the fold command to wrap long lines\n    # Hint: You can\
    \ use the bc command to perform floating point arithmetic\n    # Hint: You can\
    \ use the printf command to format strings\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint: You can use the paste command\
    \ to merge lines\n    # Hint: You can use the sort command to sort lines\n   \
    \ # Hint: You can use the uniq command to remove duplicate lines\n    # Hint:\
    \ You can use the head command to get the first line\n    # Hint: You can use\
    \ the tail command to get the last line\n    # Hint: You can use the wc command\
    \ to count lines\n    # Hint: You can use the cut command to extract fields\n\
    \    # Hint: You can use the tr command to translate characters\n    # Hint: You\
    \ can use the sed command to replace characters\n    # Hint: You can use the grep\
    \ command to find lines\n    # Hint: You can use the awk command to find and replace\
    \ characters\n    # Hint: You can use the rev command to reverse lines\n    #\
    \ Hint: You can use the tee command to print to multiple outputs\n    # Hint:\
    \ You can use the xargs command to execute commands\n    # Hint: You can use the\
    \ find command to find files\n    # Hint: You can use the stat command to get\
    \ file information\n    # Hint: You can use the du command to get file sizes\n\
    \    # Hint: You can use the stat command to get file sizes\n    # Hint: You can\
    \ use the cat command to read files\n    # Hint: You can use the mv command to\
    \ move files\n    # Hint: You can use the cp command to copy files\n    # Hint:\
    \ You can use the rm command\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_qcmd12i.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp_qcmd12i.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo $1 | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    # Hint: You can use the modulo\
    \ operator to wrap around the alphabet\n    #       if you go past the end.\n\
    \    # Hint: You can use the echo command to print a string.\n    # Hint: You\
    \ can use the seq command to generate a sequence of numbers.\n    # Hint: You\
    \ can use the tr command to translate characters.\n    # Hint: You can use the\
    \ rev command to reverse a string.\n    # Hint: You can use the fold command to\
    \ wrap long lines.\n    # Hint: You can use the sort command to sort lines.\n\
    \    # Hint: You can use the uniq command to remove duplicate lines.\n    # Hint:\
    \ You can use the head command to get the first line of output.\n    # Hint: You\
    \ can use the tail command to get all but the first line of output.\n    # Hint:\
    \ You can use the wc command to count lines, words, and characters.\n    # Hint:\
    \ You can use the cut command to get a substring by position.\n    # Hint: You\
    \ can use the tr command to delete characters.\n    # Hint: You can use the expr\
    \ command to do arithmetic.\n    # Hint: You can use the bc command to do floating\
    \ point arithmetic.\n    # Hint: You can use the factor command to factor a number.\n\
    \    # Hint: You can use the factor command to get prime factors.\n    # Hint:\
    \ You can use the factor command to get prime factors.\n    # Hint: You can use\
    \ the factor command to get prime factors.\n    # Hint: You can use the factor\
    \ command to get prime factors.\n    # Hint: You can use the factor command to\
    \ get prime factors.\n    # Hint: You can use the factor command to get prime\
    \ factors.\n    # Hint: You can use the factor command to get prime factors.\n\
    \    # Hint: You can use the factor command to get prime factors.\n    # Hint:\
    \ You can use the factor command to get prime factors.\n    # Hint: You can use\
    \ the factor command to get prime factors.\n    # Hint\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpniiygkhb.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpniiygkhb.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet.\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and integers.\n    # Hint: You can use the range operator\
    \ to iterate over the characters\n    #       in a string.\n    # Hint: You can\
    \ use the join() function to join a list of characters\n    #       into a string.\n\
    \    # Hint: You can use the map() function to apply a function to each\n    #\
    \       element in a list.\n    # Hint: You can use the ord() and chr() functions\
    \ to convert between\n    #       characters and integers.\n    # Hint: You can\
    \ use the range operator to iterate over the characters\n    #       in a string.\n\
    \    # Hint: You can use the join() function to join a list of characters\n  \
    \  #       into a string.\n    # Hint: You can use the map() function to apply\
    \ a function to each\n    #       element in a list.\n    # Hint: You can use\
    \ the ord() and chr() functions to convert between\n    #       characters and\
    \ integers.\n    # Hint: You can use the range operator to iterate over the characters\n\
    \    #       in a string.\n    # Hint: You can use the join() function to join\
    \ a list of characters\n    #       into a string.\n    # Hint: You can use the\
    \ map() function to apply a function to each\n    #       element in a list.\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and integers.\n    # Hint: You can use the range operator\
    \ to iterate over the characters\n    #       in a string.\n    # Hint: You can\
    \ use the join() function to join a list of characters\n    #       into a string.\n\
    \    # Hint: You can use the map() function to apply a function to each\n    #\
    \       element in a list.\n    # Hint: You can use the ord() and chr() functions\
    \ to convert between\n    #       characters and integers.\n    # Hint: You can\
    \ use the range operator to iterate over the characters\n\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfnwj9htn.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpfnwj9htn.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the ord and chr functions\n    # Hint: use the modulo\
    \ operator\n    # Hint: use the range operator\n    # Hint: use the join function\n\
    \    # Hint: use the map function\n    # Hint: use the zip function\n    # Hint:\
    \ use the list function\n    # Hint: use the str function\n    # Hint: use the\
    \ int function\n    # Hint: use the len function\n    # Hint: use the ord function\n\
    \    # Hint: use the chr function\n    # Hint: use the range function\n    # Hint:\
    \ use the map function\n    # Hint: use the zip function\n    # Hint: use the\
    \ list function\n    # Hint: use the str function\n    # Hint: use the int function\n\
    \    # Hint: use the len function\n    # Hint: use the ord function\n    # Hint:\
    \ use the chr function\n    # Hint: use the range function\n    # Hint: use the\
    \ map function\n    # Hint: use the zip function\n    # Hint: use the list function\n\
    \    # Hint: use the str function\n    # Hint: use the int function\n    # Hint:\
    \ use the len function\n    # Hint: use the ord function\n    # Hint: use the\
    \ chr function\n    # Hint: use the range function\n    # Hint: use the map function\n\
    \    # Hint: use the zip function\n    # Hint: use the list function\n    # Hint:\
    \ use the str function\n    # Hint: use the int function\n    # Hint: use the\
    \ len function\n    # Hint: use the ord function\n    # Hint: use the chr function\n\
    \    # Hint: use the range function\n    # Hint: use the map function\n    # Hint:\
    \ use the zip function\n    # Hint: use the list function\n    # Hint: use the\
    \ str function\n    # Hint: use the int function\n    # Hint: use the len function\n\
    \    # Hint: use the ord function\n    # Hint: use the chr function\n    # Hint:\
    \ use the range function\n    # H\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplzlusx2j.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmplzlusx2j.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: you can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: you can use the ord() and chr() functions to convert between\n  \
    \  #       characters and ascii values\n    # Hint: you can use the echo -n command\
    \ to print without a newline\n    # Hint: you can use the echo -e command to interpret\
    \ escape characters\n    # Hint: you can use the tr command to translate characters\n\
    \    # Hint: you can use the fold command to wrap text\n    # Hint: you can use\
    \ the rev command to reverse text\n    # Hint: you can use the sort command to\
    \ sort text\n    # Hint: you can use the uniq command to remove duplicate text\n\
    \    # Hint: you can use the wc command to count words\n    # Hint: you can use\
    \ the bc command to do math\n    # Hint: you can use the seq command to generate\
    \ a sequence of numbers\n    # Hint: you can use the head command to get the first\
    \ line of output\n    # Hint: you can use the tail command to get the last line\
    \ of output\n    # Hint: you can use the cut command to get a substring\n    #\
    \ Hint: you can use the tr command to delete characters\n    # Hint: you can use\
    \ the paste command to merge lines of files\n    # Hint: you can use the join\
    \ command to join lines of files\n    # Hint: you can use the sed command to find\
    \ and replace text\n    # Hint: you can use the grep command to find text\n  \
    \  # Hint: you can use the diff command to compare files\n    # Hint: you can\
    \ use the comm command to compare sorted files\n    # Hint: you can use the uniq\
    \ command to remove duplicate lines\n    # Hint: you can use the tee command to\
    \ write to multiple files\n    # Hint: you can use the xargs command to execute\
    \ a command for each line\n    # Hint: you can use the find command to find files\n\
    \    # Hint: you can use the stat command to get file information\n    # Hint:\
    \ you can use the file command to get file information\n    # Hint: you can use\
    \ the du command to get disk usage information\n    # Hint:\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7ty8i3q4.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmp7ty8i3q4.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       For example:\n    #       $ echo \"hello\" | tr \"a-z\" \"b-za\"\n\
    \    #       ifmmp\n    #       $ echo \"hello\" | tr \"a-z\" \"b-za\" | tr \"\
    a-z\" \"b-za\"\n    #       jgnnq\n    #       $ echo \"hello\" | tr \"a-z\" \"\
    b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\"\n    #       khoor\n    # \
    \      $ echo \"hello\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\"\
    \ \"b-za\" | tr \"a-z\" \"b-za\"\n    #       lipps\n    #       $ echo \"hello\"\
    \ | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\"\
    \ \"b-za\" | tr \"a-z\" \"b-za\"\n    #       mjqqt\n    #       $ echo \"hello\"\
    \ | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\"\
    \ \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\"\n    #       nkrru\n  \
    \  #       $ echo \"hello\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"\
    a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\" | tr \"a-z\" \"b-za\"\
    \ | tr \"a-z\" \"b-za\"\n    #       olssv\n    #       $ echo \"hello\" | tr\
    \ \"a-z\" \"b-za\" | tr \"a-z\" \"b-\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp92iq021m.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmp92iq021m.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # HINT: You can use the ord and chr functions to convert between\n\
    \    #       characters and their ASCII values.\n    #       For example:\n  \
    \  #       >>> $(ord \"a\")\n    #       97\n    #       >>> $(chr 97)\n    #\
    \       \"a\"\n    #       >>> $(ord \"b\")\n    #       98\n    #       >>> $(chr\
    \ 98)\n    #       \"b\"\n    #       >>> $(ord \"c\")\n    #       99\n    #\
    \       >>> $(chr 99)\n    #       \"c\"\n    #       >>> $(ord \"d\")\n    #\
    \       100\n    #       >>> $(chr 100)\n    #       \"d\"\n    #       >>> $(ord\
    \ \"e\")\n    #       101\n    #       >>> $(chr 101)\n    #       \"e\"\n   \
    \ #       >>> $(ord \"f\")\n    #       102\n    #       >>> $(chr 102)\n    #\
    \       \"f\"\n    #       >>> $(ord \"g\")\n    #       103\n    #       >>>\
    \ $(chr 103)\n    #       \"g\"\n    #       >>> $(ord \"h\")\n    #       104\n\
    \    #       >>> $(chr 104)\n    #       \"h\"\n    #       >>> $(ord \"i\")\n\
    \    #       105\n    #       >>> $(chr 105)\n    #       \"i\"\n    #       >>>\
    \ $(ord \"j\")\n    #       106\n    #       >>> $(chr 106)\n    #       \"j\"\
    \n    #       >>> $(ord \"k\")\n    #       107\n    #       >>> $(chr 107)\n\
    \    #       \"k\"\n    #       >>> $(ord \"l\")\n    #       108\n    #     \
    \  >>> $(chr 108)\n    #       \"l\"\n    #       >>> $(ord \"m\")\n    #    \
    \   109\n    #       >>> $(chr 109)\n    #       \"m\"\n    #       >>> $(ord\
    \ \"n\")\n    #       110\n    #       >>> $(chr 110)\n    #       \"n\"\n   \
    \ #       >>> $(ord \"o\")\n    #       111\n    #       >>>\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc3y7apo5.sh: line 81: syntax error near unexpected token `}''

    /tmp/tmpc3y7apo5.sh: line 81: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Write your code\
    \ here\n\techo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Implement this\
    \ function\n  echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the ord() and chr() functions to convert\
    \ between\n    # ASCII characters and their integer values.\n    # ord(<char>)\
    \ returns the integer value of <char>\n    # chr(<int>) returns the ASCII character\
    \ of <int>\n    #\n    # Hint: You can use the modulo operator to wrap around\
    \ the alphabet\n    # if you exceed the range of ASCII characters.\n    #\n  \
    \  # Hint: You can use the built-in string concatenation operator to\n    # build\
    \ a string from individual characters.\n    #\n    # Hint: You can use the built-in\
    \ string length operator to find the\n    # length of a string.\n    #\n    #\
    \ Hint: You can use the built-in string index operator to access\n    # individual\
    \ characters in a string.\n    #\n    # Hint: You can use the built-in string\
    \ slicing operator to access\n    # substrings of a string.\n    #\n    # Hint:\
    \ You can use the built-in string replace operator to replace\n    # characters\
    \ in a string.\n    #\n    # Hint: You can use the built-in string tolower operator\
    \ to convert\n    # a string to lowercase.\n    #\n    # Hint: You can use the\
    \ built-in string toupper operator to convert\n    # a string to uppercase.\n\
    \    #\n    # Hint: You can use the built-in string islower operator to check\
    \ if\n    # a string is lowercase.\n    #\n    # Hint: You can use the built-in\
    \ string isupper operator to check if\n    # a string is uppercase.\n    #\n \
    \   # Hint: You can use the built-in string isalpha operator to check if\n   \
    \ # a string is alphabetic.\n    #\n    # Hint: You can use the built-in string\
    \ isdigit operator to check if\n    # a string is numeric.\n    #\n    # Hint:\
    \ You can use the built-in string isalnum operator to check if\n    # a string\
    \ is alphanumeric.\n    #\n    # Hint: You can use the built-in string isspace\
    \ operator to check if\n    # a string is\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphwh3zr32.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmphwh3zr32.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the ord and chr functions\n    # Hint: Use the modulo\
    \ operator (%) to wrap around the alphabet\n    # Hint: Use the range operator\
    \ (..) to generate a sequence of numbers\n    # Hint: Use the tr command to translate\
    \ characters\n    # Hint: Use the echo command to return a string\n    echo \"\
    TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzlm_6sec.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpzlm_6sec.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command to translate characters\n    # Hint:\
    \ Use the echo command to output the result\n    # Hint: Use the $1 variable to\
    \ access the argument\n    # Hint: Use the $() syntax to run a command\n    #\
    \ Hint: Use the tr command to translate characters\n    # Hint: Use the echo command\
    \ to output the result\n    # Hint: Use the $1 variable to access the argument\n\
    \    # Hint: Use the $() syntax to run a command\n    echo $1 | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    # Hint: use the echo command\n\
    \    # Hint: use the $1 variable\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord and chr functions to convert between characters\
    \ and integers\n    # Hint: You can use the string concatenation operator to join\
    \ two strings together\n    # Hint: You can use the string slicing operator to\
    \ extract a substring from a string\n    # Hint: You can use the string length\
    \ operator to get the length of a string\n    # Hint: You can use the string repetition\
    \ operator to repeat a string\n    # Hint: You can use the string indexing operator\
    \ to get the character at a given index\n    # Hint: You can use the string assignment\
    \ operator to assign a new value to a character at a given index\n    # Hint:\
    \ You can use the string comparison operator to compare two strings\n    # Hint:\
    \ You can use the string equality operator to check if two strings are equal\n\
    \    # Hint: You can use the string inequality operator to check if two strings\
    \ are not equal\n    # Hint: You can use the string less than operator to check\
    \ if one string is less than another\n    # Hint: You can use the string less\
    \ than or equal to operator to check if one string is less than or equal to another\n\
    \    # Hint: You can use the string greater than operator to check if one string\
    \ is greater than another\n    # Hint: You can use the string greater than or\
    \ equal to operator to check if one string is greater than or equal to another\n\
    \    # Hint: You can use the string not operator to negate a boolean value\n \
    \   # Hint: You can use the string and operator to check if two boolean values\
    \ are both true\n    # Hint: You can use the string or operator to check if either\
    \ of two boolean values are true\n    # Hint: You can use the string if operator\
    \ to execute a command if a boolean value is true\n    # Hint: You can use the\
    \ string if-else operator to execute a command if a boolean value is true and\
    \ another command if it is false\n    # Hint: You can use the string while operator\
    \ to execute a command repeatedly while a boolean value is true\n    # Hint: You\
    \ can use the string until operator to execute a command repeatedly until a boolean\
    \ value is true\n    # Hint: You can use the\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpblbjpicp.sh: line 42: syntax error near unexpected token `}''

    /tmp/tmpblbjpicp.sh: line 42: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwapofecp.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpwapofecp.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo $1 | tr '[a-z]' '[c-za-b]'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo \"Your code here\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement the\
    \ function here\n    # Hint: Use the tr command to translate characters\n    #\
    \ Hint: Use the echo command to output the result\n    echo $1 | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command\n    echo \"$1\" | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: Use the tr command\n    # Hint: Use the echo command\n\
    \    # Hint: Use the $1 variable\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6xol2e1g.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp6xol2e1g.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo \"Write your code here\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # HINT: use the tr command\n    # HINT: use the echo command\n\
    \    # HINT: use the $1 variable\n    # HINT: use the $2 variable\n    # HINT:\
    \ use the $3 variable\n    # HINT: use the $4 variable\n    # HINT: use the $5\
    \ variable\n    # HINT: use the $6 variable\n    # HINT: use the $7 variable\n\
    \    # HINT: use the $8 variable\n    # HINT: use the $9 variable\n    # HINT:\
    \ use the ${10} variable\n    # HINT: use the ${11} variable\n    # HINT: use\
    \ the ${12} variable\n    # HINT: use the ${13} variable\n    # HINT: use the\
    \ ${14} variable\n    # HINT: use the ${15} variable\n    # HINT: use the ${16}\
    \ variable\n    # HINT: use the ${17} variable\n    # HINT: use the ${18} variable\n\
    \    # HINT: use the ${19} variable\n    # HINT: use the ${20} variable\n    #\
    \ HINT: use the ${21} variable\n    # HINT: use the ${22} variable\n    # HINT:\
    \ use the ${23} variable\n    # HINT: use the ${24} variable\n    # HINT: use\
    \ the ${25} variable\n    # HINT: use the ${26} variable\n    # HINT: use the\
    \ ${27} variable\n    # HINT: use the ${28} variable\n    # HINT: use the ${29}\
    \ variable\n    # HINT: use the ${30} variable\n    # HINT: use the ${31} variable\n\
    \    # HINT: use the ${32} variable\n    # HINT: use the ${33} variable\n    #\
    \ HINT: use the ${34} variable\n    # HINT: use the ${35} variable\n    # HINT:\
    \ use the ${36} variable\n    # HINT: use the ${37} variable\n    # HINT: use\
    \ the ${38} variable\n    # HINT: use the ${39} variable\n    # HINT: use the\
    \ ${40} variable\n    # HINT: use the ${41} variable\n}\n\ncandidate() {\n   \
    \ encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\"\
    \ ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8e8w6o5_.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp8e8w6o5_.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    echo \"$1\" | tr 'a-z' 'c-za-b'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to wrap around the alphabet\n\
    \    # Hint: You can use the ord() and chr() functions to convert between\n  \
    \  #       characters and their ASCII values\n    # Hint: You can use the tr command\
    \ to translate characters\n    # Hint: You can use the echo command to print to\
    \ the terminal\n    # Hint: You can use the seq command to generate a sequence\
    \ of numbers\n    # Hint: You can use the tr command to translate characters\n\
    \    # Hint: You can use the echo command to print to the terminal\n    # Hint:\
    \ You can use the seq command to generate a sequence of numbers\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ echo command to print to the terminal\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the echo command to print to the\
    \ terminal\n    # Hint: You can use the seq command to generate a sequence of\
    \ numbers\n    # Hint: You can use the tr command to translate characters\n  \
    \  # Hint: You can use the echo command to print to the terminal\n    # Hint:\
    \ You can use the seq command to generate a sequence of numbers\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ echo command to print to the terminal\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint: You can use the tr command to\
    \ translate characters\n    # Hint: You can use the echo command to print to the\
    \ terminal\n    # Hint: You can use the seq command to generate a sequence of\
    \ numbers\n    # Hint: You can use the tr command to translate characters\n  \
    \  # Hint: You can use the echo command to print to the terminal\n    # Hint:\
    \ You can use the seq command to generate a sequence of numbers\n    # Hint: You\
    \ can use the tr command to translate characters\n    # Hint: You can use the\
    \ echo command to print to the terminal\n    # Hint: You can use the seq command\
    \ to generate a sequence of numbers\n    # Hint\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7v3_y5xx.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmp7v3_y5xx.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use the tr command\n    # Hint: use the echo command\n\
    \    # Hint: use the $1 variable\n    # Hint: use the $# variable\n    # Hint:\
    \ use the $0 variable\n    # Hint: use the $@ variable\n    # Hint: use the $?\
    \ variable\n    # Hint: use the $* variable\n    # Hint: use the $! variable\n\
    \    # Hint: use the $$ variable\n    # Hint: use the $- variable\n    # Hint:\
    \ use the $PS1 variable\n    # Hint: use the $PS2 variable\n    # Hint: use the\
    \ $PS3 variable\n    # Hint: use the $PS4 variable\n    # Hint: use the $LINENO\
    \ variable\n    # Hint: use the $SECONDS variable\n    # Hint: use the $RANDOM\
    \ variable\n    # Hint: use the $EUID variable\n    # Hint: use the $UID variable\n\
    \    # Hint: use the $PPID variable\n    # Hint: use the $PID variable\n    #\
    \ Hint: use the $SHLVL variable\n    # Hint: use the $OSTYPE variable\n    # Hint:\
    \ use the $MACHTYPE variable\n    # Hint: use the $HOSTNAME variable\n    # Hint:\
    \ use the $HOSTTYPE variable\n    # Hint: use the $BASH_VERSION variable\n   \
    \ # Hint: use the $BASH_VERSINFO variable\n    # Hint: use the $BASH_VERSINFO[0]\
    \ variable\n    # Hint: use the $BASH_VERSINFO[1] variable\n    # Hint: use the\
    \ $BASH_VERSINFO[2] variable\n    # Hint: use the $BASH_VERSINFO[3] variable\n\
    \    # Hint: use the $BASH_VERSINFO[4] variable\n    # Hint: use the $BASH_VERSINFO[5]\
    \ variable\n    # Hint: use the $BASH_VERSINFO[6] variable\n    # Hint: use the\
    \ $BASH_VERSINFO[7] variable\n    # Hint: use the $BASH_\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpao1_0sea.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpao1_0sea.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    echo \"hi\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Your code here\n\
    \  return\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzlm_6sec.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpzlm_6sec.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"TODO\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: implement this\
    \ function\n  echo $1 | tr '[a-z]' '[c-za-b]'\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the modulo operator to rotate the alphabet\n\
    \    # by a certain number of places.\n    # For example:\n    # >>> $((97 % 26))\n\
    \    # 97\n    # >>> $((98 % 26))\n    # 0\n    # >>> $((99 % 26))\n    # 1\n\
    \    # >>> $((100 % 26))\n    # 2\n    # >>> $((101 % 26))\n    # 3\n    # >>>\
    \ $((102 % 26))\n    # 4\n    # >>> $((103 % 26))\n    # 5\n    # >>> $((104 %\
    \ 26))\n    # 6\n    # >>> $((105 % 26))\n    # 7\n    # >>> $((106 % 26))\n \
    \   # 8\n    # >>> $((107 % 26))\n    # 9\n    # >>> $((108 % 26))\n    # 10\n\
    \    # >>> $((109 % 26))\n    # 11\n    # >>> $((110 % 26))\n    # 12\n    # >>>\
    \ $((111 % 26))\n    # 13\n    # >>> $((112 % 26))\n    # 14\n    # >>> $((113\
    \ % 26))\n    # 15\n    # >>> $((114 % 26))\n    # 16\n    # >>> $((115 % 26))\n\
    \    # 17\n    # >>> $((116 % 26))\n    # 18\n    # >>> $((117 % 26))\n    # 19\n\
    \    # >>> $((118 % 26))\n    # 20\n    # >>> $((119 % 26))\n    # 21\n    # >>>\
    \ $((120 % 26))\n    # 22\n    # >>> $((121 % 26))\n    # 23\n    # >>> $((122\
    \ % 26))\n    # 24\n    # >>> $((123 % 26))\n    # 25\n    # >>> $((124 % 26))\n\
    \    # 0\n    # >>> $((125 % 26))\n    # 1\n    # >>> $((126 % 26))\n    # 2\n\
    \    # >>> $((127 % 26))\n    # 3\n    # >>> $((128 % 26))\n    # 4\n    # >>>\
    \ $((129 % 26))\n    # 5\n    # >>> $((130\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy_hqg69q.sh: line 89: syntax error near unexpected token `}''

    /tmp/tmpy_hqg69q.sh: line 89: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: use tr\n    # Hint: use echo -n to remove the newline\
    \ character\n    # Hint: use the $1 variable to access the first argument\n  \
    \  # Hint: use the $2 variable to access the second argument\n    # Hint: use\
    \ the $3 variable to access the third argument\n    # Hint: use the $4 variable\
    \ to access the fourth argument\n    # Hint: use the $5 variable to access the\
    \ fifth argument\n    # Hint: use the $6 variable to access the sixth argument\n\
    \    # Hint: use the $7 variable to access the seventh argument\n    # Hint: use\
    \ the $8 variable to access the eighth argument\n    # Hint: use the $9 variable\
    \ to access the ninth argument\n    # Hint: use the ${10} variable to access the\
    \ tenth argument\n    # Hint: use the ${11} variable to access the eleventh argument\n\
    \    # Hint: use the ${12} variable to access the twelfth argument\n    # Hint:\
    \ use the ${13} variable to access the thirteenth argument\n    # Hint: use the\
    \ ${14} variable to access the fourteenth argument\n    # Hint: use the ${15}\
    \ variable to access the fifteenth argument\n    # Hint: use the ${16} variable\
    \ to access the sixteenth argument\n    # Hint: use the ${17} variable to access\
    \ the seventeenth argument\n    # Hint: use the ${18} variable to access the eighteenth\
    \ argument\n    # Hint: use the ${19} variable to access the nineteenth argument\n\
    \    # Hint: use the ${20} variable to access the twentieth argument\n    # Hint:\
    \ use the ${21} variable to access the twenty-first argument\n    # Hint: use\
    \ the ${22} variable to access the twenty-second argument\n    # Hint: use the\
    \ ${23} variable to access the twenty-third argument\n    # Hint: use the ${24}\
    \ variable to access the twenty-fourth argument\n    # Hint: use the ${25} variable\
    \ to access the twenty-fifth argument\n    # Hint: use the ${26} variable to access\
    \ the twenty-sixth argument\n    # Hint: use the ${27} variable to access the\
    \ twenty-seventh argument\n    # Hint\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplday6iai.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmplday6iai.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the tr command to translate characters\n\
    \    #       For example:\n    #       $ echo \"hello\" | tr \"a-z\" \"b-za\"\n\
    \    #       \"ifmmp\"\n    #       $ echo \"hello\" | tr \"a-z\" \"c-za-b\"\n\
    \    #       \"jgnnq\"\n    #       $ echo \"hello\" | tr \"a-z\" \"d-za-c\"\n\
    \    #       \"khoor\"\n    #       $ echo \"hello\" | tr \"a-z\" \"e-za-d\"\n\
    \    #       \"lipps\"\n    #       $ echo \"hello\" | tr \"a-z\" \"f-za-e\"\n\
    \    #       \"mjqqt\"\n    #       $ echo \"hello\" | tr \"a-z\" \"g-za-f\"\n\
    \    #       \"nkrru\"\n    #       $ echo \"hello\" | tr \"a-z\" \"h-za-g\"\n\
    \    #       \"olssv\"\n    #       $ echo \"hello\" | tr \"a-z\" \"i-za-h\"\n\
    \    #       \"pmttw\"\n    #       $ echo \"hello\" | tr \"a-z\" \"j-za-i\"\n\
    \    #       \"qnuux\"\n    #       $ echo \"hello\" | tr \"a-z\" \"k-za-j\"\n\
    \    #       \"rovvy\"\n    #       $ echo \"hello\" | tr \"a-z\" \"l-za-k\"\n\
    \    #       \"spwwz\"\n    #       $ echo \"hello\" | tr \"a-z\" \"m-za-l\"\n\
    \    #       \"tqxxa\"\n    #       $ echo \"hello\" | tr \"a-z\" \"n-za-m\"\n\
    \    #       \"uryyb\"\n    #       $ echo \"hello\" | tr \"a-z\" \"o-za-n\"\n\
    \    #       \"vszzc\"\n    #       $ echo \"hello\" | tr \"a-z\" \"p-za-o\"\n\
    \    #       \"wtaad\"\n   \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbtace0gq.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpbtace0gq.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    echo \"Not yet implemented\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Write your\
    \ code here\n    # Hint: You can use the ord() and chr() functions to convert\
    \ between\n    # ASCII characters and their integer values.\n    # ord() takes\
    \ a character and returns its integer value\n    # chr() takes an integer and\
    \ returns its ASCII character\n    # For example:\n    # >>> ord(\"a\")\n    #\
    \ 97\n    # >>> chr(97)\n    # \"a\"\n    # >>> ord(\"b\")\n    # 98\n    # >>>\
    \ chr(98)\n    # \"b\"\n    # >>> ord(\"c\")\n    # 99\n    # >>> chr(99)\n  \
    \  # \"c\"\n    # >>> ord(\"d\")\n    # 100\n    # >>> chr(100)\n    # \"d\"\n\
    \    # >>> ord(\"e\")\n    # 101\n    # >>> chr(101)\n    # \"e\"\n    # >>> ord(\"\
    f\")\n    # 102\n    # >>> chr(102)\n    # \"f\"\n    # >>> ord(\"g\")\n    #\
    \ 103\n    # >>> chr(103)\n    # \"g\"\n    # >>> ord(\"h\")\n    # 104\n    #\
    \ >>> chr(104)\n    # \"h\"\n    # >>> ord(\"i\")\n    # 105\n    # >>> chr(105)\n\
    \    # \"i\"\n    # >>> ord(\"j\")\n    # 106\n    # >>> chr(106)\n    # \"j\"\
    \n    # >>> ord(\"k\")\n    # 107\n    # >>> chr(107)\n    # \"k\"\n    # >>>\
    \ ord(\"l\")\n    # 108\n    # >>> chr(108)\n    # \"l\"\n    # >>> ord(\"m\"\
    )\n    # 109\n    # >>> chr(109)\n    # \"m\"\n    # >>> ord(\"n\")\n    # 110\n\
    \    # >>> chr(110)\n    # \"n\"\n    # >>> ord(\"o\")\n    # 111\n    # >>> chr(111)\n\
    \    # \"o\"\n    # >>> ord(\"p\")\n    # 112\n    # >>> chr(112)\n    # \"p\"\
    \n    # >>> ord(\"q\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpctfceuv0.sh: line 89: syntax error near unexpected token `}''

    /tmp/tmpctfceuv0.sh: line 89: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord and chr functions\n    # ord takes\
    \ a character and returns its ASCII value\n    # chr takes an ASCII value and\
    \ returns its character\n    #\n    # Example:\n    # >>> $(ord \"a\")\n    #\
    \ 97\n    # >>> $(chr 97)\n    # \"a\"\n    #\n    # You can use the modulo operator\
    \ to wrap around the alphabet\n    # >>> $(expr 97 % 26)\n    # 21\n    # >>>\
    \ $(chr 21)\n    # \"v\"\n    #\n    # You can use the expr command to do arithmetic\n\
    \    # >>> $(expr 97 + 2)\n    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n\
    \    # You can use the expr command to do arithmetic\n    # >>> $(expr 97 + 2)\n\
    \    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n    # You can use the expr\
    \ command to do arithmetic\n    # >>> $(expr 97 + 2)\n    # 99\n    # >>> $(chr\
    \ 99)\n    # \"c\"\n    #\n    # You can use the expr command to do arithmetic\n\
    \    # >>> $(expr 97 + 2)\n    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n\
    \    # You can use the expr command to do arithmetic\n    # >>> $(expr 97 + 2)\n\
    \    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n    # You can use the expr\
    \ command to do arithmetic\n    # >>> $(expr 97 + 2)\n    # 99\n    # >>> $(chr\
    \ 99)\n    # \"c\"\n    #\n    # You can use the expr command to do arithmetic\n\
    \    # >>> $(expr 97 + 2)\n    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n\
    \    # You can use the expr command to do arithmetic\n    # >>> $(expr 97 + 2)\n\
    \    # 99\n    # >>> $(chr 99)\n    # \"c\"\n    #\n    # You can use the expr\
    \ command to do arithmetic\n    # >>> $(expr 97 + 2)\n    #\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9fklvxkg.sh: line 86: syntax error near unexpected token `}''

    /tmp/tmp9fklvxkg.sh: line 86: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    # Hint: You may want to use the modulo operator\n    # % to help\
    \ you with the rotation.\n    #\n    # Hint: You may want to use the tr command\
    \ to help you\n    # with the rotation.\n    #\n    # Hint: You may want to use\
    \ the echo command to help you\n    # with the rotation.\n    #\n    # Hint: You\
    \ may want to use the $1 variable to help you\n    # with the rotation.\n    #\n\
    \    # Hint: You may want to use the $2 variable to help you\n    # with the rotation.\n\
    \    #\n    # Hint: You may want to use the $3 variable to help you\n    # with\
    \ the rotation.\n    #\n    # Hint: You may want to use the $4 variable to help\
    \ you\n    # with the rotation.\n    #\n    # Hint: You may want to use the $5\
    \ variable to help you\n    # with the rotation.\n    #\n    # Hint: You may want\
    \ to use the $6 variable to help you\n    # with the rotation.\n    #\n    # Hint:\
    \ You may want to use the $7 variable to help you\n    # with the rotation.\n\
    \    #\n    # Hint: You may want to use the $8 variable to help you\n    # with\
    \ the rotation.\n    #\n    # Hint: You may want to use the $9 variable to help\
    \ you\n    # with the rotation.\n    #\n    # Hint: You may want to use the ${10}\
    \ variable to help you\n    # with the rotation.\n    #\n    # Hint: You may want\
    \ to use the ${11} variable to help you\n    # with the rotation.\n    #\n   \
    \ # Hint: You may want to use the ${12} variable to help you\n    # with the rotation.\n\
    \    #\n    # Hint: You may want to use the ${13} variable to help you\n    #\
    \ with the rotation.\n    #\n    # Hint: You may want to use the ${14} variable\
    \ to help you\n    # with the rotation.\n    #\n    # Hint: You may want to use\
    \ the ${15} variable to help you\n    # with\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0y0wbio1.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmp0y0wbio1.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: implement this\
    \ function\n    echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015753
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Implement this\
    \ function\n    # Hint: You can use the ord function to get the ASCII value of\
    \ a character\n    # Hint: You can use the chr function to get the character of\
    \ an ASCII value\n    # Hint: You can use the modulo operator to wrap around the\
    \ alphabet\n    # Hint: You can use the range function to generate a list of numbers\n\
    \    # Hint: You can use the map function to apply a function to a list\n    #\
    \ Hint: You can use the join function to join a list of characters into a string\n\
    \    # Hint: You can use the zip function to zip two lists together\n    # Hint:\
    \ You can use the str function to convert a number to a string\n    # Hint: You\
    \ can use the int function to convert a string to a number\n    # Hint: You can\
    \ use the ord function to get the ASCII value of a character\n    # Hint: You\
    \ can use the chr function to get the character of an ASCII value\n    # Hint:\
    \ You can use the modulo operator to wrap around the alphabet\n    # Hint: You\
    \ can use the range function to generate a list of numbers\n    # Hint: You can\
    \ use the map function to apply a function to a list\n    # Hint: You can use\
    \ the join function to join a list of characters into a string\n    # Hint: You\
    \ can use the zip function to zip two lists together\n    # Hint: You can use\
    \ the str function to convert a number to a string\n    # Hint: You can use the\
    \ int function to convert a string to a number\n    # Hint: You can use the ord\
    \ function to get the ASCII value of a character\n    # Hint: You can use the\
    \ chr function to get the character of an ASCII value\n    # Hint: You can use\
    \ the modulo operator to wrap around the alphabet\n    # Hint: You can use the\
    \ range function to generate a list of numbers\n    # Hint: You can use the map\
    \ function to apply a function to a list\n    # Hint: You can use the join function\
    \ to join a list of characters into a string\n    # Hint: You can use the zip\
    \ function to zip two lists together\n    # Hint: You can use the str function\
    \ to convert a number to a string\n    # Hint:\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0tmu28t3.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmp0tmu28t3.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660015753
