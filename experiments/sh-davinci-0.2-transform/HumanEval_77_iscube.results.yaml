language: sh
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(echo \"scale=0; $num^(1/3)\" | bc)\n    if [ $cube -eq 0 ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for i in $(seq 2 $1)\n        do\n            if [ $((i*i*i))\
    \ -eq $1 ]\n            then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"true\"\n            return\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n  \
    \  local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n   \
    \ local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local\
    \ q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n\
    \    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local aa=0\n\
    \    local ab=0\n    local ac=0\n    local ad=0\n    local ae=0\n    local af=0\n\
    \    local ag=0\n    local ah=0\n    local ai=0\n    local aj=0\n    local ak=0\n\
    \    local al=0\n    local am=0\n    local an=0\n    local ao=0\n    local ap=0\n\
    \    local aq=0\n    local ar=0\n    local as=0\n    local at=0\n    local au=0\n\
    \    local av=0\n    local aw=0\n    local ax=0\n    local ay=0\n    local az=0\n\
    \    local ba=0\n    local bb=0\n    local bc=0\n    local bd=0\n    local be=0\n\
    \    local bf=0\n    local bg=0\n    local bh=0\n    local bi=0\n    local bj=0\n\
    \    local bk=0\n    local bl=0\n    local bm=0\n    local bn=0\n    local bo=0\n\
    \    local bp=0\n    local bq=0\n    local br=0\n    local bs=0\n    local bt=0\n\
    \    local bu=0\n    local bv=0\n    local bw=0\n    local bx=0\n    local by=0\n\
    \    local bz=0\n    local ca=0\n    local cb=0\n    local cc=0\n   \n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    while (( i*i*i < num )); do\n        (( i++ ))\n    done\n\
    \    (( i*i*i == num )) && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local c=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc)\n        if [ $c -eq 0 ]; then\n            echo \"false\"\n\
    \        else\n            local d=$(echo \"scale=0; $c^3\" | bc)\n          \
    \  if [ $d -eq $1 ]; then\n                echo \"true\"\n            else\n \
    \               echo \"false\"\n            fi\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    else\n        local x=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc)\n        if [ $x -eq 0 ]\n        then\n            echo \"\
    false\"\n        else\n            local y=$(echo \"scale=0; $x^3\" | bc)\n  \
    \          if [ $y -eq $1 ]\n            then\n                echo \"true\"\n\
    \            else\n                echo \"false\"\n            fi\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while (( i*i*i < n )); do\n        (( i++ ))\n    done\n  \
    \  if (( i*i*i == n )); then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local cube=0\n    local i=0\n    while [ $cube -lt $number ]\n    do\n  \
    \      let i++\n        let cube=$i*$i*$i\n    done\n    if [ $cube -eq $number\
    \ ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root^3\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmprgf5bmpx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    while [ $((b*b*b)) -le $a ]; do\n        if [ $((b*b*b)) -eq\
    \ $a ]; then\n            echo \"true\"\n            return\n        fi\n    \
    \    b=$((b+1))\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    local result=$(echo \"scale=0; $integer^(1/3)\" | bc -l)\n    if [ $integer\
    \ -eq $(($result * $result * $result)) ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $(($i * $i\
    \ * $i)) -eq $1 ]; then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -lt $num ]; do\n        let\
    \ i++\n        let cube=$i*$i*$i\n    done\n    if [ $cube -eq $num ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for i in $(seq -1 $1)\n        do\n            if [ $((i*i*i))\
    \ -eq $1 ]\n            then\n                echo \"true\"\n                break\n\
    \            elif [ $i -eq $1 ]\n            then\n                echo \"false\"\
    \n            fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  local i=1\n        while [ $i -lt $1 ]; do\n            local cube=$((i*i*i))\n\
    \            if [ $cube -eq $1 ]; then\n                echo \"true\"\n      \
    \          return\n            fi\n            i=$((i+1))\n        done\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local i=0\n  \
    \  local cube=0\n    while [ $cube -lt $1 ]; do\n        ((i++))\n        ((cube=i*i*i))\n\
    \    done\n    if [ $cube -eq $1 ]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    local cube=0\n    while (( cube < n )); do\n        (( i++\
    \ ))\n        (( cube = i * i * i ))\n    done\n    if (( cube == n )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal i=0\n\tlocal\
    \ cube=0\n\twhile [ $cube -lt $1 ]; do\n\t\t((i++))\n\t\t((cube=i*i*i))\n\tdone\n\
    \tif [ $cube -eq $1 ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\t\
    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        local i=1\n        local cube=$((i*i*i))\n        while [ $cube -lt $1\
    \ ]; do\n            i=$((i+1))\n            cube=$((i*i*i))\n        done\n \
    \       if [ $cube -eq $1 ]; then\n            echo \"true\"\n        else\n \
    \           echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        local i=1\n        while [ $i -lt $1 ]; do\n       \
    \     let i=$i+1\n            if [ $i -eq $1 ]; then\n                echo \"\
    true\"\n                return\n            fi\n            let i=$i*$i*$i\n \
    \       done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local n=$1\n  local\
    \ r=$(echo \"scale=0; $n ^ (1/3)\" | bc)\n  if [ $r -eq 0 ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(bc <<< \"scale=0; $num^(1/3)\")\n    local cube_square=$(bc\
    \ <<< \"$cube^3\")\n    if [[ $cube_square -eq $num ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for ((i=1; i<$1; i++)); do\n            if [ $((i*i*i)) -eq $1 ]; then\n  \
    \              echo \"true\"\n                break\n            fi\n        done\n\
    \        if [ $((i*i*i)) -ne $1 ]; then\n            echo \"false\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    if [ $a -lt 0 ]; then\n        a=$((-a))\n \
    \   fi\n    for ((b=0; b<=$a; b++)); do\n        c=$((b*b*b))\n        if [ $c\
    \ -eq $a ]; then\n            echo \"true\"\n            return\n        fi\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  # if the integer is a cube, then the cube root of the integer\n        # is\
    \ an integer\n        if [ $(echo \"scale=0; $1^(1/3)\" | bc) -eq $(echo \"scale=0;\
    \ $1^(1/3)\" | bc) ]; then\n            echo \"true\"\n        else\n        \
    \    echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local result=0\n    while [ $result -le $num ]\n    do\n \
    \       result=$((i*i*i))\n        if [ $result -eq $num ]\n        then\n   \
    \         echo \"true\"\n            return\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=1\n    local cube=1\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -eq 0 ];\
    \ then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\tif [ $1 -lt 0 ]; then\n\t\tlet\
    \ \"a = -$1\"\n\telse\n\t\tlet \"a = $1\"\n\tfi\n\tlet \"b = $a\"\n\tlet \"c =\
    \ $a\"\n\tlet \"b = $b / 3\"\n\tlet \"c = $c % 3\"\n\twhile [ $c -eq 0 ]; do\n\
    \t\tlet \"c = $b % 3\"\n\t\tlet \"b = $b / 3\"\n\tdone\n\tif [ $c -eq 0 ]; then\n\
    \t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    local cube=1\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while (( cube < num )); do\n        (( i++\
    \ ))\n        (( cube = i * i * i ))\n    done\n    if (( cube == num )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal num=$1\n\t\
    local root=$(echo \"sqrt($num)\" | bc)\n\tlocal cube=$(echo \"$root^3\" | bc)\n\
    \tif [ $cube -eq $num ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\
    \tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp7wafo4qx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        for (( i=1; i<=${1#-}; i++ )); do\n            if [ $((i*i*i)) -eq ${1#-}\
    \ ]; then\n                echo \"true\"\n                return\n           \
    \ fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n        local cube=$(echo \"$sqrt * $sqrt * $sqrt\" | bc)\n        if\
    \ [ $cube -eq $1 ]; then\n            echo \"true\"\n        else\n          \
    \  echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        # if $1 is a perfect cube,\
    \ then the following command will return 0\n        # otherwise it will return\
    \ 1\n        # Note: the command `bc` is a calculator\n        echo \"scale=0;\
    \ $1^(1/3)\" | bc | grep -q \"^$1$\"\n        if [ $? -eq 0 ]; then\n        \
    \    echo \"true\"\n        else\n            echo \"false\"\n        fi\n   \
    \ fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    if [ $a -eq 0 ]; then\n        echo \"true\"\
    \n        return\n    fi\n    while [ $c -le $a ]; do\n        c=$((b*b*b))\n\
    \        if [ $c -eq $a ]; then\n            echo \"true\"\n            return\n\
    \        fi\n        b=$((b+1))\n    done\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = -1 * $1\"\n    else\n        let \"a = $1\"\n   \
    \ fi\n    let \"b = $a ** (1/3)\"\n    let \"c = $b ** 3\"\n    if [ $c -eq $a\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"true\"\n  elif [ $1 -eq 1 ]; then\n    echo \"true\"\n  elif\
    \ [ $1 -eq -1 ]; then\n    echo \"true\"\n  else\n    for (( i=1; i<=$1; i++ ));\
    \ do\n      if [ $((i*i*i)) -eq $1 ]; then\n        echo \"true\"\n        return\n\
    \      fi\n    done\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(bc <<< \"scale=0; $num^(1/3)\")\n    local cube_num=$(bc <<<\
    \ \"$cube^3\")\n    if [ $cube_num -eq $num ]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for i in $(seq 1 $1); do\n            if [ $((i*i*i)) -eq $1 ]; then\n    \
    \            echo \"true\"\n                return\n            fi\n        done\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                break\n            elif [ $((i*i*i))\
    \ -gt $1 ]; then\n                echo \"false\"\n                break\n    \
    \        fi\n        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [ $1 -eq 0 ]\n\
    \tthen\n\t\techo \"true\"\n\t\treturn\n\tfi\n\tif [ $1 -lt 0 ]\n\tthen\n\t\tlet\
    \ \"a = -$1\"\n\telse\n\t\tlet \"a = $1\"\n\tfi\n\tlet \"b = $a\"\n\tlet \"c =\
    \ $a\"\n\tlet \"b = $b / 2\"\n\twhile [ $b -gt 0 ]\n\tdo\n\t\tlet \"c = $b * $b\
    \ * $b\"\n\t\tif [ $c -eq $a ]\n\t\tthen\n\t\t\techo \"true\"\n\t\t\treturn\n\t\
    \tfi\n\t\tif [ $c -gt $a ]\n\t\tthen\n\t\t\tlet \"b = $b - 1\"\n\t\telse\n\t\t\
    \tlet \"b = $b + 1\"\n\t\tfi\n\tdone\n\techo \"false\"\n}\n\ncandidate() {\n \
    \   iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root * $root * $root\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp9pcl1tnx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = -$1\"\n    else\n        let \"a = $1\"\n    fi\n\
    \    let \"b = $a\"\n    let \"c = 0\"\n    while [ $b -gt 0 ]; do\n        let\
    \ \"b = $b - 1\"\n        let \"c = $c + 1\"\n        let \"d = $c * $c * $c\"\
    \n        if [ $d -eq $a ]; then\n            echo \"true\"\n            return\n\
    \        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                break\n     \
    \       fi\n        done\n        if [ $i -eq $1 ]; then\n            echo \"\
    false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(echo \"scale=0; $num^(1/3)\" | bc)\n    local cube_num=$(echo\
    \ \"$cube^3\" | bc)\n    if [[ $cube_num -eq $num ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n        local cube=$(echo \"$sqrt * $sqrt * $sqrt\" | bc)\n        if\
    \ [ $cube -eq $1 ]; then\n            echo \"true\"\n        else\n          \
    \  echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmptl_9ci12.sh: line 26: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -1 * $1\"\n    else\n        let \"x = $1\"\n   \
    \ fi\n    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        local i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n\
    \            i=$((i+1))\n        done\n        if [ $((i*i*i)) -eq $1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=$(echo \"scale=0; $number ^ (1/3)\" | bc)\n    if [ \"$result\"\
    \ -eq \"$result\" ] 2>/dev/null; then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        local i=1\n        while [\
    \ $((i*i*i)) -le $1 ]; do\n            if [ $((i*i*i)) -eq $1 ]; then\n      \
    \          echo \"true\"\n                return\n            fi\n           \
    \ i=$((i+1))\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local tmp=$(echo \"scale=0; $num^(1/3)\" | bc)\n    if [ $tmp -eq 0 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tif [[ $1 -eq 0 ]];\
    \ then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\tif [[ $1 -lt 0 ]]; then\n\t\tx=$((-$1))\n\
    \telse\n\t\tx=$1\n\tfi\n\ti=1\n\twhile [[ $((i*i*i)) -le $x ]]; do\n\t\tif [[\
    \ $((i*i*i)) -eq $x ]]; then\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\t\t\
    i=$((i+1))\n\tdone\n\techo \"false\"\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"true\"\n            return\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -lt 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        local cube=$(echo \"scale=0; $1^(1/3)\" | bc)\n\
    \        if [[ $cube -eq 0 ]]; then\n            echo \"false\"\n        else\n\
    \            local cube_num=$(echo \"$cube^3\" | bc)\n            if [[ $cube_num\
    \ -eq $1 ]]; then\n                echo \"true\"\n            else\n         \
    \       echo \"false\"\n            fi\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if (( $1 < 0 ));\
    \ then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n        local cube=$(echo \"$sqrt * $sqrt * $sqrt\" | bc)\n        if\
    \ (( $cube == $1 )); then\n            echo \"true\"\n        else\n         \
    \   echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=1\n    local cube=1\n    while [[ $cube -lt $num ]]; do\n       \
    \ ((i++))\n        ((cube = i * i * i))\n    done\n    if [[ $cube -eq $num ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=$(echo \"scale=0; sqrt($a)\" | bc)\n    local c=$(echo \"scale=0;\
    \ $b * $b * $b\" | bc)\n    if [ $a -eq $c ]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmppqksvrt4.sh: line 24: [: -1: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root * $root * $root\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp9pcl1tnx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  cube=$(echo \"scale=0; $1^(1/3)\" | bc)\n        if [ $cube -eq $1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root * $root * $root\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp9pcl1tnx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n        local cube=$(echo \"$sqrt^3\" | bc)\n        if [ $cube -eq $1\
    \ ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmpxo58e5u0.sh: line 26: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        if [ $1 -lt 0 ]; then\n  \
    \          x=$((-$1))\n        else\n            x=$1\n        fi\n        for\
    \ ((i=1; i<=$x; i++)); do\n            if [ $((i*i*i)) -eq $x ]; then\n      \
    \          echo \"true\"\n                return\n            fi\n        done\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        if [ $1 -lt 0 ]; then\n            num=$((-1 * $1))\n        else\n \
    \           num=$1\n        fi\n        for (( i=2; i<=num; i++ )); do\n     \
    \       if [ $((i * i * i)) -eq $num ]; then\n                echo \"true\"\n\
    \                return\n            fi\n        done\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(echo \"scale=0; $num^(1/3)\" | bc)\n    if [ $result -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local r=$(echo \"scale=0; $n^(1/3)\" | bc)\n    if [ $n -eq $((r*r*r)) ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -lt 0 ]]; then\n        echo \"false\"\n    else\n        for ((i=1; i<=$1;\
    \ i++)); do\n            if [[ $((i*i*i)) -eq $1 ]]; then\n                echo\
    \ \"true\"\n                return\n            fi\n        done\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [[ $num_cube -eq $num ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root * $root * $root\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp9pcl1tnx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=1\n    local cube=1\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                break\n     \
    \       fi\n        done\n        if [ $i -eq $((i+1)) ]; then\n            echo\
    \ \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    while [ $b -le $a ]; do\n        let c=$b*$b*$b\n\
    \        if [ $c -eq $a ]; then\n            echo \"true\"\n            return\n\
    \        fi\n        let b=$b+1\n    done\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        local x=$(echo \"scale=0; sqrt($1)\" | bc)\n       \
    \ if [ $(($x * $x * $x)) -eq $1 ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=1\n    local cube=1\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local number=$1\n\
    \    local result=$(echo \"scale=0; $number^(1/3)\" | bc)\n    if [ $number -eq\
    \ $(($result*$result*$result)) ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for ((i=2; i<=$1; i++)); do\n            if [ $((i*i*i)) -eq $1 ]; then\n \
    \               echo \"true\"\n                return\n            fi\n      \
    \  done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for ((i=1; i<$1; i++)); do\n            if [ $((i*i*i)) -eq $1 ]; then\n  \
    \              echo \"true\"\n                return\n            fi\n       \
    \ done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal a=$1\n\tlocal\
    \ b=0\n\tlocal c=0\n\tlocal d=0\n\tlocal e=0\n\tlocal f=0\n\tlocal g=0\n\tlocal\
    \ h=0\n\tlocal i=0\n\tlocal j=0\n\tlocal k=0\n\tlocal l=0\n\tlocal m=0\n\tlocal\
    \ n=0\n\tlocal o=0\n\tlocal p=0\n\tlocal q=0\n\tlocal r=0\n\tlocal s=0\n\tlocal\
    \ t=0\n\tlocal u=0\n\tlocal v=0\n\tlocal w=0\n\tlocal x=0\n\tlocal y=0\n\tlocal\
    \ z=0\n\tlocal aa=0\n\tlocal ab=0\n\tlocal ac=0\n\tlocal ad=0\n\tlocal ae=0\n\t\
    local af=0\n\tlocal ag=0\n\tlocal ah=0\n\tlocal ai=0\n\tlocal aj=0\n\tlocal ak=0\n\
    \tlocal al=0\n\tlocal am=0\n\tlocal an=0\n\tlocal ao=0\n\tlocal ap=0\n\tlocal\
    \ aq=0\n\tlocal ar=0\n\tlocal as=0\n\tlocal at=0\n\tlocal au=0\n\tlocal av=0\n\
    \tlocal aw=0\n\tlocal ax=0\n\tlocal ay=0\n\tlocal az=0\n\tlocal ba=0\n\tlocal\
    \ bb=0\n\tlocal bc=0\n\tlocal bd=0\n\tlocal be=0\n\tlocal bf=0\n\tlocal bg=0\n\
    \tlocal bh=0\n\tlocal bi=0\n\tlocal bj=0\n\tlocal bk=0\n\tlocal bl=0\n\tlocal\
    \ bm=0\n\tlocal bn=0\n\tlocal bo=0\n\tlocal bp=0\n\tlocal bq=0\n\tlocal br=0\n\
    \tlocal bs=0\n\tlocal bt=0\n\tlocal bu=0\n\tlocal bv=0\n\tlocal bw=0\n\tlocal\
    \ bx=0\n\tlocal by=0\n\tlocal bz=0\n\tlocal ca=0\n\tlocal cb=0\n\tlocal cc=0\n\
    \t\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                break\n     \
    \       fi\n        done\n        if [ $i -eq $1 ]; then\n            echo \"\
    false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    if [ \"$(echo \"$root\
    \ * $root * $root\" | bc)\" -eq \"$num\" ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp8t9tqw7c.sh: line 23: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(echo \"scale=0; $num ^ (1/3)\" | bc)\n    if [ \"$result\"\
    \ -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc -l)\n        local cube=$(echo \"$sqrt^3\" | bc -l)\n        if [ $(echo\
    \ \"$cube - $1\" | bc -l) -eq 0 ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0f5j43m6.sh: line 26: [: .82842712474619009759: integer expression
    expected

    Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -lt $num ]; do\n        ((i++))\n\
    \        ((cube=i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"x = -1 * $1\"\n    else\n        let \"x = $1\"\n   \
    \ fi\n    let \"y = $x ** (1/3)\"\n    let \"z = $y ** 3\"\n    if [ $z -eq $x\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local x=$1\n \
    \   local y=$(echo \"scale=0; $x^(1/3)\" | bc)\n    if [ $x -eq $(($y*$y*$y))\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt^3\" | bc)\n    if [[ $num -eq $num_cube ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # Your code here\n\
    \    if [[ $1 -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]];\
    \ then\n        echo \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"\
    true\"\n    elif [[ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for ((i=2; i<$1; i++))\n        do\n            if [ $((i*i*i))\
    \ -eq $1 ]\n            then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        local sqrt=$(echo \"sqrt($1)\" | bc)\n        local cube=$(echo \"$sqrt\
    \ * $sqrt * $sqrt\" | bc)\n        if [ $cube -eq $1 ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    local cube=0\n    while [ $cube -lt $n ]; do\n        i=$(($i+1))\n\
    \        cube=$(($i*$i*$i))\n    done\n    if [ $cube -eq $n ]; then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i)) -eq $1 ]; then\n \
    \               echo \"true\"\n                return\n            fi\n      \
    \  done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  local i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n            i=$((i+1))\n\
    \        done\n        if [ $((i*i*i)) -eq $1 ]; then\n            echo \"true\"\
    \n        else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n        local cube=$(echo \"$sqrt^3\" | bc)\n        if [ $cube -eq $1\
    \ ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmpxo58e5u0.sh: line 26: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ \"$1\" -lt\
    \ 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for i in $(seq 1 $1); do\n            if [ $((i*i*i)) -eq $1 ]; then\n    \
    \            echo \"true\"\n                return\n            fi\n        done\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        local cube=$(echo \"scale=0; $1^(1/3)\" | bc)\n        if [ $cube -eq\
    \ 0 ]; then\n            echo \"false\"\n        else\n            local cube_result=$(echo\
    \ \"scale=0; $cube^3\" | bc)\n            if [ $cube_result -eq $1 ]; then\n \
    \               echo \"true\"\n            else\n                echo \"false\"\
    \n            fi\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    local cube=1\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        let \"a = -1 * $1\"\n    else\n        let \"a = $1\"\n   \
    \ fi\n    let \"b = $a ** (1/3)\"\n    let \"c = $b ** 3\"\n    if [ $c -eq $a\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -lt 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        local i=1\n        while [[ $((i*i*i)) -lt $1 ]];\
    \ do\n            i=$((i+1))\n        done\n        if [[ $((i*i*i)) -eq $1 ]];\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    local cube=0\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"true\"\n    else\n        for i in $(seq 1 $1)\n        do\n       \
    \     if [ $((i*i*i)) -eq $1 ]\n            then\n                echo \"true\"\
    \n                return\n            fi\n        done\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ] || [ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n\
    \        local sqrt=$(echo \"sqrt($1)\" | bc)\n        local cube=$(echo \"$sqrt^3\"\
    \ | bc)\n        if [ $cube -eq $1 ]; then\n            echo \"true\"\n      \
    \  else\n            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cbrt=$(echo \"\
    scale=0; $num_sqrt^3\" | bc)\n    if [ $num -eq $num_cbrt ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp0es3inld.sh: line 24: [: -1: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $1 -eq 1 ]]; then\n        echo\
    \ \"true\"\n    elif [[ $1 -eq -1 ]]; then\n        echo \"true\"\n    elif [[\
    \ $1 -eq 64 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    while [ $b -le $a ]; do\n        c=$((b * b\
    \ * b))\n        if [ $c -eq $a ]; then\n            echo \"true\"\n         \
    \   return\n        fi\n        b=$((b + 1))\n    done\n    echo \"false\"\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(bc <<< \"scale=0; $num^(1/3)\")\n    local cube_num=$(bc <<<\
    \ \"$cube^3\")\n    if [[ $cube_num -eq $num ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"$(echo \"scale=0; $1\
    \ ^ (1/3)\" | bc)\" | grep -q \"^$1$\" && echo \"true\" || echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local i=1\n  \
    \  local result=1\n    while [ $result -lt $1 ]; do\n        i=$((i+1))\n    \
    \    result=$((i*i*i))\n    done\n    if [ $result -eq $1 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    while [ $((i*i*i)) -le $n ]; do\n        if [ $((i*i*i)) -eq\
    \ $n ]; then\n            echo \"true\"\n            return\n        fi\n    \
    \    i=$((i+1))\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal num=$1\n\t\
    local i=1\n\twhile [ $i -lt $num ]\n\tdo\n\t\ti=$((i*3))\n\tdone\n\tif [ $i -eq\
    \ $num ]\n\tthen\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local cube=$(echo \"scale=0; $n ^ (1/3)\" | bc)\n    if [ $(echo \"$cube ^\
    \ 3\" | bc) -eq $n ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    local integer_abs=${integer#-}\n    local integer_sqrt=$(bc <<< \"sqrt($integer_abs)\"\
    )\n    local integer_cube=$(bc <<< \"$integer_sqrt^3\")\n    if [ \"$integer_cube\"\
    \ -eq \"$integer_abs\" ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  if [ $1 -eq 0 ];\
    \ then\n    echo \"true\"\n  elif [ $1 -lt 0 ]; then\n    echo \"true\"\n  else\n\
    \    local i=1\n    while [ $((i*i*i)) -lt $1 ]; do\n      i=$((i+1))\n    done\n\
    \    if [ $((i*i*i)) -eq $1 ]; then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local input=$1\n\
    \    local result=$(echo \"scale=0; $input ^ (1/3)\" | bc)\n    if [[ $input -eq\
    \ $((result * result * result)) ]]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    local integer_root=$(echo \"scale=0; sqrt($integer)\" | bc)\n    local integer_cube=$(echo\
    \ \"scale=0; $integer_root^3\" | bc)\n    if [[ $integer -eq $integer_cube ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(bc <<< \"scale=0; $num^(1/3)\")\n    local cube=$(bc <<< \"\
    $result^3\")\n    if [[ $cube -eq $num ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -lt $num ]; do\n        i=$(($i+1))\n\
    \        cube=$(($i*$i*$i))\n    done\n    if [ $cube -eq $num ]; then\n     \
    \   echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=0\n    local cube=0\n    while [ $cube -lt $n ]; do\n        let i++\n\
    \        let cube=i*i*i\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"true\"\n    else\n        for i in $(seq 1 $1)\n        do\n       \
    \     if [ $(($i*$i*$i)) -eq $1 ]\n            then\n                echo \"true\"\
    \n                break\n            elif [ $(($i*$i*$i)) -gt $1 ]\n         \
    \   then\n                echo \"false\"\n                break\n            fi\n\
    \        done\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n\tlocal i=1\n\tlocal\
    \ cube=$((i*i*i))\n\twhile [ $cube -lt $1 ]; do\n\t\ti=$((i+1))\n\t\tcube=$((i*i*i))\n\
    \tdone\n\tif [ $cube -eq $1 ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\
    \n\tfi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n\
    \    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\"\
    \ ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local n=$1\n \
    \   local i=1\n    local cube=1\n    while [ $cube -lt $n ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $n ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root^3\" | bc)\n    if [[ $cube -eq $num ]]; then\n        echo \"true\"\n  \
    \  else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -lt 0 ]\n    then\n      \
    \  echo \"true\"\n    else\n        local x=$(echo \"scale=0; sqrt($1)\" | bc)\n\
    \        local y=$(echo \"$x * $x * $x\" | bc)\n        if [ $y -eq $1 ]\n   \
    \     then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for i in $(seq 2 $1)\n        do\n            if [ $((i*i*i))\
    \ -eq $1 ]\n            then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 =~ ^[-]?[0-9]+$\
    \ ]]; then\n        if [[ $1 -eq 0 ]]; then\n            echo \"true\"\n     \
    \   else\n            local num=$1\n            if [[ $num -lt 0 ]]; then\n  \
    \              num=$((num * -1))\n            fi\n            local root=$(echo\
    \ \"scale=0; sqrt($num)\" | bc)\n            if [[ $root -eq 0 ]]; then\n    \
    \            echo \"false\"\n            else\n                local cube=$(echo\
    \ \"$root * $root * $root\" | bc)\n                if [[ $cube -eq $num ]]; then\n\
    \                    echo \"true\"\n                else\n                   \
    \ echo \"false\"\n                fi\n            fi\n        fi\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local i=0\n    local cube=0\n    while [ $cube -lt $num ]; do\n        i=$((i+1))\n\
    \        cube=$((i*i*i))\n    done\n    if [ $cube -eq $num ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"\
    true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=2; i<=$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for ((i=2; i<$1; i++))\n        do\n            if [ $((i*i*i))\
    \ -eq $1 ]\n            then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]\n    then\n        echo \"true\"\n    elif [ $1 -eq 1 ]\n    then\n      \
    \  echo \"true\"\n    elif [ $1 -eq -1 ]\n    then\n        echo \"true\"\n  \
    \  else\n        for i in $(seq 1 $1)\n        do\n            if [ $((i * i *\
    \ i)) -eq $1 ]\n            then\n                echo \"true\"\n            \
    \    return\n            fi\n        done\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n \
    \   local b=0\n    local c=0\n    if [ $a -lt 0 ]; then\n        a=$((-a))\n \
    \   fi\n    while [ $c -lt $a ]; do\n        b=$((b+1))\n        c=$((b*b*b))\n\
    \    done\n    if [ $c -eq $a ]; then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for i in $(seq 1 $1); do\n            if [ $((i**3)) -eq $1 ]; then\n     \
    \           echo \"true\"\n                return\n            fi\n        done\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for (( i=1; i<=$1; i++ )); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local cube=$(bc <<< \"scale=0; $num^(1/3)\")\n    if [[ $cube -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for i in $(seq 2 $(($1/2))); do\n            if [ $(($i*$i*$i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt * $num_sqrt * $num_sqrt\" | bc)\n    if [ \"$num\" -eq \"$num_cube\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmp5c1ua2sm.sh: line 24: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        local i=1\n        while [ $((i*i*i)) -lt $1 ]; do\n\
    \            i=$((i+1))\n        done\n        if [ $((i*i*i)) -eq $1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"scale=0; sqrt($num)\" | bc)\n    local cube=$(echo \"\
    $root^3\" | bc)\n    if [ $cube -eq $num ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=8): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmprgf5bmpx.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local cube=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc)\n        local cube_square=$(echo \"$cube^3\" | bc)\n     \
    \   if [ $cube_square -eq $1 ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    # your code here\n\
    \    if [ $1 -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $1 -lt 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        for i in $(seq 1 $1)\n   \
    \     do\n            if [ $((i*i*i)) -eq $1 ]\n            then\n           \
    \     echo \"true\"\n                return\n            fi\n        done\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  local i=1\n        local cube=$((i*i*i))\n        while [ $cube -lt $1 ]; do\n\
    \            i=$((i+1))\n            cube=$((i*i*i))\n        done\n        if\
    \ [ $cube -eq $1 ]; then\n            echo \"true\"\n        else\n          \
    \  echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        local sqrt=$(echo \"sqrt($1)\" | bc)\n        local\
    \ cube=$(echo \"$sqrt * $sqrt * $sqrt\" | bc)\n        if [ $cube -eq $1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"\
    true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\"\
    ) = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"\
    1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for i in $(seq 2 $(($1/2))); do\n            if [ $(($i*$i*$i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for ((i=1; i<=$1; i++)); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                break\n     \
    \       elif [ $((i*i*i)) -gt $1 ]; then\n                echo \"false\"\n   \
    \             break\n            fi\n        done\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        for i in $(seq 1 $1); do\n            if [ $((i*i*i))\
    \ -eq $1 ]; then\n                echo \"true\"\n                return\n    \
    \        fi\n        done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\"\
    ) = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local integer=$1\n\
    \    local result=$(bc <<< \"scale=0; $integer^(1/3)\")\n    if [[ $integer -eq\
    \ $(($result*$result*$result)) ]]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local x=$(echo \"scale=0;\
    \ $1 ^ (1/3)\" | bc -l)\n        local y=$(echo \"$x ^ 3\" | bc -l)\n        if\
    \ [ $y -eq $1 ]; then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local root=$(echo \"sqrt($num)\" | bc)\n    local cube=$(echo \"$root^3\"\
    \ | bc)\n    if [ $cube -eq $num ]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmpxf06yifj.sh: line 24: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local result=$(echo \"scale=0; $num ^ (1/3)\" | bc)\n    if [ $result -eq\
    \ 0 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    else\n        local x=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc -l)\n        if [ $x -eq 0 ]; then\n            echo \"false\"\
    \n        else\n            local y=$(echo \"$x^3\" | bc -l)\n            if [\
    \ $y -eq $1 ]; then\n                echo \"true\"\n            else\n       \
    \         echo \"false\"\n            fi\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"\
    -1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
    \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[\
    \ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015131
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=2; i<$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015132
- exit_code: 1
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local num=$1\n\
    \    local num_sqrt=$(echo \"sqrt($num)\" | bc)\n    local num_cube=$(echo \"\
    $num_sqrt^3\" | bc)\n    if [ $num -eq $num_cube ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n   \
    \ [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
    \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'Runtime error (func=(main), adr=4): Square root of a negative number

    (standard_in) 1: syntax error

    /tmp/tmpid4nmf1c.sh: line 24: [: -1: unary operator expected

    '
  stdout: ''
  timestamp: 1660015132
- exit_code: 0
  program: "#!/bin/bash\n# Write a function that takes an integer a and returns True\
    \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
    \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n\
    # >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>>\
    \ $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube\
    \ \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $1 -eq 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 1 ]; then\n        echo \"\
    true\"\n    elif [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n      \
    \  for (( i=1; i<$1; i++ )); do\n            if [ $((i*i*i)) -eq $1 ]; then\n\
    \                echo \"true\"\n                return\n            fi\n     \
    \   done\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    iscube \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\") = \"false\" ]]\n    [[ $(candidate \"-1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"64\") = \"true\" ]]\n    [[ $(candidate \"180\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1000\") = \"true\" ]]\n    [[ $(candidate \"0\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1729\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015131
