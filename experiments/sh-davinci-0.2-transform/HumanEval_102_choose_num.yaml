name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n     \
    \   for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n \
    \               echo $i\n                break\n            fi\n        done\n\
    \    fi", "    local x=$1\n    local y=$2\n    local i\n    for ((i=$x; i<=$y;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            echo $i\n          \
    \  return\n        fi\n    done\n    echo -1", "    if [ $1 -gt $2 ]; then\n \
    \       echo \"-1\"\n    elif [ $1 -eq $2 ]; then\n        if [ $1 -eq 0 ]; then\n\
    \            echo \"0\"\n        elif [ $1 -eq 1 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 2 ]; then\n            echo \"2\"\n        elif [\
    \ $1 -eq 3 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 4 ]; then\n\
    \            echo \"4\"\n        elif [ $1 -eq 5 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 6 ]; then\n            echo \"6\"\n        elif [\
    \ $1 -eq 7 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 8 ]; then\n\
    \            echo \"8\"\n        elif [ $1 -eq 9 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 10 ]; then\n            echo \"10\"\n        elif\
    \ [ $1 -eq 11 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 12 ]; then\n\
    \            echo \"12\"\n        elif [ $1 -eq 13 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 14 ]; then\n            echo \"14\"\n        elif\
    \ [ $1 -eq 15 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 16 ]; then\n\
    \            echo \"16\"\n        elif [ $1 -eq 17 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 18 ]; then\n            echo \"18\"\n        elif\
    \ [ $1 -eq 19 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 20 ]; then\n\
    \            echo \"20\"\n        elif [ $1 -eq 21 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 22 ]; then\n            echo \"22\"\n        elif\
    \ [ $1 -eq 23 ]; then\n            echo \"-1\"\n        elif [ $1 -eq 24 ]; then\n\
    \            echo \"24\"\n        elif [ $1 -eq 25 ]; then\n            echo \"\
    -1\"\n        elif [ $1 -eq 26 ]; then\n           ", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    elif [[ $1 -eq $2 ]]; then\n        if [[ $1%2\
    \ -eq 0 ]]; then\n            echo \"$1\"\n        else\n            echo \"-1\"\
    \n        fi\n    else\n        for ((i=$2; i>=$1; i--)); do\n            if [[\
    \ $i%2 -eq 0 ]]; then\n                echo \"$i\"\n                break\n  \
    \          fi\n        done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        for ((i=$1; i<=$2; i++)); do\n            if [[ $((i%2))\
    \ -eq 0 ]]; then\n                echo \"$i\"\n                return\n      \
    \      fi\n        done\n        echo \"-1\"\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n\
    \            if [[ $((i%2)) -eq 0 ]]; then\n                echo \"$i\"\n    \
    \            break\n            fi\n        done\n    fi", "    # TODO: implement\
    \ this function\n    # Hint: you can use the modulo operator % to check if a number\
    \ is even\n    # or odd.\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n  \
    \  else\n        for i in $(seq $1 $2); do\n            if [ $((i%2)) -eq 0 ];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    local x=$1\n    local y=$2\n    local result=-1\n    for\
    \ ((i=$x; i<=$y; i++)); do\n        if ((i % 2 == 0)); then\n            result=$i\n\
    \        fi\n    done\n    echo $result", "  if [[ $1 -gt $2 ]]; then\n    echo\
    \ \"-1\"\n  else\n    for i in $(seq $1 $2); do\n      if [[ $((i % 2)) -eq 0\
    \ ]]; then\n        echo $i\n        break\n      fi\n    done\n  fi", "    if\
    \ [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        for i in $(seq $1\
    \ $2); do\n            if [ $((i % 2)) -eq 0 ]; then\n                echo $i\n\
    \                break\n            fi\n        done\n    fi", "    local x=$1\n\
    \    local y=$2\n    local i\n    local max=-1\n    for ((i=$x; i<=$y; i++));\
    \ do\n        if ((i % 2 == 0)); then\n            if ((i > max)); then\n    \
    \            max=$i\n            fi\n        fi\n    done\n    echo $max", " \
    \   if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        for i in\
    \ $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n            \
    \    echo $i\n                return\n            fi\n        done\n        echo\
    \ \"-1\"\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    elif\
    \ [[ $1 -eq $2 ]]; then\n        if [[ $1%2 -eq 0 ]]; then\n            echo \"\
    $1\"\n        else\n            echo \"-1\"\n        fi\n    else\n        for\
    \ (( i=$2; i>=$1; i-- )); do\n            if [[ $i%2 -eq 0 ]]; then\n        \
    \        echo \"$i\"\n                break\n            fi\n        done\n  \
    \  fi", "\tif [ $1 -gt $2 ]; then\n\t\techo \"-1\"\n\t\treturn\n\tfi\n\tfor i\
    \ in $(seq $1 $2); do\n\t\tif [ $(($i % 2)) -eq 0 ]; then\n\t\t\techo $i\n\t\t\
    \treturn\n\t\tfi\n\tdone\n\techo \"-1\"", "\tif [[ $1 -lt $2 ]]; then\n\t\tfor\
    \ i in $(seq $1 $2); do\n\t\t\tif [[ $((i % 2)) -eq 0 ]]; then\n\t\t\t\techo $i\n\
    \t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\t\techo -1\n\telse\n\t\techo -1\n\tfi", " \
    \   if [[ $1 -gt $2 ]]; then\n        echo -1\n    else\n        for i in $(seq\
    \ $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "    # TODO:\
    \ Implement this function\n    # Hint: You can use the modulo operator to check\
    \ if a number is even\n    # or odd.\n    #\n    # Hint: You can use the bc command\
    \ to perform floating point\n    # arithmetic.\n    #\n    # Hint: You can use\
    \ the printf command to format the output.\n    #\n    # Hint: You can use the\
    \ echo command to return the result.\n    #\n    # Hint: You can use the seq command\
    \ to generate a sequence of\n    # numbers.\n    #\n    # Hint: You can use the\
    \ tail command to get the last element of a\n    # sequence.\n    #\n    # Hint:\
    \ You can use the head command to get the first element of a\n    # sequence.\n\
    \    #\n    # Hint: You can use the sort command to sort a sequence of numbers.\n\
    \    #\n    # Hint: You can use the wc command to count the number of lines in\n\
    \    # a file.\n    #\n    # Hint: You can use the test command to check if a\
    \ file exists.\n    #\n    # Hint: You can use the rm command to delete a file.\n\
    \    #\n    # Hint: You can use the cat command to concatenate files.\n    #\n\
    \    # Hint: You can use the tr command to translate characters.\n    #\n    #\
    \ Hint: You can use the cut command to cut out parts of a line.\n    #\n    #\
    \ Hint: You can use the grep command to search for a pattern in a\n    # file.\n\
    \    #\n    # Hint: You can use the sed command to replace a pattern in a file.\n\
    \    #\n    # Hint: You can use the tee command to write to a file and to\n  \
    \  # standard output.\n    #\n    # Hint: You can use the sort command to sort\
    \ a sequence of numbers.\n    #\n    # Hint: You can use the wc command to count\
    \ the number of lines in\n    # a file.\n    #\n    # Hint: You can use the test\
    \ command to check if a file exists.\n    #\n    # Hint: You can use the rm command\
    \ to delete a file.\n    #\n    # H", "\tif [[ $1 -gt $2 ]]; then\n\t\techo \"\
    -1\"\n\t\treturn\n\tfi\n\tfor (( i=$1; i<=$2; i++ )); do\n\t\tif [[ $((i%2)) -eq\
    \ 0 ]]; then\n\t\t\techo \"$i\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"-1\"",
  "    # TODO: implement this function\n    # Hint: you may want to use the modulo\
    \ operator (%)\n    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for (( i=$1; i<=$2; i++ )); do\n            if [[ $((i%2)) -eq 0 ]];\
    \ then\n                echo $i\n                break\n            fi\n     \
    \   done\n    fi", "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n\
    \        for i in $(seq $1 $2); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n\
    \                echo $i\n                break\n            fi\n        done\n\
    \    fi"]
stop_tokens:
- "\n}"
