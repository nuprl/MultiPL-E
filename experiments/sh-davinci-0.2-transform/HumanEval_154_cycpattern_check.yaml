name: HumanEval_154_cycpattern_check
language: sh
prompt: "#!/bin/bash\n# You are given 2 words. You need to return True if the second\
  \ word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check\
  \ \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n\
  # \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check\
  \ \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n#\
  \ \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1\
  \ is a string\n# $2 is a string\ncycpattern_check() {\n"
tests: "}\n\ncandidate() {\n    cycpattern_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"xyzw\" \"xyw\") = \"false\" ]]\n    [[ $(candidate \"yello\"\
  \ \"ell\") = \"true\" ]]\n    [[ $(candidate \"whattup\" \"ptut\") = \"false\" ]]\n\
  \    [[ $(candidate \"efef\" \"fee\") = \"true\" ]]\n    [[ $(candidate \"abab\"\
  \ \"aabb\") = \"false\" ]]\n    [[ $(candidate \"winemtt\" \"tinem\") = \"true\"\
  \ ]]\n}\n\nrun_test"
completions: ["  local str1=$1\n  local str2=$2\n  local len1=${#str1}\n  local len2=${#str2}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  if [ $len1 -lt $len2\
    \ ]; then\n    echo \"false\"\n    return\n  fi\n  for ((i=0; i<len1; i++)); do\n\
    \    j=0\n    k=i\n    while [ $j -lt $len2 ] && [ $k -lt $len1 ]; do\n      if\
    \ [ \"${str1:$k:1}\" != \"${str2:$j:1}\" ]; then\n        break\n      fi\n  \
    \    j=$((j+1))\n      k=$((k+1))\n    done\n    if [ $j -eq $len2 ]; then\n \
    \     flag=1\n      break\n    fi\n  done\n  if [ $flag -eq 1 ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local str1=\"$1\"\n    local\
    \ str2=\"$2\"\n    local len1=${#str1}\n    local len2=${#str2}\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n \
    \   local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n    local aaaa=0\n    local b", "  local str1=$1\n \
    \ local str2=$2\n  local str2_len=${#str2}\n  local str1_len=${#str1}\n  local\
    \ str2_rotated\n  local str2_rotated_len\n  local str2_rotated_len_diff\n  local\
    \ str2_rotated_len_diff_abs\n  local str2_rotated_len_diff_abs_min=${str1_len}\n\
    \  local str2_rotated_len_diff_abs_min_index=0\n  local str2_rotated_len_diff_abs_min_index_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev=0\n  local str2_rotated_len_diff_abs_min_index_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev=0\n  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local str2_rotated_len_diff_abs_min_index_prev_prev_prev_prev_prev_prev_prev_",
  "  local word=$1\n  local pattern=$2\n  local pattern_length=${#pattern}\n  local\
    \ word_length=${#word}\n  local i=0\n  local j=0\n  local k=0\n  local found=false\n\
    \  local pattern_match=false\n  for (( i=0; i<word_length; i++ )); do\n    if\
    \ [[ ${word:i:1} == ${pattern:0:1} ]]; then\n      pattern_match=true\n      for\
    \ (( j=1; j<pattern_length; j++ )); do\n        k=$(( (i+j) % word_length ))\n\
    \        if [[ ${word:k:1} != ${pattern:j:1} ]]; then\n          pattern_match=false\n\
    \          break\n        fi\n      done\n      if [[ $pattern_match == true ]];\
    \ then\n        found=true\n        break\n      fi\n    fi\n  done\n  echo $found",
  "  local str1=\"$1\"\n  local str2=\"$2\"\n  local len1=${#str1}\n  local len2=${#str2}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  if [ $len1 -lt $len2\
    \ ]; then\n    echo \"false\"\n    return\n  fi\n  for ((i=0; i<len1; i++)); do\n\
    \    k=i\n    j=0\n    while [ $j -lt $len2 ] && [ ${str1:$k:1} == ${str2:$j:1}\
    \ ]; do\n      j=$((j+1))\n      k=$((k+1))\n      if [ $k -ge $len1 ]; then\n\
    \        k=0\n      fi\n    done\n    if [ $j -eq $len2 ]; then\n      flag=1\n\
    \      break\n    fi\n  done\n  if [ $flag -eq 1 ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  local -r word=\"$1\"\n  local -r pattern=\"\
    $2\"\n  local -r pattern_length=\"${#pattern}\"\n  local -r word_length=\"${#word}\"\
    \n  local -r pattern_length_minus_one=\"$((pattern_length - 1))\"\n  local -r\
    \ word_length_minus_one=\"$((word_length - 1))\"\n  local -r pattern_length_minus_one_mod_word_length=\"\
    $((pattern_length_minus_one % word_length))\"\n  local -r word_length_minus_one_mod_pattern_length=\"\
    $((word_length_minus_one % pattern_length))\"\n  local -r pattern_length_minus_one_mod_word_length_plus_one=\"\
    $((pattern_length_minus_one_mod_word_length + 1))\"\n  local -r word_length_minus_one_mod_pattern_length_plus_one=\"\
    $((word_length_minus_one_mod_pattern_length + 1))\"\n  local -r pattern_length_minus_one_mod_word_length_plus_one_mod_pattern_length=\"\
    $((pattern_length_minus_one_mod_word_length_plus_one % pattern_length))\"\n  local\
    \ -r word_length_minus_one_mod_pattern_length_plus_one_mod_word_length=\"$((word_length_minus_one_mod_pattern_length_plus_one\
    \ % word_length))\"\n  local -r pattern_length_minus_one_mod_word_length_plus_one_mod_pattern_length_plus_one=\"\
    $((pattern_length_minus_one_mod_word_length_plus_one_mod_pattern_length + 1))\"\
    \n  local -r word_length_minus_one_mod_pattern_length_plus_one_mod_word_length_plus_one=\"\
    $((word_length_minus_one_mod_pattern_length_plus_one_mod_word_length + 1))\"\n\
    \  local -r pattern_length_minus_one_mod_word_length_plus_one_mod_pattern_length_plus_one_mod_word_length",
  "  local word=\"$1\"\n  local pattern=\"$2\"\n  local len=$((${#pattern} - 1))\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  for ((i=0; i<${#word};\
    \ i++))\n  do\n    if [[ \"${word:$i:1}\" == \"${pattern:0:1}\" ]]\n    then\n\
    \      for ((j=0; j<${#pattern}; j++))\n      do\n        if [[ \"${word:$i:1}\"\
    \ == \"${pattern:$j:1}\" ]]\n        then\n          flag=1\n        else\n  \
    \        flag=0\n          break\n        fi\n        i=$((i+1))\n      done\n\
    \      if [[ $flag -eq 1 ]]\n      then\n        echo \"true\"\n        return\n\
    \      fi\n    fi\n  done\n  echo \"false\"", "  local str1=$1\n  local str2=$2\n\
    \  local len1=${#str1}\n  local len2=${#str2}\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local res=false\n  if [[ $len1 -lt $len2 ]]; then\n    echo $res\n  \
    \  return\n  fi\n  for ((i=0; i<len1; i++)); do\n    if [[ ${str1:i:1} == ${str2:0:1}\
    \ ]]; then\n      for ((j=i, k=0; k<len2; j++, k++)); do\n        if [[ ${str1:j:1}\
    \ != ${str2:k:1} ]]; then\n          break\n        fi\n      done\n      if [[\
    \ $k -eq $len2 ]]; then\n        res=true\n        break\n      fi\n    fi\n \
    \ done\n  echo $res", "    local word=$1\n    local pattern=$2\n    local len=${#word}\n\
    \    local i=0\n    local j=0\n    local k=0\n    local flag=0\n    for ((i=0;\
    \ i<len; i++))\n    do\n        if [[ ${word:i:1} == ${pattern:0:1} ]]\n     \
    \   then\n            for ((j=i, k=0; k<${#pattern}; j++, k++))\n            do\n\
    \                if [[ ${word:j:1} != ${pattern:k:1} ]]\n                then\n\
    \                    break\n                fi\n            done\n           \
    \ if [[ $k -eq ${#pattern} ]]\n            then\n                flag=1\n    \
    \            break\n            fi\n        fi\n    done\n    if [[ $flag -eq\
    \ 1 ]]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi", "  local word1=$1\n  local word2=$2\n  local len1=${#word1}\n  local len2=${#word2}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local found=false\n  if\
    \ [ \"$len1\" -lt \"$len2\" ]; then\n    echo \"false\"\n    return\n  fi\n  while\
    \ [ \"$i\" -lt \"$len1\" ]; do\n    j=0\n    k=0\n    while [ \"$j\" -lt \"$len2\"\
    \ ]; do\n      if [ \"${word1:$i:1}\" == \"${word2:$j:1}\" ]; then\n        l=0\n\
    \        while [ \"$l\" -lt \"$len2\" ]; do\n          if [ \"${word1:$((i+l)):1}\"\
    \ != \"${word2:$((j+l)):1}\" ]; then\n            break\n          fi\n      \
    \    l=$((l+1))\n        done\n        if [ \"$l\" -eq \"$len2\" ]; then\n   \
    \       found=true\n          break\n        fi\n      fi\n      j=$((j+1))\n\
    \    done\n    if [ \"$found\" == \"true\" ]; then\n      break\n    fi\n    i=$((i+1))\n\
    \  done\n  if [ \"$found\" == \"true\" ]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "  local word=$1\n  local pattern=$2\n  local len=${#pattern}\n\
    \  local pattern_rotated=${pattern:1:len}${pattern:0:1}\n  local pattern_rotated_2=${pattern:2:len}${pattern:0:2}\n\
    \  local pattern_rotated_3=${pattern:3:len}${pattern:0:3}\n  local pattern_rotated_4=${pattern:4:len}${pattern:0:4}\n\
    \  local pattern_rotated_5=${pattern:5:len}${pattern:0:5}\n  local pattern_rotated_6=${pattern:6:len}${pattern:0:6}\n\
    \  local pattern_rotated_7=${pattern:7:len}${pattern:0:7}\n  local pattern_rotated_8=${pattern:8:len}${pattern:0:8}\n\
    \  local pattern_rotated_9=${pattern:9:len}${pattern:0:9}\n  local pattern_rotated_10=${pattern:10:len}${pattern:0:10}\n\
    \  local pattern_rotated_11=${pattern:11:len}${pattern:0:11}\n  local pattern_rotated_12=${pattern:12:len}${pattern:0:12}\n\
    \  local pattern_rotated_13=${pattern:13:len}${pattern:0:13}\n  local pattern_rotated_14=${pattern:14:len}${pattern:0:14}\n\
    \  local pattern_rotated_15=${pattern:15:len}${pattern:0:15}\n  local pattern_rotated_16=${pattern:16:len}${pattern:0:16}\n\
    \  local pattern_rotated_17=${pattern:17:len}${pattern:0:17}\n  local pattern_rotated_18=${pattern:18:len}${pattern:0:18}\n\
    \  local pattern_rotated_19=${pattern:19:len}${pattern:0:19}\n  local pattern_rotated_20=${pattern:20:len}${pattern:0:20}\n\
    \  local pattern_rotated_21=${pattern:", "  local -r str1=\"$1\"\n  local -r str2=\"\
    $2\"\n  local -r len1=\"${#str1}\"\n  local -r len2=\"${#str2}\"\n  local -r len_diff=$((len1\
    \ - len2))\n  local -r len_diff_abs=$((len_diff < 0 ? -len_diff : len_diff))\n\
    \  if [[ $len_diff_abs -gt 0 ]]; then\n    local -r str1_sub=\"${str1:0:len_diff_abs}\"\
    \n    local -r str1_sub_rev=\"$(rev <<< \"$str1_sub\")\"\n    local -r str1_sub_rev_len=\"\
    ${#str1_sub_rev}\"\n    local -r str1_sub_rev_len_diff=$((len2 - str1_sub_rev_len))\n\
    \    local -r str1_sub_rev_len_diff_abs=$((str1_sub_rev_len_diff < 0 ? -str1_sub_rev_len_diff\
    \ : str1_sub_rev_len_diff))\n    local -r str1_sub_rev_sub=\"${str1_sub_rev:0:str1_sub_rev_len_diff_abs}\"\
    \n    local -r str1_sub_rev_sub_rev=\"$(rev <<< \"$str1_sub_rev_sub\")\"\n   \
    \ local -r str1_sub_rev_sub_rev_len=\"${#str1_sub_rev_sub_rev}\"\n    local -r\
    \ str1_sub_rev_sub_rev_len_diff=$((len2 - str1_sub_rev_sub_rev_len))\n    local\
    \ -r str1_sub_rev_sub_rev_len_diff_abs=$((str1_sub_rev_sub_rev_len_diff < 0 ?\
    \ -str1_sub_rev_sub_rev_len_diff : str1_sub_rev_sub_rev_len_diff))\n    local\
    \ -r str1_sub_rev_sub_rev_sub=\"${str1_sub_rev_sub_rev:0:str1_sub_rev_sub_rev_len",
  "    local -i len=${#2}\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n\
    \    local -i d=0\n    local -i e=0\n    local -i f=0\n    local -i g=0\n    local\
    \ -i h=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i iii=0\n    local -i\
    \ jjj=0\n    local -i kkk=0\n    local -i lll=0\n    local -i mmm=0\n    local\
    \ -i nnn=0\n    local -i ooo=0\n    local -i p", "  local -r str1=$1\n  local\
    \ -r str2=$2\n  local -r len1=${#str1}\n  local -r len2=${#str2}\n  local -r max_rot=$((len1\
    \ - len2))\n  local -r max_rot_idx=$((len1 - 1))\n  local -r str2_idx=$((len2\
    \ - 1))\n  local -r str2_last_char=${str2:$str2_idx:1}\n  local -r str2_first_char=${str2:0:1}\n\
    \  local -r str2_first_char_idx=$(printf \"%s\" \"$str1\" | grep -b -o \"$str2_first_char\"\
    \ | cut -d: -f1)\n  local -r str2_last_char_idx=$(printf \"%s\" \"$str1\" | grep\
    \ -b -o \"$str2_last_char\" | cut -d: -f1)\n  local -r str2_first_char_idx_len=${#str2_first_char_idx}\n\
    \  local -r str2_last_char_idx_len=${#str2_last_char_idx}\n  local -r str2_first_char_idx_last_idx=$((str2_first_char_idx_len\
    \ - 1))\n  local -r str2_last_char_idx_last_idx=$((str2_last_char_idx_len - 1))\n\
    \  local -r str2_first_char_idx_last_char=${str2_first_char_idx:$str2_first_char_idx_last_idx:1}\n\
    \  local -r str2_last_char_idx_last_char=${str2_last_char_idx:$str2_last_char_idx_last_idx:1}\n\
    \  local -r str2_first_char_idx_last_char_int=$((10#$str2_first_char_idx_last_char))\n\
    \  local -r str2_last_char_idx_last", "  local word1=$1\n  local word2=$2\n  local\
    \ word2_len=${#word2}\n  local word2_rotated=$word2\n  local word2_rotated_len=${#word2_rotated}\n\
    \  local word2_rotated_len_minus_1=$((word2_rotated_len - 1))\n  local word2_rotated_len_minus_2=$((word2_rotated_len\
    \ - 2))\n  local word2_rotated_len_minus_3=$((word2_rotated_len - 3))\n  local\
    \ word2_rotated_len_minus_4=$((word2_rotated_len - 4))\n  local word2_rotated_len_minus_5=$((word2_rotated_len\
    \ - 5))\n  local word2_rotated_len_minus_6=$((word2_rotated_len - 6))\n  local\
    \ word2_rotated_len_minus_7=$((word2_rotated_len - 7))\n  local word2_rotated_len_minus_8=$((word2_rotated_len\
    \ - 8))\n  local word2_rotated_len_minus_9=$((word2_rotated_len - 9))\n  local\
    \ word2_rotated_len_minus_10=$((word2_rotated_len - 10))\n  local word2_rotated_len_minus_11=$((word2_rotated_len\
    \ - 11))\n  local word2_rotated_len_minus_12=$((word2_rotated_len - 12))\n  local\
    \ word2_rotated_len_minus_13=$((word2_rotated_len - 13))\n  local word2_rotated_len_minus_14=$((word2_rotated_len\
    \ - 14))\n  local word2_rotated_len_minus_15=$((word2_rotated_len - 15))\n  local\
    \ word2_rotated_len_minus_16=$((word2_rotated_len - 16))\n  local word2_rotated_len_minus_17=$((word2_rotated_len\
    \ - 17))\n  local word2_rotated_len_minus_", "  local str1=$1\n  local str2=$2\n\
    \  local str2_len=${#str2}\n  local str1_len=${#str1}\n  local str1_substr\n \
    \ local str2_substr\n  local i\n  local j\n  local k\n  local l\n  local m\n \
    \ local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local aa\n\
    \  local bb\n  local cc\n  local dd\n  local ee\n  local ff\n  local gg\n  local\
    \ hh\n  local ii\n  local jj\n  local kk\n  local ll\n  local mm\n  local nn\n\
    \  local oo\n  local pp\n  local qq\n  local rr\n  local ss\n  local tt\n  local\
    \ uu\n  local vv\n  local ww\n  local xx\n  local yy\n  local zz\n  local aaa\n\
    \  local bbb\n  local ccc\n  local ddd\n  local eee\n  local fff\n  local ggg\n\
    \  local hhh\n  local iii\n  local jjj\n  local kkk\n  local lll\n  local mmm\n\
    \  local nnn\n  local ooo\n  local ppp\n  local qqq\n  local rrr\n  local sss\n\
    \  local ttt\n  local uuu\n  local vvv\n  local www\n  local xxx\n  local yyy\n\
    \  local zzz\n  local aaaa\n  local bbbb\n  local cccc\n  local dddd\n  local\
    \ eeee\n  local ffff\n  local gggg\n  local hhhh\n  local iiii\n  local jjjj\n\
    \  local kkkk\n  local llll\n  local mmmm\n  local nnnn\n  local oooo\n  local\
    \ pppp\n  local qqqq\n  local rrrr\n  local ssss\n  local tttt\n  local uuuu\n\
    \  local vvvv\n  local wwww\n  local xxxx", "  local word=$1\n  local pattern=$2\n\
    \  local len_word=${#word}\n  local len_pattern=${#pattern}\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local found=false\n  local is_substring=false\n  local is_rotation=false\n\
    \  local rotation=\"\"\n  local substring=\"\"\n  local rotations=()\n  local\
    \ substrings=()\n  local result=\"\"\n\n  # check if the pattern is a substring\
    \ of the word\n  for ((i=0; i<len_word; i++)); do\n    for ((j=i; j<len_word;\
    \ j++)); do\n      substring=${word:i:j}\n      if [[ $substring == $pattern ]];\
    \ then\n        is_substring=true\n        break\n      fi\n    done\n    if [[\
    \ $is_substring == true ]]; then\n      break\n    fi\n  done\n\n  # if the pattern\
    \ is not a substring of the word, check if it is a rotation of a substring of\
    \ the word\n  if [[ $is_substring == false ]]; then\n    for ((i=0; i<len_word;\
    \ i++)); do\n      for ((j=i; j<len_word; j++)); do\n        substring=${word:i:j}\n\
    \        len_substring=${#substring}\n        for ((k=0; k<len_substring; k++));\
    \ do\n          rotation=${substring:k}${substring:0:k}\n          if [[ $rotation\
    \ == $pattern ]]; then\n            is_rotation=true\n            break\n    \
    \      fi\n        done\n        if [[ $is_rotation == true ]]; then\n       \
    \   break\n        fi\n      done\n      if [[ $is_rotation == true ]]; then\n\
    \        break\n      fi\n    done\n  fi\n\n  if [[ $is_substring == true || $is_rotation\
    \ == true ]]; then\n    result=\"true\"\n  else\n    result=\"false\"\n  fi\n\n\
    \  echo $result", "  local str1=$1\n  local str2=$2\n  local len1=${#str1}\n \
    \ local len2=${#str2}\n  local i=0\n  local j=0\n  local k=0\n  local found=0\n\
    \  local ret=false\n  if [ \"$len1\" -lt \"$len2\" ]; then\n    ret=false\n  else\n\
    \    for ((i=0; i<len1; i++)); do\n      if [ \"${str1:$i:1}\" == \"${str2:0:1}\"\
    \ ]; then\n        found=1\n        for ((j=1; j<len2; j++)); do\n          k=$((i+j))\n\
    \          if [ \"$k\" -ge \"$len1\" ]; then\n            k=$((k-len1))\n    \
    \      fi\n          if [ \"${str1:$k:1}\" != \"${str2:$j:1}\" ]; then\n     \
    \       found=0\n            break\n          fi\n        done\n        if [ \"\
    $found\" -eq 1 ]; then\n          ret=true\n          break\n        fi\n    \
    \  fi\n    done\n  fi\n  echo \"$ret\"", "    local -r word=\"$1\"\n    local\
    \ -r pattern=\"$2\"\n    local -r word_len=${#word}\n    local -r pattern_len=${#pattern}\n\
    \    local -r pattern_len_minus_one=$((pattern_len - 1))\n    local -r pattern_len_minus_two=$((pattern_len\
    \ - 2))\n    local -r pattern_len_minus_three=$((pattern_len - 3))\n    local\
    \ -r pattern_len_minus_four=$((pattern_len - 4))\n    local -r pattern_len_minus_five=$((pattern_len\
    \ - 5))\n    local -r pattern_len_minus_six=$((pattern_len - 6))\n    local -r\
    \ pattern_len_minus_seven=$((pattern_len - 7))\n    local -r pattern_len_minus_eight=$((pattern_len\
    \ - 8))\n    local -r pattern_len_minus_nine=$((pattern_len - 9))\n    local -r\
    \ pattern_len_minus_ten=$((pattern_len - 10))\n    local -r pattern_len_minus_eleven=$((pattern_len\
    \ - 11))\n    local -r pattern_len_minus_twelve=$((pattern_len - 12))\n    local\
    \ -r pattern_len_minus_thirteen=$((pattern_len - 13))\n    local -r pattern_len_minus_fourteen=$((pattern_len\
    \ - 14))\n    local -r pattern_len_minus_fifteen=$((pattern_len - 15))\n    local\
    \ -r pattern_len_minus_sixteen=$((pattern_len - 16))\n    local -r pattern_len_minus_seventeen=$((pattern_len\
    \ - 17))\n    local -r pattern_len_minus_eighteen=$((pattern_len - 18))\n    local\
    \ -r pattern_len_minus_nineteen=$((pattern_len - 19))\n    local -r pattern_len_minus_twenty=$((pattern_len\
    \ - 20))\n    local -r pattern_len_minus_twentyone=$((pattern_len - 21))\n   \
    \ local -r pattern_len_minus_twentytwo=$((pattern_len - 22))\n    local -r pattern_len_minus_",
  "  local str1=$1\n  local str2=$2\n  local len1=${#str1}\n  local len2=${#str2}\n\
    \  local i=0\n  local j=0\n  local k=0\n  local flag=0\n  if [ $len1 -lt $len2\
    \ ]; then\n    echo \"false\"\n    return\n  fi\n  for ((i=0; i<len1; i++)); do\n\
    \    if [ ${str1:$i:1} == ${str2:0:1} ]; then\n      flag=1\n      for ((j=1;\
    \ j<len2; j++)); do\n        k=$((i+j))\n        if [ $k -ge $len1 ]; then\n \
    \         k=$((k-len1))\n        fi\n        if [ ${str1:$k:1} != ${str2:$j:1}\
    \ ]; then\n          flag=0\n          break\n        fi\n      done\n      if\
    \ [ $flag -eq 1 ]; then\n        echo \"true\"\n        return\n      fi\n   \
    \ fi\n  done\n  echo \"false\""]
stop_tokens:
- "\n}"
