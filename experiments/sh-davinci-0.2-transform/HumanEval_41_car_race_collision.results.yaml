language: sh
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM % 100))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM\
    \ % 100))\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]; then\n                collisions=$((collisions + 1))\n            fi\n \
    \       done\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # TODO: implement this function\n  \
    \  echo 0\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # TODO: implement this function\n  \
    \  # Hint: use the modulo operator\n    # Hint: use the fact that the input is\
    \ a power of 2\n    # Hint: use the fact that the input is a power of 2\n    #\
    \ Hint: use the fact that the input is a power of 2\n    # Hint: use the fact\
    \ that the input is a power of 2\n    # Hint: use the fact that the input is a\
    \ power of 2\n    # Hint: use the fact that the input is a power of 2\n    # Hint:\
    \ use the fact that the input is a power of 2\n    # Hint: use the fact that the\
    \ input is a power of 2\n    # Hint: use the fact that the input is a power of\
    \ 2\n    # Hint: use the fact that the input is a power of 2\n    # Hint: use\
    \ the fact that the input is a power of 2\n    # Hint: use the fact that the input\
    \ is a power of 2\n    # Hint: use the fact that the input is a power of 2\n \
    \   # Hint: use the fact that the input is a power of 2\n    # Hint: use the fact\
    \ that the input is a power of 2\n    # Hint: use the fact that the input is a\
    \ power of 2\n    # Hint: use the fact that the input is a power of 2\n    # Hint:\
    \ use the fact that the input is a power of 2\n    # Hint: use the fact that the\
    \ input is a power of 2\n    # Hint: use the fact that the input is a power of\
    \ 2\n    # Hint: use the fact that the input is a power of 2\n    # Hint: use\
    \ the fact that the input is a power of 2\n    # Hint: use the fact that the input\
    \ is a power of 2\n    # Hint: use the fact that the input is a power of 2\n \
    \   # Hint: use the fact that the input is a power of 2\n    # Hint: use the fact\
    \ that the input is a power of 2\n    # Hint: use the fact that the input is a\
    \ power of 2\n    # Hint: use the fact that the input is a power of 2\n    # Hint:\
    \ use the fact that the input is a power of\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcxvlthxn.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmpcxvlthxn.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    while [[ $i -lt $n ]]; do\n        left_to_right_cars[$i]=$RANDOM\n     \
    \   right_to_left_cars[$i]=$RANDOM\n        i=$((i+1))\n    done\n    while [[\
    \ $j -lt $n ]]; do\n        if [[ ${left_to_right_cars[$j]} -gt ${right_to_left_cars[$j]}\
    \ ]]; then\n            collisions=$((collisions+1))\n        fi\n        j=$((j+1))\n\
    \    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if [[ $i -eq $j ]]; then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]\n    do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]\n        do\n            collisions=$((collisions+1))\n\
    \            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    0\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i\n    for ((i=1; i<=n; i++)); do\n        collisions=$((collisions\
    \ + i))\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    # Generate the cars\n    while [ $i -lt $n ]; do\n        left_to_right_cars[$i]=$((RANDOM\
    \ % $n))\n        right_to_left_cars[$i]=$((RANDOM % $n))\n        i=$((i + 1))\n\
    \    done\n    # Sort the cars\n    left_to_right_cars=($(echo ${left_to_right_cars[@]}\
    \ | tr ' ' '\\n' | sort -n))\n    right_to_left_cars=($(echo ${right_to_left_cars[@]}\
    \ | tr ' ' '\\n' | sort -n))\n    # Count the collisions\n    while [ $i -lt $n\
    \ ]; do\n        if [ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]; then\n            collisions=$((collisions + 1))\n            i=$((i + 1))\n\
    \            j=$((j + 1))\n        elif [ ${left_to_right_cars[$i]} -lt ${right_to_left_cars[$j]}\
    \ ]; then\n            i=$((i + 1))\n        else\n            j=$((j + 1))\n\
    \        fi\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [[ $i -lt $n ]]; do\n        while [[\
    \ $j -lt $n ]]; do\n            if [[ $i -eq $j ]]; then\n                ((j++))\n\
    \                continue\n            fi\n            ((collisions++))\n    \
    \        ((j++))\n        done\n        ((i++))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if (( i < j )); then\n                (( count++ ))\n\
    \            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while (( i < n )); do\n        j=$(( n - 1\
    \ ))\n        while (( j > i )); do\n            (( collisions++ ))\n        \
    \    (( j-- ))\n        done\n        (( i++ ))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i n=$1\n    local -i i j\n  \
    \  local -i count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n\
    \      if [ $i -ne $j ]; then\n        collisions=$((collisions + 1))\n      fi\n\
    \      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local -i n=$1\n  local -i i=0\n  local\
    \ -i j=0\n  local -i collisions=0\n  local -i left_to_right_cars=()\n  local -i\
    \ right_to_left_cars=()\n\n  # Generate the cars\n  for ((i=0; i<n; i++)); do\n\
    \    left_to_right_cars[i]=$RANDOM\n    right_to_left_cars[i]=$RANDOM\n  done\n\
    \n  # Sort the cars\n  left_to_right_cars=($(echo ${left_to_right_cars[@]} | tr\
    \ ' ' '\\n' | sort -n))\n  right_to_left_cars=($(echo ${right_to_left_cars[@]}\
    \ | tr ' ' '\\n' | sort -n))\n\n  # Count the collisions\n  for ((i=0; i<n; i++));\
    \ do\n    for ((j=0; j<n; j++)); do\n      if [[ ${left_to_right_cars[i]} -eq\
    \ ${right_to_left_cars[j]} ]]; then\n        collisions+=1\n      fi\n    done\n\
    \  done\n\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local count=0\n  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n   \
    \   if [ $i -eq $j ]; then\n        :\n      else\n        count=$((count+1))\n\
    \      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [[ $i -lt $n ]]; do\n        j=$i\n      \
    \  while [[ $j -lt $n ]]; do\n            if [[ $i -ne $j ]]; then\n         \
    \       count=$((count+1))\n            fi\n            j=$((j+1))\n        done\n\
    \        i=$((i+1))\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    unimplemented\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    local n=$1\n\
    \    local i=0\n    local j=0\n    local count=0\n    while [ $i -lt $n ]\n  \
    \  do\n        j=$i\n        while [ $j -lt $n ]\n        do\n            if [\
    \ $i -ne $j ]\n            then\n                count=$((count+1))\n        \
    \    fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local\
    \ u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local\
    \ aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n\
    \  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local\
    \ ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n\
    \  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local\
    \ ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n\
    \  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n \
    \ local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local\
    \ mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n\
    \  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n \
    \ local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n  local eeee=0\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collision=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collision=$((collision\
    \ + 1))\n            fi\n        done\n    done\n    echo $collision\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local c=0\n\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if (( i < j )); then\n                (( c++ ))\n          \
    \  fi\n        done\n    done\n\n    echo $c\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -le 0 ]]; then\n        echo\
    \ \"Error: $1 is not a positive integer\"\n        return 1\n    fi\n    echo\
    \ $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    if [[ $n -lt 1 ]]; then\n\
    \        echo \"Error: n must be a positive integer\"\n        return 1\n    fi\n\
    \    echo $((n*(n-1)/2))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local k\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            for ((k=0; k<n; k++)); do\n             \
    \   if ((i < j && j < k)); then\n                    ((collisions++))\n      \
    \          fi\n            done\n        done\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collision=0\n    while [ $i -lt $n ]; do\n        j=$i\n    \
    \    while [ $j -lt $n ]; do\n            collision=$((collision + 1))\n     \
    \       j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo $collision\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local\
    \ u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local\
    \ aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n\
    \  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local\
    \ ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n\
    \  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local\
    \ ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n\
    \  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n \
    \ local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local\
    \ mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n\
    \  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n \
    \ local xxx=0\n  local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n\
    \  local cccc=0\n  local dddd=0\n  local eeee=0\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # TODO: implement this function\n  # Hint:\
    \ use the fact that the two sets of cars are very far from each other\n  # to\
    \ simplify the problem.\n  # Hint: use the fact that the cars are infinitely sturdy\
    \ and strong\n  # to simplify the problem.\n  # Hint: use the fact that the cars\
    \ are moving in the same speed\n  # to simplify the problem.\n  # Hint: use the\
    \ fact that the road is a perfectly straight infinitely long line\n  # to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use the fact that\
    \ the two sets of cars start out being very far from\n  # each other to simplify\
    \ the problem.\n  # Hint: use the fact that the cars are driving left to right\
    \ and right to left\n  # to simplify the problem.\n  # Hint: use\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdjrocx3l.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpdjrocx3l.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -eq 0 ]]; then\n        echo\
    \ 0\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((i+1))\n    while [\
    \ $j -lt $n ]; do\n      collisions=$((collisions+1))\n      j=$((j+1))\n    done\n\
    \    i=$((i+1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    for i in $(seq 1 $n); do\n        for j in $(seq\
    \ 1 $n); do\n            if [ $i -eq $j ]; then\n                continue\n  \
    \          fi\n            if [ $i -gt $j ]; then\n                ((count++))\n\
    \            fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [ $i -lt $n ]\n    do\n        j=$(($n - 1))\n\
    \        while [ $j -gt $i ]\n        do\n            count=$(($count + 1))\n\
    \            j=$(($j - 1))\n        done\n        i=$(($i + 1))\n    done\n  \
    \  echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((i+1))\n    while [\
    \ $j -lt $n ]; do\n      collisions=$((collisions+1))\n      j=$((j+1))\n    done\n\
    \    i=$((i+1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collision=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collision=$((collision + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    # The cars are numbered from 0 to n-1.\n    # The cars are initially very\
    \ far from each other.\n    # The cars are moving at the same speed.\n    # The\
    \ cars are infinitely sturdy and strong; as a result, they continue moving\n \
    \   # in their trajectory as if they did not collide.\n    # The cars are numbered\
    \ from 0 to n-1.\n    # The cars are initially very far from each other.\n   \
    \ # The cars are moving at the same speed.\n    # The cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    # in their trajectory as\
    \ if they did not collide.\n    for ((i=0; i<n; i++))\n    do\n        left_to_right_cars[$i]=$i\n\
    \        right_to_left_cars[$i]=$i\n    done\n    # The cars are numbered from\
    \ 0 to n-1.\n    # The cars are initially very far from each other.\n    # The\
    \ cars are moving at the same speed.\n    # The cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\n    # in their trajectory as if they\
    \ did not collide.\n    for ((i=0; i<n; i++))\n    do\n        for ((j=0; j<n;\
    \ j++))\n        do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]\n            then\n                collisions=$((collisions+1))\n       \
    \     fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -le 1 ]]; then\n        echo\
    \ 0\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]\n    do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]\n        do\n            collisions=$((collisions+1))\n\
    \            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i n=$1\n    local -i i=0\n  \
    \  local -i j=0\n    local -i collisions=0\n    local -i left_to_right_cars=()\n\
    \    local -i right_to_left_cars=()\n\n    # Generate the cars\n    while (( i\
    \ < n )); do\n        left_to_right_cars[i]=$(( RANDOM % n ))\n        right_to_left_cars[i]=$((\
    \ RANDOM % n ))\n        (( i++ ))\n    done\n\n    # Sort the cars\n    left_to_right_cars=(\
    \ $( printf \"%s\\n\" \"${left_to_right_cars[@]}\" | sort -n ) )\n    right_to_left_cars=(\
    \ $( printf \"%s\\n\" \"${right_to_left_cars[@]}\" | sort -n ) )\n\n    # Count\
    \ the collisions\n    i=0\n    j=0\n    while (( i < n && j < n )); do\n     \
    \   if (( left_to_right_cars[i] < right_to_left_cars[j] )); then\n           \
    \ (( i++ ))\n        elif (( left_to_right_cars[i] > right_to_left_cars[j] ));\
    \ then\n            (( j++ ))\n        else\n            (( collisions++ ))\n\
    \            (( i++ ))\n            (( j++ ))\n        fi\n    done\n\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if [[ $i -ne $j ]]; then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i=0\n  while [ $i -lt $n ]; do\n    local j=$(( $n - 1 ))\n    while [ $j -gt\
    \ $i ]; do\n      collisions=$(( $collisions + 1 ))\n      j=$(( $j - 1 ))\n \
    \   done\n    i=$(( $i + 1 ))\n  done\n  echo $collisions\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    0\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    if [[ $1\
    \ -le 0 ]]; then\n        echo 0\n    else\n        echo $1\n    fi\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [ $i -lt $n ]; do\n        j=$i\n        while\
    \ [ $j -lt $n ]; do\n            if [ $i -ne $j ]; then\n                count=$((count+1))\n\
    \            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n  \
    \  done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n \
    \     if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n  done\n\
    \  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i<j)); then\n                ((count++))\n            fi\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM % 100))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM\
    \ % 100))\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]; then\n                collisions=$((collisions + 1))\n            fi\n \
    \       done\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n \
    \     if ((i < j)); then\n        collisions=$((collisions + 1))\n      fi\n \
    \   done\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ $i -lt $j ]]; then\n                ((count++))\n    \
    \        fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n   \
    \ car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$(($n -\
    \ $i - 1))\n        collisions=$(($collisions + $j))\n        i=$(($i + 1))\n\
    \    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i\n    for ((i=1; i<=n; i++)); do\n        collisions=$((collisions\
    \ + i))\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Your code here\n  if [[ $1 -eq 0 ]];\
    \ then\n    echo 0\n  else\n    echo $1\n  fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while (( i < n )); do\n        j=$(( n - 1\
    \ ))\n        while (( j > i )); do\n            collisions=$(( collisions + 1\
    \ ))\n            j=$(( j - 1 ))\n        done\n        i=$(( i + 1 ))\n    done\n\
    \    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]\n    do\n        while\
    \ [ $j -lt $n ]\n        do\n            if [ $i -ne $j ]\n            then\n\
    \                collisions=$((collisions+1))\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -eq 0 ]]; then\n        echo\
    \ 0\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      if ((i < j)); then\n        collisions=$((collisions + 1))\n     \
    \ fi\n    done\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right=()\n    local right_to_left=()\n\
    \    while [ $i -lt $n ]; do\n        left_to_right[$i]=$((RANDOM % 100))\n  \
    \      right_to_left[$i]=$((RANDOM % 100))\n        ((i++))\n    done\n    left_to_right=($(echo\
    \ ${left_to_right[@]} | tr ' ' '\\n' | sort -n))\n    right_to_left=($(echo ${right_to_left[@]}\
    \ | tr ' ' '\\n' | sort -n))\n    while [ $i -lt $n ] && [ $j -lt $n ]; do\n \
    \       if [ ${left_to_right[$i]} -lt ${right_to_left[$j]} ]; then\n         \
    \   ((i++))\n        elif [ ${left_to_right[$i]} -gt ${right_to_left[$j]} ]; then\n\
    \            ((j++))\n        else\n            ((collisions++))\n           \
    \ ((i++))\n            ((j++))\n        fi\n    done\n    echo $collisions\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local count=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt $n ];\
    \ do\n      if [ $i -ne $j ]; then\n        count=$((count+1))\n      fi\n   \
    \   j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local k\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for\
    \ ((j=0; j<n; j++)); do\n            for ((k=0; k<n; k++)); do\n             \
    \   if ((i < j && j < k)); then\n                    ((collisions++))\n      \
    \          fi\n            done\n        done\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -le 0 ]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    # TODO: implement this\
    \ function\n    # Hint: use a loop\n    # Hint: use the modulo operator\n    #\
    \ Hint: use the echo command\n    # Hint: use the return command\n    # Hint:\
    \ use the bc command\n    # Hint: use the expr command\n    # Hint: use the seq\
    \ command\n    # Hint: use the echo command\n    # Hint: use the return command\n\
    \    # Hint: use the bc command\n    # Hint: use the expr command\n    # Hint:\
    \ use the seq command\n    # Hint: use the echo command\n    # Hint: use the return\
    \ command\n    # Hint: use the bc command\n    # Hint: use the expr command\n\
    \    # Hint: use the seq command\n    # Hint: use the echo command\n    # Hint:\
    \ use the return command\n    # Hint: use the bc command\n    # Hint: use the\
    \ expr command\n    # Hint: use the seq command\n    # Hint: use the echo command\n\
    \    # Hint: use the return command\n    # Hint: use the bc command\n    # Hint:\
    \ use the expr command\n    # Hint: use the seq command\n    # Hint: use the echo\
    \ command\n    # Hint: use the return command\n    # Hint: use the bc command\n\
    \    # Hint: use the expr command\n    # Hint: use the seq command\n    # Hint:\
    \ use the echo command\n    # Hint: use the return command\n    # Hint: use the\
    \ bc command\n    # Hint: use the expr command\n    # Hint: use the seq command\n\
    \    # Hint: use the echo command\n    # Hint: use the return command\n    # Hint:\
    \ use the bc command\n    # Hint: use the expr command\n    # Hint: use the seq\
    \ command\n    # Hint: use the echo command\n    # Hint: use the return command\n\
    \    # Hint: use the bc command\n    # Hint: use the expr command\n    # Hint:\
    \ use the seq command\n    # Hint:\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i=0\n  local j=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n\
    \      if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n  done\n\
    \  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n\
    \      if [ $i -eq $j ]; then\n        :\n      else\n        collisions=$((collisions+1))\n\
    \      fi\n      j=$((j+1))\n    done\n    i=$((i+1))\n  done\n  echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n \
    \     if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n  done\n\
    \  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    local left_to_right_cars_index=0\n    local right_to_left_cars_index=0\n\
    \    local left_to_right_cars_size=0\n    local right_to_left_cars_size=0\n  \
    \  local left_to_right_cars_last_index=0\n    local right_to_left_cars_last_index=0\n\
    \    local left_to_right_car_position=0\n    local right_to_left_car_position=0\n\
    \    local left_to_right_car_position_last=0\n    local right_to_left_car_position_last=0\n\
    \    local left_to_right_car_position_last_index=0\n    local right_to_left_car_position_last_index=0\n\
    \    local left_to_right_car_position_last_index_last=0\n    local right_to_left_car_position_last_index_last=0\n\
    \    local left_to_right_car_position_last_index_last_last=0\n    local right_to_left_car_position_last_index_last_last=0\n\
    \    local left_to_right_car_position_last_index_last_last_last=0\n    local right_to_left_car_position_last_index_last_last_last=0\n\
    \    local left_to_right_car_position_last_index_last_last_last_last=0\n    local\
    \ right_to_left_car_position_last_index_last_last_last_last=0\n    local left_to_right_car_position_last_index_last_last_last_last_last=0\n\
    \    local right_to_left_car_position_last_index_last_last_last_last_last=0\n\
    \    local left_to_right_car_position_last_index_last_last_last_last_last_last=0\n\
    \    local right_to_left_car\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Write your code here\n  local -i n=$1\n\
    \  local -i i=0\n  local -i j=0\n  local -i count=0\n  for ((i=0; i<n; i++));\
    \ do\n    for ((j=0; j<n; j++)); do\n      if ((i < j)); then\n        ((count++))\n\
    \      fi\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [[ $i -lt $n ]]; do\n        j=$i\n      \
    \  while [[ $j -lt $n ]]; do\n            ((count++))\n            ((j++))\n \
    \       done\n        ((i++))\n    done\n    echo $count\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    echo $(( $1 * ($1 -\
    \ 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -le 0 ]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    echo $(( $1 * ($1 -\
    \ 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i=0\n    local j=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ $1 -lt 1 ]; then\n    echo \"Error:\
    \ invalid input\"\n    return\n  fi\n  # The number of collisions is the same\
    \ as the number of pairs of cars\n  # that are moving in opposite directions.\
    \  The number of pairs is equal\n  # to the number of cars that are moving in\
    \ the same direction.\n  # The number of cars that are moving in the same direction\
    \ is equal to\n  # the number of cars that are moving left to right.\n  # The\
    \ number of cars that are moving left to right is equal to the number\n  # of\
    \ cars that are moving right to left.\n  # The number of cars that are moving\
    \ right to left is equal to the number\n  # of cars that are moving left to right.\n\
    \  # The number of cars that are moving left to right is equal to the number\n\
    \  # of cars that are moving in the same direction.\n  # The number of cars that\
    \ are moving in the same direction is equal to the number\n  # of pairs of cars\
    \ that are moving in opposite directions.\n  # The number of pairs of cars that\
    \ are moving in opposite directions is equal to\n  # the number of collisions.\n\
    \  echo $1\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    local left_cars=()\n    local right_cars=()\n  \
    \  while [ $i -lt $n ]; do\n        left_cars[$i]=$((RANDOM % 100))\n        i=$((i\
    \ + 1))\n    done\n    while [ $j -lt $n ]; do\n        right_cars[$j]=$((RANDOM\
    \ % 100))\n        j=$((j + 1))\n    done\n    i=0\n    j=0\n    while [ $i -lt\
    \ $n ] && [ $j -lt $n ]; do\n        if [ ${left_cars[$i]} -lt ${right_cars[$j]}\
    \ ]; then\n            i=$((i + 1))\n        elif [ ${left_cars[$i]} -gt ${right_cars[$j]}\
    \ ]; then\n            j=$((j + 1))\n        else\n            count=$((count\
    \ + 1))\n            i=$((i + 1))\n            j=$((j + 1))\n        fi\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -eq 0 ]]; then\n        echo\
    \ 0\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM % n))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM\
    \ % n))\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]]; then\n                collisions=$((collisions + 1))\n            fi\n \
    \       done\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((n-1))\n\
    \        while [ $j -gt $i ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j-1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ \"Error: $1 is not a positive integer\"\n        return 1\n    fi\n    echo\
    \ $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if [[ $i -eq $j ]]; then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n \
    \     if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n  done\n\
    \  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((i+1))\n\
    \        while [ $j -lt $n ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    0\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((n - i - 1))\n    collisions=$((collisions\
    \ + j))\n    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -le 0 ]]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    # The number of collisions\
    \ is the number of pairs of cars that are\n    # moving in opposite directions.\
    \  This is the same as the number of\n    # pairs of cars that are moving in the\
    \ same direction.\n    # This is the same as the number of pairs of cars.\n  \
    \  # This is the same as the number of ways to choose 2 cars out of n cars.\n\
    \    # This is the same as n choose 2.\n    # This is the same as n! / (2! * (n-2)!)\n\
    \    # This is the same as n * (n-1) / 2\n    echo $(( $1 * ($1 - 1) / 2 ))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((count++))\n   \
    \         fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # TODO: implement this function\n  \
    \  echo 0\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    if [[ $n -lt 1 ]]; then\n\
    \        echo \"ERROR: n must be greater than 0\"\n        return 1\n    fi\n\
    \    if [[ $n -eq 1 ]]; then\n        echo 0\n        return 0\n    fi\n    local\
    \ sum=0\n    for ((i=1; i<n; i++)); do\n        sum=$((sum + i))\n    done\n \
    \   echo $sum\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    echo $(( $1 * ($1 -\
    \ 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i<j)); then\n                ((count++))\n            fi\n\
    \        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    Not implemented\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    local left_to_right_car_positions=()\n    local right_to_left_car_positions=()\n\
    \    local left_to_right_car_speeds=()\n    local right_to_left_car_speeds=()\n\
    \    local left_to_right_car_positions_at_time_t=()\n    local right_to_left_car_positions_at_time_t=()\n\
    \    local left_to_right_car_positions_at_time_t_sorted=()\n    local right_to_left_car_positions_at_time_t_sorted=()\n\
    \    local left_to_right_car_positions_at_time_t_sorted_index=()\n    local right_to_left_car_positions_at_time_t_sorted_index=()\n\
    \    local left_to_right_car_positions_at_time_t_sorted_index_reverse=()\n   \
    \ local right_to_left_car_positions_at_time_t_sorted_index_reverse=()\n    local\
    \ left_to_right_car_positions_at_time_t_sorted_index_reverse_sorted=()\n    local\
    \ right_to_left_car_positions_at_time_t_sorted_index_reverse_sorted=()\n    local\
    \ left_to_right_car_positions_at_time_t_sorted_index_reverse_sorted_index=()\n\
    \    local right_to_left_car_positions_at_time_t_sorted_index_reverse_sorted_index=()\n\
    \    local left_to_right_car_positions_at_time_t_sorted_index_reverse_sorted_index_reverse=()\n\
    \    local right_to_left_car_positions_at_time_t_sorted_index_reverse_sorted_index_reverse=()\n\
    \    local left_to_right\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM % n))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM\
    \ % n))\n    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if [ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]}\
    \ ]; then\n                collisions=$((collisions + 1))\n            fi\n  \
    \      done\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [[ $i -lt $n ]]; do\n    j=$i\n    while [[ $j\
    \ -lt $n ]]; do\n      if [[ $i -ne $j ]]; then\n        collisions=$((collisions\
    \ + 1))\n      fi\n      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -le 0 ]]; then\n        echo\
    \ \"0\"\n    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i\n    for ((i=1; i<=n; i++)); do\n        collisions=$((collisions\
    \ + i))\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((i+1))\n    while [\
    \ $j -lt $n ]; do\n      collisions=$((collisions+1))\n      j=$((j+1))\n    done\n\
    \    i=$((i+1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if [ $i -eq $j ]; then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local -i n=$1\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i collisions=0\n  local -i a[$n]\n  local -i\
    \ b[$n]\n  local -i c[$n]\n  local -i d[$n]\n  local -i e[$n]\n  local -i f[$n]\n\
    \  local -i g[$n]\n  local -i h[$n]\n  local -i i[$n]\n  local -i j[$n]\n  local\
    \ -i k[$n]\n  local -i l[$n]\n  local -i m[$n]\n  local -i n[$n]\n  local -i o[$n]\n\
    \  local -i p[$n]\n  local -i q[$n]\n  local -i r[$n]\n  local -i s[$n]\n  local\
    \ -i t[$n]\n  local -i u[$n]\n  local -i v[$n]\n  local -i w[$n]\n  local -i x[$n]\n\
    \  local -i y[$n]\n  local -i z[$n]\n  local -i aa[$n]\n  local -i bb[$n]\n  local\
    \ -i cc[$n]\n  local -i dd[$n]\n  local -i ee[$n]\n  local -i ff[$n]\n  local\
    \ -i gg[$n]\n  local -i hh[$n]\n  local -i ii[$n]\n  local -i jj[$n]\n  local\
    \ -i kk[$n]\n  local -i ll[$n]\n  local -i mm[$n]\n  local -i nn[$n]\n  local\
    \ -i oo[$n]\n  local -i pp[$n]\n  local -i qq[$n]\n  local -i rr[$n]\n  local\
    \ -i ss[$n]\n  local -i tt[$n]\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp2vhpanrd.sh: line 32: local: `o[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 33: local: `p[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 34: local: `q[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 35: local: `r[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 36: local: `s[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 37: local: `t[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 38: local: `u[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 39: local: `v[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 40: local: `w[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 41: local: `x[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 42: local: `y[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 43: local: `z[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 44: local: `aa[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 45: local: `bb[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 46: local: `cc[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 47: local: `dd[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 48: local: `ee[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 49: local: `ff[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 50: local: `gg[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 51: local: `hh[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 52: local: `ii[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 53: local: `jj[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 54: local: `kk[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 55: local: `ll[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 56: local: `mm[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 57: local: `nn[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 58: local: `oo[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 59: local: `pp[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 60: local: `qq[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh: line 61: local: `rr[]'': not a valid identifier

    /tmp/tmp2vhpanrd.sh:'
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        while [ $j\
    \ -lt $n ]; do\n            if [ $i -eq $j ]; then\n                :\n      \
    \      else\n                collisions=$((collisions+1))\n            fi\n  \
    \          j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$((i+1))\n    while [\
    \ $j -lt $n ]; do\n      collisions=$((collisions+1))\n      j=$((j+1))\n    done\n\
    \    i=$((i+1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    while [ $j -lt $n ]; do\n\
    \      if [ $i -ne $j ]; then\n        collisions=$((collisions + 1))\n      fi\n\
    \      j=$((j + 1))\n    done\n    i=$((i + 1))\n  done\n  echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    0\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # This is a stub.  Replace this with\
    \ your code.\n    echo \"0\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n \
    \   local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n  \
    \  local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n   \
    \ local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n  \
    \  local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=0\n    local zzz=0\n    local aaaa=0\n    local bbbb=0\n\
    \    local cccc=0\n    local dddd=0\n    local eeee=0\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [ $i -lt $n ]; do\n        while [ $j -lt\
    \ $n ]; do\n            if [ $i -eq $j ]; then\n                j=$((j+1))\n \
    \               continue\n            fi\n            if [ $i -lt $j ]; then\n\
    \                count=$((count+1))\n            fi\n            j=$((j+1))\n\
    \        done\n        i=$((i+1))\n        j=0\n    done\n    echo $count\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -lt 1 ]; then\n        echo\
    \ \"Error: the number of cars must be a positive integer\"\n        return 1\n\
    \    fi\n    echo $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while (( i < n )); do\n        while (( j <\
    \ n )); do\n            if (( i != j )); then\n                collisions=$((\
    \ collisions + 1 ))\n            fi\n            j=$(( j + 1 ))\n        done\n\
    \        i=$(( i + 1 ))\n    done\n    echo $collisions\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ \"Error: input must be a positive integer\"\n        return 1\n    fi\n    #\
    \ The number of collisions is the same as the number of pairs of cars that\n \
    \   # are moving in opposite directions.  There are n cars moving left to right,\n\
    \    # and n cars moving right to left.  The number of pairs is n choose 2.\n\
    \    # n choose 2 = n! / (2! * (n-2)!) = n * (n-1) / 2\n    echo $(( $1 * ($1\
    \ - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  local\
    \ i=0\n  while (( i < n )); do\n    (( collisions += i ))\n    (( i++ ))\n  done\n\
    \  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      if ((i < j)); then\n        ((collisions++))\n      fi\n    done\n\
    \  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # TODO: implement this function\n  \
    \  # Hint: use the fact that the two sets of cars are very far from each other\n\
    \    # to simplify the problem.  Then, use the fact that the cars are infinitely\n\
    \    # sturdy and strong to simplify the problem even further.\n    #\n    # Hint:\
    \ you can use the modulo operator to get the remainder of a division.\n    # For\
    \ example, if you want to know if a number is even, you can do:\n    #\n    #\
    \ if [ $(($1 % 2)) -eq 0 ]; then\n    #   echo \"$1 is even\"\n    # else\n  \
    \  #   echo \"$1 is odd\"\n    # fi\n    #\n    # Hint: you can use the fact that\
    \ the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the problem.\n    #\n    # Hint: you can use the fact\
    \ that the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the problem.\n    #\n    # Hint: you can use the fact\
    \ that the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the problem.\n    #\n    # Hint: you can use the fact\
    \ that the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the problem.\n    #\n    # Hint: you can use the fact\
    \ that the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the problem.\n    #\n    # Hint: you can use the fact\
    \ that the cars are infinitely sturdy and strong\n    # to simplify the problem.\n\
    \    #\n    # Hint: you can use the fact that the cars are infinitely sturdy and\
    \ strong\n    # to simplify the\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8zwey16b.sh: line 62: syntax error near unexpected token `}''

    /tmp/tmp8zwey16b.sh: line 62: `}''

    '
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  while [ $i -lt $n ]; do\n    j=$i\n    while [ $j -lt\
    \ $n ]; do\n      collisions=$((collisions + 1))\n      j=$((j + 1))\n    done\n\
    \    i=$((i + 1))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right_cars=()\n    local right_to_left_cars=()\n\
    \    for ((i=0; i<n; i++)); do\n        left_to_right_cars[$i]=$((RANDOM%100))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        right_to_left_cars[$i]=$((RANDOM%100))\n\
    \    done\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++)); do\n\
    \            if [[ ${left_to_right_cars[$i]} -eq ${right_to_left_cars[$j]} ]];\
    \ then\n                collisions=$((collisions+1))\n            fi\n       \
    \ done\n    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    #\n    #\
    \ The following lines read the input for you.\n    #\n    # DO NOT CHANGE OR REMOVE\
    \ THEM.\n    #\n    # There are n lines following the first line.\n    # Each\
    \ line has two integers, x and v, where x is the initial position of a car\n \
    \   # and v is its velocity (i.e., the number of meters it moves in one second).\n\
    \    # The cars are sorted by x.\n    # The first n lines describe the cars moving\
    \ left to right.\n    # The next n lines describe the cars moving right to left.\n\
    \    read n\n    declare -a left_to_right\n    declare -a right_to_left\n    for\
    \ ((i = 0; i < n; i++)); do\n        read x v\n        left_to_right[$i]=\"$x,$v\"\
    \n    done\n    for ((i = 0; i < n; i++)); do\n        read x v\n        right_to_left[$i]=\"\
    $x,$v\"\n    done\n    #\n    # End of reading input\n    #\n    #####################################################################\n\
    \    #\n    # Your code goes here.\n    #\n    # You may find the following useful:\n\
    \    #\n    # ${left_to_right[i]} is the ith car moving left to right.\n    #\
    \ ${right_to_left[i]} is the ith car moving right to left.\n    #\n    # You may\
    \ also find it useful to write helper functions.\n    #\n    #####################################################################\n\
    \    #\n    # Write your code above.\n    #\n    #####################################################################\n\
    \    #\n    # This line should output the number of collisions.\n    #\n    #\
    \ DO NOT CHANGE OR REMOVE IT.\n    #\n    echo 0\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=21 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660019200
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$((n-1))\n\
    \        while [ $j -gt $i ]; do\n            collisions=$((collisions+1))\n \
    \           j=$((j-1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -le 0 ]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    local n=$1\n    local\
    \ i\n    local j\n    local count=0\n    for ((i=1; i<=n; i++)); do\n        for\
    \ ((j=1; j<=n; j++)); do\n            if [ $i -eq $j ]; then\n               \
    \ continue\n            fi\n            if [ $((i+j)) -eq $((n+1)) ]; then\n \
    \               ((count++))\n            fi\n        done\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      if ((i < j)); then\n        collisions=$((collisions + 1))\n     \
    \ fi\n    done\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    # The cars are numbered from 0 to n-1.\n  \
    \  # The cars moving left to right are numbered from 0 to n-1.\n    # The cars\
    \ moving right to left are numbered from n-1 to 0.\n    # The cars moving left\
    \ to right are in the array l2r.\n    # The cars moving right to left are in the\
    \ array r2l.\n    # The array l2r is sorted in ascending order.\n    # The array\
    \ r2l is sorted in descending order.\n    # The cars are moving at the same speed.\n\
    \    # The cars are infinitely sturdy and strong.\n    # The cars are infinitely\
    \ long.\n    # The cars are infinitely wide.\n    # The cars are infinitely tall.\n\
    \    # The cars are infinitely heavy.\n    # The cars are infinitely dense.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic.\n    # The cars are infinitely inelastic.\n\
    \    # The cars are infinitely elastic\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]\n    do\n        j=$i\n\
    \        while [ $j -lt $n ]\n        do\n            collisions=$((collisions+1))\n\
    \            j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local count=0\n    while [ $i -lt $n ]; do\n        j=$i\n        while\
    \ [ $j -lt $n ]; do\n            if [ $i -ne $j ]; then\n                count=$((count+1))\n\
    \            fi\n            j=$((j+1))\n        done\n        i=$((i+1))\n  \
    \  done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local count=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n; j++));\
    \ do\n            if ((i < j)); then\n                ((count++))\n          \
    \  fi\n        done\n    done\n    echo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Your code here\n    echo \"Not implemented\"\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -lt 1 ]; then\n        echo\
    \ \"Error: input must be a positive integer\"\n        return 1\n    fi\n    echo\
    \ $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    while [ $i -lt $n ]; do\n        j=$i\n   \
    \     while [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n  \
    \          j=$((j + 1))\n        done\n        i=$((i + 1))\n    done\n    echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ count=0\n  for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=n; j++)); do\n    \
    \  if ((i < j)); then\n        ((count++))\n      fi\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local j\n\
    \    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0; j<n;\
    \ j++)); do\n            if ((i < j)); then\n                ((collisions++))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -lt 1 ]; then\n        echo\
    \ \"Error: invalid input\"\n        return 1\n    fi\n    # The number of collisions\
    \ is the number of pairs of cars that are moving\n    # in opposite directions.\
    \  There are n cars moving left to right and n cars\n    # moving right to left.\
    \  The number of pairs is the number of ways to choose\n    # 2 cars from n cars,\
    \ which is n choose 2.\n    echo $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    for ((i=0; i<n; i++)); do\n        for ((j=0;\
    \ j<n; j++)); do\n            if [ $i -ne $j ]; then\n                collisions=$((collisions+1))\n\
    \            fi\n        done\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ j=0\n    local collisions=0\n    local left_to_right=()\n    local right_to_left=()\n\
    \    while [ $i -lt $n ]; do\n        left_to_right[$i]=$RANDOM\n        right_to_left[$i]=$RANDOM\n\
    \        i=$((i+1))\n    done\n    i=0\n    while [ $i -lt $n ]; do\n        j=0\n\
    \        while [ $j -lt $n ]; do\n            if [ ${left_to_right[$i]} -eq ${right_to_left[$j]}\
    \ ]; then\n                collisions=$((collisions+1))\n            fi\n    \
    \        j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019195
