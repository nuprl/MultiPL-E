name: HumanEval_95_check_dict_case
language: sh
prompt: "#!/bin/bash\n# Given a dictionary, return True if all keys are strings in\
  \ lower \n# case or all keys are strings in upper case, else return False.\n# The\
  \ function should return False is the given dictionary is empty.\n# Examples:\n\
  # >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case\
  \ \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\\
  n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\"\
  )\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n\
  #\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n"
tests: "}\n\ncandidate() {\n    check_dict_case \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"p,pineapple\\nb,banana\") = \"true\" ]]\n    [[ $(candidate\
  \ \"p,pineapple\\nA,banana\\nB,banana\") = \"false\" ]]\n    [[ $(candidate \"p,pineapple\\\
  n5,banana\\na,apple\") = \"false\" ]]\n    [[ $(candidate \"Name,John\\nAge,36\\\
  nCity,Houston\") = \"false\" ]]\n    [[ $(candidate \"STATE,NC\\nZIP,12345\") =\
  \ \"true\" ]]\n    [[ $(candidate \"fruit,Orange\\ntaste,Sweet\") = \"true\" ]]\n\
  \    [[ $(candidate \"\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local dict=\"$1\"\n    local dict_size=$(echo \"$dict\" | wc -l)\n\
    \    if [ $dict_size -eq 0 ]; then\n        echo \"false\"\n        return\n \
    \   fi\n    local all_lower=$(echo \"$dict\" | cut -d, -f1 | grep -v '[A-Z]' |\
    \ wc -l)\n    local all_upper=$(echo \"$dict\" | cut -d, -f1 | grep -v '[a-z]'\
    \ | wc -l)\n    if [ $all_lower -eq $dict_size ] || [ $all_upper -eq $dict_size\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", " \
    \ local csv=\"$1\"\n  local key_case\n  local key\n  local value\n  local key_is_upper=true\n\
    \  local key_is_lower=true\n  while IFS=',' read -r key value; do\n    key_case=$(echo\
    \ \"$key\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$key\" != \"$key_case\"\
    \ ]]; then\n      key_is_lower=false\n    fi\n    key_case=$(echo \"$key\" | tr\
    \ '[:lower:]' '[:upper:]')\n    if [[ \"$key\" != \"$key_case\" ]]; then\n   \
    \   key_is_upper=false\n    fi\n  done <<< \"$csv\"\n  if [[ \"$key_is_upper\"\
    \ == \"true\" ]] || [[ \"$key_is_lower\" == \"true\" ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "  local dict=\"$1\"\n  local lower_case_keys=true\n\
    \  local upper_case_keys=true\n  local key\n  local value\n  while IFS=, read\
    \ -r key value; do\n    if [[ \"$key\" =~ [a-z] ]]; then\n      upper_case_keys=false\n\
    \    fi\n    if [[ \"$key\" =~ [A-Z] ]]; then\n      lower_case_keys=false\n \
    \   fi\n  done <<< \"$dict\"\n  if [[ \"$lower_case_keys\" == \"true\" ]] || [[\
    \ \"$upper_case_keys\" == \"true\" ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  local -a keys=( $(cut -d, -f1 <<< \"$1\") )\n  local -a\
    \ values=( $(cut -d, -f2 <<< \"$1\") )\n  local -a lower_keys=( $(tr '[:upper:]'\
    \ '[:lower:]' <<< \"${keys[@]}\") )\n  local -a upper_keys=( $(tr '[:lower:]'\
    \ '[:upper:]' <<< \"${keys[@]}\") )\n  if [[ \"${keys[@]}\" == \"${lower_keys[@]}\"\
    \ ]] || [[ \"${keys[@]}\" == \"${upper_keys[@]}\" ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "    # TODO: Implement this function\n   \
    \ # Hint: Use the following functions:\n    #   - $(is_lower_case \"string\")\n\
    \    #   - $(is_upper_case \"string\")\n    #   - $(get_dict_keys \"dict\")\n\
    \    #   - $(get_dict_values \"dict\")\n    #   - $(is_empty_dict \"dict\")\n\
    \    #   - $(is_empty_string \"string\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n    #   - $(is_empty_array \"array\")\n    #   - $(is_empty_array \"array\"\
    )\n   ", "  local -a keys\n  local -a values\n  local -a lower_keys\n  local -a\
    \ upper_keys\n  local -a lower_values\n  local -a upper_values\n  local -a lower_values_keys\n\
    \  local -a upper_values_keys\n  local -a lower_values_keys_sorted\n  local -a\
    \ upper_values_keys_sorted\n  local -a lower_values_keys_sorted_joined\n  local\
    \ -a upper_values_keys_sorted_joined\n  local -a lower_values_keys_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted\n  local -a lower_values_keys_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined\n  local -a lower_values_keys_sorted_joined_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted\n  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined\n  local\
    \ -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted\n  local\
    \ -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted\n  local\
    \ -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted\n\
    \  local -a upper_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted\n\
    \  local -a lower_values_keys_sorted_joined_sorted_joined_sorted_joined_sorted_joined_sorted_joined\n\
    \  local", "  local dict=\"$1\"\n  local dict_size=$(echo \"$dict\" | wc -l)\n\
    \  if [[ \"$dict_size\" -eq 0 ]]; then\n    echo \"false\"\n    return\n  fi\n\
    \  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local dict_values=$(echo\
    \ \"$dict\" | cut -d, -f2)\n  local all_lower=$(echo \"$dict_keys\" | tr '[:upper:]'\
    \ '[:lower:]')\n  local all_upper=$(echo \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n\
    \  if [[ \"$dict_keys\" == \"$all_lower\" ]]; then\n    echo \"true\"\n  elif\
    \ [[ \"$dict_keys\" == \"$all_upper\" ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "    local dict=\"$1\"\n    local dict_size=$(echo \"\
    $dict\" | wc -l)\n    if [[ $dict_size -eq 0 ]]; then\n        echo \"false\"\n\
    \        return\n    fi\n    local lower_case_keys=$(echo \"$dict\" | cut -d,\
    \ -f1 | tr '[:upper:]' '[:lower:]')\n    local upper_case_keys=$(echo \"$dict\"\
    \ | cut -d, -f1 | tr '[:lower:]' '[:upper:]')\n    local lower_case_keys_size=$(echo\
    \ \"$lower_case_keys\" | wc -l)\n    local upper_case_keys_size=$(echo \"$upper_case_keys\"\
    \ | wc -l)\n    if [[ $lower_case_keys_size -eq $dict_size ]]; then\n        echo\
    \ \"true\"\n    elif [[ $upper_case_keys_size -eq $dict_size ]]; then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi", "  # Check for empty\
    \ dictionary\n  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\
    \  # Check for all lower case\n  if [ \"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\
    \ == \"$1\" ]; then\n    echo \"true\"\n    return\n  fi\n  # Check for all upper\
    \ case\n  if [ \"$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\" == \"$1\" ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  # Not all upper or lower case\n  echo\
    \ \"false\"", "  if [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n\
    \  local key_case\n  local key\n  local value\n  while IFS=, read -r key value;\
    \ do\n    if [[ -z \"$key_case\" ]]; then\n      if [[ \"$key\" =~ [a-z] ]]; then\n\
    \        key_case=\"lower\"\n      elif [[ \"$key\" =~ [A-Z] ]]; then\n      \
    \  key_case=\"upper\"\n      else\n        echo \"false\"\n        return\n  \
    \    fi\n    else\n      if [[ \"$key_case\" == \"lower\" ]]; then\n        if\
    \ [[ ! \"$key\" =~ [a-z] ]]; then\n          echo \"false\"\n          return\n\
    \        fi\n      elif [[ \"$key\" =~ [A-Z] ]]; then\n        echo \"false\"\n\
    \        return\n      fi\n    fi\n  done <<< \"$1\"\n  echo \"true\"", "  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"false\"\n    return\n  fi\n  local key_case=$(echo\
    \ \"$1\" | awk -F, '{print $1}' | tr '[:upper:]' '[:lower:]' | sort | uniq)\n\
    \  local value_case=$(echo \"$1\" | awk -F, '{print $1}' | tr '[:lower:]' '[:upper:]'\
    \ | sort | uniq)\n  if [[ \"$key_case\" == \"$value_case\" ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local dict=\"$1\"\n  local lower_keys=0\n\
    \  local upper_keys=0\n  local non_keys=0\n  local key\n  local value\n  while\
    \ IFS=, read -r key value; do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n     \
    \ lower_keys=$((lower_keys + 1))\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n\
    \      upper_keys=$((upper_keys + 1))\n    else\n      non_keys=$((non_keys +\
    \ 1))\n    fi\n  done <<< \"$dict\"\n  if [[ \"$lower_keys\" -gt 0 && \"$upper_keys\"\
    \ -gt 0 ]]; then\n    echo \"false\"\n  elif [[ \"$lower_keys\" -gt 0 && \"$upper_keys\"\
    \ -eq 0 ]]; then\n    echo \"true\"\n  elif [[ \"$lower_keys\" -eq 0 && \"$upper_keys\"\
    \ -gt 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  local\
    \ dict=\"$1\"\n  local key\n  local value\n  local lower_case=0\n  local upper_case=0\n\
    \  local mixed_case=0\n  local empty_dict=0\n  local dict_size=0\n  local dict_size_lower=0\n\
    \  local dict_size_upper=0\n  local dict_size_mixed=0\n  local dict_size_empty=0\n\
    \  local dict_size_total=0\n  local dict_size_total_lower=0\n  local dict_size_total_upper=0\n\
    \  local dict_size_total_mixed=0\n  local dict_size_total_empty=0\n  local dict_size_total_all=0\n\
    \  local dict_size_total_all_lower=0\n  local dict_size_total_all_upper=0\n  local\
    \ dict_size_total_all_mixed=0\n  local dict_size_total_all_empty=0\n  local dict_size_total_all_lower_upper=0\n\
    \  local dict_size_total_all_lower_mixed=0\n  local dict_size_total_all_lower_empty=0\n\
    \  local dict_size_total_all_upper_mixed=0\n  local dict_size_total_all_upper_empty=0\n\
    \  local dict_size_total_all_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed=0\n\
    \  local dict_size_total_all_lower_upper_empty=0\n  local dict_size_total_all_lower_mixed_empty=0\n\
    \  local dict_size_total_all_upper_mixed_empty=0\n  local dict_size_total_all_lower_upper_mixed_empty=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_lower=0\n  local dict_size_total_all_lower_upper_mixed_empty_upper=0\n\
    \  local dict_size_total_all_lower_upper_mixed_empty_mixed=0\n  local dict_size_total_all_lower_upper_mixed_empty_empty=",
  "    local dict=\"$1\"\n    local lower_keys=0\n    local upper_keys=0\n    local\
    \ mixed_keys=0\n    local empty_dict=0\n    local IFS=,\n    while read key value;\
    \ do\n        if [[ -z \"$key\" ]]; then\n            empty_dict=1\n         \
    \   break\n        fi\n        if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n         \
    \   lower_keys=1\n        elif [[ \"$key\" =~ ^[A-Z]+$ ]]; then\n            upper_keys=1\n\
    \        else\n            mixed_keys=1\n            break\n        fi\n    done\
    \ < <(echo \"$dict\")\n    if [[ $empty_dict -eq 1 ]]; then\n        echo \"false\"\
    \n    elif [[ $mixed_keys -eq 1 ]]; then\n        echo \"false\"\n    elif [[\
    \ $lower_keys -eq 1 && $upper_keys -eq 1 ]]; then\n        echo \"false\"\n  \
    \  else\n        echo \"true\"\n    fi", "  local dict=\"$1\"\n  local lower_case=0\n\
    \  local upper_case=0\n  local mixed_case=0\n  local empty_dict=0\n  local line\n\
    \  local key\n  local value\n  while IFS=, read -r key value; do\n    if [[ -z\
    \ \"$key\" ]]; then\n      empty_dict=1\n      break\n    fi\n    if [[ \"$key\"\
    \ =~ ^[a-z]+$ ]]; then\n      lower_case=1\n    elif [[ \"$key\" =~ ^[A-Z]+$ ]];\
    \ then\n      upper_case=1\n    else\n      mixed_case=1\n      break\n    fi\n\
    \  done <<< \"$dict\"\n  if [[ $empty_dict -eq 1 ]]; then\n    echo \"false\"\n\
    \  elif [[ $mixed_case -eq 1 ]]; then\n    echo \"false\"\n  elif [[ $lower_case\
    \ -eq 1 && $upper_case -eq 1 ]]; then\n    echo \"false\"\n  else\n    echo \"\
    true\"\n  fi", "  local dict=\"$1\"\n  local key_case\n  local key\n  local value\n\
    \  local all_lower=true\n  local all_upper=true\n  while IFS=, read -r key value;\
    \ do\n    if [[ \"$key\" =~ [a-z] ]]; then\n      all_upper=false\n    elif [[\
    \ \"$key\" =~ [A-Z] ]]; then\n      all_lower=false\n    else\n      echo \"false\"\
    \n      return\n    fi\n  done <<< \"$dict\"\n  if [[ \"$all_lower\" = true ]]\
    \ || [[ \"$all_upper\" = true ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\
    \  local key_case=$(echo \"$1\" | cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]' | head -n1)\n  local key_case_match=$(echo \"$1\" |\
    \ cut -d, -f1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]' | uniq\
    \ -c | grep -v \"^ *1 \")\n  if [ -z \"$key_case_match\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "    local dict=$1\n    local lower_dict=$(echo\
    \ $dict | tr '[:upper:]' '[:lower:]')\n    local upper_dict=$(echo $dict | tr\
    \ '[:lower:]' '[:upper:]')\n    if [[ $dict == $lower_dict ]]; then\n        echo\
    \ \"true\"\n    elif [[ $dict == $upper_dict ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  local dict=\"$1\"\n  local dict_size=$(echo\
    \ \"$dict\" | wc -l)\n  if [ \"$dict_size\" -eq 0 ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  local dict_keys=$(echo \"$dict\" | cut -d, -f1)\n  local\
    \ dict_values=$(echo \"$dict\" | cut -d, -f2)\n  local lower_case_keys=$(echo\
    \ \"$dict_keys\" | tr '[:upper:]' '[:lower:]')\n  local upper_case_keys=$(echo\
    \ \"$dict_keys\" | tr '[:lower:]' '[:upper:]')\n  if [ \"$dict_keys\" = \"$lower_case_keys\"\
    \ ] || [ \"$dict_keys\" = \"$upper_case_keys\" ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local dict=\"$1\"\n  local lower=0\n  local upper=0\n\
    \  local mixed=0\n  local key\n  local value\n  while IFS=, read -r key value;\
    \ do\n    if [[ \"$key\" =~ ^[a-z]+$ ]]; then\n      lower=1\n    elif [[ \"$key\"\
    \ =~ ^[A-Z]+$ ]]; then\n      upper=1\n    else\n      mixed=1\n    fi\n  done\
    \ <<< \"$dict\"\n  if [[ \"$lower\" -eq 1 && \"$upper\" -eq 0 && \"$mixed\" -eq\
    \ 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"]
stop_tokens:
- "\n}"
