name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n\
  # >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is\
  \ a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello\
    \ world\"", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++\
    \ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n \
    \           if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo $c\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n            result+=$c\n\
    \        fi\n    done\n    echo $result", "  if [[ $1 =~ [a-zA-Z] ]]; then\n \
    \   echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n\
    \    echo $1 | rev\n  fi", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    while [ $i -lt $len ]; do\n        if [[ \"${s:$i:1}\"\
    \ =~ [a-zA-Z] ]]; then\n            if [[ \"${s:$i:1}\" =~ [a-z] ]]; then\n  \
    \              res+=\"${s:$i:1^^}\"\n            else\n                res+=\"\
    ${s:$i:1,,}\"\n            fi\n        else\n            res+=\"${s:$i:1}\"\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $res", "    local s=$1\n \
    \   local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr a-z A-Z)\n            else\n            \
    \    res+=$(echo $c | tr A-Z a-z)\n            fi\n        else\n            res+=$c\n\
    \        fi\n    done\n    echo $res", "    echo $1 | tr -d '[:digit:]' | rev",
  "    local s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\
    \"\n    local u=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n\
    \        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n        u=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n        if [[ \"$c\" == \"$l\" ]]; then\n            r=$r$u\n\
    \        else\n            r=$r$l\n        fi\n    done\n    echo $r", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local\
    \ str=$1\n    local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        local\
    \ c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n    done\n   \
    \ echo $res", "    local s=\"$1\"\n    local i=0\n    local len=${#s}\n    local\
    \ res=\"\"\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n       \
    \ if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n    \
    \            c=${c^^}\n            else\n                c=${c,,}\n          \
    \  fi\n        fi\n        res+=$c\n        ((i++))\n    done\n    echo $res",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"", " \
    \   local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    for\
    \ (( i=0; i<len; i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n\
    \            else\n                c=${c,,}\n            fi\n        fi\n    \
    \    res=$c$res\n    done\n    echo $res", "    local s=$1\n    local r=\"\"\n\
    \    local i=0\n    local l=${#s}\n    while [ $i -lt $l ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                r=$r$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                r=$r$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            r=$r$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n\
    \    local res=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n    local\
    \ ascii_code_new=\"\"\n    local ascii_code_diff=32\n    while [ $i -lt $len ];\
    \ do\n        char=${str:$i:1}\n        ascii_code=$(printf \"%d\" \"'$char\"\
    )\n        if [ $ascii_code -ge 65 ] && [ $ascii_code -le 90 ]; then\n       \
    \     ascii_code_new=$((ascii_code + ascii_code_diff))\n            char=$(printf\
    \ \\\\$(printf '%03o' $ascii_code_new))\n        elif [ $ascii_code -ge 97 ] &&\
    \ [ $ascii_code -le 122 ]; then\n            ascii_code_new=$((ascii_code - ascii_code_diff))\n\
    \            char=$(printf \\\\$(printf '%03o' $ascii_code_new))\n        fi\n\
    \        res=$res$char\n        i=$((i + 1))\n    done\n    echo $res", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=${c^^}\n\
    \            else\n                res+=${c,,}\n            fi\n        else\n\
    \            res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res",
  "    local s=\"$1\"\n    local res=\"\"\n    local i=0\n    local len=${#s}\n  \
    \  while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n        i=$((i+1))\n    done\n    echo \"\
    $res\"", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "  local s=$1\n  local res=\"\"\n  for ((i=0; i<${#s}; i++)); do\n \
    \   local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z]\
    \ ]]; then\n        res+=\"${c^^}\"\n      else\n        res+=\"${c,,}\"\n   \
    \   fi\n    else\n      res+=\"$c\"\n    fi\n  done\n  echo \"$res\"", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    if [[\
    \ -z $1 ]]; then\n        echo \"No input\"\n        return\n    fi\n    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' |\
    \ tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", " \
    \   local str=$1\n    local len=${#str}\n    local i=0\n    local res=\"\"\n \
    \   while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res=$res${c^^}\n\
    \            else\n                res=$res${c,,}\n            fi\n        else\n\
    \            res=$res$c\n        fi\n        i=$((i+1))\n    done\n    if [[ $res\
    \ =~ [a-zA-Z] ]]; then\n        echo $res\n    else\n        echo $res | rev\n\
    \    fi", "    local s=$1\n    local res=\"\"\n    local i\n    local c\n    for\
    \ ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n    while [\
    \ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]];\
    \ then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result+=$c\n        fi\n        i=$((i+1))\n    done\n    if [[ $result =~ [a-zA-Z]\
    \ ]]; then\n        echo $result\n    else\n        echo $result | rev\n    fi",
  "    local s=$1\n    local i\n    local c\n    local r\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \        if [[ $c =~ [a-z] ]]; then\n                r+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                r+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            r+=$c\n        fi\n\
    \    done\n    echo $r", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local len=${#s}\n \
    \   while [ $i -lt $len ]; do\n        c=${s:$i:1}\n        l=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n        u=$(echo $c | tr '[:lower:]' '[:upper:]')\n        if\
    \ [ \"$c\" = \"$l\" ]; then\n            res=$res$u\n        else\n          \
    \  res=$res$l\n        fi\n        i=$((i+1))\n    done\n    echo $res", "   \
    \ local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        if\
    \ [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1} | tr '[:upper:]'\
    \ '[:lower:]'\n        else\n            res+=${s:$i:1}\n        fi\n    done\n\
    \    echo $res | rev", "    local s=$1\n    local r=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                r+=\"${c^^}\"\n     \
    \       else\n                r+=\"${c,,}\"\n            fi\n        else\n  \
    \          r+=\"$c\"\n        fi\n    done\n    echo \"$r\"", "    local str=$1\n\
    \    local len=${#str}\n    local i=0\n    local res=\"\"\n    local c=\"\"\n\
    \    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_empty=0\n    local is_all_letter=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_digit=1\n\
    \    local is_all_special=1\n    local is_all_empty=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_upper_or_digit=1\n    local is_all_lower_or_digit=1\n    local\
    \ is_all_upper_or_special=1\n    local is_all_lower_or_special=1\n    local is_all_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit=1\n    local is_all_upper_or_lower_or_special=1\n\
    \    local is_all_lower_or_digit_or_special=1\n    local is_all_upper_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special=1\n    local is_all_upper_or_lower_or_digit_or_empty=1\n\
    \    local is_all_upper_or_lower_or_special_or_empty=1\n    local is_all_lower_or_digit_or_special_or_empty=1\n\
    \    local is_all_upper_or_digit_or_special_or_empty=1\n    local is_all_upper_or_lower_or_digit_or_special_or_empty=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_empty_or_letter=1\n  \
    \  local is_all_upper_or_lower_or_digit_or_special_or_empty_or_digit=1\n    local\
    \ is_all_upper_or_lower_or_digit_or_special_", "    # write your code here\n \
    \   echo \"Hello, World!\"", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local result=\"\"\n    local\
    \ i\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n       \
    \         result+=\"${c^^}\"\n            else\n                result+=\"${c,,}\"\
    \n            fi\n        else\n            result+=\"$c\"\n        fi\n    done\n\
    \    echo \"$result\"", "    local str=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#str}\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        if [[ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n            res=\"\
    $res$(tr '[:lower:]' '[:upper:]' <<< \"${s:$i:1}\")\"\n        else\n        \
    \    res=\"$res${s:$i:1}\"\n        fi\n    done\n    echo \"$res\"", "    local\
    \ s=$1\n    local i\n    local c\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \        if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr a-z A-Z)\n\
    \            else\n                res+=$(echo $c | tr A-Z a-z)\n            fi\n\
    \        else\n            res+=$c\n        fi\n    done\n    if [[ $res =~ [a-zA-Z]\
    \ ]]; then\n        echo $res\n    else\n        echo $(echo $res | rev)\n   \
    \ fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local str=\"$1\"\n    local res=\"\"\n    local i=0\n    local len=${#str}\n\
    \    local ch=\"\"\n    local ch_code=0\n    while [ $i -lt $len ]; do\n     \
    \   ch=\"${str:$i:1}\"\n        ch_code=$(printf \"%d\" \"'$ch\")\n        if\
    \ [ $ch_code -ge 65 -a $ch_code -le 90 ]; then\n            ch=$(printf \"\\x$(printf\
    \ %x $((ch_code+32)))\" )\n        elif [ $ch_code -ge 97 -a $ch_code -le 122\
    \ ]; then\n            ch=$(printf \"\\x$(printf %x $((ch_code-32)))\" )\n   \
    \     fi\n        res=\"$ch$res\"\n        i=$((i+1))\n    done\n    echo \"$res\"",
  "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++ )); do\n  \
    \      local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                result+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            result+=$c\n       \
    \ fi\n    done\n    echo $result", "    local s=$1\n    local i=0\n    local l=${#s}\n\
    \    local r=\"\"\n    local c=\"\"\n    local c1=\"\"\n    local c2=\"\"\n  \
    \  local c3=\"\"\n    local c4=\"\"\n    local c5=\"\"\n    local c6=\"\"\n  \
    \  local c7=\"\"\n    local c8=\"\"\n    local c9=\"\"\n    local c10=\"\"\n \
    \   local c11=\"\"\n    local c12=\"\"\n    local c13=\"\"\n    local c14=\"\"\
    \n    local c15=\"\"\n    local c16=\"\"\n    local c17=\"\"\n    local c18=\"\
    \"\n    local c19=\"\"\n    local c20=\"\"\n    local c21=\"\"\n    local c22=\"\
    \"\n    local c23=\"\"\n    local c24=\"\"\n    local c25=\"\"\n    local c26=\"\
    \"\n    local c27=\"\"\n    local c28=\"\"\n    local c29=\"\"\n    local c30=\"\
    \"\n    local c31=\"\"\n    local c32=\"\"\n    local c33=\"\"\n    local c34=\"\
    \"\n    local c35=\"\"\n    local c36=\"\"\n    local c37=\"\"\n    local c38=\"\
    \"\n    local c39=\"\"\n    local c40=\"\"\n    local c41=\"\"\n    local c42=\"\
    \"\n    local c43=\"\"\n    local c44=\"\"\n    local c45=\"\"\n    local c46=\"\
    \"\n    local c47=\"\"\n    local c48=\"\"\n    local c49=\"\"\n    local c50=\"\
    \"\n    local c51=\"\"\n    local c52=\"\"\n    local c53=\"\"\n    local c54=\"\
    \"\n    local c55=\"\"\n    local c56=\"\"\n    local c57=\"\"\n    local c58=\"\
    \"\n    local c59=\"\"\n    local c60=\"\"\n    local c61=\"\"\n    local c62=\"\
    \"\n    local c63=\"\"\n    local c64=\"\"\n    local c65=\"\"\n    local c66=\"\
    \"\n    local c67=\"\"\n    local c68=\"\"\n    local c69=\"\"\n    local c70=\"\
    \"\n    local c71=\"\"\n    local c72=\"\"\n    local c73=\"\"\n    local c74=\"\
    \"\n    local c75=\"\"\n    local c76=\"\"\n    local c77=\"\"\n    local c78=\"\
    \"\n    local c79=\"\"\n    local c80=\"\"\n", "  local s=\"$1\"\n  local result=\"\
    \"\n  for (( i=0; i<${#s}; i++ )); do\n    local c=\"${s:$i:1}\"\n    if [[ \"\
    $c\" =~ [a-zA-Z] ]]; then\n      if [[ \"$c\" =~ [a-z] ]]; then\n        result+=\"\
    ${c^^}\"\n      else\n        result+=\"${c,,}\"\n      fi\n    else\n      result+=\"\
    $c\"\n    fi\n  done\n  echo \"$result\"", "    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    local s=$1\n    local r=\"\
    \"\n    local i=0\n    local len=${#s}\n    for ((i=0; i<len; i++)); do\n    \
    \    local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                r+=${c^^}\n            else\n     \
    \           r+=${c,,}\n            fi\n        else\n            r+=$c\n     \
    \   fi\n    done\n    echo $r", "    local s=$1\n    local res=\"\"\n    local\
    \ c=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n        if [[\
    \ \"$c\" =~ [a-zA-Z] ]]; then\n            if [[ \"$c\" =~ [a-z] ]]; then\n  \
    \              res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\
    \n            fi\n        else\n            res+=\"$c\"\n        fi\n    done\n\
    \    echo \"$res\"", "    local s=$1\n    local i=0\n    local len=${#s}\n   \
    \ local res=\"\"\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n \
    \       if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++\
    \ )); do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            result+=${s:$i:1}\
    \ | tr '[:upper:]' '[:lower:]'\n        else\n            result+=${s:$i:1}\n\
    \        fi\n    done\n    echo $result | rev", "    local str=$1\n    local res=\"\
    \"\n    local i=0\n    local len=${#str}\n    local chr\n    local chr_code\n\
    \    local chr_code_new\n    local chr_new\n    local is_letter\n    for ((i=0;\
    \ i<len; i++)); do\n        chr=${str:$i:1}\n        chr_code=$(printf \"%d\"\
    \ \"'$chr\")\n        is_letter=$((chr_code >= 65 && chr_code <= 90 || chr_code\
    \ >= 97 && chr_code <= 122))\n        if [ $is_letter -eq 1 ]; then\n        \
    \    chr_code_new=$((chr_code ^ 32))\n            chr_new=$(printf \\\\$(printf\
    \ '%03o' $chr_code_new))\n            res=$res$chr_new\n        else\n       \
    \     res=$res$chr\n        fi\n    done\n    echo $res", "  if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \  else\n    echo $1 | rev\n  fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n      \
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo $1 | rev\n    fi", "    # write your code here\n    echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'", "    local str=$1\n \
    \   local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        if [[ ${str:$i:1}\
    \ =~ [a-zA-Z] ]]; then\n            res+=${str:$i:1} | tr '[:upper:]' '[:lower:]'\n\
    \        else\n            res+=${str:$i:1}\n        fi\n    done\n    echo $res\
    \ | rev", "    echo $1 | tr -d '\\n' | rev | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[a-z]'\
    \ '[A-Z]' | tr '[A-Z]' '[a-z]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n       \
    \ local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n         \
    \       c=${c,,}\n            fi\n        fi\n        res=$c$res\n    done\n \
    \   echo $res", "  echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    echo \"$1\"", "    local\
    \ s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++ )); do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                c=${c^^}\n            else\n               \
    \ c=${c,,}\n            fi\n        fi\n        result=\"$c$result\"\n    done\n\
    \    echo $result", "    local s=$1\n    local res=\"\"\n    local i=0\n    local\
    \ len=${#s}\n    local c=\"\"\n    local ascii=\"\"\n    local ascii_c=\"\"\n\
    \    local ascii_a=\"\"\n    local ascii_z=\"\"\n    local ascii_A=\"\"\n    local\
    \ ascii_Z=\"\"\n    local ascii_0=\"\"\n    local ascii_9=\"\"\n    local ascii_space=\"\
    \"\n    local ascii_tab=\"\"\n    local ascii_newline=\"\"\n    local ascii_carriage=\"\
    \"\n    local ascii_backslash=\"\"\n    local ascii_doublequote=\"\"\n    local\
    \ ascii_singlequote=\"\"\n    local ascii_backtick=\"\"\n    local ascii_exclamation=\"\
    \"\n    local ascii_at=\"\"\n    local ascii_hash=\"\"\n    local ascii_dollar=\"\
    \"\n    local ascii_percent=\"\"\n    local ascii_caret=\"\"\n    local ascii_ampersand=\"\
    \"\n    local ascii_asterisk=\"\"\n    local ascii_openparen=\"\"\n    local ascii_closeparen=\"\
    \"\n    local ascii_minus=\"\"\n    local ascii_underscore=\"\"\n    local ascii_plus=\"\
    \"\n    local ascii_equals=\"\"\n    local ascii_openbracket=\"\"\n    local ascii_closebracket=\"\
    \"\n    local ascii_openbrace=\"\"\n    local ascii_closebrace=\"\"\n    local\
    \ ascii_pipe=\"\"\n    local ascii_backslash=\"\"\n    local ascii_semicolon=\"\
    \"\n    local ascii_colon=\"\"\n    local ascii_comma=\"\"\n    local ascii_less=\"\
    \"\n    local ascii_greater=\"\"\n    local ascii_period=\"\"\n    local ascii_question=\"\
    \"\n    local ascii_slash=\"\"\n    local ascii_tilde=\"\"\n    local ascii_backquote=\"\
    \"\n    local ascii_openbracket=\"\"\n    local ascii_closebracket=\"\"\n    local\
    \ ascii_openbrace=\"\"\n    local asci", "    local s=\"$1\"\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    while [ $i -lt $len ]; do\n    \
    \    local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n      \
    \          c=${c,,}\n            fi\n        fi\n        res=\"$res$c\"\n    \
    \    i=$((i+1))\n    done\n    echo \"$res\"", "    local s=$1\n    local result=\"\
    \"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n      \
    \  local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            result+=${c^^}\n\
    \        else\n            result+=${c,,}\n        fi\n        i=$((i+1))\n  \
    \  done\n    echo $result", "    local str=$1\n    local res=\"\"\n    local i\n\
    \    for ((i=0; i<${#str}; i++)); do\n        local c=${str:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n       \
    \         res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\n\
    \            fi\n        else\n            res+=\"$c\"\n        fi\n    done\n\
    \    echo \"$res\"", "    local s=$1\n    local l=${#s}\n    local i=0\n    local\
    \ c\n    local r=\"\"\n    while [ $i -lt $l ]; do\n        c=${s:$i:1}\n    \
    \    if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n \
    \               c=${c^^}\n            else\n                c=${c,,}\n       \
    \     fi\n        fi\n        r=$r$c\n        i=$((i+1))\n    done\n    echo $r",
  "    local s=$1\n    local result=\"\"\n    local i=0\n    local c\n    local len=${#s}\n\
    \    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result=$result$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result=$result$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result=$result$c\n        fi\n        i=$((i+1))\n    done\n    echo $result",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n  else\n    echo $1 | rev\n  fi", "    local s=$1\n\
    \    local res=\"\"\n    local i=0\n    local l=${#s}\n    while [ $i -lt $l ];\
    \ do\n        if [[ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n            if [[ \"${s:$i:1}\"\
    \ =~ [a-z] ]]; then\n                res+=\"${s:$i:1^^}\"\n            else\n\
    \                res+=\"${s:$i:1,,}\"\n            fi\n        else\n        \
    \    res+=\"${s:$i:1}\"\n        fi\n        i=$((i+1))\n    done\n    echo $res",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local r=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            r=\"$c$r\"\n\
    \        else\n            r=\"$r$c\"\n        fi\n    done\n    echo $r", " \
    \   local result=\"\"\n    local char=\"\"\n    local i=0\n    local len=${#1}\n\
    \    while [ $i -lt $len ]; do\n        char=${1:$i:1}\n        if [[ $char =~\
    \ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]]; then\n             \
    \   char=$(echo $char | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          char=$(echo $char | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       fi\n        result=\"$result$char\"\n        i=$((i+1))\n    done\n  \
    \  echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n         \
    \       res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n       \
    \ else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ $res", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]'",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local result=\"\"\n    local i=0\n    local len=${#s}\n   \
    \ local c\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   result+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          result+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            result+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=$1\n    local r=\"\"\n    for ((i=0; i<${#s}; i++)); do\n\
    \        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n          \
    \  if [[ $c =~ [a-z] ]]; then\n                r+=\"${c^^}\"\n            else\n\
    \                r+=\"${c,,}\"\n            fi\n        else\n            r+=\"\
    $c\"\n        fi\n    done\n    echo \"$r\"", "    local s=$1\n    local i=0\n\
    \    local n=${#s}\n    local r=\"\"\n    local c=\"\"\n    local c1=\"\"\n  \
    \  local c2=\"\"\n    while [ $i -lt $n ]; do\n        c=${s:$i:1}\n        if\
    \ [[ \"$c\" =~ [a-z] ]]; then\n            c1=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            c2=$(echo $c | tr '[:upper:]' '[:lower:]')\n            if [ \"$c\"\
    \ == \"$c1\" ]; then\n                r=\"$r$c2\"\n            else\n        \
    \        r=\"$r$c1\"\n            fi\n        else\n            r=\"$r$c\"\n \
    \       fi\n        i=$((i+1))\n    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo $1 | tr '[a-zA-Z]' '[A-Za-z]'\n    else\n  \
    \      echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo \"$1\" | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo $1 | rev\n    fi", "    local s=$1\n    local res=''\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n    done\n    echo $res", "    local s=$1\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    while [ $i -lt $len ]; do\n    \
    \    local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n      \
    \          c=${c,,}\n            fi\n        fi\n        res=$res$c\n        i=$((i+1))\n\
    \    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n      \
    \  echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n      \
    \  echo $1 | rev\n    fi", "    echo $1 | tr '[:lower:]' '[:upper:]' | tr '[:upper:]'\
    \ '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    local s=$1\n    local s_len=${#s}\n    local i=0\n    local s_rev=\"\
    \"\n    local s_rev_len=0\n    local s_rev_i=0\n    local s_rev_j=0\n    local\
    \ s_rev_k=0\n    local s_rev_l=0\n    local s_rev_m=0\n    local s_rev_n=0\n \
    \   local s_rev_o=0\n    local s_rev_p=0\n    local s_rev_q=0\n    local s_rev_r=0\n\
    \    local s_rev_s=0\n    local s_rev_t=0\n    local s_rev_u=0\n    local s_rev_v=0\n\
    \    local s_rev_w=0\n    local s_rev_x=0\n    local s_rev_y=0\n    local s_rev_z=0\n\
    \    local s_rev_A=0\n    local s_rev_B=0\n    local s_rev_C=0\n    local s_rev_D=0\n\
    \    local s_rev_E=0\n    local s_rev_F=0\n    local s_rev_G=0\n    local s_rev_H=0\n\
    \    local s_rev_I=0\n    local s_rev_J=0\n    local s_rev_K=0\n    local s_rev_L=0\n\
    \    local s_rev_M=0\n    local s_rev_N=0\n    local s_rev_O=0\n    local s_rev_P=0\n\
    \    local s_rev_Q=0\n    local s_rev_R=0\n    local s_rev_S=0\n    local s_rev_T=0\n\
    \    local s_rev_U=0\n    local s_rev_V=0\n    local s_rev_W=0\n    local s_rev_X=0\n\
    \    local s_rev_Y=0\n    local s_rev_Z=0\n    local s_rev_a=0\n    local s_rev_b=0\n\
    \    local s_rev_c=0\n   ", "  local str=$1\n  local result=\"\"\n  for (( i=0;\
    \ i<${#str}; i++ )); do\n    if [[ ${str:$i:1} =~ [a-zA-Z] ]]; then\n      if\
    \ [[ ${str:$i:1} =~ [a-z] ]]; then\n        result+=\"${str:$i:1^^}\"\n      else\n\
    \        result+=\"${str:$i:1,,}\"\n      fi\n    else\n      result+=\"${str:$i:1}\"\
    \n    fi\n  done\n  echo $result", "    if [[ $1 =~ [a-zA-Z] ]]; then\n      \
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\n    local\
    \ i=0\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \        u=$(echo $c | tr '[:lower:]' '[:upper:]')\n        if [[ \"$c\" == \"\
    $l\" ]]; then\n            res+=$u\n        else\n            res+=$l\n      \
    \  fi\n    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo\
    \ $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local i=0\n    local len=${#s}\n\
    \    local res=\"\"\n    local c=\"\"\n    local is_letter=0\n    local is_upper=0\n\
    \    local is_lower=0\n    local is_digit=0\n    local is_special=0\n    local\
    \ is_empty=0\n    local is_reversed=0\n    local is_reversed_letter=0\n    local\
    \ is_reversed_digit=0\n    local is_reversed_special=0\n    local is_reversed_empty=0\n\
    \    local is_reversed_upper=0\n    local is_reversed_lower=0\n    local is_reversed_all=0\n\
    \    local is_reversed_all_letter=0\n    local is_reversed_all_digit=0\n    local\
    \ is_reversed_all_special=0\n    local is_reversed_all_empty=0\n    local is_reversed_all_upper=0\n\
    \    local is_reversed_all_lower=0\n    local is_reversed_all_upper_letter=0\n\
    \    local is_reversed_all_lower_letter=0\n    local is_reversed_all_upper_digit=0\n\
    \    local is_reversed_all_lower_digit=0\n    local is_reversed_all_upper_special=0\n\
    \    local is_reversed_all_lower_special=0\n    local is_reversed_all_upper_empty=0\n\
    \    local is_reversed_all_lower_empty=0\n    local is_reversed_all_upper_upper=0\n\
    \    local is_reversed_all_lower_upper=0\n    local is_reversed_all_upper_lower=0\n\
    \    local is_reversed_all_lower_lower=0\n    local is_reversed_all_upper_digit=0\n\
    \    local is_reversed_all_lower_digit=0\n    local is_reversed_all_upper_special=0\n\
    \    local is_reversed_all_lower_special=", "    local s=$1\n    local i=0\n \
    \   local len=${#s}\n    local res=\"\"\n    local c=\"\"\n    local isLetter=0\n\
    \    local isUpper=0\n    local isLower=0\n    for ((i=0; i<len; i++)); do\n \
    \       c=${s:$i:1}\n        isLetter=$(isLetter $c)\n        if [ $isLetter -eq\
    \ 1 ]; then\n            isUpper=$(isUpper $c)\n            isLower=$(isLower\
    \ $c)\n            if [ $isUpper -eq 1 ]; then\n                c=$(toLower $c)\n\
    \            elif [ $isLower -eq 1 ]; then\n                c=$(toUpper $c)\n\
    \            fi\n        fi\n        res=$c$res\n    done\n    echo $res", " \
    \   if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    local\
    \ s=$1\n    local i=0\n    local res=\"\"\n    local len=${#s}\n    local c=\"\
    \"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n    local\
    \ is_digit=0\n    local is_special=0\n    local is_all_special=1\n    local is_all_digit=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_letter=1\n\
    \    local is_all_upper_or_lower=1\n    local is_all_upper_or_digit=1\n    local\
    \ is_all_lower_or_digit=1\n    local is_all_letter_or_digit=1\n    local is_all_upper_or_lower_or_digit=1\n\
    \    local is_all_letter_or_special=1\n    local is_all_upper_or_lower_or_special=1\n\
    \    local is_all_upper_or_digit_or_special=1\n    local is_all_lower_or_digit_or_special=1\n\
    \    local is_all_letter_or_digit_or_special=1\n    local is_all_upper_or_lower_or_digit_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space=1\n    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab_or_newline_or_carriage_return_or_form_feed=1\n\
    \    local is_all_upper_or_lower_or_digit_or_special_or_space_or_tab", "  local\
    \ s=$1\n  local res=\"\"\n  local i=0\n  local len=${#s}\n  while [ $i -lt $len\
    \ ]; do\n    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[\
    \ $c =~ [a-z] ]]; then\n        res+=${c^^}\n      else\n        res+=${c,,}\n\
    \      fi\n    else\n      res+=$c\n    fi\n    i=$((i+1))\n  done\n  echo $res",
  "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n       \
    \ if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1} | tr '[:upper:]'\
    \ '[:lower:]'\n        else\n            res+=${s:$i:1}\n        fi\n    done\n\
    \    echo $res | rev", "  local s=$1\n  local r=''\n  local i=''\n  for ((i=${#s}-1;\
    \ i>=0; i--)); do\n    if [[ ${s:i:1} =~ [a-zA-Z] ]]; then\n      if [[ ${s:i:1}\
    \ =~ [a-z] ]]; then\n        r+=${s:i:1^^}\n      else\n        r+=${s:i:1,,}\n\
    \      fi\n    else\n      r+=${s:i:1}\n    fi\n  done\n  echo $r", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=\"$1\"\n\
    \    local i=0\n    local j=${#s}\n    local c\n    local r=\"\"\n    while ((i\
    \ < j)); do\n        c=${s:i:1}\n        if [[ \"$c\" =~ [a-zA-Z] ]]; then\n \
    \           if [[ \"$c\" =~ [a-z] ]]; then\n                c=$(echo \"$c\" |\
    \ tr '[:lower:]' '[:upper:]')\n            else\n                c=$(echo \"$c\"\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        fi\n        r=\"$r$c\"\
    \n        ((i++))\n    done\n    echo \"$r\"", "    local str=$1\n    local res=\"\
    \"\n    for ((i=0; i<${#str}; i++)); do\n        local char=${str:$i:1}\n    \
    \    if [[ $char =~ [a-zA-Z] ]]; then\n            if [[ $char =~ [a-z] ]]; then\n\
    \                res+=$(echo $char | tr '[:lower:]' '[:upper:]')\n           \
    \ else\n                res+=$(echo $char | tr '[:upper:]' '[:lower:]')\n    \
    \        fi\n        else\n            res+=$char\n        fi\n    done\n    echo\
    \ $res", "  local s=$1\n  local r=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    local\
    \ c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      r=$r$(echo $c | tr '[:lower:]'\
    \ '[:upper:]' | tr '[:upper:]' '[:lower:]')\n    else\n      r=$r$c\n    fi\n\
    \  done\n  echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    local s=\"$1\"\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        local c=\"${s:$i:1}\"\n        if [[ \"$c\" =~ [a-zA-Z] ]];\
    \ then\n            if [[ \"$c\" =~ [a-z] ]]; then\n                c=\"$(echo\
    \ \"$c\" | tr '[:lower:]' '[:upper:]')\"\n            else\n                c=\"\
    $(echo \"$c\" | tr '[:upper:]' '[:lower:]')\"\n            fi\n        fi\n  \
    \      res=\"$res$c\"\n    done\n    echo \"$res\"", "    local s=$1\n    local\
    \ result=\"\"\n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ];\
    \ do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n     \
    \       if [[ $c =~ [a-z] ]]; then\n                result=$result$(echo $c |\
    \ tr '[:lower:]' '[:upper:]')\n            else\n                result=$result$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result=$result$c\n        fi\n        i=$((i+1))\n    done\n    echo $result",
  "    local str=$1\n    local len=${#str}\n    local res=\"\"\n    for ((i=0; i<len;\
    \ i++)); do\n        local ch=${str:$i:1}\n        if [[ $ch =~ [a-zA-Z] ]]; then\n\
    \            if [[ $ch =~ [a-z] ]]; then\n                res+=${ch^^}\n     \
    \       else\n                res+=${ch,,}\n            fi\n        else\n   \
    \         res+=$ch\n        fi\n    done\n    echo $res", "    local s=$1\n  \
    \  local r=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                r+=${c^^}\n            else\n                r+=${c,,}\n    \
    \        fi\n        else\n            r+=$c\n        fi\n    done\n    echo $r",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local str=$1\n    local res=\"\"\n    local i=0\n    local len=${#str}\n  \
    \  local c=\"\"\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n      \
    \  if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n   \
    \             res+=${c^^}\n            else\n                res+=${c,,}\n   \
    \         fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "  local s=\"$1\"\n  local res=\"\"\n  local i=0\n\
    \  local len=${#s}\n  local c=\"\"\n  local is_letter=0\n  local is_upper=0\n\
    \  local is_lower=0\n  local is_digit=0\n  local is_symbol=0\n  local is_other=0\n\
    \  local is_empty=0\n  local is_all_letter=1\n  local is_all_digit=1\n  local\
    \ is_all_symbol=1\n  local is_all_other=1\n  local is_all_upper=1\n  local is_all_lower=1\n\
    \  local is_all_empty=1\n  local is_all_other=1\n  local is_all_upper=1\n  local\
    \ is_all_lower=1\n  local is_all_empty=1\n  local is_all_other=1\n  local is_all_upper=1\n\
    \  local is_all_lower=1\n  local is_all_empty=1\n  local is_all_other=1\n  local\
    \ is_all_upper=1\n  local is_all_lower=1\n  local is_all_empty=1\n  local is_all_other=1\n\
    \  local is_all_upper=1\n  local is_all_lower=1\n  local is_all_empty=1\n  local\
    \ is_all_other=1\n  local is_all_upper=1\n  local is_all_lower=1\n  local is_all_empty=1\n\
    \  local is_all_other=1\n  local is_all_upper=1\n  local is_all_lower=1\n  local\
    \ is_all_empty=1\n  local is_all_other=1\n  local is_all_upper=1\n  local is_all_lower=1\n\
    \  local is_all_empty=1\n  local is_all_other=1\n  local is_all_upper=1\n  local\
    \ is_all_lower=1\n  local is_all_empty=1\n  local is_all_other=1\n  local is_all_upper=1\n\
    \  local is_all_lower=1\n", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n\
    \                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n\
    \        else\n            res+=$c\n        fi\n        i=$((i+1))\n    done\n\
    \    echo $res", "    local s=$1\n    local i=0\n    local r=\"\"\n    local c=\"\
    \"\n    local l=\"\"\n    local u=\"\"\n    local n=\"\"\n    local t=\"\"\n \
    \   local p=\"\"\n    local m=\"\"\n    local d=\"\"\n    local f=\"\"\n    local\
    \ g=\"\"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local o=\"\
    \"\n    local q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local x=\"\"\n \
    \   local y=\"\"\n    local z=\"\"\n    local b=\"\"\n    local e=\"\"\n    local\
    \ a=\"\"\n    local n=\"\"\n    local t=\"\"\n    local p=\"\"\n    local m=\"\
    \"\n    local d=\"\"\n    local f=\"\"\n    local g=\"\"\n    local h=\"\"\n \
    \   local j=\"\"\n    local k=\"\"\n    local o=\"\"\n    local q=\"\"\n    local\
    \ v=\"\"\n    local w=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\
    \"\n    local b=\"\"\n    local e=\"\"\n    local a=\"\"\n    local n=\"\"\n \
    \   local t=\"\"\n    local p=\"\"\n    local m=\"\"\n    local d=\"\"\n    local\
    \ f=\"\"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\"\n    local k=\"\
    \"\n    local o=\"\"\n    local q=\"\"\n    local v=\"\"\n    local w=\"\"\n \
    \   local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local b=\"\"\n    local\
    \ e=\"\"\n    local a=\"\"\n    local n=\"\"\n    local t=\"\"\n    local p=\"\
    \"\n    local m=\"\"\n    local d=\"\"\n    local f=\"\"\n    local g=\"\"\n \
    \   local h=\"\"\n    local j=\"\"\n    local k=\"\"\n    local o=\"\"\n    local\
    \ q=\"\"\n    local v=\"\"\n    local w=\"\"\n    local x=\"\"\n    local y=\"\
    \"\n    local z=\"\"\n    local b=\"\"\n    local e=\"\"\n    local a=\"\"\n \
    \   local n=\"\"\n    local t=\"\"\n    local p=\"\"\n    local m=\"\"\n    local\
    \ d=\"\"\n    local f=\"\"\n    local g=\"\"\n    local h=\"\"\n    local j=\"\
    \"\n    local k=\"\"\n    local o=\"\"\n    local q=\"\"\n    local v=\"\"\n \
    \   local w=\"\"\n    local x=\"\"\n    local y=\"\"", "    local str=$1\n   \
    \ local res=\"\"\n    local i=0\n    local len=${#str}\n    for ((i=0; i<len;\
    \ i++)); do\n        local c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                res+=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            res+=$c\n        fi\n\
    \    done\n    echo $res", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n      \
    \  echo $1 | rev\n    fi", "    echo \"$1\" | tr '[:lower:]' '[:upper:]' | tr\
    \ '[:upper:]' '[:lower:]'", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n      \
    \  echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1\
    \ | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n      \
    \  echo $1 | rev\n    fi", "    local s=$1\n    local result=\"\"\n    local i=0\n\
    \    local len=${#s}\n    local c=\"\"\n    local is_letter=0\n    local is_upper=0\n\
    \    local is_lower=0\n    local is_digit=0\n    local is_symbol=0\n    local\
    \ is_all_digit=1\n    local is_all_symbol=1\n    local is_all_letter=1\n    local\
    \ is_all_upper=1\n    local is_all_lower=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_upper_or_symbol=1\n    local is_all_lower_or_symbol=1\n    local\
    \ is_all_upper_or_digit=1\n    local is_all_lower_or_digit=1\n    local is_all_symbol_or_digit=1\n\
    \    local is_all_upper_or_lower_or_symbol=1\n    local is_all_upper_or_lower_or_digit=1\n\
    \    local is_all_upper_or_symbol_or_digit=1\n    local is_all_lower_or_symbol_or_digit=1\n\
    \    local is_all_upper_or_lower_or_symbol_or_digit=1\n    local is_all_upper_or_lower_or_symbol_or_digit_or_space=1\n\
    \    local is_all_upper_or_lower_or_symbol_or_digit_or_space_or_tab=1\n    local\
    \ is_all_upper_or_lower_or_symbol_or_digit_or_space_or_tab_or_newline=1\n    local\
    \ is_all_upper_or_lower_or_symbol_or_digit_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_symbol_or_digit_or_space_or_tab_or_newline_or_carriage_return_or_form_feed=1\n\
    \    local is_all_upper_or_lower_or_symbol_", "    local s=$1\n    local s2=\"\
    \"\n    local i=0\n    local c=\"\"\n    local c2=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n    \
    \        if [[ $c =~ [a-z] ]]; then\n                c2=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n            else\n                c2=$(echo $c | tr '[:upper:]'\
    \ '[:lower:]')\n            fi\n        else\n            c2=$c\n        fi\n\
    \        s2=\"$s2$c2\"\n    done\n    echo $s2", "    local s=$1\n    local res=\"\
    \"\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[\
    \ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n          \
    \      res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n      \
    \          res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n    \
    \    else\n            res+=$c\n        fi\n    done\n    echo $res", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  local\
    \ s=$1\n  local res=\"\"\n  local i=0\n  local c=\"\"\n  local l=\"\"\n  local\
    \ u=\"\"\n  for ((i=0; i<${#s}; i++)); do\n    c=${s:$i:1}\n    l=$(echo $c |\
    \ tr '[:upper:]' '[:lower:]')\n    u=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \    if [[ $c == $l ]]; then\n      res+=$u\n    else\n      res+=$l\n    fi\n\
    \  done\n  echo $res", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'", "    local s=$1\n    local i=0\n    local len=${#s}\n    local\
    \ res=\"\"\n    local c=\"\"\n    local l=\"\"\n    local u=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_symbol=0\n\
    \    local is_space=0\n    local is_other=0\n    local is_empty=0\n    local is_all_letter=1\n\
    \    local is_all_upper=1\n    local is_all_lower=1\n    local is_all_digit=1\n\
    \    local is_all_symbol=1\n    local is_all_space=1\n    local is_all_other=1\n\
    \    local is_all_empty=1\n    local is_all_non_empty=1\n    local is_all_non_letter=1\n\
    \    local is_all_non_upper=1\n    local is_all_non_lower=1\n    local is_all_non_digit=1\n\
    \    local is_all_non_symbol=1\n    local is_all_non_space=1\n    local is_all_non_other=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1\n    local is_all_non_empty=1\n    local is_all_non_empty=1\n\
    \    local is_all_non_empty=1", "    local s=$1\n    local result=\"\"\n    local\
    \ i=0\n    local len=${#s}\n    local c=\"\"\n    local c_ascii=\"\"\n    local\
    \ c_ascii_new=\"\"\n    while [ $i -lt $len ]; do\n        c=${s:$i:1}\n     \
    \   c_ascii=$(printf \"%d\" \"'$c\")\n        if [ $c_ascii -ge 65 -a $c_ascii\
    \ -le 90 ]; then\n            c_ascii_new=$((c_ascii+32))\n        elif [ $c_ascii\
    \ -ge 97 -a $c_ascii -le 122 ]; then\n            c_ascii_new=$((c_ascii-32))\n\
    \        else\n            c_ascii_new=$c_ascii\n        fi\n        result=$result$(printf\
    \ \\\\$(printf '%03o' $c_ascii_new))\n        i=$((i+1))\n    done\n    echo $result",
  "    local s=$1\n    local r=\"\"\n    local i\n    for ((i=0; i<${#s}; i++)); do\n\
    \        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n            r+=${s:$i:1} | tr '[:upper:]'\
    \ '[:lower:]'\n        else\n            r+=${s:$i:1}\n        fi\n    done\n\
    \    echo $r | rev", "    local s=$1\n    local s_len=${#s}\n    local i=0\n \
    \   local s_rev=\"\"\n    local s_rev_len=0\n    local s_rev_i=0\n    local s_rev_j=0\n\
    \    local s_rev_k=0\n    local s_rev_l=0\n    local s_rev_m=0\n    local s_rev_n=0\n\
    \    local s_rev_o=0\n    local s_rev_p=0\n    local s_rev_q=0\n    local s_rev_r=0\n\
    \    local s_rev_s=0\n    local s_rev_t=0\n    local s_rev_u=0\n    local s_rev_v=0\n\
    \    local s_rev_w=0\n    local s_rev_x=0\n    local s_rev_y=0\n    local s_rev_z=0\n\
    \    local s_rev_A=0\n    local s_rev_B=0\n    local s_rev_C=0\n    local s_rev_D=0\n\
    \    local s_rev_E=0\n    local s_rev_F=0\n    local s_rev_G=0\n    local s_rev_H=0\n\
    \    local s_rev_I=0\n    local s_rev_J=0\n    local s_rev_K=0\n    local s_rev_L=0\n\
    \    local s_rev_M=0\n    local s_rev_N=0\n    local s_rev_O=0\n    local s_rev_P=0\n\
    \    local s_rev_Q=0\n    local s_rev_R=0\n    local s_rev_S=0\n    local s_rev_T=0\n\
    \    local s_rev_U=0\n    local s_rev_V=0\n    local s_rev_W=0\n    local s_rev_X=0\n\
    \    local s_rev_Y=0\n    local s_rev_Z=0\n    local s_rev_a=0\n    local s_rev_b=0\n\
    \    local s_rev_c=0\n   ", "    local string=$1\n    local result=\"\"\n    for\
    \ (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} =~ [a-zA-Z] ]];\
    \ then\n            result+=${string:$i:1} | tr '[:upper:]' '[:lower:]'\n    \
    \    else\n            result+=${string:$i:1}\n        fi\n    done\n    echo\
    \ $result | rev", "    echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'",
  "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local i=0\n    local len=${#s}\n    local res=''\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n\
    \            else\n                c=${c,,}\n            fi\n        fi\n    \
    \    res=$res$c\n        i=$((i+1))\n    done\n    echo $res", "    if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi", "    local s=$1\n\
    \    local result=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\"\n  \
    \  local u=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_special=0\n    local is_reversed=0\n    local\
    \ is_empty=0\n    local is_one_char=0\n    local is_one_letter=0\n    local is_one_digit=0\n\
    \    local is_one_special=0\n    local is_one_upper=0\n    local is_one_lower=0\n\
    \    local is_one_upper_or_lower=0\n    local is_one_upper_or_digit=0\n    local\
    \ is_one_lower_or_digit=0\n    local is_one_upper_or_special=0\n    local is_one_lower_or_special=0\n\
    \    local is_one_digit_or_special=0\n    local is_one_upper_or_lower_or_digit=0\n\
    \    local is_one_upper_or_lower_or_special=0\n    local is_one_upper_or_digit_or_special=0\n\
    \    local is_one_lower_or_digit_or_special=0\n    local is_one_upper_or_lower_or_digit_or_special=0\n\
    \    local is_two_chars=0\n    local is_two_letters=0\n    local is_two_digits=0\n\
    \    local is_two_specials=0\n    local is_two_uppers=0\n    local is_two_lowers=0\n\
    \    local is_two_uppers_or_lowers=0\n    local is_two_uppers_or_digits=0\n  \
    \  local is_two_lowers_or_digits=0\n    local is_two_uppers_or_specials=0\n  \
    \  local is_two_lowers_or_specials=0\n    local is_two_digits_or_specials=0\n\
    \    local is_two_uppers_or_lowers_or_digits=0\n   ", "    local s=$1\n    local\
    \ i=0\n    local c\n    local res=\"\"\n    local len=${#s}\n    while [ $i -lt\
    \ $len ]; do\n        c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n   \
    \         if [[ $c =~ [a-z] ]]; then\n                res=$res$(echo $c | tr a-z\
    \ A-Z)\n            else\n                res=$res$(echo $c | tr A-Z a-z)\n  \
    \          fi\n        else\n            res=$res$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=$1\n    local res=\"\"\n    for ((i=0;\
    \ i<${#s}; i++)); do\n        if [[ ${s:$i:1} =~ [a-zA-Z] ]]; then\n         \
    \   res+=${s:$i:1} | tr '[:upper:]' '[:lower:]'\n        else\n            res+=${s:$i:1}\n\
    \        fi\n    done\n    echo $res | rev", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    local str=$1\n    local res=\"\
    \"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len ]; do\n    \
    \    local c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                res+=$(echo $c | tr [a-z] [A-Z])\n\
    \            else\n                res+=$(echo $c | tr [A-Z] [a-z])\n        \
    \    fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n \
    \   done\n    echo $res", "    local s=$1\n    if [[ $s =~ [a-zA-Z] ]]; then\n\
    \        echo $s | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $s | rev\n    fi", "    local str=$1\n    local res=\"\"\
    \n    for ((i=0; i<${#str}; i++)); do\n        local c=${str:$i:1}\n        if\
    \ [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n       \
    \         res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n            else\n   \
    \             res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n            fi\n \
    \       else\n            res+=$c\n        fi\n    done\n    echo $res", "   \
    \ if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "  \
    \  local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                res+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local s=$1\n   \
    \ local r=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                r+=\"${c^^}\"\n            else\n                r+=\"${c,,}\"\
    \n            fi\n        else\n            r+=\"$c\"\n        fi\n    done\n\
    \    echo \"$r\"", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ \"$1\" | rev\n    fi", "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s};\
    \ i++)); do\n        if [[ \"${s:$i:1}\" =~ [a-zA-Z] ]]; then\n            res+=${s:$i:1}\
    \ | tr '[:upper:]' '[:lower:]'\n        else\n            res+=${s:$i:1}\n   \
    \     fi\n    done\n    echo $res | rev", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    if [ -z \"$1\" ]; then\n      \
    \  echo \"Usage: $0 <string>\"\n        return 1\n    fi\n    local s=\"$1\"\n\
    \    local res=\"\"\n    local i=0\n    local len=${#s}\n    local c=\"\"\n  \
    \  local ascii=\"\"\n    local is_letter=0\n    local is_upper=0\n    for ((i=0;\
    \ i<len; i++)); do\n        c=\"${s:$i:1}\"\n        ascii=$(printf \"%d\" \"\
    '$c\")\n        is_letter=$((ascii>=65 && ascii<=90 || ascii>=97 && ascii<=122))\n\
    \        is_upper=$((ascii>=65 && ascii<=90))\n        if [ $is_letter -eq 1 ];\
    \ then\n            if [ $is_upper -eq 1 ]; then\n                res+=\"$(printf\
    \ \"%s\" \"$c\" | tr '[:upper:]' '[:lower:]')\"\n            else\n          \
    \      res+=\"$(printf \"%s\" \"$c\" | tr '[:lower:]' '[:upper:]')\"\n       \
    \     fi\n        else\n            res+=\"$c\"\n        fi\n    done\n    echo\
    \ \"$res\"", "    local s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\
    \n    local l=\"\"\n    local u=\"\"\n    local n=${#s}\n    while [ $i -lt $n\
    \ ]; do\n        c=${s:$i:1}\n        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \        u=$(echo $c | tr '[:lower:]' '[:upper:]')\n        if [ \"$c\" = \"$l\"\
    \ ]; then\n            r=$r$u\n        else\n            r=$r$l\n        fi\n\
    \        i=$((i+1))\n    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    local s=\"$1\"\n    local r=\"\"\
    \n    local c=\"\"\n    local i=0\n    local l=${#s}\n    local j=0\n    local\
    \ k=0\n    local t=\"\"\n    local n=0\n    local p=0\n    local q=0\n    local\
    \ u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n\
    \    local a=0\n    local b=0\n    local d=0\n    local e=0\n    local f=0\n \
    \   local g=0\n    local h=0\n    local m=0\n    local o=0\n    local A=0\n  \
    \  local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n   \
    \ local G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local\
    \ L=0\n    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n\
    \    local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n \
    \   local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local _=0\n  \
    \  local __=0\n    local ___=0\n    local ____=0\n    local _____=0\n    local\
    \ ______=0\n    local _______=0\n    local ________=0\n    local _________=0\n\
    \    local __________=0\n    local ___________=0\n    local ____________=0\n \
    \   local _____________=0\n    local ______________=0\n    local _______________=0\n\
    \    local ________________=0\n    local _________________=0\n    local __________________=0\n\
    \    local ___________________=0\n    local ____________________=0\n    local\
    \ _____________________=0\n    local ______________________=0\n    local _______________________=0\n\
    \    local ________________________=0\n    local _________________________=0\n\
    \    local __________________________=0\n    local ", "    local s=\"$1\"\n  \
    \  local r=\"\"\n    local l=\"\"\n    local i=0\n    local c=\"\"\n    local\
    \ lc=\"\"\n    local uc=\"\"\n    local lc_regex=\"[a-z]\"\n    local uc_regex=\"\
    [A-Z]\"\n    local lc_regex_match=\"\"\n    local uc_regex_match=\"\"\n    local\
    \ s_len=${#s}\n    local s_len_dec=$((s_len - 1))\n    local s_len_half=$((s_len\
    \ / 2))\n    local s_len_half_dec=$((s_len_half - 1))\n    local s_len_half_inc=$((s_len_half\
    \ + 1))\n    local s_len_half_inc_dec=$((s_len_half_inc - 1))\n    local s_len_half_inc_inc=$((s_len_half_inc\
    \ + 1))\n    local s_len_half_inc_inc_dec=$((s_len_half_inc_inc - 1))\n    local\
    \ s_len_half_inc_inc_inc=$((s_len_half_inc_inc + 1))\n    local s_len_half_inc_inc_inc_dec=$((s_len_half_inc_inc_inc\
    \ - 1))\n    local s_len_half_inc_inc_inc_inc=$((s_len_half_inc_inc_inc + 1))\n\
    \    local s_len_half_inc_inc_inc_inc_dec=$((s_len_half_inc_inc_inc_inc - 1))\n\
    \    local s_len_half_inc_inc_inc_inc_inc=$((s_len_half_inc_inc_inc_inc + 1))\n\
    \    local s_len_half_inc_inc_inc_inc_inc_dec=$((s_len_half_inc_inc_inc_inc_inc\
    \ - 1))\n    local s_len_half_inc_inc_inc_inc_inc_inc=$((s_len_half_inc_inc_inc_inc_inc\
    \ + 1))\n    local s_len_half_inc_inc_inc_inc_inc", "  local s=$1\n  local r=''\n\
    \  local i=0\n  local c=''\n  local l=${#s}\n  while [ $i -lt $l ]; do\n    c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ r=$r$(echo $c | tr '[:lower:]' '[:upper:]')\n      else\n        r=$r$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n      fi\n    else\n      r=$r$c\n    fi\n\
    \    i=$((i+1))\n  done\n  echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \    echo $1 | tr [:upper:] [:lower:] | tr [:lower:] [:upper:]\n    else\n   \
    \     echo $1 | rev\n    fi", "    local s=$1\n    local result=\"\"\n    for\
    \ (( i=0; i<${#s}; i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~\
    \ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo\
    \ $c | tr '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n           \
    \ result+=$c\n        fi\n    done\n    echo $result", "    local s=\"$1\"\n \
    \   local i=0\n    local j=${#s}\n    local tmp\n    while (( i < j )); do\n \
    \       if [[ \"${s:i:1}\" =~ [a-zA-Z] ]]; then\n            tmp=\"${s:i:1}\"\n\
    \            if [[ \"$tmp\" =~ [a-z] ]]; then\n                s=\"${s:0:i}${tmp^^}${s:i+1}\"\
    \n            else\n                s=\"${s:0:i}${tmp,,}${s:i+1}\"\n         \
    \   fi\n        fi\n        (( i++ ))\n    done\n    echo \"$s\"", "  local s=$1\n\
    \  local res=\"\"\n  local i=0\n  local len=${#s}\n  while [ $i -lt $len ]; do\n\
    \    local c=${s:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z]\
    \ ]]; then\n        res+=$(echo $c | tr 'a-z' 'A-Z')\n      else\n        res+=$(echo\
    \ $c | tr 'A-Z' 'a-z')\n      fi\n    else\n      res+=$c\n    fi\n    i=$((i+1))\n\
    \  done\n  echo $res", "  local str=$1\n  local res=\"\"\n  for (( i=0; i<${#str};\
    \ i++ )); do\n    local c=${str:$i:1}\n    if [[ $c =~ [a-zA-Z] ]]; then\n   \
    \   if [[ $c =~ [a-z] ]]; then\n        res+=$(echo $c | tr [a-z] [A-Z])\n   \
    \   else\n        res+=$(echo $c | tr [A-Z] [a-z])\n      fi\n    else\n     \
    \ res+=$c\n    fi\n  done\n  echo $res", "    local s=$1\n    local res=\"\"\n\
    \    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n        if [[ $c\
    \ =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n             \
    \   res+=\"${c^^}\"\n            else\n                res+=\"${c,,}\"\n     \
    \       fi\n        else\n            res+=\"$c\"\n        fi\n    done\n    echo\
    \ \"$res\"", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s};\
    \ i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo $c\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n            result+=$c\n\
    \        fi\n    done\n    echo $result", "  local str=$1\n  local res=\"\"\n\
    \  for (( i=0; i<${#str}; i++ )); do\n    local char=${str:$i:1}\n    if [[ $char\
    \ =~ [a-zA-Z] ]]; then\n      if [[ $char =~ [a-z] ]]; then\n        res+=$(echo\
    \ $char | tr '[:lower:]' '[:upper:]')\n      else\n        res+=$(echo $char |\
    \ tr '[:upper:]' '[:lower:]')\n      fi\n    else\n      res+=$char\n    fi\n\
    \  done\n  echo $res", "    local str=$1\n    local len=${#str}\n    local i=0\n\
    \    local res=\"\"\n    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res=$res$(echo $c | tr '[:lower:]' '[:upper:]')\n           \
    \ else\n                res=$res$(echo $c | tr '[:upper:]' '[:lower:]')\n    \
    \        fi\n        else\n            res=$res$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $res", "    local s=$1\n    local s_len=${#s}\n    local res=\"\
    \"\n    for ((i=0; i<s_len; i++)); do\n        local c=${s:i:1}\n        if [[\
    \ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n          \
    \      res+=${c^^}\n            else\n                res+=${c,,}\n          \
    \  fi\n        else\n            res+=$c\n        fi\n    done\n    echo $res",
  "    local s=$1\n    local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n       \
    \ local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[\
    \ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\n            else\n  \
    \              res+=\"${c,,}\"\n            fi\n        else\n            res+=\"\
    $c\"\n        fi\n    done\n    echo \"$res\"", "    # Write your code here\n\
    \    # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"Hello world\"", "    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n \
    \   else\n        echo $1 | rev\n    fi", "  local s=\"$1\"\n  local res=\"\"\n\
    \  local i=0\n  local len=${#s}\n  while [ $i -lt $len ]; do\n    local c=${s:$i:1}\n\
    \    if [[ $c =~ [a-zA-Z] ]]; then\n      if [[ $c =~ [a-z] ]]; then\n       \
    \ res=\"${res}$(echo $c | tr '[:lower:]' '[:upper:]')\"\n      else\n        res=\"\
    ${res}$(echo $c | tr '[:upper:]' '[:lower:]')\"\n      fi\n    else\n      res=\"\
    ${res}$c\"\n    fi\n    ((i++))\n  done\n  echo $res", "    local str=$1\n   \
    \ local result=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt\
    \ $len ]; do\n        local char=${str:$i:1}\n        if [[ $char =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $char =~ [a-z] ]]; then\n                char=$(echo\
    \ $char | tr a-z A-Z)\n            else\n                char=$(echo $char | tr\
    \ A-Z a-z)\n            fi\n        fi\n        result=\"$result$char\"\n    \
    \    i=$((i+1))\n    done\n    echo $result", "    local s=$1\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    while [ $i -lt $len ]; do\n    \
    \    local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if\
    \ [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n            else\n      \
    \          c=${c,,}\n            fi\n        fi\n        res=$res$c\n        i=$((i+1))\n\
    \    done\n    echo $res", "  # Write your code here\n  # To print results to\
    \ the standard output you can use echo\n  # Example: echo \"Hello world\"\n  echo\
    \ \"Hello world\"", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s};\
    \ i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo $c\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n            result+=$c\n\
    \        fi\n    done\n    echo $result", "    local s=$1\n    local res=\"\"\n\
    \    local i=0\n    local len=${#s}\n    local c=\"\"\n    local is_letter=0\n\
    \    local is_upper=0\n    local is_lower=0\n    local is_digit=0\n    local is_symbol=0\n\
    \    local is_empty=0\n    local is_all_letter=1\n    local is_all_digit=1\n \
    \   local is_all_symbol=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_empty=1\n    local is_all_same=1\n    local is_all_diff=1\n\
    \    local is_all_same_type=1\n    local is_all_diff_type=1\n    local is_all_same_case=1\n\
    \    local is_all_diff_case=1\n    local is_all_same_case_type=1\n    local is_all_diff_case_type=1\n\
    \    local is_all_same_case_type_len=1\n    local is_all_diff_case_type_len=1\n\
    \    local is_all_same_case_type_len_val=1\n    local is_all_diff_case_type_len_val=1\n\
    \    local is_all_same_case_type_len_val_pos=1\n    local is_all_diff_case_type_len_val_pos=1\n\
    \    local is_all_same_case_type_len_val_pos_dir=1\n    local is_all_diff_case_type_len_val_pos_dir=1\n\
    \    local is_all_same_case_type_len_val_pos_dir_type=1\n    local is_all_diff_case_type_len_val_pos_dir_type=1\n\
    \    local is_all_same_case_type_len_val_pos_dir_type_len=1\n    local is_all_diff_case_type_len_val_pos_dir_type_len=1\n\
    \    local is_all_same_case_type_len_val_pos_dir_type_", "    if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo $1 | rev\n    fi", "    local s=$1\n    local res=\"\"\
    \n    local i=0\n    local len=${#s}\n    while [ $i -lt $len ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n        i=$((i+1))\n\
    \    done\n    if [[ $res =~ [a-zA-Z] ]]; then\n        echo $res\n    else\n\
    \        echo $res | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n      \
    \  echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n\
    \        echo $1 | rev\n    fi", "    local str=$1\n    local res=\"\"\n    local\
    \ i=0\n    local ch=\"\"\n    local ch_code=0\n    local ch_code_new=0\n    local\
    \ ch_new=\"\"\n    local is_letter=0\n    local is_upper=0\n    local is_lower=0\n\
    \    local is_digit=0\n    local is_special=0\n    local is_all_special=1\n  \
    \  local is_all_digit=1\n    local is_all_upper=1\n    local is_all_lower=1\n\
    \    local is_all_letter=1\n    local is_all_special_or_digit=1\n    local is_all_upper_or_lower=1\n\
    \    local is_all_letter_or_digit=1\n    local is_all_letter_or_special=1\n  \
    \  local is_all_upper_or_special=1\n    local is_all_lower_or_special=1\n    local\
    \ is_all_upper_or_digit=1\n    local is_all_lower_or_digit=1\n    local is_all_upper_or_lower_or_special=1\n\
    \    local is_all_upper_or_lower_or_digit=1\n    local is_all_letter_or_special_or_digit=1\n\
    \    local is_all_upper_or_special_or_digit=1\n    local is_all_lower_or_special_or_digit=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit=1\n    local is_all_upper_or_lower_or_special_or_digit_or_space=1\n\
    \    local is_all_upper_or_lower_or_special_or_digit_or_space_or_tab=1\n    local\
    \ is_all_upper_or_lower_or_special_or_digit_or_space_or_tab_or_newline=1\n   \
    \ local is_all_upper_or_lower_or_special_or_digit_or_space_or_tab_or_newline_or_carriage_return=1\n\
    \    local is_all_upper_or_lower_or_special_or", "    if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n\
    \    else\n        echo \"$1\" | rev\n    fi", "    local s=$1\n    local i=0\n\
    \    local len=${#s}\n    local res=\"\"\n    local c=\"\"\n    local c_code=\"\
    \"\n    local c_code_new=\"\"\n    local c_new=\"\"\n    while [ $i -lt $len ];\
    \ do\n        c=${s:$i:1}\n        c_code=$(printf \"%d\" \"'$c\")\n        if\
    \ [ $c_code -ge 97 ] && [ $c_code -le 122 ]; then\n            c_code_new=$((c_code\
    \ - 32))\n        elif [ $c_code -ge 65 ] && [ $c_code -le 90 ]; then\n      \
    \      c_code_new=$((c_code + 32))\n        else\n            c_code_new=$c_code\n\
    \        fi\n        c_new=$(printf \\\\$(printf '%03o' $c_code_new))\n      \
    \  res=$res$c_new\n        i=$((i + 1))\n    done\n    echo $res", "    if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]'\
    \ '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local str=$1\n \
    \   local res=\"\"\n    local i=0\n    local len=${#str}\n    while [ $i -lt $len\
    \ ]; do\n        local c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n\
    \            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n          \
    \  else\n                c=${c,,}\n            fi\n        fi\n        res=$res$c\n\
    \        i=$((i+1))\n    done\n    echo $res"]
stop_tokens:
- "\n}"
