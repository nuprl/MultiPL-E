name: HumanEval_161_solve
language: sh
prompt: "#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n\
  # If the string contains no letters, reverse the string.\n# The function should\
  \ return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n\
  # >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is\
  \ a string\nsolve() {\n"
tests: "}\n\ncandidate() {\n    solve \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"AsDf\") = \"aSdF\" ]]\n    [[ $(candidate \"1234\") = \"4321\" ]]\n    [[ $(candidate\
  \ \"ab\") = \"AB\" ]]\n    [[ $(candidate \"#a@C\") = \"#A@c\" ]]\n    [[ $(candidate\
  \ \"#AsdfW^45\") = \"#aSDFw^45\" ]]\n    [[ $(candidate \"#6@2\") = \"2@6#\" ]]\n\
  \    [[ $(candidate \"#\\$a^D\") = \"#\\$A^d\" ]]\n    [[ $(candidate \"#ccc\")\
  \ = \"#CCC\" ]]\n}\n\nrun_test"
completions: ["    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]'\
    \ '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n\
    \    fi", "    # Write your code here\n    # To print results to the standard\
    \ output you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello\
    \ world\"", "    local s=$1\n    local result=\"\"\n    for (( i=0; i<${#s}; i++\
    \ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n \
    \           if [[ $c =~ [a-z] ]]; then\n                result+=$(echo $c | tr\
    \ '[:lower:]' '[:upper:]')\n            else\n                result+=$(echo $c\
    \ | tr '[:upper:]' '[:lower:]')\n            fi\n        else\n            result+=$c\n\
    \        fi\n    done\n    echo $result", "  if [[ $1 =~ [a-zA-Z] ]]; then\n \
    \   echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n  else\n\
    \    echo $1 | rev\n  fi", "    local s=$1\n    local res=\"\"\n    local i=0\n\
    \    local len=${#s}\n    while [ $i -lt $len ]; do\n        if [[ \"${s:$i:1}\"\
    \ =~ [a-zA-Z] ]]; then\n            if [[ \"${s:$i:1}\" =~ [a-z] ]]; then\n  \
    \              res+=\"${s:$i:1^^}\"\n            else\n                res+=\"\
    ${s:$i:1,,}\"\n            fi\n        else\n            res+=\"${s:$i:1}\"\n\
    \        fi\n        i=$((i+1))\n    done\n    echo $res", "    local s=$1\n \
    \   local res=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        local c=${s:$i:1}\n\
    \        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n\
    \                res+=$(echo $c | tr a-z A-Z)\n            else\n            \
    \    res+=$(echo $c | tr A-Z a-z)\n            fi\n        else\n            res+=$c\n\
    \        fi\n    done\n    echo $res", "    echo $1 | tr -d '[:digit:]' | rev",
  "    local s=$1\n    local r=\"\"\n    local i=0\n    local c=\"\"\n    local l=\"\
    \"\n    local u=\"\"\n    for ((i=0; i<${#s}; i++)); do\n        c=${s:$i:1}\n\
    \        l=$(echo $c | tr '[:upper:]' '[:lower:]')\n        u=$(echo $c | tr '[:lower:]'\
    \ '[:upper:]')\n        if [[ \"$c\" == \"$l\" ]]; then\n            r=$r$u\n\
    \        else\n            r=$r$l\n        fi\n    done\n    echo $r", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr '[:upper:]' '[:lower:]' | tr\
    \ '[:lower:]' '[:upper:]'\n    else\n        echo $1 | rev\n    fi", "    local\
    \ str=$1\n    local res=\"\"\n    for ((i=0; i<${#str}; i++)); do\n        local\
    \ c=${str:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                res+=$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                res+=$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            res+=$c\n        fi\n    done\n   \
    \ echo $res", "    local s=\"$1\"\n    local i=0\n    local len=${#s}\n    local\
    \ res=\"\"\n    while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n       \
    \ if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~ [a-z] ]]; then\n    \
    \            c=${c^^}\n            else\n                c=${c,,}\n          \
    \  fi\n        fi\n        res+=$c\n        ((i++))\n    done\n    echo $res",
  "    # Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"", " \
    \   local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    for\
    \ (( i=0; i<len; i++ )); do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                c=${c^^}\n\
    \            else\n                c=${c,,}\n            fi\n        fi\n    \
    \    res=$c$res\n    done\n    echo $res", "    local s=$1\n    local r=\"\"\n\
    \    local i=0\n    local l=${#s}\n    while [ $i -lt $l ]; do\n        local\
    \ c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z] ]]; then\n            if [[ $c =~\
    \ [a-z] ]]; then\n                r=$r$(echo $c | tr '[:lower:]' '[:upper:]')\n\
    \            else\n                r=$r$(echo $c | tr '[:upper:]' '[:lower:]')\n\
    \            fi\n        else\n            r=$r$c\n        fi\n        i=$((i+1))\n\
    \    done\n    echo $r", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 |\
    \ tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr\
    \ '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'\n    else\n        echo\
    \ $1 | rev\n    fi", "    local str=\"$1\"\n    local len=${#str}\n    local i=0\n\
    \    local res=\"\"\n    local char=\"\"\n    local ascii_code=\"\"\n    local\
    \ ascii_code_new=\"\"\n    local ascii_code_diff=32\n    while [ $i -lt $len ];\
    \ do\n        char=${str:$i:1}\n        ascii_code=$(printf \"%d\" \"'$char\"\
    )\n        if [ $ascii_code -ge 65 ] && [ $ascii_code -le 90 ]; then\n       \
    \     ascii_code_new=$((ascii_code + ascii_code_diff))\n            char=$(printf\
    \ \\\\$(printf '%03o' $ascii_code_new))\n        elif [ $ascii_code -ge 97 ] &&\
    \ [ $ascii_code -le 122 ]; then\n            ascii_code_new=$((ascii_code - ascii_code_diff))\n\
    \            char=$(printf \\\\$(printf '%03o' $ascii_code_new))\n        fi\n\
    \        res=$res$char\n        i=$((i + 1))\n    done\n    echo $res", "    if\
    \ [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr '[:lower:]' '[:upper:]'\n    else\n        echo \"$1\" | rev\n    fi",
  "    local s=$1\n    local res=\"\"\n    local i=0\n    local len=${#s}\n    while\
    \ [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=${c^^}\n\
    \            else\n                res+=${c,,}\n            fi\n        else\n\
    \            res+=$c\n        fi\n        i=$((i+1))\n    done\n    echo $res",
  "    local s=\"$1\"\n    local res=\"\"\n    local i=0\n    local len=${#s}\n  \
    \  while [ $i -lt $len ]; do\n        local c=${s:$i:1}\n        if [[ $c =~ [a-zA-Z]\
    \ ]]; then\n            if [[ $c =~ [a-z] ]]; then\n                res+=\"${c^^}\"\
    \n            else\n                res+=\"${c,,}\"\n            fi\n        else\n\
    \            res+=\"$c\"\n        fi\n        i=$((i+1))\n    done\n    echo \"\
    $res\""]
stop_tokens:
- "\n}"
