name: HumanEval_125_split_words
language: sh
prompt: "#!/bin/bash\n# Given a string of words, return a list of words split on whitespace,\
  \ if no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words\
  \ \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"\
  Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\"\
  )\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n"
tests: "}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
  \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
  !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"\
  Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate\
  \ \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate\
  \ \"\") = \"0\" ]]\n}\n\nrun_test"
completions: ["    if [[ $1 =~ \" \" ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\"\\,\\\"/g')\\\"]\"\n    elif [[ $1 =~ \",\" ]]; then\n        echo \"\
    [\\\"$(echo $1 | sed 's/,/\",\"/g')\\\"]\"\n    else\n        echo $(echo $1 |\
    \ grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi", "  if [[ \"$1\"\
    \ =~ \\ |\\' ]]; then\n    echo -n \"[\"\n    echo -n \"$1\" | tr ' ' '\\n' |\
    \ sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed -e 's/,$//'\n    echo -n\
    \ \"]\"\n  elif [[ \"$1\" =~ , ]]; then\n    echo -n \"[\"\n    echo -n \"$1\"\
    \ | tr ',' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed -e 's/,$//'\n\
    \    echo -n \"]\"\n  else\n    echo -n \"$1\" | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{a[$0]++}END{for(i in a)if(a[i]%2==1)print i}' | wc -l\n\
    \  fi", "  local string=\"$1\"\n  local words=()\n  local word=\"\"\n  local char=\"\
    \"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n\
    \  local i=0\n  local j=0\n  local k=0\n ", "    if [[ $1 =~ \\s ]]; then\n  \
    \      echo $1 | tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    elif [[ $1\
    \ =~ , ]]; then\n        echo $1 | tr ',' '\\n' | sed 's/^/\"/g' | sed 's/$/\"\
    /g'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{print ord($1)%2}' | grep\
    \ -c 1\n    fi", "    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"[\\\
    \"$1\\\"]\"\n    elif [[ \"$1\" =~ [, ] ]]; then\n        echo \"[\\\"${1//,/\\\
    \",\\\"}\\\"]\"\n    else\n        echo \"$(echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print tolower($0)}' | awk '{print NR%2}' | grep -c 1)\"\n    fi", "  if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n      if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n        echo \"\\\"$1\\\"\"\n      else\n        echo \"\\\
    \"$1\\\"\"\n      fi\n    else\n      echo \"\\\"$1\\\"\"\n    fi\n  else\n  \
    \  echo \"\\\"$1\\\"\"\n  fi", "    if [[ \"$1\" =~ \\s ]]; then\n        echo\
    \ \"$1\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n      \
    \  echo \"$1\" | grep -o '[a-z]' | awk '{print $1}' | awk '{print NR%2}' | grep\
    \ -c 1\n    fi", "    if [[ $1 =~ [^a-zA-Z,\\ ] ]]; then\n        echo \"\\\"\
    $1\\\"\"\n    elif [[ $1 =~ [,] ]]; then\n        echo \"\\\"${1//,/\\\" \\\"\
    }\"\n    else\n        echo $(echo $1 | grep -o [a-z] | awk '{print tolower($0)}'\
    \ | awk '{print NR % 2}' | grep -c 1)\n    fi", "  if [[ $1 =~ [ ] ]]; then\n\
    \    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"/g')\\\"]\"\n  elif [[ $1 =~ [,]\
    \ ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\",\"/g')\\\"]\"\n  else\n  \
    \  echo \"$(echo $1 | sed 's/[^a-z]//g' | grep -o . | awk '{print tolower($0)}'\
    \ | awk '{if (NR % 2 == 1) print $0}' | wc -l)\"\n  fi", "  if [[ $1 =~ [[:space:]]\
    \ ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\", \"/g')\\\"]\"\n  elif [[\
    \ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\", \"/g')\\\"]\"\n \
    \ else\n    echo $(echo $1 | grep -o [a-z] | awk '{print NR%2}' | grep -c 1)\n\
    \  fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ '[a-zA-Z]' | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0}\
    \ END {print s}'\n            else\n                echo $1 | grep -o '[a-zA-Z]'\
    \ | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END\
    \ {print s}'\n            fi\n        else\n            echo $1 | grep -o '[a-zA-Z]'\
    \ | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END\
    \ {print s}'\n        fi\n    else\n        echo $1 | grep -o '[a-zA-Z]' | awk\
    \ '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END {print\
    \ s}'\n    fi", "    if [[ \"$1\" =~ [^[:space:],] ]]; then\n        echo \"$1\"\
    \ | grep -o \"[[:lower:]]\" | awk '{print tolower($0)}' | awk '{if (NR % 2 ==\
    \ 1) {print $0}}' | wc -l\n    elif [[ \"$1\" =~ [^[:space:]] ]]; then\n     \
    \   echo \"$1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo\
    \ \"$1\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n    fi", "  if [[ \"$1\" =~ \\\
    s ]]; then\n    echo \"$1\" | sed -e 's/\\s/\", \"/g'\n  elif [[ \"$1\" =~ , ]];\
    \ then\n    echo \"$1\" | sed -e 's/,/\", \"/g'\n  else\n    echo \"$1\" | sed\
    \ -e 's/[a-z]/\\n&/g' | grep -c '[a-z]'\n  fi", "    local string=$1\n    local\
    \ words=()\n    local count=0\n    if [[ \"$string\" =~ [a-z] ]]; then\n     \
    \   for (( i=0; i<${#string}; i++ )); do\n            local char=${string:$i:1}\n\
    \            if [[ \"$char\" =~ [a-z] ]]; then\n                local ord=$(printf\
    \ \"%d\" \"'$char\")\n                if (( $ord % 2 == 0 )); then\n         \
    \           (( count++ ))\n                fi\n            fi\n        done\n\
    \        echo \"$count\"\n    elif [[ \"$string\" =~ [,] ]]; then\n        IFS=','\
    \ read -ra words <<< \"$string\"\n        echo \"${words[@]}\"\n    else\n   \
    \     IFS=' ' read -ra words <<< \"$string\"\n        echo \"${words[@]}\"\n \
    \   fi", "    if [[ $1 =~ [^a-zA-Z,\\ ] ]]; then\n        echo \"\\\"$1\\\"\"\n\
    \    elif [[ $1 =~ [,] ]]; then\n        echo \"\\\"${1//,/\\\"\\\",\\\"}\\\"\"\
    \n    else\n        echo \"${#1}\"\n    fi", "  if [[ \"$1\" =~ [[:space:]] ]];\
    \ then\n    echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n  elif [[ \"$1\"\
    \ =~ , ]]; then\n    echo \"$1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n  else\n\
    \    echo \"$1\" | grep -o '[a-z]' | awk '{a[NR]=$0} END {for (i=1;i<=length(a);i++)\
    \ {if (i%2==1) {print a[i]}}}' | wc -l\n  fi", "    if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \        if [[ $1 =~ [a-zA-Z] ]]; then\n            if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \                echo $1 | grep -o [a-z] | awk '{print length($0) % 2}' | grep\
    \ -c 1\n            else\n                echo $1 | grep -o [a-z] | awk '{print\
    \ length($0) % 2}' | grep -c 1\n            fi\n        else\n            echo\
    \ $1 | grep -o [a-z] | awk '{print length($0) % 2}' | grep -c 1\n        fi\n\
    \    else\n        echo $1 | grep -o [a-z] | awk '{print length($0) % 2}' | grep\
    \ -c 1\n    fi", "    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\\
    n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n    elif [[ $1 =~ , ]];\
    \ then\n        echo \"$1\" | tr ',' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}'\
    \ | tr '\\n' ' '\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print\
    \ NR % 2}' | grep -c 1\n    fi", "    if [[ $1 =~ [[:space:]] ]]; then\n     \
    \   echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ ,\
    \ ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n  \
    \  else\n        echo \"$(echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1)\"\n    fi", "    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\"\
    \ | tr ' ' '\\n' | tr '\\'' '\\n' | tr ',' '\\n' | tr -d '\"' | tr -d '!' | tr\
    \ -d '?' | tr -d '.' | tr -d ';' | tr -d ':' | tr -d '-' | tr -d '(' | tr -d ')'\
    \ | tr -d '[' | tr -d ']' | tr -d '{' | tr -d '}' | tr -d '*' | tr -d '&' | tr\
    \ -d '^' | tr -d '%' | tr -d '$' | tr -d '#' | tr -d '@' | tr -d '~' | tr -d '`'\
    \ | tr -d '\\\\' | tr -d '|' | tr -d '<' | tr -d '>' | tr -d '=' | tr -d '/' |\
    \ tr -d '+' | tr -d '0' | tr -d '1' | tr -d '2' | tr -d '3' | tr -d '4' | tr -d\
    \ '5' | tr -d '6' | tr -d '7' | tr -d '8' | tr -d '9' | tr -d '\\n' | tr -d '\\\
    t' | tr -d '\\r' | tr -d '\\v' | tr -d '\\f' | tr -d '\\b' | tr -d '\\a' | tr\
    \ -d '\\e' | tr -d '\\033' | tr -d '\\x1b' | tr -d '\\x1f' | tr -d '\\x7f' | tr\
    \ -d '\\x1a' | tr -d '\\x1c' | tr -d '\\x1d' | tr -d '\\x1e' | tr -d '\\x0c' |\
    \ tr -d '\\x0b' | tr -d '\\x0e' | tr -d '\\x0f' | tr -d '\\x0d' | tr -d '\\x0a'\
    \ | tr -"]
stop_tokens:
- "\n}"
