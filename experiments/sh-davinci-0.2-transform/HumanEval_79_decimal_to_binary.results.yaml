language: sh
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # your code here\n    echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local num=$1\n    local result=\"\"\n  \
    \  local remainder\n    while [ $num -gt 0 ]; do\n        remainder=$((num % 2))\n\
    \        num=$((num / 2))\n        result=\"$remainder$result\"\n    done\n  \
    \  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local result=\"\"\n\
    \    while [ $number -gt 0 ]; do\n        result=$((number % 2))$result\n    \
    \    number=$((number / 2))\n    done\n    echo \"db$result\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=$((decimal % 2))$binary\n  \
    \      decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    while [ $number -gt 0 ]; do\n        binary=\"$((number % 2))$binary\"\n\
    \        number=$((number / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $number -gt 0 ]; do\n        remainder=$((number\
    \ % 2))\n        number=$((number / 2))\n        binary=\"$remainder$binary\"\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    decimal=$((decimal / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  local quotient=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ binary_array=()\n  local binary_string=\"\"\n  local binary_string_length=0\n\
    \  local binary_string_length_mod_4=0\n  local binary_string_length_mod_4_diff=0\n\
    \  local binary_string_length_mod_4_diff_string=\"\"\n  local binary_string_length_mod_4_diff_string_length=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4=0\n  local binary_string_length_mod_4_diff_string_length_mod_4_diff=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string=\"\"\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff_string=\"\
    \"\n  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff_string_length=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff=0\n\
    \  local binary_string_length_mod_4_diff_string_length_mod_4_diff_string_length_mod_4_diff\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local result=\"\"\n\
    \    while [ $number -gt 0 ]; do\n        result=\"$((number % 2))$result\"\n\
    \        number=$((number / 2))\n    done\n    echo \"db$result\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # Write your code here\n  echo \"db$(echo\
    \ \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary_number=\"\
    \"\n    while [ $number -gt 0 ]; do\n        binary_number=\"$((number % 2))$binary_number\"\
    \n        number=$((number / 2))\n    done\n    echo \"db$binary_number\"\n}\n\
    \ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    binary=\"$remainder$binary\"\n    decimal=$((decimal / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local -i n=$1\n    local -i i=0\n    local\
    \ -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i o=0\n\
    \    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local\
    \ -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n\
    \    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n  \
    \  local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n  \
    \  local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n  \
    \  local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n  \
    \  local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n  \
    \  local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n\
    \    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n\
    \    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n    local -i lll=0\n\
    \    local -i mmm=0\n    local -i nnn=0\n    local -i ooo=0\n    local -i ppp=0\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal%2))$binary\"\n\
    \        decimal=$((decimal/2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=$(($decimal % 2))$binary\n \
    \       decimal=$(($decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local result=\"\"\n    local num=$1\n  \
    \  local remainder=0\n    while [ $num -gt 0 ]; do\n        remainder=$((num %\
    \ 2))\n        num=$((num / 2))\n        result=\"$remainder$result\"\n    done\n\
    \    echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;$1\"\
    \ | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;\
    \ $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;$1\"\
    \ | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local result=\"\"\n  local remainder\n  local\
    \ quotient\n  local number=$1\n  local i=0\n  while [ $number -gt 0 ]; do\n  \
    \  remainder=$(( number % 2 ))\n    number=$(( number / 2 ))\n    result=\"$remainder$result\"\
    \n  done\n  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    binary=\"$(( $number % 2 ))$binary\"\n    number=$((\
    \ $number / 2 ))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local -i num=$1\n    local -i rem\n    local\
    \ bin=\"\"\n    while [ $num -gt 0 ]; do\n        rem=$((num % 2))\n        num=$((num\
    \ / 2))\n        bin=\"$rem$bin\"\n    done\n    echo \"db$bin\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # TODO: implement this function\n  echo \"\
    db$(echo \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    binary=\"$remainder$binary\"\n    decimal=$((decimal / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=\"$1\"\n    local binary=\"\
    \"\n    while [ \"$number\" -gt 0 ]; do\n        binary=\"$(( $number % 2 ))$binary\"\
    \n        number=$(( $number / 2 ))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    decimal=$((decimal / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local num=$1\n    local result=\"\"\n  \
    \  local remainder=0\n    while [ $num -gt 0 ]; do\n        remainder=$((num %\
    \ 2))\n        num=$((num / 2))\n        result=\"$remainder$result\"\n    done\n\
    \    echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;$1\"\
    \ | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    binary=\"$((number % 2))$binary\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"obase=2; ibase=10; $1\" | bc | sed\
    \ 's/^/db/' | sed 's/$/db/'\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # your code here\n    echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    local result=0\n    while [ $number -gt 0 ]; do\n\
    \        remainder=$((number % 2))\n        number=$((number / 2))\n        binary=\"\
    $remainder$binary\"\n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n  \
    \  decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    while [ $number -gt 0 ]; do\n        local remainder=$((number % 2))\n  \
    \      binary=\"$remainder$binary\"\n        number=$((number / 2))\n    done\n\
    \    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;\
    \ $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local num=$1\n  local result=\"\"\n  while\
    \ [ $num -gt 0 ]; do\n    result=$((num % 2))$result\n    num=$((num / 2))\n \
    \ done\n  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local dec=$1\n    local bin=\"\"\n    while\
    \ [ $dec -gt 0 ]; do\n        bin=$((dec % 2))$bin\n        dec=$((dec / 2))\n\
    \    done\n    echo \"db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=$(( $decimal % 2 ))$binary\n\
    \        decimal=$(( $decimal / 2 ))\n    done\n    echo \"db$binary\"\n}\n\n\
    candidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # Write your code here\n    echo \"db$(echo\
    \ \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # Write your code here\n    echo \"db$(echo\
    \ \"obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    binary=\"$((number % 2))$binary\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local n=$1\n  local result=\"\"\n  while [\
    \ $n -gt 0 ]; do\n    result=\"$((n % 2))$result\"\n    n=$((n / 2))\n  done\n\
    \  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local n=$1\n    local binary=\"\"\n    while\
    \ [ $n -gt 0 ]; do\n        binary=\"$((n%2))$binary\"\n        n=$((n/2))\n \
    \   done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # your code here\n    echo \"db$(echo \"\
    obase=2; $1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local result=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    result=\"$((number % 2))$result\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ \"$decimal\" -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    local quotient=0\n    local result=\"\"\n    while\
    \ [ $decimal -gt 0 ]; do\n        remainder=$((decimal % 2))\n        quotient=$((decimal\
    \ / 2))\n        binary=\"$remainder$binary\"\n        decimal=$quotient\n   \
    \ done\n    result=\"db$binary\"\n    echo \"$result\"\n}\n\ncandidate() {\n \
    \   decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=$((decimal % 2))$binary\n  \
    \      decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=$((decimal % 2))$binary\n  \
    \      decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # your code here\n    echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=$((decimal % 2))$binary\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 2
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n}\n\ncandidate() {\n   \
    \ decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\"\
    ) = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpphavn5b6.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpphavn5b6.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660019045
- exit_code: 2
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n}\n\ncandidate() {\n   \
    \ decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\"\
    ) = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate\
    \ \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpphavn5b6.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpphavn5b6.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local -i num=$1\n    local -i rem\n    local\
    \ -i quotient\n    local -i i=0\n    local -i j\n    local binary_num\n    local\
    \ -i length\n    while [ $num -gt 0 ]\n    do\n        rem=$((num%2))\n      \
    \  binary_num[$i]=$rem\n        num=$((num/2))\n        i=$((i+1))\n    done\n\
    \    length=$i\n    echo -n \"db\"\n    for ((j=$length-1; j>=0; j--))\n    do\n\
    \        echo -n \"${binary_num[$j]}\"\n    done\n    echo \"db\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    binary=\"$remainder$binary\"\n    decimal=$((decimal / 2))\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2; $1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder=0\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $number -gt 0 ]; do\n        remainder=$((number\
    \ % 2))\n        number=$((number / 2))\n        binary=\"$remainder$binary\"\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=\"$1\"\n  local binary_number=\"\
    \"\n  local remainder=0\n  local quotient=0\n  local i=0\n  local j=0\n  local\
    \ temp=0\n  local temp_binary_number=\"\"\n  local temp_binary_number_length=0\n\
    \  local binary_number_length=0\n  local binary_number_length_diff=0\n  local\
    \ binary_number_length_diff_temp=0\n  local binary_number_length_diff_temp_2=0\n\
    \  local binary_number_length_diff_temp_3=0\n  local binary_number_length_diff_temp_4=0\n\
    \  local binary_number_length_diff_temp_5=0\n  local binary_number_length_diff_temp_6=0\n\
    \  local binary_number_length_diff_temp_7=0\n  local binary_number_length_diff_temp_8=0\n\
    \  local binary_number_length_diff_temp_9=0\n  local binary_number_length_diff_temp_10=0\n\
    \  local binary_number_length_diff_temp_11=0\n  local binary_number_length_diff_temp_12=0\n\
    \  local binary_number_length_diff_temp_13=0\n  local binary_number_length_diff_temp_14=0\n\
    \  local binary_number_length_diff_temp_15=0\n  local binary_number_length_diff_temp_16=0\n\
    \  local binary_number_length_diff_temp_17=0\n  local binary_number_length_diff_temp_18=0\n\
    \  local binary_number_length_diff_temp_19=0\n  local binary_number_length_diff_temp_20=0\n\
    \  local binary_number_length_diff_temp_21=0\n  local binary_number_length_diff_temp_22=0\n\
    \  local binary_number_length_diff_temp_23=0\n  local binary_number_length_diff_temp_24=0\n\
    \  local binary_number_length_diff_temp_25=0\n  local binary_number_length_diff_temp_26=0\n\
    \  local binary_number_length_\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code here\n  echo \"db$(echo \"obase=2;$1\"\
    \ | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    # your code here\n    echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary_number=\"\
    \"\n    while [ $number -gt 0 ]; do\n        binary_number=\"$(( $number % 2 ))$binary_number\"\
    \n        number=$(( $number / 2 ))\n    done\n    echo \"db$binary_number\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        local remainder=$((decimal % 2))\n\
    \        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\n    done\n\
    \    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$(( $decimal % 2 ))$binary\"\n    decimal=$((\
    \ $decimal / 2 ))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # Write your code here\n  # You can use the\
    \ echo command to return the output\n  #echo \"db1111db\"\n  echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $number -gt 0 ]; do\n        remainder=$((number\
    \ % 2))\n        number=$((number / 2))\n        binary=\"$remainder$binary\"\n\
    \    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n  \
    \  [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"\
    db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  local\
    \ remainder\n  while [ $number -gt 0 ]; do\n    remainder=$((number % 2))\n  \
    \  number=$((number / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo \"\
    db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"\
    db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate\
    \ \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=$((decimal % 2))$binary\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        local remainder=$((decimal % 2))\n\
    \        binary=\"$remainder$binary\"\n        decimal=$((decimal / 2))\n    done\n\
    \    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=\"$((decimal % 2))$binary\"\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local result=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    result=\"$((number % 2))$result\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local binary_string=\"\"\n    local decimal_number=$1\n\
    \    local remainder\n    while [ $decimal_number -gt 0 ]; do\n        remainder=$((decimal_number\
    \ % 2))\n        decimal_number=$((decimal_number / 2))\n        binary_string=\"\
    $remainder$binary_string\"\n    done\n    echo \"db$binary_string\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # your code goes here\n  echo \"db$(echo \"\
    obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  # Write your code here\n  echo \"db$(echo\
    \ \"obase=2;$1\" | bc)db\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local result=\"\"\n  local num=$1\n  while\
    \ [ $num -gt 0 ]; do\n    result=\"$((num % 2))$result\"\n    num=$((num / 2))\n\
    \  done\n  echo \"db$result\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    decimal=$((decimal / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local num=$1\n    local bin=\"\"\n    while\
    \ [ $num -gt 0 ]; do\n        bin=\"$((num % 2))$bin\"\n        num=$((num / 2))\n\
    \    done\n    echo \"db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[\
    \ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\"\
    \ ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local dec=$1\n  local bin=\"\"\n  local rem=0\n\
    \  while [ $dec -gt 0 ]; do\n    rem=$((dec % 2))\n    dec=$((dec / 2))\n    bin=\"\
    $rem$bin\"\n  done\n  echo \"db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    while [ $decimal -gt 0 ]; do\n        binary=\"$((decimal % 2))$binary\"\n\
    \        decimal=$((decimal / 2))\n    done\n    echo \"db$binary\"\n}\n\ncandidate()\
    \ {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[\
    \ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    binary=\"$(( $number % 2 ))$binary\"\n    number=$((\
    \ $number / 2 ))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local dec=$1\n    local bin=\"\"\n    while\
    \ [ $dec -gt 0 ]; do\n        bin=\"$(( $dec % 2 ))$bin\"\n        dec=$(( $dec\
    \ / 2 ))\n    done\n    echo \"db$bin\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local number=$1\n    local binary=\"\"\n\
    \    while [ $number -gt 0 ]; do\n        local remainder=$((number % 2))\n  \
    \      binary=\"$remainder$binary\"\n        number=$((number / 2))\n    done\n\
    \    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate\
    \ \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2; $1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local number=$1\n  local binary=\"\"\n  while\
    \ [ $number -gt 0 ]; do\n    binary=\"$((number % 2))$binary\"\n    number=$((number\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  while\
    \ [ $decimal -gt 0 ]; do\n    binary=$((decimal % 2))$binary\n    decimal=$((decimal\
    \ / 2))\n  done\n  echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local\
    \ remainder=0\n  while [ $decimal -gt 0 ]; do\n    remainder=$((decimal % 2))\n\
    \    decimal=$((decimal / 2))\n    binary=\"$remainder$binary\"\n  done\n  echo\
    \ \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"\
    32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n\
    \    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 1
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n\
    \    local remainder\n    while [ $decimal -gt 0 ]; do\n        remainder=$((decimal\
    \ % 2))\n        decimal=$((decimal / 2))\n        binary=\"$remainder$binary\"\
    \n    done\n    echo \"db$binary\"\n}\n\ncandidate() {\n    decimal_to_binary\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"0\") = \"db0db\" ]]\n\
    \    [[ $(candidate \"32\") = \"db100000db\" ]]\n    [[ $(candidate \"103\") =\
    \ \"db1100111db\" ]]\n    [[ $(candidate \"15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660019044
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n  echo \"db$(echo \"obase=2;$1\" | bc)db\"\n\
    }\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
- exit_code: 0
  program: "#!/bin/bash\n# You will be given a number in decimal form and your task\
    \ is to convert it to\n# binary format. The function should return a string, with\
    \ each character representing a binary\n# number. Each character in the string\
    \ will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the\
    \ beginning and at the end of the string.\n# The extra characters are there to\
    \ help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"\
    db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an\
    \ integer\ndecimal_to_binary() {\n    echo \"db$(echo \"obase=2;$1\" | bc)db\"\
    \n}\n\ncandidate() {\n    decimal_to_binary \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"0\") = \"db0db\" ]]\n    [[ $(candidate \"32\") = \"db100000db\"\
    \ ]]\n    [[ $(candidate \"103\") = \"db1100111db\" ]]\n    [[ $(candidate \"\
    15\") = \"db1111db\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660019045
