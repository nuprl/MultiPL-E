name: HumanEval_65_circular_shift
language: sh
prompt: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
  \ right by shift\n# and return the result as a string.\n# If shift > number of digits,\
  \ return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>>\
  \ $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
  circular_shift() {\n"
tests: "}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
  ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
  \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\
  \nrun_test"
completions: ["    local x=$1\n    local shift=$2\n    local digits=$(echo $x | wc\
    \ -c)\n    local digits_minus_one=$((digits - 1))\n    local shift_mod=$((shift\
    \ % digits_minus_one))\n    local shift_mod_minus_one=$((shift_mod - 1))\n   \
    \ if [ $shift_mod -eq 0 ]; then\n        echo $x\n    elif [ $shift_mod -eq $digits_minus_one\
    \ ]; then\n        echo $x | rev\n    else\n        echo $x | cut -c $shift_mod-\
    \ | rev | cut -c $shift_mod_minus_one- | rev\n    fi", "    local x=$1\n    local\
    \ shift=$2\n    local len=${#x}\n    local shift=$((shift % len))\n    if ((shift\
    \ == 0)); then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi", "    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"${#x}\"\
    \n    local result=\"\"\n    if (( shift > digits )); then\n        result=\"\
    $(rev <<< \"$x\")\"\n    else\n        result=\"$(rev <<< \"${x:0:shift}\")${x:shift}\"\
    \n    fi\n    echo \"$result\"", "    local x=\"$1\"\n    local shift=\"$2\"\n\
    \    local len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if [ \"\
    $shift_mod\" -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift_mod}${x:0:$shift_mod}\"\
    \n    fi", "    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"${#x}\"\
    \n    local result=\"\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n       \
    \ for ((i=digits-1; i>=0; i--)); do\n            result=\"$result${x:$i:1}\"\n\
    \        done\n    else\n        local left=\"${x:0:$shift}\"\n        local right=\"\
    ${x:$shift}\"\n        result=\"$right$left\"\n    fi\n    echo \"$result\"",
  "    local x=$1\n    local shift=$2\n    local digits=$(echo $x | wc -c)\n    local\
    \ digits=$((digits - 1))\n    if [ $shift -gt $digits ]; then\n        echo $x\
    \ | rev\n    else\n        local right=$(echo $x | cut -c $shift- | rev)\n   \
    \     local left=$(echo $x | cut -c 1-$((digits - shift)) | rev)\n        echo\
    \ $right$left\n    fi", "    local x=\"$1\"\n    local shift=\"$2\"\n    local\
    \ len=\"${#x}\"\n    local right=\"${x:0:$((len - shift))}\"\n    local left=\"\
    ${x:$((len - shift))}\"\n    echo \"${left}${right}\"", "    local x=\"$1\"\n\
    \    local shift=\"$2\"\n    local digits=\"${#x}\"\n    if [ \"$shift\" -ge \"\
    $digits\" ]; then\n        echo \"$x\" | rev\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi", "    local x=$1\n    local shift=$2\n    local digits=$(echo \"$x\"\
    \ | wc -c)\n    local shift=$((shift % digits))\n    if [ $shift -eq 0 ]; then\n\
    \        echo \"$x\"\n    else\n        echo \"$x\" | cut -c $shift- | rev | cut\
    \ -c $shift- | rev\n    fi", "  local x=\"$1\"\n  local shift=\"$2\"\n  local\
    \ len=\"${#x}\"\n  local shift=$((shift % len))\n  if [ \"$shift\" -eq 0 ]; then\n\
    \    echo \"$x\"\n  else\n    echo \"${x:$shift}${x:0:$shift}\"\n  fi", "    local\
    \ x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"${#x}\"\n    local result=\"\
    \"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n        for (( i = 0; i < \"\
    $digits\"; i++ )); do\n            result=\"${x:$i:1}$result\"\n        done\n\
    \    else\n        result=\"${x:$shift:$digits}${x:0:$shift}\"\n    fi\n    echo\
    \ \"$result\"", "  local x=$1\n  local shift=$2\n  local digits=${#x}\n  if ((\
    \ shift > digits )); then\n    echo $x | rev\n  else\n    echo $x | cut -c $shift-\
    \ | rev | cut -c $shift- | rev\n  fi", "    local x=$1\n    local shift=$2\n \
    \   local n=$(echo \"$x\" | wc -c)\n    local m=$((n - 1))\n    local y=$(echo\
    \ \"$x\" | cut -c $shift-$m)\n    local z=$(echo \"$x\" | cut -c 1-$((shift -\
    \ 1)))\n    echo \"$y$z\"", "    local x=\"$1\"\n    local shift=\"$2\"\n    local\
    \ len=\"${#x}\"\n    local shift_mod=\"$((shift % len))\"\n    if [ \"$shift_mod\"\
    \ -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift_mod}${x:0:$shift_mod}\"\
    \n    fi", "    local x=\"$1\"\n    local shift=\"$2\"\n    local digits=\"${#x}\"\
    \n    if [ \"$shift\" -ge \"$digits\" ]; then\n        echo \"$x\" | rev\n   \
    \ else\n        echo \"${x:$shift}${x:0:$shift}\"\n    fi", "    local x=$1\n\
    \    local shift=$2\n    local digits=$(echo $x | wc -c)\n    local digits=$((digits\
    \ - 1))\n    if [ $shift -gt $digits ]; then\n        echo $x | rev\n    else\n\
    \        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n    \
    \    echo $y$z\n    fi", "    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits\
    \ ]; then\n        echo \"$x\" | rev\n    else\n        local x=$(echo \"$x\"\
    \ | rev)\n        local x=$(echo \"$x\" | cut -c $shift-)\n        local x=$(echo\
    \ \"$x\" | rev)\n        local x=$(echo \"$x\" | rev)\n        local x=$(echo\
    \ \"$x\" | cut -c $shift-)\n        local x=$(echo \"$x\" | rev)\n        echo\
    \ \"$x\"\n    fi", "    local x=$1\n    local shift=$2\n    local digits=$(echo\
    \ $x | wc -c)\n    local digits=$((digits - 1))\n    if [ $shift -gt $digits ];\
    \ then\n        echo $x | rev\n    else\n        local x=$(echo $x | rev)\n  \
    \      local x=$(echo $x | cut -c 1-$shift)\n        local x=$(echo $x | rev)\n\
    \        local x=$(echo $x | rev)\n        local x=$(echo $x | cut -c $((shift\
    \ + 1))-)\n        echo $x$x\n    fi", "    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    if [ $shift -ge $len ]; then\n        echo $x | rev\n\
    \    else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo $((y * 10**(len-shift) + z))\n    fi", "    local x=$1\n    local\
    \ shift=$2\n    local len=${#x}\n    local shift=$((shift % len))\n    if [ $shift\
    \ -eq 0 ]; then\n        echo \"$x\"\n    else\n        echo \"${x:$shift}${x:0:$shift}\"\
    \n    fi"]
stop_tokens:
- "\n}"
