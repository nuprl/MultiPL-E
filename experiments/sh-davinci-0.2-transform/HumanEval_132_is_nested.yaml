name: HumanEval_132_is_nested
language: sh
prompt: "#!/bin/bash\n# Create a function that takes a string as input which contains\
  \ only square brackets.\n# The function should return True if and only if there\
  \ is a valid subsequence of brackets \n# where at least one bracket in the subsequence\
  \ is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\"\
  )\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\"\
  )\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"\
  [[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n"
tests: "}\n\ncandidate() {\n    is_nested \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"[[]]\") = \"true\" ]]\n    [[ $(candidate \"[]]]]]]][[[[[]\") =\
  \ \"false\" ]]\n    [[ $(candidate \"[][]\") = \"false\" ]]\n    [[ $(candidate\
  \ \"[]\") = \"false\" ]]\n    [[ $(candidate \"[[[[]]]]\") = \"true\" ]]\n    [[\
  \ $(candidate \"[]]]]]]]]]]\") = \"false\" ]]\n    [[ $(candidate \"[][][[]]\")\
  \ = \"true\" ]]\n    [[ $(candidate \"[[]\") = \"false\" ]]\n    [[ $(candidate\
  \ \"[]]\") = \"false\" ]]\n    [[ $(candidate \"[[]][[\") = \"true\" ]]\n    [[\
  \ $(candidate \"[[][]]\") = \"true\" ]]\n    [[ $(candidate \"\") = \"false\" ]]\n\
  \    [[ $(candidate \"[[[[[[[[\") = \"false\" ]]\n    [[ $(candidate \"]]]]]]]]\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["    local stack=()\n    local top=0\n    local i=0\n    local ch=''\n\
    \    local len=${#1}\n    for ((i=0; i<len; i++)); do\n        ch=${1:i:1}\n \
    \       if [[ \"$ch\" == \"[\" ]]; then\n            stack[top++]=\"$ch\"\n  \
    \      elif [[ \"$ch\" == \"]\" ]]; then\n            if [[ \"${stack[top-1]}\"\
    \ == \"[\" ]]; then\n                top=$((top-1))\n            else\n      \
    \          stack[top++]=\"$ch\"\n            fi\n        fi\n    done\n    if\
    \ [[ $top -gt 0 ]]; then\n        echo \"false\"\n    else\n        echo \"true\"\
    \n    fi", "    local stack=()\n    local top=0\n    local i=0\n    local char=''\n\
    \    local len=${#1}\n    for ((i=0; i<len; i++)); do\n        char=${1:i:1}\n\
    \        if [[ $char == '[' ]]; then\n            stack[top++]=$char\n       \
    \ elif [[ $char == ']' ]]; then\n            if [[ $top -eq 0 ]]; then\n     \
    \           echo \"false\"\n                return\n            fi\n         \
    \   top=$((top-1))\n        fi\n    done\n    if [[ $top -eq 0 ]]; then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local stack=()\n\
    \    local is_nested=false\n    for ((i=0; i<${#1}; i++)); do\n        local char=${1:$i:1}\n\
    \        if [[ $char == \"[\" ]]; then\n            stack+=($char)\n        elif\
    \ [[ $char == \"]\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \                is_nested=false\n                break\n            else\n  \
    \              unset stack[${#stack[@]}-1]\n                is_nested=true\n \
    \           fi\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ str=\"$1\"\n    local len=${#str}\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n\
    \    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n\
    \    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n\
    \    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n\
    \    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n\
    \    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local\
    \ ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n\
    \    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local\
    \ mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n\
    \    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local\
    \ vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n\
    \    local aaaa=0\n    local bbbb=0\n    local cccc=0\n    local dddd=0\n    local",
  "    local string=\"$1\"\n    local stack=()\n    local stack_index=0\n    local\
    \ current_char\n    local top_char\n    local is_nested=false\n\n    for (( i=0;\
    \ i<${#string}; i++ )); do\n        current_char=\"${string:$i:1}\"\n        if\
    \ [[ \"$current_char\" == \"[\" ]]; then\n            stack[stack_index]=\"$current_char\"\
    \n            stack_index=$(( stack_index + 1 ))\n        elif [[ \"$current_char\"\
    \ == \"]\" ]]; then\n            if [[ \"$stack_index\" -eq 0 ]]; then\n     \
    \           break\n            fi\n            stack_index=$(( stack_index - 1\
    \ ))\n            top_char=\"${stack[stack_index]}\"\n            if [[ \"$top_char\"\
    \ == \"[\" ]]; then\n                is_nested=true\n            fi\n        fi\n\
    \    done\n\n    if [[ \"$is_nested\" == \"true\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local stack=''\n    local i=0\n\
    \    local len=${#1}\n    local c=''\n    local top=''\n    while [ $i -lt $len\
    \ ]; do\n        c=${1:$i:1}\n        if [ \"$c\" == \"[\" ]; then\n         \
    \   stack+=\"$c\"\n        elif [ \"$c\" == \"]\" ]; then\n            top=${stack:\
    \ -1}\n            if [ \"$top\" == \"[\" ]; then\n                stack=${stack:0:-1}\n\
    \            else\n                return 1\n            fi\n        fi\n    \
    \    ((i++))\n    done\n    if [ -z \"$stack\" ]; then\n        return 0\n   \
    \ else\n        return 1\n    fi", "    local stack=()\n    local top=0\n    local\
    \ i=0\n    local len=${#1}\n    local ch\n    for ((i=0; i<len; i++)); do\n  \
    \      ch=${1:i:1}\n        if [[ $ch == \"[\" ]]; then\n            stack[top++]=$ch\n\
    \        elif [[ $ch == \"]\" ]]; then\n            if [[ $top -eq 0 ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        top=$((top-1))\n        fi\n    done\n    if [[ $top -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ stack=()\n    local i=0\n    local len=${#1}\n    local c\n    while [ $i -lt\
    \ $len ]; do\n        c=${1:$i:1}\n        if [ \"$c\" == \"[\" ]; then\n    \
    \        stack+=($c)\n        elif [ \"$c\" == \"]\" ]; then\n            if [\
    \ ${#stack[@]} -eq 0 ]; then\n                echo \"false\"\n               \
    \ return\n            fi\n            stack=(\"${stack[@]:0:$((${#stack[@]}-1))}\"\
    )\n        fi\n        i=$(($i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ stack=()\n    local top=0\n    local i=0\n    local c=''\n    local is_nested=false\n\
    \    local is_empty=true\n    local is_valid=true\n    local is_balanced=true\n\
    \    local is_nested=false\n    local is_valid_subsequence=false\n    local is_valid_subsequence_nested=false\n\
    \    local is_valid_subsequence_balanced=false\n    local is_valid_subsequence_empty=false\n\
    \    local is_valid_subsequence_nested_balanced=false\n    local is_valid_subsequence_nested_empty=false\n\
    \    local is_valid_subsequence_balanced_empty=false\n    local is_valid_subsequence_nested_balanced_empty=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid=false\n    local is_valid_subsequence_nested_balanced_empty_valid_subsequence=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_balanced=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_empty=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_balanced=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_empty=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_balanced_empty=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_balanced_empty=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_balanced_empty_valid=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_balanced_empty_valid_subsequence=false\n\
    \    local is_valid_subsequence_nested_balanced_empty_valid_subsequence_nested_balanced_empty_valid_",
  "    local stack=()\n    local top=0\n    local i=0\n    local len=${#1}\n    local\
    \ ch=''\n    local is_nested=false\n\n    while [[ $i -lt $len ]]; do\n      \
    \  ch=${1:$i:1}\n        if [[ $ch == '[' ]]; then\n            stack[$top]=$ch\n\
    \            top=$((top+1))\n        elif [[ $ch == ']' ]]; then\n           \
    \ if [[ $top -gt 0 ]]; then\n                top=$((top-1))\n                if\
    \ [[ ${stack[$top]} == '[' ]]; then\n                    is_nested=true\n    \
    \            fi\n            fi\n        fi\n        i=$((i+1))\n    done\n\n\
    \    if [[ $is_nested == true ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "    local stack=()\n    local i=0\n    local len=${#1}\n\
    \    local char\n    local top\n    while [ $i -lt $len ]; do\n        char=${1:$i:1}\n\
    \        if [ \"$char\" == \"[\" ]; then\n            stack+=($char)\n       \
    \ elif [ \"$char\" == \"]\" ]; then\n            top=${stack[-1]}\n          \
    \  if [ \"$top\" == \"[\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n            else\n                stack+=($char)\n            fi\n        fi\n\
    \        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local stack=()\n \
    \   local i=0\n    local len=${#1}\n    local char\n    local top\n    while [\
    \ $i -lt $len ]; do\n        char=${1:$i:1}\n        if [ \"$char\" == \"[\" ];\
    \ then\n            stack+=($char)\n        elif [ \"$char\" == \"]\" ]; then\n\
    \            top=${stack[-1]}\n            if [ \"$top\" == \"[\" ]; then\n  \
    \              stack=(${stack[@]:0:${#stack[@]}-1})\n            else\n      \
    \          stack+=($char)\n            fi\n        fi\n        i=$((i+1))\n  \
    \  done\n    if [ ${#stack[@]} -eq 0 ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local string=$1\n    local stack=()\n \
    \   local stack_top=0\n    local i=0\n    local len=${#string}\n    local char=''\n\
    \    local top_char=''\n    local is_nested=false\n\n    while [ $i -lt $len ];\
    \ do\n        char=${string:$i:1}\n        if [ \"$char\" == \"[\" ]; then\n \
    \           stack[$stack_top]=$char\n            stack_top=$((stack_top+1))\n\
    \        else\n            if [ $stack_top -eq 0 ]; then\n                break\n\
    \            fi\n            stack_top=$((stack_top-1))\n            top_char=${stack[$stack_top]}\n\
    \            if [ \"$top_char\" == \"[\" ]; then\n                is_nested=true\n\
    \            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $is_nested\
    \ == true ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi", "  local stack=()\n  local i=0\n  local len=${#1}\n  while [ $i -lt $len\
    \ ]; do\n    local char=${1:$i:1}\n    if [ \"$char\" == \"[\" ]; then\n     \
    \ stack+=($char)\n    elif [ \"$char\" == \"]\" ]; then\n      if [ ${#stack[@]}\
    \ -eq 0 ]; then\n        echo \"false\"\n        return\n      fi\n      stack=(\"\
    ${stack[@]:0:${#stack[@]}-1}\")\n    fi\n    i=$((i+1))\n  done\n  if [ ${#stack[@]}\
    \ -eq 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local\
    \ str=$1\n    local stack=()\n    local top=0\n    local i=0\n    local len=${#str}\n\
    \    local c=''\n    local is_nested=false\n\n    while [[ $i -lt $len ]]; do\n\
    \        c=${str:$i:1}\n        if [[ $c == '[' ]]; then\n            stack[$top]=$c\n\
    \            top=$((top+1))\n        elif [[ $c == ']' ]]; then\n            if\
    \ [[ $top -eq 0 ]]; then\n                break\n            fi\n            top=$((top-1))\n\
    \            if [[ $top -eq 0 ]]; then\n                is_nested=true\n     \
    \       fi\n        fi\n        i=$((i+1))\n    done\n\n    if [[ $is_nested ==\
    \ true ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi", "    local stack=()\n    local i=0\n    local len=${#1}\n    local c\n\
    \    local top\n    while [ $i -lt $len ]; do\n        c=${1:$i:1}\n        if\
    \ [ \"$c\" == \"[\" ]; then\n            stack+=($c)\n        elif [ \"$c\" ==\
    \ \"]\" ]; then\n            top=${stack[-1]}\n            if [ \"$top\" == \"\
    [\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\")\n      \
    \      else\n                stack+=($c)\n            fi\n        fi\n       \
    \ i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local stack=()\n    local i=0\n\
    \    local len=${#1}\n    local char\n    local top\n    local is_nested=false\n\
    \n    while [ $i -lt $len ]; do\n        char=${1:$i:1}\n        if [ \"$char\"\
    \ == \"[\" ]; then\n            stack+=($char)\n        elif [ \"$char\" == \"\
    ]\" ]; then\n            top=${stack[-1]}\n            if [ \"$top\" == \"[\"\
    \ ]; then\n                stack=(${stack[@]:0:${#stack[@]}-1})\n            else\n\
    \                stack+=($char)\n            fi\n        fi\n        i=$((i+1))\n\
    \    done\n\n    if [ ${#stack[@]} -gt 0 ]; then\n        is_nested=false\n  \
    \  else\n        is_nested=true\n    fi\n\n    echo $is_nested", "    local str=$1\n\
    \    local stack=()\n    local i=0\n    local len=${#str}\n    local top=0\n \
    \   local ch=''\n    local is_nested=false\n\n    while [ $i -lt $len ]; do\n\
    \        ch=${str:$i:1}\n        if [ \"$ch\" == \"[\" ]; then\n            stack[$top]=$ch\n\
    \            top=$((top+1))\n        elif [ \"$ch\" == \"]\" ]; then\n       \
    \     if [ $top -gt 0 ]; then\n                top=$((top-1))\n              \
    \  if [ $top -gt 0 ]; then\n                    is_nested=true\n             \
    \   fi\n            fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ $is_nested\
    \ == true ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n \
    \   fi", "    local stack=()\n    local i=0\n    local len=${#1}\n    while [\
    \ $i -lt $len ]; do\n        local char=${1:$i:1}\n        if [ \"$char\" == \"\
    [\" ]; then\n            stack+=($char)\n        elif [ \"$char\" == \"]\" ];\
    \ then\n            if [ ${#stack[@]} -eq 0 ]; then\n                echo \"false\"\
    \n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n        i=$((i+1))\n    done\n    if [ ${#stack[@]} -eq 0 ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ stack=()\n    local i=0\n    local len=${#1}\n    local c=''\n    local top=''\n\
    \    local is_nested=false\n\n    while [ $i -lt $len ]; do\n        c=${1:$i:1}\n\
    \        if [ \"$c\" == \"[\" ]; then\n            stack+=($c)\n        elif [\
    \ \"$c\" == \"]\" ]; then\n            if [ ${#stack[@]} -eq 0 ]; then\n     \
    \           break\n            fi\n            top=${stack[${#stack[@]}-1]}\n\
    \            if [ \"$top\" == \"[\" ]; then\n                stack=(\"${stack[@]:0:${#stack[@]}-1}\"\
    )\n                is_nested=true\n            else\n                break\n \
    \           fi\n        fi\n        i=$((i+1))\n    done\n\n    if [ ${#stack[@]}\
    \ -eq 0 ] && $is_nested; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi"]
stop_tokens:
- "\n}"
