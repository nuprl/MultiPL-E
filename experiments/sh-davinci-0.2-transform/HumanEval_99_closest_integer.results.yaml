language: sh
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    echo\
    \ \"$1\" | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n   \
    \ closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ Implement this function\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\n\
    candidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\",$1)}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  #\n  # Hint: use the bash built-in command `bc` to\
    \ do floating point\n  # arithmetic.\n  #\n  # Hint: use the bash built-in command\
    \ `printf` to format the output.\n  #\n  # Hint: use the bash built-in command\
    \ `echo` to print the output.\n  #\n  # Hint: use the bash built-in command `exit`\
    \ to exit the script.\n  #\n  # Hint: use the bash built-in command `test` to\
    \ test the arguments.\n  #\n  # Hint: use the bash built-in command `expr` to\
    \ do integer arithmetic.\n  #\n  # Hint: use the bash built-in command `seq` to\
    \ generate a sequence of\n  # numbers.\n  #\n  # Hint: use the bash built-in command\
    \ `sort` to sort the numbers.\n  #\n  # Hint: use the bash built-in command `head`\
    \ to get the first element\n  # of the sorted numbers.\n  #\n  # Hint: use the\
    \ bash built-in command `tail` to get the last element\n  # of the sorted numbers.\n\
    \  #\n  # Hint: use the bash built-in command `wc` to count the number of\n  #\
    \ elements in the sorted numbers.\n  #\n  # Hint: use the bash built-in command\
    \ `grep` to filter the sorted\n  # numbers.\n  #\n  # Hint: use the bash built-in\
    \ command `cut` to extract the first\n  # column of the sorted numbers.\n  #\n\
    \  # Hint: use the bash built-in command `sed` to remove the last\n  # character\
    \ of the sorted numbers.\n  #\n  # Hint: use the bash built-in command `tr` to\
    \ replace the last\n  # character of the sorted numbers.\n  #\n  # Hint: use the\
    \ bash built-in command `rev` to reverse the sorted\n  # numbers.\n  #\n  # Hint:\
    \ use the bash built-in command `xargs` to execute the sorted\n  # numbers.\n\
    \  #\n  # Hint: use the bash built-in command `tee` to save\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo4q89acr.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpo4q89acr.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n   \
    \ closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  if [ $(echo \"$1 < 0\" | bc) -eq 1 ]; then\n    echo $(echo\
    \ \"$1 - 0.5\" | bc | xargs printf \"%.0f\")\n  else\n    echo $(echo \"$1 + 0.5\"\
    \ | bc | xargs printf \"%.0f\")\n  fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ number of decimal places to round to\n  local -i precision=0\n  # The number\
    \ of decimal places in the given number\n  local -i decimal_places=$(echo \"$1\"\
    \ | grep -o \"\\.\" | wc -l)\n  # The number of digits after the decimal point\n\
    \  local -i digits_after_decimal=$(echo \"$1\" | grep -o \"\\.[0-9]*\" | sed 's/\\\
    .//')\n  # The number of digits before the decimal point\n  local -i digits_before_decimal=$(echo\
    \ \"$1\" | grep -o \"[0-9]*\\.\" | sed 's/\\.//')\n  # The number of digits in\
    \ the given number\n  local -i digits=$(echo \"$1\" | grep -o \"[0-9]\" | wc -l)\n\
    \  # The number of digits to round to\n  local -i round_to=0\n  # The number to\
    \ round\n  local -i number=0\n  # The rounded number\n  local -i rounded_number=0\n\
    \  # The number of digits after the decimal point in the rounded number\n  local\
    \ -i rounded_digits_after_decimal=0\n  # The number of digits before the decimal\
    \ point in the rounded number\n  local -i rounded_digits_before_decimal=0\n  #\
    \ The number of digits in the rounded number\n  local -i rounded_digits=0\n  #\
    \ The number of digits to remove from the rounded number\n  local -i remove_digits=0\n\
    \  # The number of digits to add to the rounded number\n  local -i add_digits=0\n\
    \  # The number of digits to add to the rounded number\n  local -i add_digits_after_decimal=0\n\
    \  # The number of digits to add to the rounded number\n  local -i add_digits_before_decimal=0\n\
    \  # The number of digits to add to the rounded number\n  local -i add_digits_after_decimal_before_rounding=0\n\
    \  # The number of digits to add to the rounded number\n  local -i add_digits_before_decimal_before_rounding=0\n\
    \  # The number of digits to add to the rounded\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    # Hint: use the bc command\n    echo $1 | bc\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  #\n  # Hint: you can use the following command to\
    \ get the closest integer\n  # to a number:\n  #\n  #     printf \"%.0f\" $1\n\
    \  #\n  # This command prints the number with no decimal places.\n  #\n  # Hint:\
    \ you can use the following command to get the absolute value\n  # of a number:\n\
    \  #\n  #     printf \"%.0f\" $(echo \"$1\" | awk '{print $1 * -1}')\n  #\n  #\
    \ This command prints the number with no decimal places and multiplies\n  # it\
    \ by -1.\n  #\n  # Hint: you can use the following command to get the sign of\
    \ a number:\n  #\n  #     echo \"$1\" | awk '{print $1 / abs($1)}'\n  #\n  # This\
    \ command prints 1 if the number is positive and -1 if the number\n  # is negative.\n\
    \  #\n  # Hint: you can use the following command to get the decimal part of\n\
    \  # a number:\n  #\n  #     echo \"$1\" | awk '{print $1 - int($1)}'\n  #\n \
    \ # This command prints the number minus the integer part of the number.\n  #\n\
    \  # Hint: you can use the following command to get the integer part of\n  # a\
    \ number:\n  #\n  #     echo \"$1\" | awk '{print int($1)}'\n  #\n  # This command\
    \ prints the integer part of the number.\n  #\n  # Hint: you can use the following\
    \ command to get the fractional part\n  # of a number:\n  #\n  #     echo \"$1\"\
    \ | awk '{print $1 - int($1)}'\n  #\n  # This command prints the number minus\
    \ the integer part of the number.\n  #\n  # Hint: you can use the following command\
    \ to get the fractional part\n  # of a number:\n  #\n  #     echo \"$1\" | awk\
    \ '{print $1 - int($1)}'\n  #\n  # This command prints the number minus the integer\
    \ part of the number.\n  #\n  #\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi6ciunbh.sh: line 71: syntax error near unexpected token `}''

    /tmp/tmpi6ciunbh.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Round\
    \ the number to the nearest integer\n    local rounded=$(printf \"%.0f\" \"$1\"\
    )\n    # If the number is equidistant from two integers, round it away from zero\n\
    \    if (( $(echo \"$1 - $rounded\" | bc -l) == 0.5 )); then\n        if (( $rounded\
    \ < 0 )); then\n            (( rounded-- ))\n        else\n            (( rounded++\
    \ ))\n        fi\n    fi\n    echo \"$rounded\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbb9utpid.sh: line 21: ((: 0 == 0.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    /tmp/tmpbb9utpid.sh: line 21: ((: .5 == 0.5 : syntax error: operand expected (error
    token is ".5 == 0.5 ")

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # The bash builtin\
    \ command `printf` can be used to format numbers.\n    #\n    # $ printf \"%.0f\"\
    \ 14.5\n    # 15\n    # $ printf \"%.0f\" -14.5\n    # -15\n    #\n    # The bash\
    \ builtin command `bc` can be used to perform floating point\n    # arithmetic.\n\
    \    #\n    # $ echo \"14.5\" | bc\n    # 14.5\n    # $ echo \"14.5 + 1\" | bc\n\
    \    # 15.5\n    #\n    # The bash builtin command `tr` can be used to translate\
    \ characters.\n    #\n    # $ echo \"14.5\" | tr \".\" \" \"\n    # 14 5\n   \
    \ #\n    # The bash builtin command `cut` can be used to extract a portion of\
    \ a\n    # string.\n    #\n    # $ echo \"14.5\" | cut -d \".\" -f 1\n    # 14\n\
    \    #\n    # The bash builtin command `sed` can be used to replace characters.\n\
    \    #\n    # $ echo \"14.5\" | sed \"s/\\./ /\"\n    # 14 5\n    #\n    # The\
    \ bash builtin command `awk` can be used to perform arithmetic.\n    #\n    #\
    \ $ echo \"14.5\" | awk '{print $1 + 1}'\n    # 15.5\n    #\n    # The bash builtin\
    \ command `expr` can be used to perform arithmetic.\n    #\n    # $ expr 14.5\
    \ + 1\n    # 15.5\n    #\n    # The bash builtin command `bc` can be used to perform\
    \ floating point\n    # arithmetic.\n    #\n    # $ echo \"14.5\" | bc\n    #\
    \ 14.5\n    # $\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvz2nu_or.sh: line 71: syntax error near unexpected token `}''

    /tmp/tmpvz2nu_or.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ following line is a hack to get around the fact that bash\n  # doesn't have\
    \ a built-in round function.\n  # It works by adding 0.5 to the number, then truncating\
    \ it.\n  # For example, if the number is 14.5, it will add 0.5 to it,\n  # giving\
    \ 15, then truncate it, giving 15.\n  # If the number is -14.5, it will add 0.5\
    \ to it, giving -14,\n  # then truncate it, giving -14.\n  # If the number is\
    \ 14.4, it will add 0.5 to it, giving 14.9,\n  # then truncate it, giving 14.\n\
    \  # If the number is -14.4, it will add 0.5 to it, giving -14.9,\n  # then truncate\
    \ it, giving -14.\n  # This is a hack, but it works.\n  #\n  # The following line\
    \ is a hack to get around the fact that bash\n  # doesn't have a built-in round\
    \ function.\n  # It works by adding 0.5 to the number, then truncating it.\n \
    \ # For example, if the number is 14.5, it will add 0.5 to it,\n  # giving 15,\
    \ then truncate it, giving 15.\n  # If the number is -14.5, it will add 0.5 to\
    \ it, giving -14,\n  # then truncate it, giving -14.\n  # If the number is 14.4,\
    \ it will add 0.5 to it, giving 14.9,\n  # then truncate it, giving 14.\n  # If\
    \ the number is -14.4, it will add 0.5 to it, giving -14.9,\n  # then truncate\
    \ it, giving -14.\n  # This is a hack, but it works.\n  echo $(( $1 + 0.5 ))\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo64r3drw.sh: line 43: 10 + 0.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ num=$1\n    local int=$(printf \"%.0f\" \"$num\")\n    local diff=$(echo \"\
    $num - $int\" | bc -l)\n    if (( $(echo \"$diff > 0\" | bc -l) )); then\n   \
    \     if (( $(echo \"$diff < 0.5\" | bc -l) )); then\n            echo \"$int\"\
    \n        else\n            echo \"$((int + 1))\"\n        fi\n    else\n    \
    \    if (( $(echo \"$diff > -0.5\" | bc -l) )); then\n            echo \"$int\"\
    \n        else\n            echo \"$((int - 1))\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # Use echo to print to stdout\n  # Use printf to print to\
    \ stderr\n  #\n  # For example:\n  # echo \"Hello, world!\"\n  # printf \"Error:\
    \ %s\\n\" \"Something went wrong\" >&2\n  #\n  # Note:\n  # If you want to print\
    \ a string that contains spaces, you need to\n  # wrap it in quotes. For example:\n\
    \  # echo \"Hello, world!\"\n  #\n  # If you want to print a string that contains\
    \ quotes, you need to\n  # escape the quotes. For example:\n  # echo \"\\\"Hello,\
    \ world!\\\"\"\n  #\n  # If you want to print a string that contains both spaces\
    \ and quotes,\n  # you need to wrap it in quotes and escape the quotes. For example:\n\
    \  # echo \"\\\"Hello, world!\\\"\"\n  #\n  # If you want to print a string that\
    \ contains a dollar sign, you need\n  # to escape the dollar sign. For example:\n\
    \  # echo \"\\$5.00\"\n  #\n  # If you want to print a string that contains both\
    \ a dollar sign and\n  # quotes, you need to escape both the dollar sign and the\
    \ quotes. For\n  # example:\n  # echo \"\\\"\\$5.00\\\"\"\n  #\n  # If you want\
    \ to print a string that contains a backslash, you need to\n  # escape the backslash.\
    \ For example:\n  # echo \"\\\\\"\n  #\n  # If you want to print a string that\
    \ contains both a backslash and\n  # quotes, you need to escape both the backslash\
    \ and the quotes. For\n  # example:\n  # echo \"\\\"\\\\\\\"\"\n  #\n  # If you\
    \ want to print a string that contains a backslash and a dollar\n  # sign, you\
    \ need to escape both the backslash and the dollar sign. For\n  # example:\n \
    \ # echo \"\\\\\\$5.00\"\n  #\n  # If you want to print a string that contains\
    \ a backslash, a dollar\n  # sign, and quotes, you need to escape the backslash,\
    \ the dollar sign,\n  # and the quotes. For example:\n \n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpas1r00y9.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpas1r00y9.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Get\
    \ the integer part of the number\n  integer=$(echo $1 | cut -d. -f1)\n  # Get\
    \ the decimal part of the number\n  decimal=$(echo $1 | cut -d. -f2)\n  # If the\
    \ decimal part is greater than or equal to 5, add 1 to the integer\n  if [ $decimal\
    \ -ge 5 ]; then\n    echo $((integer + 1))\n  # Otherwise, just return the integer\n\
    \  else\n    echo $integer\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ Write your code here\n    # Hint: You can use the bc command to do floating\
    \ point arithmetic.\n    # For example, \"echo '10 / 3' | bc\" will return \"\
    3.33333333333333\".\n    # You can also use \"echo '10 % 3' | bc\" to return the\
    \ remainder\n    # of the division.\n    #\n    # You can use the command \"echo\
    \ 'scale=3; 10 / 3' | bc\" to return\n    # a floating point number with 3 decimal\
    \ places.\n    #\n    # You can use the command \"echo '10 / 3' | bc | cut -d\
    \ '.' -f 1\"\n    # to return the integer part of the result.\n    #\n    # You\
    \ can use the command \"echo '10 / 3' | bc | cut -d '.' -f 2\"\n    # to return\
    \ the decimal part of the result.\n    #\n    # You can use the command \"echo\
    \ '10 / 3' | bc | cut -d '.' -f 2 | wc -c\"\n    # to return the number of digits\
    \ in the decimal part of the result.\n    #\n    # You can use the command \"\
    echo '10 / 3' | bc | cut -d '.' -f 2 | cut -c 1\"\n    # to return the first digit\
    \ of the decimal part of the result.\n    #\n    # You can use the command \"\
    echo '10 / 3' | bc | cut -d '.' -f 2 | cut -c 2\"\n    # to return the second\
    \ digit of the decimal part of the result.\n    #\n    # You can use the command\
    \ \"echo '10 / 3' | bc | cut -d '.' -f 2 | cut -c 3\"\n    # to return the third\
    \ digit of the decimal part of the result.\n    #\n    # You can use the command\
    \ \"echo '10 / 3' | bc | cut -d '.' -f 2 | cut -c 4\"\n    # to return the fourth\
    \ digit of the decimal part of the result.\n    #\n    # You can use the command\
    \ \"echo '10 / 3' | bc | cut -d '.' -f 2 | cut -c 5\"\n    # to return the fifth\
    \ digit of the decimal part of the result.\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpalhags2w.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpalhags2w.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Use\
    \ awk to round the number to the nearest integer.\n  # Use printf to format the\
    \ number as a string.\n  printf \"%s\" \"$(awk '{printf \"%d\", $1}' <<< \"$1\"\
    )\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  echo\
    \ $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[\
    \ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n\
    \    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Use\
    \ bc to perform floating point arithmetic\n    # -l loads the math library\n \
    \   # -e sets the expression to evaluate\n    # The expression is a ternary operator\
    \ that checks if the number is\n    # greater than or equal to 0. If it is, it\
    \ adds 0.5 and rounds down\n    # using the int() function. If it is not, it subtracts\
    \ 0.5 and rounds\n    # up using the int() function.\n    echo \"$(bc -l <<< \"\
    $1 >= 0 ? $1 + 0.5 : $1 - 0.5\" | xargs printf \"%.0f\")\"\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: illegal character: ?

    (standard_in) 1: syntax error

    (standard_in) 1: illegal character: :

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ num=$1\n    local int=$(printf \"%.0f\" \"$num\")\n    local dec=$(printf \"\
    %.1f\" \"$num\")\n    local diff=$(echo \"$dec - $int\" | bc)\n    if [[ $diff\
    \ -eq 0 ]]; then\n        echo \"$int\"\n    elif [[ $diff -eq 0.5 ]]; then\n\
    \        if [[ $num -lt 0 ]]; then\n            echo \"$((int - 1))\"\n      \
    \  else\n            echo \"$((int + 1))\"\n        fi\n    else\n        echo\
    \ \"$int\"\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgazlvbao.sh: line 22: [[: .5: syntax error: operand expected (error
    token is ".5")

    /tmp/tmpgazlvbao.sh: line 24: [[: .5: syntax error: operand expected (error token
    is ".5")

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=\"$1\"\n    local integer=$(echo \"$number\" | cut -d. -f1)\n    local\
    \ decimal=$(echo \"$number\" | cut -d. -f2)\n    if [ -z \"$decimal\" ]; then\n\
    \        echo \"$integer\"\n    elif [ \"$decimal\" -lt 5 ]; then\n        echo\
    \ \"$integer\"\n    else\n        echo $((integer + 1))\n    fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n   \
    \ closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"15\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # $1 is a string\n\
    \    #\n    # Example:\n    # >>> closest_integer \"14.5\"\n    # 15\n    # >>>\
    \ closest_integer \"-14.5\"\n    # -15\n    # >>> closest_integer \"14.4\"\n \
    \   # 14\n    # >>> closest_integer \"-14.4\"\n    # -14\n    # >>> closest_integer\
    \ \"14.6\"\n    # 15\n    # >>> closest_integer \"-14.6\"\n    # -15\n    # >>>\
    \ closest_integer \"14.5\"\n    # 15\n    # >>> closest_integer \"-14.5\"\n  \
    \  # -15\n    # >>> closest_integer \"14.4\"\n    # 14\n    # >>> closest_integer\
    \ \"-14.4\"\n    # -14\n    # >>> closest_integer \"14.6\"\n    # 15\n    # >>>\
    \ closest_integer \"-14.6\"\n    # -15\n    # >>> closest_integer \"14.5\"\n \
    \   # 15\n    # >>> closest_integer \"-14.5\"\n    # -15\n    # >>> closest_integer\
    \ \"14.4\"\n    # 14\n    # >>> closest_integer \"-14.4\"\n    # -14\n    # >>>\
    \ closest_integer \"14.6\"\n    # 15\n    # >>> closest_integer \"-14.6\"\n  \
    \  # -15\n    # >>> closest_integer \"14.5\"\n    # 15\n    # >>> closest_integer\
    \ \"-14.5\"\n    # -15\n    # >>> closest_integer \"14.4\"\n    # 14\n    # >>>\
    \ closest_integer \"-14.4\"\n    # -14\n    # >>> closest_integer \"14.6\"\n \
    \   # 15\n    # >>> closest_integer \"-14.6\"\n    # -15\n   \n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnjkj5_1g.sh: line 76: syntax error near unexpected token `}''

    /tmp/tmpnjkj5_1g.sh: line 76: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ your code here\n    # Hint: use bc\n    echo \"$1\" | bc\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ implement this function\n    # Hint: you can use the built-in command `bc` to\
    \ do floating point\n    # arithmetic.\n    #\n    # Example:\n    # $ echo \"\
    10.5 + 10.5\" | bc\n    # 21\n    #\n    # $ echo \"10.5 - 10.5\" | bc\n    #\
    \ 0\n    #\n    # $ echo \"10.5 * 10.5\" | bc\n    # 110.25\n    #\n    # $ echo\
    \ \"10.5 / 10.5\" | bc\n    # 1\n    #\n    # $ echo \"10.5 % 10.5\" | bc\n  \
    \  # 0\n    #\n    # $ echo \"10.5 ^ 10.5\" | bc\n    # 7.874007874011811e+03\n\
    \    #\n    # $ echo \"sqrt(10.5)\" | bc\n    # 3.23606797749979\n    #\n    #\
    \ $ echo \"scale=2; 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2;\
    \ 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2; 10.5 / 3\" | bc\n\
    \    # 3.50\n    #\n    # $ echo \"scale=2; 10.5 / 3\" | bc\n    # 3.50\n    #\n\
    \    # $ echo \"scale=2; 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2;\
    \ 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2; 10.5 / 3\" | bc\n\
    \    # 3.50\n    #\n    # $ echo \"scale=2; 10.5 / 3\" | bc\n    # 3.50\n    #\n\
    \    # $ echo \"scale=2; 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2;\
    \ 10.5 / 3\" | bc\n    # 3.50\n    #\n    # $ echo \"scale=2; 10.5 / 3\" | bc\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzo5lz8h0.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmpzo5lz8h0.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    echo\
    \ \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ implement the function\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    local\
    \ number=$1\n    local integer=$(echo $number | cut -d. -f1)\n    local decimal=$(echo\
    \ $number | cut -d. -f2)\n    if [ -z \"$decimal\" ]; then\n        echo $integer\n\
    \    else\n        if [ \"$decimal\" -ge 5 ]; then\n            echo $((integer\
    \ + 1))\n        else\n            echo $integer\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # The number is equidistant\
    \ from two integers if the decimal part of the\n    # number is exactly 0.5.\n\
    \    #\n    # The decimal part of the number is the number minus the integer part\
    \ of\n    # the number.\n    #\n    # The integer part of the number is the number\
    \ rounded down to the\n    # nearest integer.\n    #\n    # The number rounded\
    \ down to the nearest integer is the number\n    # multiplied by 1.\n    #\n \
    \   # The number multiplied by 1 is the number.\n    #\n    # The number is the\
    \ number.\n    #\n    # The number minus the integer part of the number is the\
    \ number minus\n    # the number.\n    #\n    # The number minus the number is\
    \ 0.\n    #\n    # The number is 0.5 if the number minus the integer part of the\
    \ number\n    # is 0.5.\n    #\n    # The number is 0.5 if the number is 0.5.\n\
    \    #\n    # The number is 0.5 if the number is 0.5.\n    #\n    # The number\
    \ is 0.5 if the number is 0.5.\n    #\n    # The number is 0.5 if the number is\
    \ 0.5.\n    #\n    # The number is 0.5 if the number is 0.5.\n    #\n    # The\
    \ number is 0.5 if the number is 0.5.\n    #\n    # The number is 0.5 if the number\
    \ is 0.5.\n    #\n    # The number is 0.5 if the number is 0.5.\n    #\n    #\
    \ The number is 0.5 if the number is 0.5.\n    #\n    # The number is 0.5 if the\
    \ number is 0.5.\n    #\n    # The number is 0.5 if the number\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2nxc4s3j.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmp2nxc4s3j.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ If the number is negative, round it away from zero.\n    # If the number is\
    \ positive, round it away from zero.\n    # If the number is zero, return zero.\n\
    \    if [[ $1 =~ ^-?[0-9]+\\.[5]$ ]]; then\n        echo $(( $1 - 1 ))\n    elif\
    \ [[ $1 =~ ^-?[0-9]+\\.[5]$ ]]; then\n        echo $(( $1 + 1 ))\n    elif [[\
    \ $1 =~ ^-?[0-9]+$ ]]; then\n        echo $1\n    else\n        echo \"Error:\
    \ $1 is not a number.\"\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppry7mxyx.sh: line 23: 14.5 - 1 : syntax error: invalid arithmetic
    operator (error token is ".5 - 1 ")

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  # Hint: use the bash builtin command bc\n  # http://www.gnu.org/software/bc/manual/html_mono/bc.html\n\
    \  # and the bash builtin command printf\n  # http://www.tldp.org/LDP/abs/html/printf.html\n\
    \  # and the bash builtin command echo\n  # http://www.tldp.org/LDP/abs/html/echo.html\n\
    \  # and the bash builtin command test\n  # http://www.tldp.org/LDP/abs/html/testconstructs.html\n\
    \  # and the bash builtin command expr\n  # http://www.tldp.org/LDP/abs/html/expr.html\n\
    \  # and the bash builtin command cut\n  # http://www.tldp.org/LDP/abs/html/cut.html\n\
    \  # and the bash builtin command grep\n  # http://www.tldp.org/LDP/abs/html/grep.html\n\
    \  # and the bash builtin command wc\n  # http://www.tldp.org/LDP/abs/html/wc.html\n\
    \  # and the bash builtin command tr\n  # http://www.tldp.org/LDP/abs/html/tr.html\n\
    \  # and the bash builtin command sort\n  # http://www.tldp.org/LDP/abs/html/sort.html\n\
    \  # and the bash builtin command uniq\n  # http://www.tldp.org/LDP/abs/html/uniq.html\n\
    \  # and the bash builtin command head\n  # http://www.tldp.org/LDP/abs/html/head.html\n\
    \  # and the bash builtin command tail\n  # http://www.tldp.org/LDP/abs/html/tail.html\n\
    \  # and the bash builtin command seq\n  # http://www.tldp.org/LDP/abs/html/seq.html\n\
    \  # and the bash builtin command bc\n  # http://www.tldp.org/LDP/abs/html/bc\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprhkwgmmt.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmprhkwgmmt.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo \"Not yet implemented\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  # Hint: use the bash builtin command `bc` to perform\
    \ floating point\n  # arithmetic.\n  # Hint: use the bash builtin command `printf`\
    \ to format the output.\n  # Hint: use the bash builtin command `echo` to output\
    \ the result.\n  # Hint: use the bash builtin command `test` to check if a number\
    \ is\n  # positive or negative.\n  # Hint: use the bash builtin command `expr`\
    \ to perform integer\n  # arithmetic.\n  # Hint: use the bash builtin command\
    \ `cut` to extract the integer\n  # part of a number.\n  # Hint: use the bash\
    \ builtin command `sed` to remove the decimal\n  # part of a number.\n  # Hint:\
    \ use the bash builtin command `tr` to remove the decimal\n  # part of a number.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the bash builtin command `expr` to perform integer\n  # arithmetic.\n\
    \  # Hint: use the\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz94gb801.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmpz94gb801.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"15\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ Implement this function\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # Use echo to print to stdout\n  echo \"15\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  # Use echo to print result\n  echo $1 | awk '{printf(\"%d\\n\"\
    , $1)}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    if\
    \ [[ $1 =~ ^[0-9]+$ ]]; then\n        echo $1\n    else\n        echo $1 | awk\
    \ '{printf(\"%d\", $1)}'\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    if\
    \ [[ $1 =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n        # The number is a float\n   \
    \     # If the number is negative, we need to round it down\n        # If the\
    \ number is positive, we need to round it up\n        if [[ $1 =~ ^- ]]; then\n\
    \            # The number is negative\n            echo \"$(echo \"$1 - 0.5\"\
    \ | bc -l | cut -d '.' -f 1)\"\n        else\n            # The number is positive\n\
    \            echo \"$(echo \"$1 + 0.5\" | bc -l | cut -d '.' -f 1)\"\n       \
    \ fi\n    else\n        # The number is an integer\n        echo \"$1\"\n    fi\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Check\
    \ if the number is negative\n    if [[ $1 =~ ^- ]]; then\n        # If it is,\
    \ remove the minus sign\n        number=${1#-}\n        # Get the integer part\
    \ of the number\n        integer=$(echo $number | cut -d '.' -f 1)\n        #\
    \ Get the decimal part of the number\n        decimal=$(echo $number | cut -d\
    \ '.' -f 2)\n        # If the decimal part is greater than 0.5, add 1 to the integer\n\
    \        if [[ $decimal -gt 5 ]]; then\n            integer=$((integer + 1))\n\
    \        fi\n        # Add the minus sign back\n        echo -$integer\n    else\n\
    \        # If the number is positive, do the same as above\n        number=$1\n\
    \        integer=$(echo $number | cut -d '.' -f 1)\n        decimal=$(echo $number\
    \ | cut -d '.' -f 2)\n        if [[ $decimal -gt 5 ]]; then\n            integer=$((integer\
    \ + 1))\n        fi\n        echo $integer\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ first argument is the number to round\n  number=\"$1\"\n  # The second argument\
    \ is the rounding direction\n  direction=\"$2\"\n  # If the number is negative,\
    \ we need to round it away from zero\n  if [[ \"$number\" =~ ^- ]]; then\n   \
    \ direction=\"down\"\n  fi\n  # If the number is positive, we need to round it\
    \ away from zero\n  if [[ \"$number\" =~ ^[0-9] ]]; then\n    direction=\"up\"\
    \n  fi\n  # If the number is zero, we need to round it away from zero\n  if [[\
    \ \"$number\" =~ ^0 ]]; then\n    direction=\"up\"\n  fi\n  # If the number is\
    \ not a number, we need to round it away from zero\n  if [[ ! \"$number\" =~ ^[0-9]\
    \ ]]; then\n    direction=\"up\"\n  fi\n  # If the number is a number, we need\
    \ to round it away from zero\n  if [[ \"$number\" =~ ^[0-9] ]]; then\n    direction=\"\
    up\"\n  fi\n  # If the number is a number, we need to round it away from zero\n\
    \  if [[ \"$number\" =~ ^[0-9] ]]; then\n    direction=\"up\"\n  fi\n  # If the\
    \ number is a number, we need to round it away from zero\n  if [[ \"$number\"\
    \ =~ ^[0-9] ]]; then\n    direction=\"up\"\n  fi\n  # If the number is a number,\
    \ we need to round it away from zero\n  if [[ \"$number\" =~ ^[0-9] ]]; then\n\
    \    direction=\"up\"\n  fi\n  # If the number is a number, we need to round it\
    \ away from zero\n  if [[ \"$number\" =~ ^[0-9] ]]; then\n    direction=\"up\"\
    \n  fi\n  # If the number is a number, we need to round it away from zero\n  if\
    \ [[ \"$number\" =~ ^[0-9] ]]; then\n    direction=\"up\"\n  fi\n  # If the number\
    \ is a number, we need to round it away from zero\n  if [[ \"$number\" =~ ^[0-9]\
    \ ]]; then\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6d13uu1h.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmp6d13uu1h.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ implement this function\n    # Hint: use the bash builtin command `bc` to perform\
    \ floating point\n    # arithmetic.\n    # Hint: use the bash builtin command\
    \ `printf` to round the number\n    # to the nearest integer.\n    # Hint: use\
    \ the bash builtin command `echo` to return the result.\n    # Hint: use the bash\
    \ builtin command `awk` to convert the string\n    # to a number.\n    # Hint:\
    \ use the bash builtin command `test` to check if a number\n    # is positive\
    \ or negative.\n    # Hint: use the bash builtin command `expr` to perform arithmetic\n\
    \    # operations.\n    # Hint: use the bash builtin command `seq` to generate\
    \ a sequence\n    # of numbers.\n    # Hint: use the bash builtin command `sort`\
    \ to sort a sequence of\n    # numbers.\n    # Hint: use the bash builtin command\
    \ `head` to get the first element\n    # of a sequence of numbers.\n    # Hint:\
    \ use the bash builtin command `tail` to get the last element\n    # of a sequence\
    \ of numbers.\n    # Hint: use the bash builtin command `wc` to count the number\
    \ of\n    # elements in a sequence of numbers.\n    # Hint: use the bash builtin\
    \ command `tr` to convert a number to\n    # a string.\n    # Hint: use the bash\
    \ builtin command `read` to read a number from\n    # the standard input.\n  \
    \  # Hint: use the bash builtin command `echo` to write a number to\n    # the\
    \ standard output.\n    # Hint: use the bash builtin command `cat` to read a file.\n\
    \    # Hint: use the bash builtin command `rm` to delete a file.\n    # Hint:\
    \ use the bash builtin command `mktemp` to create a temporary\n    # file.\n \
    \   # Hint: use the bash builtin command `sort` to sort a sequence of\n    # numbers.\n\
    \    # Hint: use the bash builtin command `head` to get the first element\n  \
    \  # of a sequence of numbers.\n    # Hint: use the bash builtin command `tail`\
    \ to get\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp69hb7wqg.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmp69hb7wqg.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    printf\
    \ \"%d\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprool4691.sh: line 18: printf: 14.5: invalid number

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo \"Not yet implemented\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Not implemented yet\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # The\
    \ following line is a hack to get the absolute value of a number\n    # in bash.\
    \ It's not a very good one, but it works.\n    local abs_val=$(echo \"$1\" | sed\
    \ -e 's/^-//')\n    local floor=$(echo \"$abs_val\" | sed -e 's/\\..*//')\n  \
    \  local decimal=$(echo \"$abs_val\" | sed -e 's/^[0-9]*\\.//')\n    local sign=$(echo\
    \ \"$1\" | sed -e 's/^-//' -e 's/^.*//')\n    if [ \"$decimal\" -lt \"5\" ]; then\n\
    \        echo \"${sign}${floor}\"\n    else\n        echo \"${sign}$(($floor +\
    \ 1))\"\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    # Hint: use the bash builtin command `printf`\n    # See https://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html\n\
    \    # for more information on how to use `printf`\n    #\n    # Hint: use the\
    \ bash builtin command `bc`\n    # See https://www.gnu.org/software/bc/manual/html_mono/bc.html\n\
    \    # for more information on how to use `bc`\n    #\n    # Hint: use the bash\
    \ builtin command `echo`\n    # See https://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html\n\
    \    # for more information on how to use `echo`\n    #\n    # Hint: use the bash\
    \ builtin command `test`\n    # See https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\n\
    \    # for more information on how to use `test`\n    #\n    # Hint: use the bash\
    \ builtin command `expr`\n    # See https://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html\n\
    \    # for more information on how to use `expr`\n    #\n    # Hint: use the bash\
    \ builtin command `awk`\n    # See https://www.gnu.org/software/gawk/manual/gawk.html\n\
    \    # for more information on how to use `awk`\n    #\n    # Hint: use the bash\
    \ builtin command `cut`\n    # See https://www.gnu.org/software/coreutils/manual/html_node/cut-invocation.html\n\
    \    # for more information on how to use `cut`\n    #\n    # Hint: use the bash\
    \ builtin command `sed`\n    # See https://www.gnu.org/software/sed/manual/sed.html\n\
    \    # for more information on how to use `sed`\n    #\n    # Hint: use the bash\
    \ builtin command `tr`\n    # See https://www.gnu.org/software/core\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn8r_e11r.sh: line 53: syntax error near unexpected token `}''

    /tmp/tmpn8r_e11r.sh: line 53: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ following is a one-liner that uses the bc utility to\n  # perform the rounding.\n\
    \  #\n  # bc <<< \"scale=0; $1/1\"\n  #\n  # The following is a more verbose version\
    \ that does not use\n  # bc.\n  #\n  # First, check if the string is a number.\n\
    \  if [[ $1 =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then\n    # If it is, then check if\
    \ it is an integer.\n    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n      # If it is, then\
    \ return it.\n      echo \"$1\"\n    else\n      # If it is not, then check if\
    \ it is positive.\n      if [[ $1 =~ ^[0-9]+([.][0-9]+)?$ ]]; then\n        #\
    \ If it is, then round it up.\n        echo \"$((${1%.*}+1))\"\n      else\n \
    \       # If it is not, then round it down.\n        echo \"$((${1%.*}))\"\n \
    \     fi\n    fi\n  else\n    # If it is not a number, then return an error message.\n\
    \    echo \"Error: \\\"$1\\\" is not a number.\"\n  fi\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    echo\
    \ \"$1\" | awk '{printf \"%d\\n\", ($1>=0)?$1+0.5:$1-0.5}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Check\
    \ if the number is negative\n    if [[ $1 =~ ^- ]]; then\n        # If it is,\
    \ remove the minus sign and store the result in a variable\n        num=${1#-}\n\
    \        # Check if the number is a whole number\n        if [[ $num =~ ^[0-9]+$\
    \ ]]; then\n            # If it is, return the number with the minus sign\n  \
    \          echo \"-$num\"\n        else\n            # If it isn't, return the\
    \ number rounded down with the minus sign\n            echo \"-${num%.*}\"\n \
    \       fi\n    else\n        # If it isn't, check if the number is a whole number\n\
    \        if [[ $1 =~ ^[0-9]+$ ]]; then\n            # If it is, return the number\n\
    \            echo \"$1\"\n        else\n            # If it isn't, return the\
    \ number rounded up\n            echo \"${1%.*}\"\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\n\
    \    # The following command rounds the number to the nearest integer.\n    #\n\
    \    # $ echo \"15.3\" | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n    # 15\n    #\n\
    \    # The following command rounds the number to the nearest integer.\n    #\n\
    \    # $ echo \"-15.3\" | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n    # -15\n   \
    \ #\n    # The following command rounds the number to the nearest integer.\n \
    \   #\n    # $ echo \"15.8\" | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n    # 16\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"-15.8\" | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n    # -16\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"15.5\" | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n    # 16\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"-15.5\" | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n    # -16\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"15.0\" | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n    # 15\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"-15.0\" | awk '{printf(\"%d\\n\", $1 - 0.5)}'\n    # -15\n\
    \    #\n    # The following command rounds the number to the nearest integer.\n\
    \    #\n    # $ echo \"0.0\" | awk '{printf(\"%d\\n\", $1 + 0.5)}'\n    # 0\n\
    \   \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgzjl0vid.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpgzjl0vid.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ implement this function\n    # Hint: use the bc utility\n    # Hint: use the\
    \ printf utility\n    # Hint: use the abs function\n    # Hint: use the round\
    \ function\n    # Hint: use the ceil function\n    # Hint: use the floor function\n\
    \    # Hint: use the if statement\n    # Hint: use the else statement\n    # Hint:\
    \ use the elif statement\n    # Hint: use the test utility\n    # Hint: use the\
    \ -eq operator\n    # Hint: use the -lt operator\n    # Hint: use the -gt operator\n\
    \    # Hint: use the -le operator\n    # Hint: use the -ge operator\n    # Hint:\
    \ use the -ne operator\n    # Hint: use the -o operator\n    # Hint: use the -a\
    \ operator\n    # Hint: use the -z operator\n    # Hint: use the -n operator\n\
    \    # Hint: use the -e operator\n    # Hint: use the -f operator\n    # Hint:\
    \ use the -d operator\n    # Hint: use the -s operator\n    # Hint: use the -w\
    \ operator\n    # Hint: use the -x operator\n    # Hint: use the -L operator\n\
    \    # Hint: use the -O operator\n    # Hint: use the -G operator\n    # Hint:\
    \ use the -nt operator\n    # Hint: use the -ot operator\n    # Hint: use the\
    \ -ef operator\n    # Hint: use the -o operator\n    # Hint: use the -a operator\n\
    \    # Hint: use the -z operator\n    # Hint: use the -n operator\n    # Hint:\
    \ use the -e operator\n    # Hint: use the -f operator\n    # Hint: use the -d\
    \ operator\n    # Hint: use the -s operator\n    # Hint: use the -w operator\n\
    \    # Hint: use the -x operator\n    # Hint: use the -L operator\n    # Hint:\
    \ use the -O operator\n    # Hint: use the -G operator\n    # Hint: use the -nt\
    \ operator\n    # Hint\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsxle7t0e.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmpsxle7t0e.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # If\
    \ the number is equidistant from two integers, round it away from zero.\n  if\
    \ [[ $1 =~ ^-?[0-9]+\\.[5]$ ]]; then\n    # If the number is negative, round it\
    \ down.\n    if [[ $1 =~ ^- ]]; then\n      echo $(( $1 - 1 ))\n    else\n   \
    \   echo $(( $1 + 1 ))\n    fi\n  else\n    echo $(( $1 ))\n  fi\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjm5_mgdn.sh: line 24: 14.5 + 1 : syntax error: invalid arithmetic
    operator (error token is ".5 + 1 ")

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=\"$1\"\n  local integer=\"${number%.*}\"\n  local decimal=\"${number##*.}\"\
    \n  if [ \"$decimal\" -ge 5 ]; then\n    (( integer++ ))\n  fi\n  echo \"$integer\"\
    \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\"\
    \ ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsr_fgo38.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpsr_fgo38.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ If the number is negative, round it away from zero.\n    # If the number is\
    \ positive, round it away from zero.\n    # If the number is zero, return zero.\n\
    \    if [[ $1 =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n        if [[ $1 =~ ^- ]]; then\n\
    \            echo \"$(echo \"$1 - 0.5\" | bc | cut -d '.' -f 1)\"\n        else\n\
    \            echo \"$(echo \"$1 + 0.5\" | bc | cut -d '.' -f 1)\"\n        fi\n\
    \    else\n        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%.0f\", $1}'\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        echo $1\n    else\n  \
    \      echo $(echo $1 | cut -d. -f1)\n    fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ Implement this function\n  echo \"Not yet implemented\"\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ number of decimal places in the number\n  local decimal_places=$(echo $1 | cut\
    \ -d. -f2 | wc -c)\n  # The number of places to shift the decimal point\n  local\
    \ shift=$((decimal_places - 1))\n  # The number of places to shift the decimal\
    \ point\n  local shift=$((decimal_places - 1))\n  # The number of places to shift\
    \ the decimal point\n  local shift=$((decimal_places - 1))\n  # The number of\
    \ places to shift the decimal point\n  local shift=$((decimal_places - 1))\n \
    \ # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n  # The number of places to shift the decimal point\n  local shift=$((decimal_places\
    \ - 1))\n\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # The\
    \ number is equidistant from two integers\n  # round it away from zero\n  if [[\
    \ $1 =~ ^-?[0-9]+\\.[5]$ ]]; then\n    # If the number is negative\n    if [[\
    \ $1 =~ ^- ]]; then\n      # Remove the negative sign\n      local number=${1#-}\n\
    \      # Remove the decimal point\n      number=${number%.*}\n      # Subtract\
    \ 1 from the number\n      number=$((number - 1))\n      # Add the negative sign\
    \ back\n      echo \"-$number\"\n    else\n      # Remove the decimal point\n\
    \      local number=${1%.*}\n      # Add 1 to the number\n      number=$((number\
    \ + 1))\n      echo \"$number\"\n    fi\n  else\n    # Remove the decimal point\n\
    \    echo \"${1%.*}\"\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # The\
    \ number of decimal places to round to\n    local -i precision=0\n    # The number\
    \ of decimal places in the given number\n    local -i decimal_places=0\n    #\
    \ The given number\n    local -r number=\"$1\"\n    # The number of decimal places\
    \ in the given number\n    decimal_places=$(echo \"$number\" | awk -F. '{print\
    \ NF-1}')\n    # If the number has no decimal places, return it\n    if [[ $decimal_places\
    \ -eq 0 ]]; then\n        echo \"$number\"\n        return\n    fi\n    # If the\
    \ number has decimal places, round it to the nearest integer\n    # and return\
    \ it\n    precision=$((decimal_places - 1))\n    echo \"$number\" | awk -v precision=\"\
    $precision\" '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf(\"%d\\n\",$1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Convert\
    \ the string to a number\n    local number=$(echo \"$1\" | bc -l)\n    # Round\
    \ the number\n    local rounded=$(echo \"scale=0; $number/1\" | bc)\n    # Print\
    \ the rounded number\n    echo \"$rounded\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # Use echo to print to stdout\n  # Use printf to print to\
    \ stderr\n  printf \"Not yet implemented\" 1>&2\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: Not yet implemented
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # round()\
    \ is a bash builtin function that rounds a floating point\n    # number to the\
    \ nearest integer.\n    #\n    # $1 is a floating point number\n    round() {\n\
    \        # The following expression is a bash arithmetic expansion.\n        #\
    \ It evaluates the expression in the parentheses and returns\n        # the result.\n\
    \        #\n        # The expression is a ternary operator. It takes the form\n\
    \        #\n        #   condition ? value_if_true : value_if_false\n        #\n\
    \        # If the condition is true, the value_if_true is returned,\n        #\
    \ otherwise the value_if_false is returned.\n        #\n        # In this case,\
    \ the condition is the expression\n        #\n        #   $1 >= 0\n        #\n\
    \        # which is true if $1 is greater than or equal to zero.\n        #\n\
    \        # If the condition is true, the value_if_true is the expression\n   \
    \     #\n        #   $1 + 0.5\n        #\n        # which adds 0.5 to $1.\n  \
    \      #\n        # If the condition is false, the value_if_false is the expression\n\
    \        #\n        #   $1 - 0.5\n        #\n        # which subtracts 0.5 from\
    \ $1.\n        #\n        # The result of the arithmetic expansion is then passed\
    \ to the\n        # builtin command printf which prints the result to stdout.\n\
    \        #\n        # The printf command is given the format string \"%d\" which\n\
    \        # specifies that the result should be printed as an integer.\n      \
    \  #\n        # The printf command is given the option \"-n\" which suppresses\n\
    \        # the trailing newline that printf would normally print.\n        #\n\
    \        # The printf command is given the option \"-v\" which tells it\n    \
    \    # to store the result in the variable named by the next\n        # argument.\
    \ In this case, the variable is named \"result\".\n        #\n        # The result\
    \ of the printf command is the return value of the\n        # round() function.\n\
    \        printf -v result \"%d\" $(($1 >= 0 ? $1 + 0.5 : $1 - 0.5))\n        echo\
    \ $result\n    }\n\n    # The following expression is a bash arithmetic expansion.\n\
    \   \n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ If the number is negative, round it away from zero.\n    # If the number is\
    \ positive, round it away from zero.\n    # If the number is zero, return zero.\n\
    \    if [[ $1 =~ ^-?[0-9]+\\.[5]+$ ]]; then\n        echo $(( $1 + 1 ))\n    elif\
    \ [[ $1 =~ ^-?[0-9]+\\.[5]+$ ]]; then\n        echo $(( $1 - 1 ))\n    elif [[\
    \ $1 =~ ^-?[0-9]+\\.[0-9]+$ ]]; then\n        echo $(( $1 + 0 ))\n    else\n \
    \       echo $1\n    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjrz0sq4b.sh: line 23: 14.5 + 1 : syntax error: invalid arithmetic
    operator (error token is ".5 + 1 ")

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $(echo $1 | awk '{printf(\"%d\\n\", $1)}')\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ Implement this function\n    # Hint: You may want to use the bc command.\n \
    \   #       bc is a calculator that can do floating point arithmetic.\n    # \
    \      For example, \"echo '2.5 + 3.5' | bc\" will output \"6.0\".\n    #    \
    \   You can also use bc to do rounding.\n    #       For example, \"echo 'scale=0;\
    \ (2.5 + 3.5) / 2' | bc\" will output \"3\".\n    #       You can also use bc\
    \ to do comparisons.\n    #       For example, \"echo '2.5 > 3.5' | bc\" will\
    \ output \"0\".\n    #       You can also use bc to do comparisons.\n    #   \
    \    For example, \"echo '2.5 > 3.5' | bc\" will output \"0\".\n    #       You\
    \ can also use bc to do comparisons.\n    #       For example, \"echo '2.5 > 3.5'\
    \ | bc\" will output \"0\".\n    #       You can also use bc to do comparisons.\n\
    \    #       For example, \"echo '2.5 > 3.5' | bc\" will output \"0\".\n    #\
    \       You can also use bc to do comparisons.\n    #       For example, \"echo\
    \ '2.5 > 3.5' | bc\" will output \"0\".\n    #       You can also use bc to do\
    \ comparisons.\n    #       For example, \"echo '2.5 > 3.5' | bc\" will output\
    \ \"0\".\n    #       You can also use bc to do comparisons.\n    #       For\
    \ example, \"echo '2.5 > 3.5' | bc\" will output \"0\".\n    #       You can also\
    \ use bc to do comparisons.\n    #       For example, \"echo '2.5 > 3.5' | bc\"\
    \ will output \"0\".\n    #       You can also use bc to do comparisons.\n   \
    \ #       For example, \"echo '2.5 > 3.5' | bc\" will output \"0\".\n    #   \
    \    You can also use bc to do comparisons.\n    #       For example, \"echo '2.5\
    \ > 3.5' | bc\" will output \"0\".\n    #       You can also use\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5a6gmyx_.sh: line 45: syntax error near unexpected token `}''

    /tmp/tmp5a6gmyx_.sh: line 45: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo $1 | awk\
    \ '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ Implement this function\n  # Hint: Use the built-in bc command\n  # Hint: Use\
    \ the built-in printf command\n  # Hint: Use the built-in echo command\n  # Hint:\
    \ Use the built-in cut command\n  # Hint: Use the built-in tr command\n  # Hint:\
    \ Use the built-in sed command\n  # Hint: Use the built-in grep command\n  # Hint:\
    \ Use the built-in awk command\n  # Hint: Use the built-in sort command\n  # Hint:\
    \ Use the built-in uniq command\n  # Hint: Use the built-in head command\n  #\
    \ Hint: Use the built-in tail command\n  # Hint: Use the built-in wc command\n\
    \  # Hint: Use the built-in xargs command\n  # Hint: Use the built-in tr command\n\
    \  # Hint: Use the built-in cut command\n  # Hint: Use the built-in sort command\n\
    \  # Hint: Use the built-in uniq command\n  # Hint: Use the built-in head command\n\
    \  # Hint: Use the built-in tail command\n  # Hint: Use the built-in wc command\n\
    \  # Hint: Use the built-in xargs command\n  # Hint: Use the built-in tr command\n\
    \  # Hint: Use the built-in cut command\n  # Hint: Use the built-in sort command\n\
    \  # Hint: Use the built-in uniq command\n  # Hint: Use the built-in head command\n\
    \  # Hint: Use the built-in tail command\n  # Hint: Use the built-in wc command\n\
    \  # Hint: Use the built-in xargs command\n  # Hint: Use the built-in tr command\n\
    \  # Hint: Use the built-in cut command\n  # Hint: Use the built-in sort command\n\
    \  # Hint: Use the built-in uniq command\n  # Hint: Use the built-in head command\n\
    \  # Hint: Use the built-in tail command\n  # Hint: Use the built-in wc command\n\
    \  # Hint: Use the built-\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoquzs8c4.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmpoquzs8c4.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # The\
    \ number of decimal places to round to\n    local -i num_decimal_places=0\n  \
    \  # The number of decimal places in the number\n    local -i num_decimal_places_in_number=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded_rounded_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded=0\n\
    \    # The number of decimal places in the number\n    local -i num_decimal_places_in_number_rounded_away_from_zero\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    printf\
    \ \"%d\" \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprool4691.sh: line 18: printf: 14.5: invalid number

    '
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Your\
    \ code here\n    echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # If\
    \ the number is equidistant from two integers, round it away from zero.\n    #\
    \ Rounding away from zero means that if the given number is equidistant\n    #\
    \ from two integers, the one you should return is the one that is the\n    # farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n    # return 15 and\
    \ closest_integer(\"-14.5\") should return -15.\n    #\n    # The following command\
    \ will round a number to the nearest integer.\n    # If the number is equidistant\
    \ from two integers, round it away from zero.\n    #\n    #   printf \"%.0f\"\
    \ $1\n    #\n    # The following command will round a number to the nearest integer.\n\
    \    # If the number is equidistant from two integers, round it to the nearest\n\
    \    # even integer.\n    #\n    #   printf \"%.0f\" $1\n    #\n    # The following\
    \ command will round a number to the nearest integer.\n    # If the number is\
    \ equidistant from two integers, round it to the nearest\n    # odd integer.\n\
    \    #\n    #   printf \"%.0f\" $1\n    #\n    # The following command will round\
    \ a number to the nearest integer.\n    # If the number is equidistant from two\
    \ integers, round it to the nearest\n    # integer that is greater than the original\
    \ number.\n    #\n    #   printf \"%.0f\" $1\n    #\n    # The following command\
    \ will round a number to the nearest integer.\n    # If the number is equidistant\
    \ from two integers, round it to the nearest\n    # integer that is less than\
    \ the original number.\n    #\n    #   printf \"%.0f\" $1\n    #\n    # The following\
    \ command will round a number to the nearest integer.\n    # If the number is\
    \ equidistant from two integers, round it to the nearest\n    # integer that is\
    \ greater than the original number.\n    #\n    #   printf \"%.0f\" $1\n    #\n\
    \    # The following command will round a number to the nearest integer.\n   \
    \ # If the number is equidistant from two integers, round it to the nearest\n\
    \    # integer that is less than the original number.\n    #\n    #  \n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyhwvk_w9.sh: line 64: syntax error near unexpected token `}''

    /tmp/tmpyhwvk_w9.sh: line 64: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # TODO:\
    \ implement this function\n    echo \"Not implemented\"\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{print int($1+0.5)}'\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=\"$1\"\n  local int_part=\"${number%.*}\"\n  local dec_part=\"${number#*.}\"\
    \n  if [ \"$dec_part\" -ge 5 ]; then\n    echo \"$((int_part + 1))\"\n  else\n\
    \    echo \"$int_part\"\n  fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To debug: echo \"Debug messages...\" >&2\n  echo \"$1\"\n\
    }\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  # hint: use awk\n  #\n  # awk 'BEGIN {\n  #   print int($1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1)\n  #\
    \ }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n  # awk 'BEGIN {\n  #   printf(\"%d\\n\", $1 + 0.5)\n\
    \  # }'\n  #\n  # or\n  #\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppxzulvvf.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmppxzulvvf.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"15\"\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Get\
    \ the integer part of the number\n    local int_part=$(echo \"$1\" | cut -d. -f1)\n\
    \    # Get the decimal part of the number\n    local dec_part=$(echo \"$1\" |\
    \ cut -d. -f2)\n    # If the decimal part is greater than or equal to 0.5, add\
    \ 1 to the\n    # integer part.\n    if [ \"$dec_part\" -ge 5 ]; then\n      \
    \  int_part=$((int_part + 1))\n    fi\n    echo \"$int_part\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Check\
    \ if the number is negative\n    if [[ $1 =~ ^- ]]; then\n        # If it is,\
    \ remove the minus sign\n        local number=${1#-}\n        # Get the integer\
    \ part of the number\n        local int_part=${number%.*}\n        # Get the decimal\
    \ part of the number\n        local dec_part=${number#*.}\n        # If the decimal\
    \ part is greater than or equal to 0.5, add 1 to the integer part\n        if\
    \ [[ $dec_part -ge 5 ]]; then\n            ((int_part++))\n        fi\n      \
    \  # Add the minus sign back to the integer part\n        echo -$int_part\n  \
    \  else\n        # If the number is positive, do the same as above\n        local\
    \ int_part=${1%.*}\n        local dec_part=${1#*.}\n        if [[ $dec_part -ge\
    \ 5 ]]; then\n            ((int_part++))\n        fi\n        echo $int_part\n\
    \    fi\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # if\
    \ the number is negative, we need to round down\n  # otherwise, we need to round\
    \ up\n  if [[ $1 =~ ^- ]]; then\n    echo $1 | awk '{printf(\"%d\", $1)}'\n  else\n\
    \    echo $1 | awk '{printf(\"%d\", $1+0.5)}'\n  fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Use\
    \ bc to convert the string to a number\n    # Use printf to convert the number\
    \ to a string\n    # Use awk to round the number\n    printf \"%d\" $(echo \"\
    $1\" | bc -l | awk '{printf(\"%d\\n\",$1+=$1<0?-0.5:0.5)}')\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # your\
    \ code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  if [[\
    \ $1 == *.* ]]; then\n    echo $1 | cut -d. -f1\n  else\n    echo $1\n  fi\n}\n\
    \ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n\
    \    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"\
    15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  # Hint: use awk\n  # Hint: use the absolute value\
    \ function\n  # Hint: use the round function\n  # Hint: use the ceiling function\n\
    \  # Hint: use the floor function\n  # Hint: use the ternary operator\n  # Hint:\
    \ use the sign function\n  # Hint: use the printf function\n  # Hint: use the\
    \ if statement\n  # Hint: use the else statement\n  # Hint: use the else if statement\n\
    \  # Hint: use the if statement\n  # Hint: use the else statement\n  # Hint: use\
    \ the else if statement\n  # Hint: use the if statement\n  # Hint: use the else\
    \ statement\n  # Hint: use the else if statement\n  # Hint: use the if statement\n\
    \  # Hint: use the else statement\n  # Hint: use the else if statement\n  # Hint:\
    \ use the if statement\n  # Hint: use the else statement\n  # Hint: use the else\
    \ if statement\n  # Hint: use the if statement\n  # Hint: use the else statement\n\
    \  # Hint: use the else if statement\n  # Hint: use the if statement\n  # Hint:\
    \ use the else statement\n  # Hint: use the else if statement\n  # Hint: use the\
    \ if statement\n  # Hint: use the else statement\n  # Hint: use the else if statement\n\
    \  # Hint: use the if statement\n  # Hint: use the else statement\n  # Hint: use\
    \ the else if statement\n  # Hint: use the if statement\n  # Hint: use the else\
    \ statement\n  # Hint: use the else if statement\n  # Hint: use the if statement\n\
    \  # Hint: use the else statement\n  # Hint: use the else if statement\n  # Hint:\
    \ use the if statement\n  # Hint: use the else statement\n  # Hint: use the else\
    \ if statement\n  # Hint: use the if statement\n  # Hint: use the else statement\n\
    \  # Hint: use the else if statement\n  # Hint: use the if statement\n  # Hint:\
    \ use the\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplul0r9qp.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmplul0r9qp.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example: echo \"Hello world!\"\n    echo \"15\"\n}\n\ncandidate() {\n \
    \   closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo \"$1\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate\
    \ \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Your\
    \ code here\n  echo \"$1\" | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n\
    \    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # TODO:\
    \ implement this function\n  # Hint: use the bc utility\n  # Hint: use the printf\
    \ utility\n  # Hint: use the abs function\n  # Hint: use the round function\n\
    \  # Hint: use the floor function\n  # Hint: use the ceil function\n  # Hint:\
    \ use the if statement\n  # Hint: use the test utility\n  # Hint: use the -eq\
    \ operator\n  # Hint: use the -lt operator\n  # Hint: use the -gt operator\n \
    \ # Hint: use the -le operator\n  # Hint: use the -ge operator\n  # Hint: use\
    \ the -ne operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # Hint: use the -z operator\n  # Hint: use the -n operator\n  # Hint: use the\
    \ -e operator\n  # Hint: use the -f operator\n  # Hint: use the -d operator\n\
    \  # Hint: use the -r operator\n  # Hint: use the -w operator\n  # Hint: use the\
    \ -x operator\n  # Hint: use the -s operator\n  # Hint: use the -t operator\n\
    \  # Hint: use the -o operator\n  # Hint: use the -p operator\n  # Hint: use the\
    \ -u operator\n  # Hint: use the -g operator\n  # Hint: use the -k operator\n\
    \  # Hint: use the -h operator\n  # Hint: use the -L operator\n  # Hint: use the\
    \ -S operator\n  # Hint: use the -N operator\n  # Hint: use the -O operator\n\
    \  # Hint: use the -G operator\n  # Hint: use the -nt operator\n  # Hint: use\
    \ the -ot operator\n  # Hint: use the -ef operator\n  # Hint: use the -o operator\n\
    \  # Hint: use the -a operator\n  # Hint: use the -o operator\n  # Hint: use the\
    \ -a operator\n  # Hint: use the -o operator\n  # Hint: use the -a operator\n\
    \  # H\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"\
    15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\"\
    ) = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphpxy84d_.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmphpxy84d_.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=\"$1\"\n  local integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf\
    \ \"%.1f\" \"$number\")\n  local decimal_part=$(echo \"$decimal\" | cut -d. -f2)\n\
    \  if [[ \"$decimal_part\" -eq 5 ]]; then\n    if [[ \"$number\" -lt 0 ]]; then\n\
    \      (( integer-- ))\n    else\n      (( integer++ ))\n    fi\n  fi\n  echo\
    \ \"$integer\"\n}\n\ncandidate() {\n    closest_integer \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\"\
    ) = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"-16\" ]]\n    [[ $(candidate\
    \ \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6idw4_ka.sh: line 23: [[: 14.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmp6idw4_ka.sh: line 23: [[: -15.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    '
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  # To print results to the standard output you can use echo\n\
    \  # Example: echo \"Hello world!\"\n  echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n    # Write\
    \ your code here\n    echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018851
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # Write\
    \ your code here\n  echo $1 | awk '{printf(\"%d\\n\", $1)}'\n}\n\ncandidate()\
    \ {\n    closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"10\") = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate\
    \ \"-15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  # your\
    \ code here\n  echo $1 | awk '{printf \"%d\\n\", $1}'\n}\n\ncandidate() {\n  \
    \  closest_integer \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\"\
    ) = \"10\" ]]\n    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"\
    -15.5\") = \"-16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate\
    \ \"0\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018850
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes a value (string) representing\
    \ a number\n# and returns the closest integer to it. If the number is equidistant\n\
    # from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer\
    \ \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding\
    \ away from zero means that if the given number is equidistant\n# from two integers,\
    \ the one you should return is the one that is the\n# farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"\
    -14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local\
    \ number=$1\n  local integer=$(printf \"%.0f\" \"$number\")\n  local decimal=$(printf\
    \ \"%.2f\" \"$number\" | cut -d. -f2)\n  if [ \"$decimal\" -gt 50 ]; then\n  \
    \  echo $((integer + 1))\n  elif [ \"$decimal\" -lt 50 ]; then\n    echo $integer\n\
    \  else\n    if [ \"$number\" -lt 0 ]; then\n      echo $((integer - 1))\n   \
    \ else\n      echo $((integer + 1))\n    fi\n  fi\n}\n\ncandidate() {\n    closest_integer\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"10\") = \"10\" ]]\n\
    \    [[ $(candidate \"14.5\") = \"15\" ]]\n    [[ $(candidate \"-15.5\") = \"\
    -16\" ]]\n    [[ $(candidate \"15.3\") = \"15\" ]]\n    [[ $(candidate \"0\")\
    \ = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp83vi2hys.sh: line 26: [: 14.5: integer expression expected

    /tmp/tmp83vi2hys.sh: line 26: [: -15.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660018851
