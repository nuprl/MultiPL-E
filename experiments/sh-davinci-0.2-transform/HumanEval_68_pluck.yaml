name: HumanEval_68_pluck
language: sh
prompt: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
  \ it.\n# The plucked node should be the node with the smallest even value.\n# If\
  \ multiple nodes with the same smallest even value are found return the node that\
  \ has smallest index.\n# The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n# If there are no even values or the given array is empty, return\
  \ [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n#\
  \ >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n\
  # []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n# so we will choose the first\
  \ zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <=\
  \ 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n"
tests: "}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
  \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
  \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
  \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") =\
  \ \"\" ]]\n}\n\nrun_test"
completions: ["  local -a nodes=($1)\n  local -i min_even_value=10000000000\n  local\
    \ -i min_even_index=10000000000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if (( node % 2 == 0 && node < min_even_value )); then\n      min_even_value=$node\n\
    \      min_even_index=$i\n    fi\n    (( i++ ))\n  done\n  if (( min_even_value\
    \ == 10000000000 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=10000\n\
    \  local -i min_even_index=10000\n  local -i i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i+=1\n  done\n  if [[ $min_even_value -eq 10000 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    i=$((i + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"\
    ]\"\n  fi", "  local nodes=\"$1\"\n  local min_even_value=\n  local min_even_index=\n\
    \  local index=0\n  for node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]];\
    \ then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value ]];\
    \ then\n        min_even_value=$node\n        min_even_index=$index\n      fi\n\
    \    fi\n    index=$((index + 1))\n  done\n  if [[ -z $min_even_value ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local -i i=0\n  local -i min_even_index=-1\n\
    \  local -i min_even_value=100000000\n  for ((i=0; i<${#nodes[@]}; i++)); do\n\
    \    if (( nodes[i] % 2 == 0 )); then\n      if (( nodes[i] < min_even_value ));\
    \ then\n        min_even_value=nodes[i]\n        min_even_index=i\n      fi\n\
    \    fi\n  done\n  if (( min_even_index >= 0 )); then\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi", "  local -a nodes=($1)\n\
    \  local -a evens=()\n  local -a even_indexes=()\n  local -a even_indexes_sorted=()\n\
    \  local -a even_indexes_sorted_unique=()\n  local -a even_indexes_sorted_unique_min=()\n\
    \  local -a even_indexes_sorted_unique_min_index=()\n  local -a even_indexes_sorted_unique_min_index_sorted=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique=()\n  local -a\
    \ even_indexes_sorted_unique_min_index_sorted_unique_min=()\n  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min=()\n\
    \  local -a even_indexes_sorted_unique_min_index_sorted_unique_min_index_sorted_unique_min_index_sorted_unique",
  "  local -a nodes=($1)\n  local -i min=999999999\n  local -i index=0\n  local -i\
    \ i=0\n  local -i len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n    if ((nodes[i]\
    \ < min && nodes[i] % 2 == 0)); then\n      min=nodes[i]\n      index=i\n    fi\n\
    \  done\n  if ((min == 999999)); then\n    echo \"[]\"\n  else\n    echo \"[\\\
    \"$min\\\", \\\"$index\\\"]\"\n  fi", "  local nodes=($1)\n  local smallest_even_value=\n\
    \  local smallest_even_value_index=\n  local i=0\n  for node in \"${nodes[@]}\"\
    ; do\n    if [ $((node % 2)) -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ $node -lt $smallest_even_value ]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n\
    \  if [ -z \"$smallest_even_value\" ]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_value_index\\\"]\"\n  fi",
  "  local nodes=($1)\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $smallest_even_value ]]; then\n        smallest_even_value=$node\n\
    \        smallest_even_value_index=$i\n      elif [[ $node -lt $smallest_even_value\
    \ ]]; then\n        smallest_even_value=$node\n        smallest_even_value_index=$i\n\
    \      fi\n    fi\n    i=$((i + 1))\n  done\n  if [[ -z $smallest_even_value ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"\
    $smallest_even_value_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -i min_even_value=1000000000\n\
    \  local -i min_even_index=1000000000\n  local -i i=0\n  local -i n=${#nodes[@]}\n\
    \  local -i value\n  local -i index\n  for ((i=0; i<n; i++)); do\n    value=${nodes[i]}\n\
    \    if ((value % 2 == 0)); then\n      if ((value < min_even_value)); then\n\
    \        min_even_value=$value\n        min_even_index=$i\n      elif ((value\
    \ == min_even_value)); then\n        if ((i < min_even_index)); then\n       \
    \   min_even_index=$i\n        fi\n      fi\n    fi\n  done\n  if ((min_even_value\
    \ == 1000000000)); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even_value\\\
    \", \\\"$min_even_index\\\"]\"\n  fi", "  local -a nodes=($1)\n  local -a evens=()\n\
    \  local -a evens_index=()\n  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n\
    \  local -a evens_index_sorted_unique=()\n  local -a evens_sorted_unique=()\n\
    \  local -a evens_index_sorted_unique_sorted=()\n  local -a evens_sorted_unique_sorted=()\n\
    \  local -a evens_index_sorted_unique_sorted_min=()\n  local -a evens_sorted_unique_sorted_min=()\n\
    \  local -a evens_index_sorted_unique_sorted_min_index=()\n  local -a evens_sorted_unique_sorted_min_index=()\n\
    \  local -a evens_index_sorted_unique_sorted_min_index_sorted=()\n  local -a evens_sorted_unique_sorted_min_index_sorted=()\n\
    \  local -a evens_index_sorted_unique_sorted_min_index_sorted_min=()\n  local\
    \ -a evens_sorted_unique_sorted_min_index_sorted_min=()\n  local -a evens_index_sorted_unique_sorted_min_index_sorted_min_index=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted_min_index=()\n  local\
    \ -a evens_index_sorted_unique_sorted_min_index_sorted_min_index_sorted=()\n \
    \ local -a evens_sorted_unique_sorted_min_index_sorted_min_index_sorted=()\n \
    \ local -a evens_index_sorted_unique_sorted_min_index_sorted_min_index_sorted_min=()\n\
    \  local -a evens_sorted_unique_sorted_min_index_sorted_min_index_sorted_min=()\n\
    \  local -a evens_index_sorted", "    local -a nodes=($1)\n    local -a evens=()\n\
    \    local -i i=0\n    local -i min_index=0\n    local -i min_value=0\n    local\
    \ -i value=0\n    local -i index=0\n    local -i len=${#nodes[@]}\n    local -i\
    \ even_len=0\n    local -i even_index=0\n    local -i even_value=0\n    local\
    \ -i even_min_index=0\n    local -i even_min_value=0\n    local -i even_min_index_value=0\n\
    \    local -i even_min_index_index=0\n    local -i even_min_value_index=0\n  \
    \  local -i even_min_value_value=0\n    local -i even_min_value_index_value=0\n\
    \    local -i even_min_index_index_value=0\n    local -i even_min_index_value_index=0\n\
    \    local -i even_min_index_value_value=0\n    local -i even_min_index_index_value_value=0\n\
    \    local -i even_min_index_index_value_index=0\n    local -i even_min_index_value_index_value=0\n\
    \    local -i even_min_index_value_value_index=0\n    local -i even_min_index_value_value_value=0\n\
    \    local -i even_min_index_index_value_value_value=0\n    local -i even_min_index_index_value_value_index=0\n\
    \    local -i even_min_index_index_value_index_value=0\n    local -i even_min_index_index_value_index_index=0\n\
    \    local -i even_min_index_value_index_value_value=0\n    local -i even_min_index_value_index_value_index=0\n\
    \    local -i even_min_index_value_value_index_value=0\n    local -i even_min_index_value_value_value_index=0\n\
    \    local -i even_min_index_", "  local -a nodes=($1)\n  local -i min_even_value=100000000\n\
    \  local -i min_even_index=0\n  local -i i=0\n  local -i n=${#nodes[@]}\n  for\
    \ ((i=0; i<n; i++)); do\n    if ((nodes[i] % 2 == 0 && nodes[i] < min_even_value));\
    \ then\n      min_even_value=${nodes[i]}\n      min_even_index=$i\n    fi\n  done\n\
    \  if ((min_even_value == 100000000)); then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local min_even_value=\n  local min_even_index=\n  local index=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=\"\
    $1\"\n  local min_even_value=\n  local min_even_index=\n  local index=0\n  for\
    \ node in $nodes; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n      if [[ -z $min_even_value\
    \ ]] || [[ $node -lt $min_even_value ]]; then\n        min_even_value=$node\n\
    \        min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n  if [[ -z $min_even_value ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local nodes=($1)\n\
    \  local min_even=\n  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    if ((nodes[i] % 2 == 0)); then\n      if [[ -z $min_even ]]; then\n\
    \        min_even=${nodes[i]}\n        min_even_index=$i\n      elif ((nodes[i]\
    \ < min_even)); then\n        min_even=${nodes[i]}\n        min_even_index=$i\n\
    \      fi\n    fi\n  done\n  if [[ -z $min_even ]]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n  fi", "  local -a\
    \ nodes=($1)\n  local -a evens=()\n  local -a evens_index=()\n  local -a result=()\n\
    \  local i=0\n  local j=0\n  local k=0\n  local min=0\n  local min_index=0\n \
    \ local len=${#nodes[@]}\n  for ((i=0; i<len; i++)); do\n    if [[ $((${nodes[$i]}\
    \ % 2)) -eq 0 ]]; then\n      evens[$j]=${nodes[$i]}\n      evens_index[$j]=$i\n\
    \      ((j++))\n    fi\n  done\n  if [[ ${#evens[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  min=${evens[0]}\n  min_index=${evens_index[0]}\n\
    \  for ((k=1; k<${#evens[@]}; k++)); do\n    if [[ ${evens[$k]} -lt $min ]]; then\n\
    \      min=${evens[$k]}\n      min_index=${evens_index[$k]}\n    fi\n  done\n\
    \  result[0]=$min\n  result[1]=$min_index\n  echo \"[\\\"${result[0]}\\\", \\\"\
    ${result[1]}\\\"]\"", "  local -a nodes=($1)\n  local -a evens=()\n  local -a\
    \ evens_index=()\n  local -a evens_index_sorted=()\n  local -a evens_sorted=()\n\
    \  local -a result=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n \
    \ local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n", "  local nodes=($1)\n  local min_even=\n\
    \  local min_even_index=\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if [[ ${nodes[$i]}\
    \ -eq 0 ]]; then\n      min_even=0\n      min_even_index=$i\n      break\n   \
    \ elif [[ ${nodes[$i]} -gt 0 ]] && [[ ${nodes[$i]}%2 -eq 0 ]]; then\n      if\
    \ [[ -z $min_even ]] || [[ ${nodes[$i]} -lt $min_even ]]; then\n        min_even=${nodes[$i]}\n\
    \        min_even_index=$i\n      fi\n    fi\n  done\n  if [[ -z $min_even ]];\
    \ then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n  fi", "  local -a nodes=($1)\n  local min_even_value=\n  local min_even_index=\n\
    \  local i=0\n  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0\
    \ ]]; then\n      if [[ -z $min_even_value ]] || [[ $node -lt $min_even_value\
    \ ]]; then\n        min_even_value=$node\n        min_even_index=$i\n      fi\n\
    \    fi\n    ((i++))\n  done\n  if [[ -z $min_even_value ]]; then\n    echo \"\
    []\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi"]
stop_tokens:
- "\n}"
