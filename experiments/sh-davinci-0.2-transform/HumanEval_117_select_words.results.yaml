language: sh
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local count=$(echo $word | tr -cd \"[bcdfghjklmnpqrstvwxyz]\"\
    \ | wc -c)\n        if [ $count -eq $2 ]; then\n            result=\"$result \\\
    \"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=$(echo \"$string\"\
    \ | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ consonants=$(echo \"$word\" | tr -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n  \
    \      if [ \"$consonants\" -eq \"$n\" ]; then\n            result+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq $n ]; then\n  \
    \          result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr -d ' ' | grep -o -E '[^aeiou]{'$2'}' | tr -d '\\n' | sed\
    \ 's/\\([^\"]*\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") =\
    \ \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local string=$1\n  local n=$2\n  local words=$(echo $string | tr ' ' '\\\
    n')\n  local result=()\n  for word in $words; do\n    local consonants=$(echo\
    \ $word | tr -d -c 'bcdfghjklmnpqrstvwxyz' | wc -c)\n    if [ $consonants -eq\
    \ $n ]; then\n      result+=(\\\"$word\\\")\n    fi\n  done\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo $word | grep -o '[^aeiouAEIOU]'\
    \ | wc -l) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=\"$1\"\n  local n=\"$2\"\n  local words\n  local word\n  local\
    \ consonants\n  local consonant\n  local result\n  words=($(echo \"$str\" | tr\
    \ ' ' '\\n'))\n  for word in \"${words[@]}\"; do\n    consonants=0\n    for consonant\
    \ in {b..z}; do\n      if [[ \"$word\" == *\"$consonant\"* ]]; then\n        consonants=$((consonants\
    \ + 1))\n      fi\n    done\n    if [[ \"$consonants\" -eq \"$n\" ]]; then\n \
    \     result=\"$result \\\"$word\\\"\"\n    fi\n  done\n  echo \"[$result]\"\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo \"$1\" | tr ' ' '\\n')\n    local result=()\n    for\
    \ word in $words; do\n        if [[ $(echo \"$word\" | grep -o '[^aeiouAEIOU]'\
    \ | wc -l) -eq $2 ]]; then\n            result+=(\"$word\")\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local words=$(echo \"\
    $string\" | tr ' ' '\\n')\n    local result=\"\"\n    for word in $words; do\n\
    \        local count=$(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l)\n   \
    \     if [ \"$count\" -eq \"$num\" ]; then\n            result=\"$result \\\"\
    $word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=($(echo $str | tr ' ' '\\\
    n'))\n    local result=()\n    for word in ${words[@]}; do\n        local count=$(echo\
    \ $word | grep -o '[^aeiou]' | wc -l)\n        if [ $count -eq $n ]; then\n  \
    \          result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(echo $word |\
    \ sed 's/[^aeiou]//g' | wc -c) -eq $num ]]; then\n            result+=($word)\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words\n    local word\n\
    \    local consonants\n    local consonant\n    local result\n    local result_length\n\
    \    local i\n    words=($(echo \"$string\" | tr ' ' '\\n'))\n    for word in\
    \ \"${words[@]}\"; do\n        consonants=0\n        for consonant in {b..z};\
    \ do\n            if [[ $word == *\"$consonant\"* ]]; then\n                consonants=$((consonants\
    \ + 1))\n            fi\n        done\n        if [[ $consonants -eq $n ]]; then\n\
    \            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    result_length=${#result[@]}\n\
    \    if [[ $result_length -eq 0 ]]; then\n        echo \"[]\"\n    else\n    \
    \    echo \"[\"\n        for ((i=0; i<$result_length; i++)); do\n            if\
    \ [[ $i -eq $((result_length - 1)) ]]; then\n                echo \"${result[$i]}\"\
    \n            else\n                echo \"${result[$i]},\"\n            fi\n\
    \        done\n        echo \"]\"\n    fi\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -i n=$2\n    local -i i=0\n    local -i j=0\n\
    \    local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i consonants=0\n    local\
    \ -i vowels=0\n    local -i len=0\n    local -i len_words=0\n    local -i len_word=0\n\
    \    local -i len_words_i=0\n    local -i len_words_j=0\n    local -i len_words_k=0\n\
    \    local -i len_words_l=0\n    local -i len_words_m=0\n    local -i len_words_n=0\n\
    \    local -i len_words_o=0\n    local -i len_words_p=0\n    local -i len_words_q=0\n\
    \    local -i len_words_r=0\n    local -i len_words_s=0\n    local -i len_words_t=0\n\
    \    local -i len_words_u=0\n    local -i len_words_v=0\n    local -i len_words_w=0\n\
    \    local -i len_words_x=0\n    local -i len_words_y=0\n    local -i len_words_z=0\n\
    \    local -i len_words_consonants=0\n    local -i len_words_vowels=0\n    local\
    \ -i len_words_len=0\n    local -i len_words_len_words=0\n    local -i len_words_len_word=0\n\
    \    local -i len_words_len_words_i=0\n    local -i len_words\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a consonant_count\n    local -a result\n    local word\n    local count\n \
    \   local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local b\n    local c\n    local d\n    local f\n    local g\n    local h\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local B\n    local C\n    local D\n\
    \    local F\n    local G\n    local H\n    local J\n    local K\n    local L\n\
    \    local M\n    local N\n    local P\n    local Q\n    local R\n    local S\n\
    \    local T\n    local V\n    local W\n    local X\n    local Y\n    local Z\n\
    \    local consonant_count\n    local word_count\n    local word_index\n    local\
    \ word_length\n    local word_start\n    local word_end\n    local word_start_index\n\
    \    local word_end_index\n    local word_start_index_plus_one\n    local word_end_index_plus_one\n\
    \    local word_start_index_plus_two\n    local word_end_index_plus_two\n    local\
    \ word_start_index_plus_three\n    local word_end_index_plus_three\n    local\
    \ word_start_index_plus_four\n    local word_end_index_plus_four\n    local word_start_index_plus_five\n\
    \    local word_end_index_plus_five\n    local word_start_index_plus_six\n   \
    \ local word_end_index_plus_six\n    local word_start_index_plus_seven\n    local\
    \ word_end_index_plus_seven\n    local word_start_index\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=()\n    local word\n\
    \    local consonants\n    for word in $string; do\n        consonants=$(echo\
    \ $word | sed -e 's/[aeiouAEIOU]//g' | wc -c)\n        if [ $consonants -eq $number\
    \ ]; then\n            words+=($word)\n        fi\n    done\n    echo ${words[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -E 's/[aeiouAEIOU]//g')\n        if [ ${#consonants} -eq $n ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  echo $1 | tr -s ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local count\n    local char\n    local i\n  \
    \  local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local -i\
    \ index\n    local -i length\n    local -i num_consonants\n    local -i num_vowels\n\
    \    local -i num_chars\n    local -i num_words\n    local -i num_result\n   \
    \ local -i num_consonants_required\n    local -i num_vowels_required\n    local\
    \ -i num_chars_required\n    local -i num_words_required\n    local -i num_result_required\n\
    \    local -i num_consonants_found\n    local -i num_vowels_found\n    local -i\
    \ num_chars_found\n    local -i num_words_found\n    local -i num_result_found\n\
    \    local -i num_consonants_expected\n    local -i num_vowels_expected\n    local\
    \ -i num_chars_expected\n    local -i num_words_expected\n    local -i num_result_expected\n\
    \    local -i num_consonants_actual\n    local -i num_vowels_actual\n    local\
    \ -i num_chars_actual\n    local -i num_words_actual\n    local -i num_result_actual\n\
    \    local -i num_consonants_diff\n    local -i num_vowels_diff\n    local -i\
    \ num_chars_diff\n    local -i num_words_diff\n    local -i num_result_diff\n\
    \    local -i num_consonants_pass\n    local -i num_vowels_pass\n    local -i\
    \ num_chars_pass\n    local -i num_words_pass\n    local -i num_result_pass\n\
    \    local -i num_consonants_fail\n    local\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # TODO: implement this function\n    echo \"Not implemented\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local word=\"\
    \"\n    local consonants=0\n    local char=\"\"\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local a=0\n    local e=0\n    local i=0\n    local o=0\n    local\
    \ u=0\n    local space=0\n    local result=()\n    for ((i=0; i<${#s}; i++));\
    \ do\n        char=\"${s:$i:1}\"\n        if [[ \"$char\" == \" \" ]]; then\n\
    \            space=1\n        else\n            space=0\n        fi\n        if\
    \ [[ \"$char\" == \"a\" ]]; then\n            a=1\n        else\n            a=0\n\
    \        fi\n        if [[ \"$char\" == \"e\" ]]; then\n            e=1\n    \
    \    else\n            e=0\n        fi\n        if [[ \"$char\" == \"i\" ]]; then\n\
    \            i=1\n        else\n            i=0\n        fi\n        if [[ \"\
    $char\" == \"o\" ]]; then\n            o=1\n        else\n            o=0\n  \
    \      fi\n        if [[ \"$char\" == \"u\" ]]; then\n            u=1\n      \
    \  else\n            u=0\n        fi\n        consonants=$((a+e+i+o+u+space))\n\
    \        if [[ \"$consonants\" == \"0\" ]]; then\n            word=\"$word$char\"\
    \n        else\n            words+=(\"$word\")\n            word=\"\"\n      \
    \  fi\n    done\n    words+=(\"$word\")\n    for ((j=0; j<${#words[@]}; j++));\
    \ do\n        word=\"${words[$j]}\"\n        consonants=0\n        for ((\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpycx2cxln.sh: line 97: unexpected EOF while looking for matching
    `)''

    /tmp/tmpycx2cxln.sh: line 116: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\" | tr -cs \"[:alpha:]\" \"\\n\" | grep -E \"^[^aeiou]{$2}$\"\
    \ | tr -d '\\n' | sed 's/\\([^\"]\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=()\n    local word=()\n\
    \    local consonants=()\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n   \
    \ local g=0\n    local h=0\n    local i=0\n    local j=0\n\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local consonants=$(echo $word | tr -cd \"[bcdfghjklmnpqrstvwxyz]\"\
    )\n        if [ ${#consonants} -eq $2 ]; then\n            result=\"$result \\\
    \"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ $consonants -eq $n ];\
    \ then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ \" \" \"\\n\")\n    local result=()\n    for word in $words; do\n        local\
    \ consonants=$(echo $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq\
    \ $n ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local words=($(echo \"\
    $string\" | tr ' ' '\\n'))\n    local result=\"\"\n    for word in \"${words[@]}\"\
    ; do\n        local count=$(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l)\n\
    \        if [ \"$count\" -eq \"$num\" ]; then\n            result+=\"\\\"$word\\\
    \" \"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # TODO: implement this function\n    echo \"Not implemented\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n    \
    \    for (( i=0; i<${#word}; i++ )); do\n            if [[ ${word:$i:1} =~ [^aeiou]\
    \ ]]; then\n                count=$((count+1))\n            fi\n        done\n\
    \        if [[ $count -eq $n ]]; then\n            result+=($word)\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local word\n    local consonants\n    local -i i\n\
    \    local -i n=$2\n    local -i len\n    local -i count\n    local -i index\n\
    \    local -i last_index\n    local -i last_len\n    local -i last_count\n   \
    \ local -i last_index\n    local -i last_last_index\n    local -i last_last_len\n\
    \    local -i last_last_count\n    local -i last_last_index\n    local -i last_last_last_index\n\
    \    local -i last_last_last_len\n    local -i last_last_last_count\n    local\
    \ -i last_last_last_index\n    local -i last_last_last_last_index\n    local -i\
    \ last_last_last_last_len\n    local -i last_last_last_last_count\n    local -i\
    \ last_last_last_last_index\n    local -i last_last_last_last_last_index\n   \
    \ local -i last_last_last_last_last_len\n    local -i last_last_last_last_last_count\n\
    \    local -i last_last_last_last_last_index\n    local -i last_last_last_last_last_last_index\n\
    \    local -i last_last_last_last_last_last_len\n    local -i last_last_last_last_last_last_count\n\
    \    local -i last_last_last_last_last_last_index\n    local -i last_last_last_last_last_last_last_index\n\
    \    local -i last_last_last_last_last_last_last_len\n    local -i last_last_last_last_last_last_last_count\n\
    \    local -i last_last_last_last_last_last_last_index\n    local -i last_last_last_last_last_last_last_last_index\n\
    \    local -i last_last_last_last_last_last_last_last_len\n    local -i last_last_last_last_last_last_last_last_count\n\
    \    local -i last_\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local result=()\n    local word\n \
    \   for word in $str; do\n        if [[ $(echo $word | grep -o \"[^aeiouAEIOU]\"\
    \ | wc -l) -eq $n ]]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local words=($(echo\
    \ \"$string\" | tr ' ' '\\n'))\n    local result=()\n    local word\n    local\
    \ consonants\n    for word in \"${words[@]}\"; do\n        consonants=$(echo \"\
    $word\" | tr -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n        if [ \"$consonants\"\
    \ -eq \"$number\" ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(echo $word |\
    \ grep -o -P '[^aeiouAEIOU]' | wc -l) -eq $num ]]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local consonants=$(echo $word | tr -cd \"bcdfghjklmnpqrstvwxyz\"\
    \ | wc -c)\n        if [ $consonants -eq $2 ]; then\n            result+=\"\\\"\
    $word\\\" \"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr ' ' '\\n' | grep -E '^[^aeiou]{'$2'}$' | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=$(echo $string\
    \ | tr \" \" \"\\n\")\n    local result=()\n    for word in $words; do\n     \
    \   local consonants=$(echo $word | grep -o \"[^aeiouAEIOU]\" | wc -l)\n     \
    \   if [ $consonants -eq $number ]; then\n            result+=(\"\\\"$word\\\"\
    \")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiouAEIOU]//g')\n        if [ ${#consonants} -eq $n ]; then\n\
    \            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr ' ' '\\n')\n    local result=()\n    for word\
    \ in $words; do\n        local count=$(echo $word | tr -cd '[^aeiouAEIOU]' | wc\
    \ -c)\n        if [ $count -eq $2 ]; then\n            result+=($word)\n     \
    \   fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local words=$(echo $1 | tr \" \" \"\\n\")\n  local result=()\n  for word\
    \ in $words; do\n    local consonants=$(echo $word | sed -e 's/[aeiou]//g')\n\
    \    if [ ${#consonants} -eq $2 ]; then\n      result+=(\"\\\"$word\\\"\")\n \
    \   fi\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=$(echo $s | tr ' ' '\\n')\n\
    \    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | tr -cd 'bcdfghjklmnpqrstvwxyz' | wc -c)\n        if [ $consonants -eq\
    \ $n ]; then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=()\n    local word=''\n \
    \   local consonants=0\n    local i=0\n    local c=''\n    local vowels=('a' 'e'\
    \ 'i' 'o' 'u')\n    local is_vowel=false\n    local is_consonant=false\n    local\
    \ is_space=false\n    local is_letter=false\n    local is_quote=false\n    local\
    \ is_word=false\n    local is_word_end=false\n    local is_word_start=false\n\
    \    local is_word_middle=false\n    local is_word_found=false\n    local is_word_found_first=false\n\
    \    local is_word_found_last=false\n    local is_word_found_middle=false\n  \
    \  local is_word_found_middle_first=false\n    local is_word_found_middle_last=false\n\
    \    local is_word_found_middle_middle=false\n    local is_word_found_middle_middle_first=false\n\
    \    local is_word_found_middle_middle_last=false\n    local is_word_found_middle_middle_middle=false\n\
    \    local is_word_found_middle_middle_middle_first=false\n    local is_word_found_middle_middle_middle_last=false\n\
    \    local is_word_found_middle_middle_middle_middle=false\n    local is_word_found_middle_middle_middle_middle_first=false\n\
    \    local is_word_found_middle_middle_middle_middle_last=false\n    local is_word_found_middle_middle_middle_middle_middle=false\n\
    \    local is_word_found_middle_middle_middle_middle_middle_first=false\n    local\
    \ is_word_found_middle_middle_middle_middle_middle_last=false\n    local is_word_found_middle_middle_middle_middle_middle_middle=false\n\
    \    local is_word_found_middle_middle_middle_middle_middle_middle_first=false\n\
    \    local is_word_found_middle_middle_middle_middle_middle_middle_last=false\n\
    \   \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local -a words\n    local -a consonants\n\
    \    local -a selected_words\n    local word\n    local consonant\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n_consonants\n\
    \    local n_letters\n    local n_spaces\n    local n_words\n    local n_consonants_word\n\
    \    local n_letters_word\n    local n_spaces_word\n    local n_words_word\n \
    \   local n_consonants_consonant\n    local n_letters_consonant\n    local n_spaces_consonant\n\
    \    local n_words_consonant\n    local n_consonants_selected_word\n    local\
    \ n_letters_selected_word\n    local n_spaces_selected_word\n    local n_words_selected_word\n\
    \    local n_consonants_selected_words\n    local n_letters_selected_words\n \
    \   local n_spaces_selected_words\n    local n_words_selected_words\n    local\
    \ n_consonants_selected_words_string\n    local n_letters_selected_words_string\n\
    \    local n_spaces_selected_words_string\n    local n_words_selected_words_string\n\
    \    local n_consonants_selected_words_string_length\n    local n_letters_selected_words_string_length\n\
    \    local n_spaces_selected_words_string_length\n    local n_words_selected_words_string_length\n\
    \    local n_consonants_selected_words_string_length_plus_one\n    local n_letters_selected_words_string_length_plus_one\n\
    \    local n_spaces_selected_words_string_length_plus_one\n    local n_words_selected_words_string_length_plus_one\n\
    \    local n_consonants_selected_words_string_length_plus_one_minus_one\n    local\
    \ n_letters_selected_words_string_length_plus_one_minus_one\n    local n_spaces_selected_words_string_length_plus_one_minus_one\n\
    \    local n_\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n    \
    \    for ((i=0; i<${#word}; i++)); do\n            local char=${word:$i:1}\n \
    \           if [[ $char =~ [^aeiouAEIOU] ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [[ $count -eq $num ]]; then\n      \
    \      result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local\
    \ word=\"\"\n    local consonants=0\n    local vowels=0\n    local char=\"\"\n\
    \    local i=0\n    local j=0\n    local k=0\n    local len=0\n    local len_words=0\n\
    \    local len_word=0\n    local result=\"\"\n    local result_len=0\n    local\
    \ result_len_words=0\n    local result_len_word=0\n    local result_word=\"\"\n\
    \    local result_words=()\n    local result_char=\"\"\n    local result_char_len=0\n\
    \    local result_char_len_words=0\n    local result_char_len_word=0\n    local\
    \ result_char_word=\"\"\n    local result_char_words=()\n    local result_char_char=\"\
    \"\n    local result_char_char_len=0\n    local result_char_char_len_words=0\n\
    \    local result_char_char_len_word=0\n    local result_char_char_word=\"\"\n\
    \    local result_char_char_words=()\n    local result_char_char_char=\"\"\n \
    \   local result_char_char_char_len=0\n    local result_char_char_char_len_words=0\n\
    \    local result_char_char_char_len_word=0\n    local result_char_char_char_word=\"\
    \"\n    local result_char_char_char_words=()\n    local result_char_char_char_char=\"\
    \"\n    local result_char_char_char_char_len=0\n    local result_char_char_char_char_len_words=0\n\
    \    local result_char_char_char_char_len_word=0\n    local result_char_char_char_char_word=\"\
    \"\n    local result_char_char_char_char_words=()\n    local result_char_char_char_char_char=\"\
    \"\n    local result_char_char_char_char_char_len=0\n    local result_char_char_char_char_char_len_words=0\n\
    \    local result_char_char_char_char_\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n       \
    \     result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    local word\n    local consonants\n    for word in \"${words[@]}\"\
    ; do\n        consonants=$(echo $word | grep -o '[^aeiouAEIOU ]' | wc -l)\n  \
    \      if [ $consonants -eq $num ]; then\n            result+=(\"\\\"$word\\\"\
    \")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in ${words[@]}; do\n   \
    \     local count=$(echo $word | grep -o -i '[^aeiouy]' | wc -l)\n        if [\
    \ $count -eq $number ]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr ' ' '\\n'))\n\
    \    local result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo\
    \ $word | grep -o '[^aeiou]' | wc -l)\n        if [ $count -eq $n ]; then\n  \
    \          result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=()\n    local word\n    local\
    \ consonants\n    local i\n    for word in $s; do\n        consonants=0\n    \
    \    for ((i=0; i<${#word}; i++)); do\n            if [[ \"${word:$i:1}\" != [aeiou]\
    \ ]]; then\n                consonants=$((consonants+1))\n            fi\n   \
    \     done\n        if [[ $consonants -eq $n ]]; then\n            words+=(\"\\\
    \"$word\\\"\")\n        fi\n    done\n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local -a words\n    local -a\
    \ result\n    local word\n    local consonants\n    local i\n    words=($(echo\
    \ $string | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        consonants=0\n\
    \        for ((i=0; i<${#word}; i++)); do\n            if [[ ${word:$i:1} =~ [^aeiou]\
    \ ]]; then\n                consonants=$((consonants+1))\n            fi\n   \
    \     done\n        if [[ $consonants -eq $number ]]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=$(echo $string\
    \ | tr \" \" \"\\n\")\n    local result=()\n    for word in $words; do\n     \
    \   local consonants=$(echo $word | grep -o -i \"[^aeiouy]\" | wc -l)\n      \
    \  if [ $consonants -eq $number ]; then\n            result+=($word)\n       \
    \ fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ $count -eq $n ]; then\n   \
    \         result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=$(echo $string\
    \ | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ count=$(echo $word | tr -cd 'bcdfghjklmnpqrstvwxz' | wc -c)\n        if [ $count\
    \ -eq $number ]; then\n            result+=($word)\n        fi\n    done\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n    \
    \    for ((i=0; i<${#word}; i++)); do\n            local char=${word:$i:1}\n \
    \           if [[ $char =~ [^aeiou] ]]; then\n                ((count++))\n  \
    \          fi\n        done\n        if [[ $count -eq $num ]]; then\n        \
    \    result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=()\n    local word=''\n \
    \   local consonants=0\n    local letter=''\n    local vowels='aeiou'\n    for\
    \ (( i=0; i<${#s}; i++ )); do\n        letter=${s:$i:1}\n        if [[ $letter\
    \ =~ [a-zA-Z] ]]; then\n            word+=$letter\n        else\n            if\
    \ [[ ${#word} -gt 0 ]]; then\n                consonants=0\n                for\
    \ (( j=0; j<${#word}; j++ )); do\n                    if [[ ! $vowels =~ ${word:$j:1}\
    \ ]]; then\n                        consonants=$((consonants+1))\n           \
    \         fi\n                done\n                if [[ $consonants -eq $n ]];\
    \ then\n                    words+=(\"\\\"$word\\\"\")\n                fi\n \
    \               word=''\n            fi\n        fi\n    done\n    if [[ ${#word}\
    \ -gt 0 ]]; then\n        consonants=0\n        for (( j=0; j<${#word}; j++ ));\
    \ do\n            if [[ ! $vowels =~ ${word:$j:1} ]]; then\n                consonants=$((consonants+1))\n\
    \            fi\n        done\n        if [[ $consonants -eq $n ]]; then\n   \
    \         words+=(\"\\\"$word\\\"\")\n        fi\n    fi\n    echo ${words[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(consonants_count\
    \ $word) -eq $n ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_q_eqd0k.sh: line 27: consonants_count: command not found

    /tmp/tmp_q_eqd0k.sh: line 27: consonants_count: command not found

    /tmp/tmp_q_eqd0k.sh: line 27: consonants_count: command not found

    /tmp/tmp_q_eqd0k.sh: line 27: consonants_count: command not found

    /tmp/tmp_q_eqd0k.sh: line 27: consonants_count: command not found

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local word\n    local consonants\n    local words\n    for word in $1;\
    \ do\n        consonants=$(echo $word | tr -cd 'bcdfghjklmnpqrstvwxyz' | wc -c)\n\
    \        if [ $consonants -eq $2 ]; then\n            words=\"$words \\\"$word\\\
    \"\"\n        fi\n    done\n    echo \"[$words]\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | tr -cd 'bcdfghjklmnpqrstvwxyz' | wc -c)\n        if [ $consonants -eq\
    \ $n ]; then\n            result+=(\\\"$word\\\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr ' ' '\\n'))\n\
    \    local result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo\
    \ $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [[ $count -eq $n ]]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n       \
    \     result+=(\\\"$word\\\")\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ \" \" \"\\n\")\n    local result=\"\"\n    for word in $words; do\n        local\
    \ consonants=$(echo $word | tr -cd \"[bcdfghjklmnpqrstvwxyz]\")\n        if [\
    \ ${#consonants} -eq $n ]; then\n            result=\"$result \\\"$word\\\"\"\n\
    \        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo \"$1\" | tr -s ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        local -i count=0\n        for ((i=0;\
    \ i<${#word}; i++)); do\n            if [[ ${word:$i:1} =~ [^aeiou] ]]; then\n\
    \                ((count++))\n            fi\n        done\n        if [[ $count\
    \ -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your solution here\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfjcfzy0b.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmpfjcfzy0b.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local word\n    local -i n\n    local -i i\n    local\
    \ -i consonants\n    local -i len\n    local -i j\n    local -i k\n    local -i\
    \ l\n    local -i m\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i A\n    local\
    \ -i B\n    local -i C\n    local -i D\n    local -i E\n    local -i F\n    local\
    \ -i G\n    local -i H\n    local -i I\n    local -i J\n    local -i K\n    local\
    \ -i L\n    local -i M\n    local -i N\n    local -i O\n    local -i P\n    local\
    \ -i Q\n    local -i R\n    local -i S\n    local -i T\n    local -i U\n    local\
    \ -i V\n    local -i W\n    local -i X\n    local -i Y\n    local -i Z\n    local\
    \ -i a\n    local -i b\n    local -i c\n    local -i d\n    local -i e\n    local\
    \ -i f\n    local -i g\n    local -i h\n    local -i i\n    local -i j\n    local\
    \ -i k\n    local -i l\n    local -i m\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i A\n    local -i B\n    local -i C\n    local -i D\n    local -i E\n    local\
    \ -i F\n    local -i G\n    local -i H\n    local -i I\n    local -i J\n    local\
    \ -i K\n    local -i L\n    local\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | grep -o [^aeiou] | wc -l)\n        if [ $count -eq $n ]; then\n          \
    \  result+=(\\\"$word\\\")\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=$(echo $string\
    \ | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ count=$(echo $word | grep -o '[^aeiou]' | wc -l)\n        if [ $count -eq $number\
    \ ]; then\n            result+=(\"$word\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | tr -d -c 'bcdfghjklmnpqrstvwxz' | wc -c)\n        if [[ $consonants\
    \ -eq $n ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=()\n    local word\n\
    \    local consonants\n    for word in $string; do\n        consonants=$(echo\
    \ $word | grep -o -E '[^aeiouAEIOU ]' | wc -l)\n        if [ $consonants -eq $n\
    \ ]; then\n            words+=($word)\n        fi\n    done\n    echo ${words[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\" | tr ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local count=$(echo $word | grep -o -i \"[bcdfghjklmnpqrstvwxyz]\"\
    \ | wc -l)\n        if [ $count -eq $2 ]; then\n            result=\"$result \\\
    \"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n\
    \    local -i count\n    local -i len\n    local -i len_words\n    local -i len_consonants\n\
    \    local -i len_vowels\n    local -i len_result\n    local word\n    local char\n\
    \    local -i char_code\n    local -i char_code_a\n    local -i char_code_z\n\
    \    local -i char_code_A\n    local -i char_code_Z\n    local -i char_code_a_lower\n\
    \    local -i char_code_z_lower\n    local -i char_code_a_upper\n    local -i\
    \ char_code_z_upper\n    local -i char_code_space\n    local -i char_code_space_lower\n\
    \    local -i char_code_space_upper\n    local -i char_code_space_lower_upper\n\
    \    local -i char_code_space_upper_lower\n    local -i char_code_space_lower_upper_lower\n\
    \    local -i char_code_space_upper_lower_upper\n    local -i char_code_space_lower_upper_lower_upper\n\
    \    local -i char_code_space_upper_lower_upper_lower\n    local -i char_code_space_lower_upper_lower_upper_lower\n\
    \    local -i char_code_space_upper_lower_upper_lower_upper\n    local -i char_code_space_lower_upper_lower_upper_lower_upper\n\
    \    local -i char_code_space_upper_lower_upper_lower_upper_lower\n    local -i\
    \ char_code_space_lower_upper_lower_upper_lower_upper_lower\n    local -i char_code_space_upper_lower_upper_lower_upper_lower_upper\n\
    \    local -i char_code_space_lower_upper_lower_upper_lower_upper_lower_upper\n\
    \    local -i char_code_space_upper_lower_upper_lower_upper_lower\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\" | tr -s ' ' '\\n' | grep -E '^[^aeiou]*([aeiou][^aeiou]){'\"\
    $2\"'}[^aeiou]*$' | tr -d '\\n' | sed 's/ /\", \"/g' | sed 's/^/\"/' | sed 's/$/\"\
    /'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local words=($(echo\
    \ \"$string\" | tr ' ' '\\n'))\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        local count=$(echo \"$word\" | sed 's/[^aeiou]//g' | wc -c)\n  \
    \      if [ \"$count\" -eq \"$number\" ]; then\n            result+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local i\n    local j\n    local k\n    local\
    \ count\n    local c\n    local v\n    local s\n    local r\n    local -i n\n\
    \    local -i m\n    local -i p\n    local -i q\n    local -i t\n    local -i\
    \ u\n    local -i v\n    local -i w\n    local -i x\n    local -i y\n    local\
    \ -i z\n    local -i a\n    local -i b\n    local -i c\n    local -i d\n    local\
    \ -i e\n    local -i f\n    local -i g\n    local -i h\n    local -i i\n    local\
    \ -i j\n    local -i k\n    local -i l\n    local -i m\n    local -i n\n    local\
    \ -i o\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i A\n    local -i B\n    local -i C\n    local\
    \ -i D\n    local -i E\n    local -i F\n    local -i G\n    local -i H\n    local\
    \ -i I\n    local -i J\n    local -i K\n    local -i L\n    local -i M\n    local\
    \ -i N\n    local -i O\n    local -i P\n    local -i Q\n    local -i R\n    local\
    \ -i S\n    local -i T\n    local -i U\n    local -i V\n    local -i W\n    local\
    \ -i X\n    local -i Y\n    local -i Z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -i i=0\n    local -i n=$2\n    local -i len=0\n\
    \    local -i cons=0\n    local -i vowels=0\n    local -i consonants=0\n    local\
    \ -i vowels=0\n    local -i consonants=0\n    local -i consonants_count=0\n  \
    \  local -i vowels_count=0\n    local -i word_len=0\n    local -i word_cons=0\n\
    \    local -i word_vowels=0\n    local -i word_consonants=0\n    local -i word_consonants_count=0\n\
    \    local -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local\
    \ -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local -i word_vowels_count=0\n\
    \    local -i word_consonants_count=0\n    local -i word_vowels_count=0\n    local\
    \ -i word_consonants_count=0\n    local -i word_vowels_count=0\n    local -i word_consonants_count=0\n\
    \    local -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local\
    \ -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local -i word_vowels_count=0\n\
    \    local -i word_consonants_count=0\n    local -i word_vowels_count=0\n    local\
    \ -i word_consonants_count=0\n    local -i word_vowels_count=0\n    local -i word_consonants_count=0\n\
    \    local -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local\
    \ -i word_vowels_count=0\n    local -i word_consonants_count=0\n    local -i word_vowels_count=0\n\
    \    local -i word_cons\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo $word | grep -o '[^aeiou]'\
    \ | wc -l) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g' | sed 's/[^[:alpha:]]//g')\n        if [ ${#consonants}\
    \ -eq $n ]; then\n            result+=(\\\"$word\\\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(echo $word |\
    \ grep -o -P '[^aeiouAEIOU]' | wc -l) -eq $n ]]; then\n            result+=(\\\
    \"$word\\\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n\
    \    local -i count\n    local -i len\n    local -i len_words\n    local -i len_consonants\n\
    \    local -i len_vowels\n    local -i len_result\n    local word\n    local char\n\
    \    local char_lower\n    local char_upper\n    local -r regex=\"[a-zA-Z]\"\n\
    \    local -r regex_lower=\"[a-z]\"\n    local -r regex_upper=\"[A-Z]\"\n    local\
    \ -r regex_space=\"[ ]\"\n    local -r regex_consonants=\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    \n    local -r regex_vowels=\"[aeiouAEIOU]\"\n    local -r regex_word=\"[a-zA-Z]+\"\
    \n    local -r regex_word_lower=\"[a-z]+\"\n    local -r regex_word_upper=\"[A-Z]+\"\
    \n    local -r regex_word_mixed=\"[a-zA-Z]+\"\n    local -r regex_word_mixed_lower=\"\
    [a-zA-Z]+\"\n    local -r regex_word_mixed_upper=\"[a-zA-Z]+\"\n    local -r regex_word_mixed_lower_upper=\"\
    [a-zA-Z]+\"\n    local -r regex_word_mixed_upper_lower=\"[a-zA-Z]+\"\n    local\
    \ -r regex_word_mixed_lower_upper_lower=\"[a-zA-Z]+\"\n    local -r regex_word_mixed_upper_lower_upper=\"\
    [a-zA-Z]+\"\n    local -r regex_word_mixed_lower_upper_lower_upper=\"[a-zA-Z]+\"\
    \n    local -r regex_word_mixed_upper_lower_upper_lower=\"[a-zA-Z]+\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv3f7w7gx.sh: line 72: unexpected EOF while looking for matching
    `"''

    /tmp/tmpv3f7w7gx.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local words\n    local word\n\
    \    local count\n    local result\n    words=($(echo \"$str\" | tr -s ' ' '\\\
    n'))\n    for word in \"${words[@]}\"; do\n        count=$(echo \"$word\" | sed\
    \ 's/[^aeiou]//g' | wc -c)\n        if [ \"$count\" -eq \"$n\" ]; then\n     \
    \       result=\"$result \\\"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local word\n    local words\n  \
    \  local consonants\n    local consonant\n    local result\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ e\n    local i\n    local o\n    local u\n    local space\n    local quote\n\
    \    local comma\n    local left_bracket\n    local right_bracket\n    local left_brace\n\
    \    local right_brace\n    local left_paren\n    local right_paren\n    local\
    \ left_angle\n    local right_angle\n    local left_curly\n    local right_curly\n\
    \    local left_square\n    local right_square\n    local left_diamond\n    local\
    \ right_diamond\n    local left_triangle\n    local right_triangle\n    local\
    \ left_triangle_up\n    local right_triangle_up\n    local left_triangle_down\n\
    \    local right_triangle_down\n    local left_triangle_left\n    local right_triangle_left\n\
    \    local left_triangle_right\n    local right_triangle_right\n    local left_triangle_bar\n\
    \    local right_triangle_bar\n    local left_triangle_cross\n    local right_triangle_cross\n\
    \    local left_triangle_equal\n    local right_triangle_equal\n    local left_triangle_minus\n\
    \    local right_triangle_minus\n    local left_triangle_plus\n    local right_triangle_plus\n\
    \    local left_triangle_times\n    local right_triangle_times\n    local left_triangle_divide\n\
    \    local right_triangle_divide\n    local left_triangle_dot\n    local right_triangle_dot\n\
    \    local left_triangle_slash\n    local right_triangle_slash\n    local left_triangle_backslash\n\
    \    local right_triangle_backslash\n    local left_triangle_vertical\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($string)\n   \
    \ local result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiouAEIOU]//g' | wc -m)\n        if [ $consonants -eq $number\
    \ ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n\
    \    local -i count\n    local -i len\n    local -i len_words\n    local -i len_consonants\n\
    \    local -i len_vowels\n    local -i len_result\n    local -i len_result_prev\n\
    \    local -i len_result_cur\n    local -i len_result_next\n    local -i len_result_next_next\n\
    \    local -i len_result_next_next_next\n    local -i len_result_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next\n    local -i len_result_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next\n    local -i len_result_next_next_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next\n    local\
    \ -i len_result_next_next_next_next_next_next_next_next_next_next\n    local -i\
    \ len_result_next_next_next_next_next_next_next_next_next_next_next\n    local\
    \ -i len_result_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo $word | tr -cd 'bcdfghjklmnpqrstvwxz'\
    \ | wc -c) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiou]//g' | sed -e 's/[^a-zA-Z]//g')\n        if [ ${#consonants}\
    \ -eq $n ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiouAEIOU]//g')\n        if [ ${#consonants} -eq $n ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local words=$(echo $1 | tr \" \" \"\\n\")\n  local result=()\n  for word\
    \ in $words; do\n    local consonants=$(echo $word | tr -cd \"[^aeiou]\" | wc\
    \ -c)\n    if [ $consonants -eq $2 ]; then\n      result+=(\\\"$word\\\")\n  \
    \  fi\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr -s ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo $word | sed 's/[^aeiou]//g'\
    \ | wc -c) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    local word\n    local consonants\n    for word in \"${words[@]}\"\
    ; do\n        consonants=$(echo $word | sed 's/[aeiouAEIOU]//g' | wc -c)\n   \
    \     if [ $consonants -eq $n ]; then\n            result+=($word)\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local word\n    local -i n\n    local -i i\n    local\
    \ -i consonants\n    local -i vowels\n    local -i len\n    local -i pos\n   \
    \ local -i char\n    local -i is_vowel\n    local -i is_consonant\n    local -i\
    \ is_space\n    local -i is_letter\n    local -i is_lowercase\n    local -i is_uppercase\n\
    \    local -i is_digit\n    local -i is_alpha\n    local -i is_alnum\n    local\
    \ -i is_ascii\n    local -i is_blank\n    local -i is_cntrl\n    local -i is_graph\n\
    \    local -i is_print\n    local -i is_punct\n    local -i is_space\n    local\
    \ -i is_word\n    local -i is_xdigit\n    local -i is_upper\n    local -i is_lower\n\
    \    local -i is_digit\n    local -i is_space\n    local -i is_punct\n    local\
    \ -i is_cntrl\n    local -i is_blank\n    local -i is_graph\n    local -i is_print\n\
    \    local -i is_xdigit\n    local -i is_alnum\n    local -i is_alpha\n    local\
    \ -i is_ascii\n    local -i is_word\n    local -i is_upper\n    local -i is_lower\n\
    \    local -i is_digit\n    local -i is_space\n    local -i is_punct\n    local\
    \ -i is_cntrl\n    local -i is_blank\n    local -i is_graph\n    local -i is_print\n\
    \    local -i is_xdigit\n    local -i is_alnum\n    local -i is_alpha\n    local\
    \ -i is_ascii\n    local -i is_word\n    local -i is_upper\n    local -i is_lower\n\
    \    local -i is_digit\n    local -i is_space\n    local -i is_punct\n    local\
    \ -i is_cntrl\n    local -i is_blank\n    local\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo \"$s\" | tr ' ' '\\\
    n'))\n    local result=()\n    for word in \"${words[@]}\"; do\n        local\
    \ consonants=$(echo \"$word\" | sed -E 's/[aeiou]//g')\n        if [ ${#consonants}\
    \ -eq $n ]; then\n            result+=(\\\"$word\\\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=()\n    local word=()\n\
    \    local consonants=()\n    local vowels=()\n    local i=0\n    local j=0\n\
    \    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n \
    \   local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n  \
    \  local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n   \
    \ local z=0\n    local a=0\n    local e=0\n    local i=0\n    local o=0\n    local\
    \ u=0\n    local consonant=0\n    local vowel=0\n    local result=()\n    local\
    \ output=()\n    local output_string=()\n    local output_string_length=0\n  \
    \  local output_string_length_max=0\n    local output_string_length_min=0\n  \
    \  local output_string_length_avg=0\n    local output_string_length_sum=0\n  \
    \  local output_string_length_count=0\n    local output_string_length_median=0\n\
    \    local output_string_length_mode=0\n    local output_string_length_mode_count=0\n\
    \    local output_string_length_mode_count_max=0\n    local output_string_length_mode_count_min=0\n\
    \    local output_string_length_mode_count_avg=0\n    local output_string_length_mode_count_sum=0\n\
    \    local output_string_length_mode_count_count=0\n    local output_string_length_mode_count_median=0\n\
    \    local output_string_length_mode_count_mode=0\n    local output_string_length_mode_count_mode_count=0\n\
    \    local output_string_length_mode_count_mode_count_max=0\n    local output_string_length_mode_count_mode_count_min=0\n\
    \    local output_string_length_mode_count_mode_count_avg=0\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=$1\n  local num=$2\n  local words=()\n  local word=''\n  local\
    \ cnt=0\n  local i=0\n  local len=${#str}\n  local ch=''\n  local vowels='aeiou'\n\
    \  local is_vowel=0\n  local is_consonant=0\n  local is_space=0\n  local is_letter=0\n\
    \  local is_word=0\n  local is_num=0\n  local is_valid=0\n  local is_invalid=0\n\
    \  local is_empty=0\n  local is_not_empty=0\n  local is_not_num=0\n  local is_not_letter=0\n\
    \  local is_not_space=0\n  local is_not_word=0\n  local is_not_consonant=0\n \
    \ local is_not_vowel=0\n  local is_not_valid=0\n  local is_not_invalid=0\n  local\
    \ is_not_empty=0\n  local is_not_not_empty=0\n  local is_not_not_num=0\n  local\
    \ is_not_not_letter=0\n  local is_not_not_space=0\n  local is_not_not_word=0\n\
    \  local is_not_not_consonant=0\n  local is_not_not_vowel=0\n  local is_not_not_valid=0\n\
    \  local is_not_not_invalid=0\n  local is_not_not_empty=0\n  local is_not_not_not_empty=0\n\
    \  local is_not_not_not_num=0\n  local is_not_not_not_letter=0\n  local is_not_not_not_space=0\n\
    \  local is_not_not_not_word=0\n  local is_not_not_not_consonant=0\n  local is_not_not_not_vowel=0\n\
    \  local is_not_not_not_valid=0\n  local is_not_not_not_invalid=0\n  local is_not_not_not_empty\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ -s ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ consonants=$(echo $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq\
    \ $n ]; then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local e\n    local\
    \ i\n    local o\n    local u\n    local space\n    local -i index\n    local\
    \ -i length\n    local -i num_consonants\n    local -i num_vowels\n    local -i\
    \ num_letters\n    local -i num_words\n    local -i num_spaces\n    local -i num_chars\n\
    \    local -i num_args\n    local -i num_consonants_required\n    local -i num_vowels_required\n\
    \    local -i num_letters_required\n    local -i num_words_required\n    local\
    \ -i num_spaces_required\n    local -i num_chars_required\n    local -i num_args_required\n\
    \    local -i num_consonants_found\n    local -i num_vowels_found\n    local -i\
    \ num_letters_found\n    local -i num_words_found\n    local -i num_spaces_found\n\
    \    local -i num_chars_found\n    local -i num_args_found\n    local -i num_consonants_missing\n\
    \    local -i num_vowels_missing\n    local -i num_letters_missing\n    local\
    \ -i num_words_missing\n    local -i num_spaces_missing\n    local -i num_chars_missing\n\
    \    local -i num_args_missing\n    local -i num_consonants_excess\n    local\
    \ -i num_vowels_excess\n    local -i num_letters_excess\n    local -i num_words_excess\n\
    \    local -i num_spaces_excess\n    local -i num_chars_excess\n    local -i num_args\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiouAEIOU]//g' | wc -m)\n        if [[ $consonants -eq $n\
    \ ]]; then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local count=$(echo\
    \ $word | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n \
    \           result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=($1)\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        if [[ $(echo $word | grep -o \"[^aeiouAEIOU]\" | wc -l) -eq $2 ]];\
    \ then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local count\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local -i consonant_count\n   \
    \ local -i vowel_count\n    local -i word_count\n    local -i result_count\n \
    \   local -i result_index\n    local -i word_index\n    local -i word_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i letter_count\n    local -i letter_length\n\
    \    local -i letter_index\n    local -i\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq $n ]; then\n  \
    \          result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Your code here\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2cq2t9w_.sh: line 23: syntax error near unexpected token `}''

    /tmp/tmp2cq2t9w_.sh: line 23: `}''

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words\n    local word\n  \
    \  local consonants\n    local consonant\n    local result\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ e\n    local i\n    local o\n    local u\n    local space\n    local quote\n\
    \    local comma\n    local left_bracket\n    local right_bracket\n    local left_parenthesis\n\
    \    local right_parenthesis\n    local left_brace\n    local right_brace\n  \
    \  local left_angle_bracket\n    local right_angle_bracket\n    local left_curly_bracket\n\
    \    local right_curly_bracket\n    local left_square_bracket\n    local right_square_bracket\n\
    \    local left_chevron\n    local right_chevron\n    local left_double_chevron\n\
    \    local right_double_chevron\n    local left_double_angle_bracket\n    local\
    \ right_double_angle_bracket\n    local left_double_curly_bracket\n    local right_double_curly_bracket\n\
    \    local left_double_square_bracket\n    local right_double_square_bracket\n\
    \    local left_double_parenthesis\n    local right_double_parenthesis\n    local\
    \ left_double_brace\n    local right_double_brace\n    local left_double_angle_bracket\n\
    \    local right_double_angle_bracket\n    local left_double_chevron\n    local\
    \ right_double_chevron\n    local left_double_chevron\n    local right_double_chevron\n\
    \    local left_double_chevron\n    local right_double_chevron\n    local left_double_chevron\n\
    \    local right_double_chevron\n    local left_double_chevron\n    local right_double_chevron\n\
    \    local left_double_chevron\n    local right_double_chevron\n    local left_double_chevron\n\
    \    local right_\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=()\n    local word=''\n\
    \    local consonants=0\n    local i=0\n    local j=0\n    local k=0\n    local\
    \ l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n\
    \    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n \
    \   local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a=0\n  \
    \  local e=0\n    local i=0\n    local o=0\n    local u=0\n    local space=0\n\
    \    local len=${#string}\n    for ((i=0; i<len; i++)); do\n        if [[ ${string:$i:1}\
    \ == ' ' ]]; then\n            if [[ $consonants -eq $num ]]; then\n         \
    \       words+=($word)\n            fi\n            word=''\n            consonants=0\n\
    \            space=1\n        else\n            if [[ $space -eq 1 ]]; then\n\
    \                space=0\n            else\n                word+=\" \"\n    \
    \        fi\n            word+=\"${string:$i:1}\"\n            case ${string:$i:1}\
    \ in\n                [b-df-hj-np-tv-z])\n                    consonants=$((consonants+1))\n\
    \                    ;;\n            esac\n        fi\n    done\n    if [[ $consonants\
    \ -eq $num ]]; then\n        words+=($word)\n    fi\n    echo ${words[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=\"$1\"\n    local n=\"$2\"\n    local result=\"\"\n    local\
    \ word=\"\"\n    local consonants=\"\"\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n   \
    \ local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n   \
    \ local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local a=0\n    local b=0\n    local c=0\n    local d=0\n    local e=0\n   \
    \ local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(consonants_count\
    \ $word) -eq $n ]]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8e4iovpr.sh: line 27: consonants_count: command not found

    /tmp/tmp8e4iovpr.sh: line 27: consonants_count: command not found

    /tmp/tmp8e4iovpr.sh: line 27: consonants_count: command not found

    /tmp/tmp8e4iovpr.sh: line 27: consonants_count: command not found

    /tmp/tmp8e4iovpr.sh: line 27: consonants_count: command not found

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local word=\"\
    \"\n    local consonants=0\n    local i=0\n    local c=\"\"\n    local vowels=\"\
    aeiou\"\n    local is_vowel=0\n    local is_consonant=0\n    local is_space=0\n\
    \    local is_letter=0\n    local is_word=0\n    local is_word_end=0\n    local\
    \ is_word_start=0\n    local is_word_middle=0\n    local is_word_found=0\n   \
    \ local is_word_found_first=0\n    local is_word_found_last=0\n    local is_word_found_middle=0\n\
    \    local is_word_found_end=0\n    local is_word_found_start=0\n    local is_word_found_middle=0\n\
    \    local is_word_found_middle_first=0\n    local is_word_found_middle_last=0\n\
    \    local is_word_found_middle_middle=0\n    local is_word_found_middle_end=0\n\
    \    local is_word_found_middle_start=0\n    local is_word_found_middle_middle=0\n\
    \    local is_word_found_middle_middle_first=0\n    local is_word_found_middle_middle_last=0\n\
    \    local is_word_found_middle_middle_middle=0\n    local is_word_found_middle_middle_end=0\n\
    \    local is_word_found_middle_middle_start=0\n    local is_word_found_middle_middle_middle=0\n\
    \    local is_word_found_middle_middle_middle_first=0\n    local is_word_found_middle_middle_middle_last=0\n\
    \    local is_word_found_middle_middle_middle_middle=0\n    local is_word_found_middle_middle_middle_end=0\n\
    \    local is_word_found_middle_middle_middle_start=0\n    local is_word_found_middle_middle_middle_middle=0\n\
    \    local is_word_found_middle_middle_\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr ' ' '\\n')\n    local result=()\n    for word\
    \ in $words; do\n        local count=$(echo $word | grep -o '[^aeiou]' | wc -l)\n\
    \        if [ $count -eq $2 ]; then\n            result+=(\"\\\"$word\\\"\")\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | sed 's/[^bcdfghjklmnpqrstvwxz]//g' | wc -c)\n        if [ $count -eq $n ];\
    \ then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local str=$1\n  local num=$2\n  local words=$(echo $str | tr ' ' '\\n')\n\
    \  local result=()\n  for word in $words; do\n    local count=$(echo $word | grep\
    \ -o '[^aeiouAEIOU]' | wc -l)\n    if [ $count -eq $num ]; then\n      result+=($word)\n\
    \    fi\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in ${words[@]}; do\n   \
    \     local consonants=$(echo $word | sed 's/[aeiou]//g')\n        if [ ${#consonants}\
    \ -eq $number ]; then\n            result+=($word)\n        fi\n    done\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | grep -o -i '[^aeiouy]' | wc -l)\n        if [[ $consonants -eq $n ]];\
    \ then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\" | tr '\\n' ' ' |\
    \ sed 's/ $//'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr \" \" \"\\n\"))\n    local result=()\n    for word in ${words[@]}; do\n\
    \        local consonants=$(echo $word | tr -cd \"[^aeiouAEIOU]\" | wc -c)\n \
    \       if [ $consonants -eq $number ]; then\n            result+=($word)\n  \
    \      fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n  local words=$(echo \"$1\" | tr \" \" \"\\n\")\n  local result=()\n  for\
    \ word in $words; do\n    if [[ $(echo \"$word\" | grep -o -P \"[^aeiouy]\" |\
    \ wc -l) -eq $2 ]]; then\n      result+=(\"\\\"$word\\\"\")\n    fi\n  done\n\
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=$(echo \"$str\" | tr -s\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local count=$(echo\
    \ \"$word\" | tr -cd '[^aeiouAEIOU]' | wc -c)\n        if [[ $count -eq $n ]];\
    \ then\n            result+=(\"$word\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\" | tr '\\n' ' ' |\
    \ sed 's/ $//'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # TODO: implement this function\n    echo '[\"'$1'\"]'\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local words=($(echo \"\
    $string\" | tr ' ' '\\n'))\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        local count=$(echo \"$word\" | sed 's/[^bcdfghjklmnpqrstvwxz]//g'\
    \ | wc -c)\n        if [ \"$count\" -eq \"$num\" ]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr -s ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\" | tr -d '\"'\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=()\n    local word=\"\
    \"\n    local consonants=0\n    local i=0\n    local c=\"\"\n    local vowels=\"\
    aeiou\"\n    local is_vowel=0\n    local is_consonant=0\n    local is_space=0\n\
    \    local is_letter=0\n    local is_end=0\n    local is_start=0\n    local is_word=0\n\
    \    local is_consonant_word=0\n    local is_consonant_word_end=0\n    local is_consonant_word_start=0\n\
    \    local is_consonant_word_start_end=0\n    local is_consonant_word_start_end_space=0\n\
    \    local is_consonant_word_start_end_letter=0\n    local is_consonant_word_start_end_consonant=0\n\
    \    local is_consonant_word_start_end_vowel=0\n    local is_consonant_word_start_end_consonant_vowel=0\n\
    \    local is_consonant_word_start_end_consonant_vowel_space=0\n    local is_consonant_word_start_end_consonant_vowel_letter=0\n\
    \    local is_consonant_word_start_end_consonant_vowel_consonant=0\n    local\
    \ is_consonant_word_start_end_consonant_vowel_consonant_space=0\n    local is_consonant_word_start_end_consonant_vowel_consonant_letter=0\n\
    \    local is_consonant_word_start_end_consonant_vowel_consonant_consonant=0\n\
    \    local is_consonant_word_start_end_consonant_vowel_consonant_consonant_space=0\n\
    \    local is_consonant_word_start_end_consonant_vowel_consonant_consonant_letter=0\n\
    \    local is_\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local consonants=$(echo $word | sed 's/[aeiou]//g')\n\
    \        if [ ${#consonants} -eq $2 ]; then\n            result=\"$result \\\"\
    $word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=($1)\n    local n=$2\n    local result=()\n    for word in\
    \ \"${words[@]}\"; do\n        local consonants=$(echo $word | grep -o -E '[^aeiouAEIOU\
    \ ]' | wc -l)\n        if [[ $consonants -eq $n ]]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo \"[${result[@]}]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in ${words[@]}; do\n   \
    \     local count=$(echo $word | grep -o -i '[^aeiouy]' | wc -l)\n        if [\
    \ $count -eq $number ]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local words=($(echo\
    \ \"$string\" | tr ' ' '\\n'))\n    local result=()\n    for word in \"${words[@]}\"\
    ; do\n        local consonants=$(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc\
    \ -l)\n        if [ \"$consonants\" -eq \"$number\" ]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g')\n        if [[ ${#consonants} -eq $n ]]; then\n\
    \            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in ${words[@]}; do\n   \
    \     local count=$(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if\
    \ [ $count -eq $number ]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiou]//gi' | wc -m)\n        if [ $consonants -eq $n ];\
    \ then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local word\n    local words\n    local\
    \ result\n    local consonants\n    local i\n    local c\n    local len\n    local\
    \ consonant\n    local consonants=\"bcdfghjklmnpqrstvwxyz\"\n    local len=${#consonants}\n\
    \    local consonant\n    local result\n    for word in $s; do\n        consonants=0\n\
    \        for ((i=0; i<${#word}; i++)); do\n            c=${word:$i:1}\n      \
    \      for ((j=0; j<len; j++)); do\n                consonant=${consonants:$j:1}\n\
    \                if [[ $c == $consonant ]]; then\n                    consonants=$((consonants+1))\n\
    \                fi\n            done\n        done\n        if [[ $consonants\
    \ == $n ]]; then\n            result=\"$result \\\"$word\\\"\"\n        fi\n \
    \   done\n    echo \"[$result]\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr \" \" \"\\n\"))\n    local result=()\n    for word in ${words[@]}; do\n\
    \        local consonants=$(echo $word | sed 's/[aeiou]//g' | wc -c)\n       \
    \ if [ $consonants -eq $number ]; then\n            result+=($word)\n        fi\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | tr -d '[aeiouAEIOU ]' | wc -c)\n        if [ $consonants -eq $n ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # your code here\n    echo \"Not implemented\"\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo \"$1\" | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo \"$word\" | grep -o\
    \ '[^aeiou]' | wc -l) -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\"\
    )\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=$(echo $s | tr ' ' '\\n')\n\
    \    local result=()\n    for word in $words; do\n        local consonants=$(echo\
    \ $word | tr -cd 'bcdfghjklmnpqrstvwxyz' | wc -c)\n        if [ $consonants -eq\
    \ $n ]; then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=$(echo $str | tr ' ' '\\\
    n')\n    local result=()\n    for word in $words; do\n        local cons=$(echo\
    \ $word | sed -E 's/[aeiou]//g')\n        if [ ${#cons} -eq $n ]; then\n     \
    \       result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n       \
    \     result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr ' ' '\\n'))\n\
    \    local result=()\n    for word in ${words[@]}; do\n        local count=$(echo\
    \ $word | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n \
    \           result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr \" \" \"\\\
    n\"))\n    local result=()\n    for word in ${words[@]}; do\n        local consonants=$(echo\
    \ $word | tr -d \"[aeiouAEIOU]\" | wc -c)\n        if [ $consonants -eq $n ];\
    \ then\n            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local -i i\n    local -i j\n    local -i k\n    local -i l\n\
    \    local -i m\n    local -i n\n    local -i o\n    local -i p\n    local -i\
    \ q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i consonant_count\n    local -i word_length\n    local -i word_count\n    local\
    \ -i word_index\n    local -i consonant_count_index\n    local -i consonant_count_length\n\
    \    local -i result_index\n    local -i result_length\n    local -i consonant_count_match\n\
    \    local -i consonant_count_match_index\n    local -i consonant_count_match_length\n\
    \    local -i consonant_count_match_found\n    local -i consonant_count_match_found_index\n\
    \    local -i consonant_count_match_found_length\n    local -i consonant_count_match_found_match\n\
    \    local -i consonant_count_match_found_match_index\n    local -i consonant_count_match_found_match_length\n\
    \    local -i consonant_count_match_found_match_found\n    local -i consonant_count_match_found_match_found_index\n\
    \    local -i consonant_count_match_found_match_found_length\n    local -i consonant_count_match_found_match_found_match\n\
    \    local -i consonant_count_match_found_match_found_match_index\n    local -i\
    \ consonant_count_match_found_match_found_match_length\n    local -i consonant_count_match_found_match_found_match_found\n\
    \    local -i consonant_count_match_found_match_found_match_found_index\n    local\
    \ -i consonant_count_match_found_match_found_\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ \" \" \"\\n\")\n    local result=()\n    for word in $words; do\n        local\
    \ consonants=$(echo $word | tr -d -c \"[bcdfghjklmnpqrstvwxyz]\")\n        if\
    \ [ ${#consonants} -eq $n ]; then\n            result+=(\\\"$word\\\")\n     \
    \   fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=()\n    local word=()\n\
    \    local consonants=()\n    local vowels=()\n    local result=()\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n\
    \    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n \
    \   local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n  \
    \  local y=0\n    local z=0\n    local a=0\n    local b=0\n    local c=0\n   \
    \ local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($string)\n   \
    \ local result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n\
    \        for ((i=0; i<${#word}; i++)); do\n            local char=${word:$i:1}\n\
    \            if [[ $char =~ [^aeiouAEIOU] ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [[ $count -eq $number ]]; then\n   \
    \         result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($string)\n   \
    \ local result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq $number ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=$(echo \"$string\"\
    \ | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ consonants=$(echo \"$word\" | tr -cd '[^aeiouAEIOU]' | wc -m)\n        if [\
    \ \"$consonants\" -eq \"$n\" ]; then\n            result+=(\"\\\"$word\\\"\")\n\
    \        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=\"$1\"\n    local n=\"$2\"\n    local words=($(echo \"$str\"\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in \"${words[@]}\"; do\n\
    \        if [[ $(echo \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l) -eq \"$n\"\
    \ ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n  \
    \  echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local word\n    local -i n_consonants\n    local\
    \ -i i\n    local -i len\n    local -i n\n    local -i n_words\n    local -i n_consonants_word\n\
    \    local -i n_vowels_word\n    local -i n_consonants_word_max\n    local -i\
    \ n_vowels_word_max\n    local -i n_consonants_word_min\n    local -i n_vowels_word_min\n\
    \    local -i n_consonants_max\n    local -i n_vowels_max\n    local -i n_consonants_min\n\
    \    local -i n_vowels_min\n    local -i n_consonants_max_count\n    local -i\
    \ n_vowels_max_count\n    local -i n_consonants_min_count\n    local -i n_vowels_min_count\n\
    \    local -i n_consonants_max_count_word\n    local -i n_vowels_max_count_word\n\
    \    local -i n_consonants_min_count_word\n    local -i n_vowels_min_count_word\n\
    \    local -i n_consonants_max_count_word_index\n    local -i n_vowels_max_count_word_index\n\
    \    local -i n_consonants_min_count_word_index\n    local -i n_vowels_min_count_word_index\n\
    \    local -i n_consonants_max_count_word_index_prev\n    local -i n_vowels_max_count_word_index_prev\n\
    \    local -i n_consonants_min_count_word_index_prev\n    local -i n_vowels_min_count_word_index_prev\n\
    \    local -i n_consonants_max_count_word_index_prev_prev\n    local -i n_vowels_max_count_word_index_prev_prev\n\
    \    local -i n_consonants_min_count_word_index_prev_prev\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local number=\"$2\"\n    local words=()\n  \
    \  local word=\"\"\n    local consonants=0\n    local i=0\n    local j=0\n   \
    \ local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local\
    \ p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n\
    \    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n \
    \   local a=0\n    local e=0\n    local i=0\n    local o=0\n    local u=0\n  \
    \  local space=0\n    local letter=\"\"\n    local vowels=\"aeiou\"\n    local\
    \ consonants=\"bcdfghjklmnpqrstvwxyz\"\n    local length=${#string}\n    for ((i=0;\
    \ i<length; i++)); do\n        letter=\"${string:$i:1}\"\n        if [[ \"$letter\"\
    \ == \" \" ]]; then\n            space=1\n        else\n            space=0\n\
    \        fi\n        if [[ \"$space\" == \"1\" ]]; then\n            if [[ \"\
    $word\" != \"\" ]]; then\n                words+=(\"$word\")\n               \
    \ word=\"\"\n            fi\n        else\n            word+=\"$letter\"\n   \
    \     fi\n    done\n    if [[ \"$word\" != \"\" ]]; then\n        words+=(\"$word\"\
    )\n    fi\n    for ((i=0; i<${#words[@]}; i++)); do\n        word=\"${words[$i]}\"\
    \n        consonants=0\n        for ((j=0; j<${#word}; j++)); do\n           \
    \ letter=\"${word:$j:1}\"\n            for ((k=0; k<${#vowels}; k++)); do\n  \
    \              if [[ \"$letter\" == \"${vowels:$k:1}\" ]]; then\n            \
    \        a=1\n                    break\n                else\n              \
    \      a=0\n                fi\n            done\n            for ((k=0; k<${#consonants};\
    \ k++));\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpusxx41ng.sh: line 88: syntax error near unexpected token `}''

    /tmp/tmpusxx41ng.sh: line 88: `}''

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | grep -o \"[^aeiouAEIOU]\" | wc -l)\n        if [ $count -eq $n ]; then\n \
    \           result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words\n    local word\n\
    \    local consonants\n    local consonant\n    local result\n    words=$(echo\
    \ \"$string\" | tr ' ' '\\n')\n    for word in $words; do\n        consonants=$(echo\
    \ \"$word\" | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ \"$consonants\" -eq\
    \ \"$n\" ]; then\n            result=\"$result \\\"$word\\\"\"\n        fi\n \
    \   done\n    echo \"[$result]\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local words=($(echo \"\
    $string\" | tr ' ' '\\n'))\n    local result=()\n    local word\n    local consonants\n\
    \    for word in \"${words[@]}\"; do\n        consonants=$(echo \"$word\" | tr\
    \ -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n        if [ \"$consonants\" -eq \"\
    $num\" ]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr -s ' ' '\\n' | grep -E \"^[^aeiouAEIOU]*([aeiouAEIOU][^aeiouAEIOU]){$2}[^aeiouAEIOU]*$\"\
    \ | tr -d '\\n' | sed 's/ /\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | grep -o '[^aeiouAEIOU ]' | wc -l)\n        if [ $count -eq $n ]; then\n  \
    \          result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=()\n    local word=''\n\
    \    local consonants=0\n    local char=''\n    local vowels=('a' 'e' 'i' 'o'\
    \ 'u')\n    local is_vowel=0\n    local is_consonant=0\n    for ((i=0; i<${#string};\
    \ i++)); do\n        char=${string:$i:1}\n        if [[ \"$char\" == \" \" ]];\
    \ then\n            if [[ \"$consonants\" == \"$number\" ]]; then\n          \
    \      words+=(\"\\\"$word\\\"\")\n            fi\n            word=''\n     \
    \       consonants=0\n        else\n            word+=\"$char\"\n            is_vowel=0\n\
    \            for vowel in \"${vowels[@]}\"; do\n                if [[ \"$char\"\
    \ == \"$vowel\" ]]; then\n                    is_vowel=1\n                   \
    \ break\n                fi\n            done\n            if [[ \"$is_vowel\"\
    \ == \"0\" ]]; then\n                consonants=$((consonants+1))\n          \
    \  fi\n        fi\n    done\n    if [[ \"$consonants\" == \"$number\" ]]; then\n\
    \        words+=(\"\\\"$word\\\"\")\n    fi\n    echo \"${words[@]}\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr \" \" \"\\n\"))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        local -i count=0\n        for ((i=0;\
    \ i<${#word}; i++)); do\n            if [[ \"${word:$i:1}\" =~ [^aeiou] ]]; then\n\
    \                ((count++))\n            fi\n        done\n        if [[ $count\
    \ -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local count=$(echo\
    \ $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ $count -eq $n ]; then\n\
    \            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local c\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n   \n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | tr -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n        if [ $consonants\
    \ -eq $n ]; then\n            result+=(\\\"$word\\\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local word\n    local word_consonants\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local -i\
    \ word_length\n    local -i consonant_count\n    local -i word_count\n    local\
    \ -i word_index\n    local -i consonant_index\n    local -i consonant_length\n\
    \    local -i word_consonant_count\n    local -i word_consonant_index\n    local\
    \ -i word_consonant_length\n    local -i word_consonant_count\n    local -i word_consonant_index\n\
    \    local -i word_consonant_length\n    local -i word_consonant_count\n    local\
    \ -i word_consonant_index\n    local -i word_consonant_length\n    local -i word_consonant_count\n\
    \    local -i word_consonant_index\n    local -i word_consonant_length\n    local\
    \ -i word_consonant_count\n    local -i word_consonant_index\n    local -i word_consonant_length\n\
    \    local -i word_consonant_count\n    local -i word_consonant_index\n    local\
    \ -i word_consonant_length\n    local -i word_consonant_count\n    local -i word_consonant_index\n\
    \    local -i word_consonant_length\n    local -i word_consonant_count\n    local\
    \ -i word_consonant_index\n    local -i word_consonant_length\n    local -i word_consonant_count\n\
    \    local -i word_consonant_index\n    local -i word_consonant_length\n    local\
    \ -i word_consonant_count\n    local -i word_consonant_index\n    local -i word_consonant_length\n\
    \    local -i word_consonant_count\n    local -i word_consonant_index\n    local\
    \ -i word_consonant_length\n    local -i word_consonant_count\n    local -\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local count=$(echo\
    \ $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ $count -eq $n ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local\
    \ word=\"\"\n    local consonants=0\n    local consonant_regex=\"[^aeiouAEIOU]\"\
    \n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n\
    \    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n \
    \   local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n  \
    \  local x=0\n    local y=0\n    local z=0\n    local space_regex=\"[[:space:]]\"\
    \n    local quote_regex=\"\\\"\"\n    local escaped_quote_regex=\"\\\\\\\"\"\n\
    \    local escaped_space_regex=\"\\\\ \"\n    local escaped_backslash_regex=\"\
    \\\\\\\\\"\n    local escaped_backslash_replacement=\"\\\\\\\\\\\\\\\\\"\n   \
    \ local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_backslash_replacement=\"\\\\\\\\\\\\\\\\\"\n  \
    \  local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_backslash_replacement=\"\\\\\\\\\\\\\\\\\"\n  \
    \  local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_backslash_replacement=\"\\\\\\\\\\\\\\\\\"\n  \
    \  local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space_replacement=\"\
    \\\\\\\\ \"\n    local escaped_backslash_replacement=\"\\\\\\\\\\\\\\\\\"\n  \
    \  local escaped_quote_replacement=\"\\\\\\\\\\\"\"\n    local escaped_space\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # TODO: implement this function\n    echo \"Not implemented\"\n}\n\n\
    candidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr \" \" \"\\\
    n\"))\n    local result=()\n    for word in ${words[@]}; do\n        local consonants=$(echo\
    \ $word | sed -e 's/[aeiou]//g')\n        if [ ${#consonants} -eq $n ]; then\n\
    \            result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\
    \ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[^bcdfghjklmnpqrstvwxyz]//g' | sed 's/[aeiou]//g')\n        if\
    \ [ ${#consonants} -eq $n ]; then\n            result+=($word)\n        fi\n \
    \   done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=$(echo $string\
    \ | tr ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local\
    \ count=$(echo $word | grep -o -i '[bcdfghjklmnpqrstvwxyz]' | wc -l)\n       \
    \ if [ $count -eq $number ]; then\n            result+=($word)\n        fi\n \
    \   done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(echo $word |\
    \ grep -o -P \"[^aeiouAEIOU]\" | wc -l) -eq $num ]]; then\n            result+=($word)\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 <string> <integer>\"\
    \n        exit 1\n    fi\n    local string=$1\n    local n=$2\n    local words=($string)\n\
    \    local result=()\n    local word\n    for word in \"${words[@]}\"; do\n  \
    \      local count=$(echo $word | sed 's/[^aeiou]//g' | wc -c)\n        if [[\
    \ $count -eq $n ]]; then\n            result+=($word)\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a consonants_count\n\
    \    local -a result\n    local -i i=0\n    local -i j=0\n    local -i k=0\n \
    \   local -i count=0\n    local -i n=$2\n    local word\n    local consonant\n\
    \    local consonant_count\n    local result_str\n\n    words=($(echo \"$1\" |\
    \ tr \" \" \"\\n\"))\n    consonants=($(echo \"bcdfghjklmnpqrstvwxyz\" | tr -d\
    \ \"aeiou\"))\n    consonants_count=($(echo \"1111111111111111111111\" | tr -d\
    \ \"0\"))\n\n    for word in \"${words[@]}\"; do\n        for consonant in \"\
    ${consonants[@]}\"; do\n            consonant_count=${consonants_count[$i]}\n\
    \            count=$(echo \"$word\" | grep -o \"$consonant\" | wc -l)\n      \
    \      consonant_count=$((consonant_count + count))\n            consonants_count[$i]=$consonant_count\n\
    \            i=$((i + 1))\n        done\n        i=0\n        for consonant_count\
    \ in \"${consonants_count[@]}\"; do\n            if [ \"$consonant_count\" -eq\
    \ \"$n\" ]; then\n                result[$j]=\"\\\"$word\\\"\"\n             \
    \   j=$((j + 1))\n            fi\n        done\n        unset consonants_count\n\
    \        consonants_count=($(echo \"1111111111111111111111\" | tr -d \"0\"))\n\
    \    done\n\n    for result_str in \"${result[@]}\"; do\n        if [ \"$k\" -eq\
    \ 0 ]; then\n            echo -n \"[$result_str\"\n        else\n            echo\
    \ -n \", $result_str\"\n        fi\n        k=$((k + 1))\n    done\n    echo \"\
    ]\"\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate\
    \ \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\"\
    \ \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n\
    \    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\"\
    \ \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a result\n    local word\n    local consonants\n\
    \    local i\n    words=($(echo \"$1\" | tr ' ' '\\n'))\n    for word in \"${words[@]}\"\
    ; do\n        consonants=0\n        for ((i=0; i<${#word}; i++)); do\n       \
    \     if [[ \"${word:$i:1}\" =~ [^aeiou] ]]; then\n                consonants=$((consonants+1))\n\
    \            fi\n        done\n        if [[ $consonants -eq $2 ]]; then\n   \
    \         result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        if [[ $(echo $word |\
    \ grep -o -P \"[^aeiouAEIOU]\" | wc -l) -eq $n ]]; then\n            result+=(\"\
    \\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local\
    \ word=\"\"\n    local consonants=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n \
    \   local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n  \
    \  local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n   \
    \ local a=0\n    local e=0\n    local i=0\n    local o=0\n    local u=0\n    local\
    \ space=0\n    local char=\"\"\n    local consonants_list=\"bcdfghjklmnpqrstvwxyz\"\
    \n    local vowels_list=\"aeiou\"\n    local length=${#string}\n    for ((i=0;\
    \ i<length; i++)); do\n        char=${string:i:1}\n        if [[ \"$char\" ==\
    \ \" \" ]]; then\n            space=1\n        else\n            space=0\n   \
    \     fi\n        if [[ \"$space\" == \"1\" ]]; then\n            if [[ \"$word\"\
    \ != \"\" ]]; then\n                words+=(\"$word\")\n                word=\"\
    \"\n            fi\n        else\n            word+=\"$char\"\n        fi\n  \
    \  done\n    if [[ \"$word\" != \"\" ]]; then\n        words+=(\"$word\")\n  \
    \  fi\n    length=${#words[@]}\n    for ((i=0; i<length; i++)); do\n        word=${words[i]}\n\
    \        consonants=0\n        for ((j=0; j<${#word}; j++)); do\n            char=${word:j:1}\n\
    \            for ((k=0; k<${#consonants_list}; k++)); do\n                if [[\
    \ \"$char\" == \"${consonants_list:k:1}\" ]]; then\n                    consonants=$((consonants+1))\n\
    \                fi\n            done\n        done\n        if [[ \"$consonants\"\
    \ == \"$n\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcorc3zk4.sh: line 86: syntax error in conditional expression

    /tmp/tmpcorc3zk4.sh: line 101: syntax error near `"b''

    /tmp/tmpcorc3zk4.sh: line 101: `    [[ $(candidate "a b c d e f" "1") = "b c d
    f" ]]''

    '
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ \" \" \"\\n\")\n    local result=\"\"\n    for word in $words; do\n        local\
    \ consonants=$(echo $word | sed -e 's/[aeiou]//g')\n        if [ ${#consonants}\
    \ -eq $n ]; then\n            result=\"$result \\\"$word\\\"\"\n        fi\n \
    \   done\n    echo \"[$result]\"\n}\n\ncandidate() {\n    select_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\"\
    ) = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary\
    \ lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[\
    \ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle\
    \ sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[\
    \ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local num=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n    \
    \    for ((i=0; i<${#word}; i++)); do\n            local char=${word:$i:1}\n \
    \           if [[ $char =~ [^aeiou] ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ $count == $num ]]; then\n       \
    \     result+=($word)\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr ' ' '\\n'))\n\
    \    local result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | grep -o '[^aeiouAEIOU]' | wc -l)\n        if [ $consonants -eq $n ];\
    \ then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n  \
    \  [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[\
    \ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello\
    \ world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"\
    Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b\
    \ c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr \" \" \"\\n\" | grep -E \"^[^aeiou]{$2}$\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=\"\"\n  \
    \  for word in $words; do\n        local count=$(echo $word | grep -o -E '[^aeiouAEIOU]'\
    \ | wc -l)\n        if [ $count -eq $2 ]; then\n            result=\"$result \\\
    \"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words\n    local word\n  \
    \  local consonants\n    local consonant\n    local result\n    words=($(echo\
    \ $string | tr ' ' '\\n'))\n    for word in \"${words[@]}\"; do\n        consonants=0\n\
    \        for consonant in {b..z}; do\n            if [[ $word =~ $consonant ]];\
    \ then\n                consonants=$((consonants + 1))\n            fi\n     \
    \   done\n        if [[ $consonants -eq $n ]]; then\n            result=\"$result\
    \ \\\"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo $1 | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        local -i count=0\n        for ((\
    \ i=0; i<${#word}; i++ )); do\n            if [[ \"${word:$i:1}\" =~ [^aeiou]\
    \ ]]; then\n                ((count++))\n            fi\n        done\n      \
    \  if [[ $count -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n   \
    \     fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local i\n    local j\n    local k\n    local\
    \ consonant_count\n    local vowel_count\n    local word_count\n    local result_count\n\
    \    local char\n\n    words=($(echo \"$1\" | tr \" \" \"\\n\"))\n    consonants=(b\
    \ c d f g h j k l m n p q r s t v w x y z)\n    vowels=(a e i o u)\n    result=()\n\
    \    word_count=${#words[@]}\n    for ((i=0; i<word_count; i++)); do\n       \
    \ word=${words[$i]}\n        consonant_count=0\n        vowel_count=0\n      \
    \  for ((j=0; j<${#word}; j++)); do\n            char=${word:$j:1}\n         \
    \   for ((k=0; k<${#consonants[@]}; k++)); do\n                if [[ \"${consonants[$k]}\"\
    \ == \"$char\" ]]; then\n                    consonant_count=$((consonant_count\
    \ + 1))\n                fi\n            done\n            for ((k=0; k<${#vowels[@]};\
    \ k++)); do\n                if [[ \"${vowels[$k]}\" == \"$char\" ]]; then\n \
    \                   vowel_count=$((vowel_count + 1))\n                fi\n   \
    \         done\n        done\n        if [[ $consonant_count -eq $2 ]]; then\n\
    \            result+=(\"$word\")\n        fi\n    done\n    result_count=${#result[@]}\n\
    \    for ((i=0; i<result_count; i++)); do\n        echo -n \"\\\"${result[$i]}\\\
    \"\"\n        if [[ $i -lt $((result_count - 1)) ]]; then\n            echo -n\
    \ \", \"\n        fi\n    done\n    echo \"\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=($(echo $s | tr ' ' '\\n'))\n\
    \    local result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo\
    \ $word | sed 's/[^aeiou]//g' | wc -c)\n        if [ $count -eq $n ]; then\n \
    \           result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=($(echo $str | tr ' ' '\\\
    n'))\n    local result=()\n    for word in ${words[@]}; do\n        local count=$(echo\
    \ $word | tr -cd 'bcdfghjklmnpqrstvwxz' | wc -c)\n        if [ $count -eq $n ];\
    \ then\n            result+=(\\\"$word\\\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($(echo $string\
    \ | tr ' ' '\\n'))\n    local result=()\n    for word in ${words[@]}; do\n   \
    \     local count=$(echo $word | grep -o '[^aeiou]' | wc -l)\n        if [ $count\
    \ -eq $number ]; then\n            result+=($word)\n        fi\n    done\n   \
    \ echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=()\n    local word=\"\
    \"\n    local consonants=0\n    local letter=\"\"\n    local vowels=(\"a\" \"\
    e\" \"i\" \"o\" \"u\")\n    for (( i=0; i<${#string}; i++ )); do\n        letter=${string:$i:1}\n\
    \        if [[ \"$letter\" =~ [a-zA-Z] ]]; then\n            word+=$letter\n \
    \       else\n            if [[ ${#word} -gt 0 ]]; then\n                for ((\
    \ j=0; j<${#word}; j++ )); do\n                    if [[ ! \" ${vowels[@]} \"\
    \ =~ \" ${word:$j:1} \" ]]; then\n                        consonants=$((consonants+1))\n\
    \                    fi\n                done\n                if [[ $consonants\
    \ -eq $n ]]; then\n                    words+=(\"\\\"$word\\\"\")\n          \
    \      fi\n                word=\"\"\n                consonants=0\n         \
    \   fi\n        fi\n    done\n    if [[ ${#word} -gt 0 ]]; then\n        for ((\
    \ j=0; j<${#word}; j++ )); do\n            if [[ ! \" ${vowels[@]} \" =~ \" ${word:$j:1}\
    \ \" ]]; then\n                consonants=$((consonants+1))\n            fi\n\
    \        done\n        if [[ $consonants -eq $n ]]; then\n            words+=(\"\
    \\\"$word\\\"\")\n        fi\n    fi\n    echo ${words[@]}\n}\n\ncandidate() {\n\
    \    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=\"$1\"\n    local num=\"$2\"\n    local words=()\n    local\
    \ word=''\n    local consonants=0\n    local char=''\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local len=0\n    local len2=0\n    local len3=0\n  \
    \  local len4=0\n    local len5=0\n    local len6=0\n    local len7=0\n    local\
    \ len8=0\n    local len9=0\n    local len10=0\n    local len11=0\n    local len12=0\n\
    \    local len13=0\n    local len14=0\n    local len15=0\n    local len16=0\n\
    \    local len17=0\n    local len18=0\n    local len19=0\n    local len20=0\n\
    \    local len21=0\n    local len22=0\n    local len23=0\n    local len24=0\n\
    \    local len25=0\n    local len26=0\n    local len27=0\n    local len28=0\n\
    \    local len29=0\n    local len30=0\n    local len31=0\n    local len32=0\n\
    \    local len33=0\n    local len34=0\n    local len35=0\n    local len36=0\n\
    \    local len37=0\n    local len38=0\n    local len39=0\n    local len40=0\n\
    \    local len41=0\n    local len42=0\n    local len43=0\n    local len44=0\n\
    \    local len45=0\n    local len46=0\n    local len47=0\n    local len48=0\n\
    \    local len49=0\n    local len50=0\n    local len51=0\n    local len52=0\n\
    \    local len53=0\n    local len54=0\n    local len55=0\n    local len56=0\n\
    \    local len57=0\n    local len58=0\n    local len59=0\n    local len60=0\n\
    \    local len61=0\n    local len62=0\n    local len63=0\n    local len64=0\n\
    \    local len65=\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\"\
    \ ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n\
    \    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local consonant_count\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local -i index\n\
    \    local -i length\n    local -i count\n    local -i consonant_count\n    local\
    \ -i vowel_count\n    local -i word_count\n    local -i result_count\n    local\
    \ -i result_index\n    local -i result_length\n    local -i result_count\n   \
    \ local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n    local -i result_count\n\
    \    local -i result_index\n    local -i result_length\n}\n\ncandidate() {\n \
    \   select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary\
    \ had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a\
    \ little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\"\
    \ \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n\
    \    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\
    \" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo \"$1\" | tr ' ' '\\n' | awk -v n=$2 '{\n        gsub(/[^aeiou]/,\
    \ \"\", $0);\n        if (length($0) == n) {\n            print \"\\\"\"$0\"\\\
    \"\"\n        }\n    }'\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example: echo \"Hello world\"\n    echo \"Hello world\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # TODO: implement the function\n    echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=0\n    \
    \    for (( i=0; i<${#word}; i++ )); do\n            if [[ \"${word:$i:1}\" =~\
    \ [^aeiouAEIOU] ]]; then\n                (( count++ ))\n            fi\n    \
    \    done\n        if [[ $count -eq $n ]]; then\n            result+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words\n    local -a consonants\n    local -a vowels\n    local\
    \ -a result\n    local word\n    local consonant_count\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local space\n   \
    \ local quote\n    local comma\n    local period\n    local exclamation\n    local\
    \ question\n    local colon\n    local semicolon\n    local dash\n    local underscore\n\
    \    local left_parenthesis\n    local right_parenthesis\n    local left_bracket\n\
    \    local right_bracket\n    local left_brace\n    local right_brace\n    local\
    \ backslash\n    local forward_slash\n    local at\n    local hash\n    local\
    \ dollar\n    local percent\n    local caret\n    local ampersand\n    local asterisk\n\
    \    local plus\n    local equals\n    local less_than\n    local greater_than\n\
    \    local pipe\n    local tilde\n    local backtick\n    local single_quote\n\
    \    local double_quote\n    local number_sign\n    local number_0\n    local\
    \ number_1\n    local number_2\n    local number_3\n    local number_4\n    local\
    \ number_5\n    local number_6\n    local number_7\n    local number_8\n    local\
    \ number_9\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local A\n    local B\n    local C\n\
    \    local D\n    local E\n    local F\n    local G\n    local H\n    local I\n\
    \    local J\n    local K\n    local L\n    local M\n    local N\n    local\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr \" \" \"\\n\")\n    local result=()\n    for\
    \ word in $words; do\n        local count=$(echo $word | grep -o -i \"[bcdfghjklmnpqrstvwxyz]\"\
    \ | wc -l)\n        if [ $count -eq $2 ]; then\n            result+=(\\\"$word\\\
    \")\n        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    # Your code here\n    echo $1 | tr \" \" \"\\n\" | grep -E \"[^aeiouAEIOU]{$2}\"\
    \ | tr \"\\n\" \" \" | sed 's/^ *//g' | sed 's/ *$//g' | sed 's/ /\", \"/g' |\
    \ sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    select_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"\
    4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"\
    Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n \
    \   [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"\
    Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local number=$2\n    local words=($string)\n   \
    \ local result=()\n    for word in \"${words[@]}\"; do\n        local consonants=$(echo\
    \ $word | sed 's/[aeiou]//g')\n        if [ ${#consonants} -eq $number ]; then\n\
    \            result+=(\"$word\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 2
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local s=$1\n    local n=$2\n    local words=()\n    local word=''\n \
    \   local consonants=0\n    local c=''\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n\
    \    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n \
    \   local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n  \
    \  local a=0\n    local e=0\n    local i=0\n    local o=0\n    local u=0\n   \
    \ local space=0\n    local len=0\n    local len_s=${#s}\n    for (( i=0; i<len_s;\
    \ i++ )); do\n        c=${s:i:1}\n        if [[ $c == ' ' ]]; then\n         \
    \   if [[ $word != '' ]]; then\n                words+=(\"$word\")\n         \
    \       word=''\n            fi\n        else\n            word+=$c\n        fi\n\
    \    done\n    if [[ $word != '' ]]; then\n        words+=(\"$word\")\n    fi\n\
    \    len=${#words[@]}\n    for (( i=0; i<len; i++ )); do\n        word=${words[i]}\n\
    \        len_s=${#word}\n        consonants=0\n        for (( j=0; j<len_s; j++\
    \ )); do\n            c=${word:j:1}\n            if [[ $c == 'a' ]]; then\n  \
    \              a=1\n            elif [[ $c == 'e' ]]; then\n                e=1\n\
    \            elif [[ $c == 'i' ]]; then\n                i=1\n            elif\
    \ [[ $c == 'o' ]]; then\n                o=1\n            elif [[ $c == 'u' ]];\
    \ then\n                u=1\n            else\n                consonants=$((consonants+1))\n\
    \            fi\n        done\n        if [[ $consonants -eq $n ]];\n}\n\ncandidate()\
    \ {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had\
    \ a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white\
    \ space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\"\
    \ ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
    \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgkoqxj6x.sh: line 90: syntax error near unexpected token `}''

    /tmp/tmpgkoqxj6x.sh: line 90: `}''

    '
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local words=$(echo $1 | tr ' ' '\\n')\n    local result=()\n    for word\
    \ in $words; do\n        if [[ $(echo $word | grep -o '[^aeiouAEIOU]' | wc -l)\
    \ -eq $2 ]]; then\n            result+=(\"\\\"$word\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\" \"4\") = \"\
    little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\") = \"Mary lamb\"\
    \ ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate\
    \ \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\"\
    ) = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate\
    \ \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local str=$1\n    local n=$2\n    local words=$(echo $str | tr ' ' '\\\
    n')\n    local result=\"\"\n    for word in $words; do\n        local cons=$(echo\
    \ $word | sed -e 's/[aeiou]//g')\n        if [ ${#cons} -eq $n ]; then\n     \
    \       result=\"$result \\\"$word\\\"\"\n        fi\n    done\n    echo \"[$result]\"\
    \n}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 0
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local -a words=($(echo \"$1\" | tr ' ' '\\n'))\n    local -a result=()\n\
    \    for word in \"${words[@]}\"; do\n        if [[ $(echo \"$word\" | grep -o\
    \ '[^aeiouAEIOU]' | wc -l) -eq $2 ]]; then\n            result+=(\"$word\")\n\
    \        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    select_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Mary had a little lamb\"\
    \ \"4\") = \"little\" ]]\n    [[ $(candidate \"Mary had a little lamb\" \"3\"\
    ) = \"Mary lamb\" ]]\n    [[ $(candidate \"simple white space\" \"2\") = \"\"\
    \ ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"world\" ]]\n    [[ $(candidate\
    \ \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate \"\" \"4\") = \"\" ]]\n\
    \    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=$(echo $string | tr\
    \ ' ' '\\n')\n    local result=()\n    for word in $words; do\n        local count=$(echo\
    \ $word | tr -cd '[^aeiouAEIOU]' | wc -c)\n        if [ $count -eq $n ]; then\n\
    \            result+=(\\\"$word\\\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    echo $1 | tr -s ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\" | tr -d '\"'\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018267
- exit_code: 1
  program: "#!/bin/bash\n# Given a string s and a natural number n, you have been\
    \ tasked to implement \n# a function that returns a list of all words from string\
    \ s that contain exactly \n# n consonants, in order these words appear in the\
    \ string s.\n# If the string s is empty then the function should return an empty\
    \ list.\n# Note: you may assume the input string contains only letters and spaces.\n\
    # Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"\
    ']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"\
    lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words\
    \ \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\"\
    \ \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words()\
    \ {\n    local string=$1\n    local n=$2\n    local words=($string)\n    local\
    \ result=()\n    for word in \"${words[@]}\"; do\n        local count=$(echo $word\
    \ | grep -o '[^aeiou ]' | wc -l)\n        if [ $count -eq $n ]; then\n       \
    \     result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
    \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"\
    simple white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\"\
    ) = \"world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n   \
    \ [[ $(candidate \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"\
    1\") = \"b c d f\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660018268
