name: HumanEval_61_correct_bracketing
language: sh
prompt: "#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return True if\
  \ every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing\
  \ \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing\
  \ \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n\
  # $1 is a string\ncorrect_bracketing() {\n"
tests: "}\n\ncandidate() {\n    correct_bracketing \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"()\") = \"true\" ]]\n    [[ $(candidate \"(()())\") =\
  \ \"true\" ]]\n    [[ $(candidate \"()()(()())()\") = \"true\" ]]\n    [[ $(candidate\
  \ \"()()((()()())())(()()(()))\") = \"true\" ]]\n    [[ $(candidate \"((()())))\"\
  ) = \"false\" ]]\n    [[ $(candidate \")(()\") = \"false\" ]]\n    [[ $(candidate\
  \ \"(\") = \"false\" ]]\n    [[ $(candidate \"((((\") = \"false\" ]]\n    [[ $(candidate\
  \ \")\") = \"false\" ]]\n    [[ $(candidate \"(()\") = \"false\" ]]\n    [[ $(candidate\
  \ \"()()(()())())(()\") = \"false\" ]]\n    [[ $(candidate \"()()(()())()))()\"\
  ) = \"false\" ]]\n}\n\nrun_test"
completions: ["    local brackets=\"$1\"\n    local stack=\"\"\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        local bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            stack=\"$stack$bracket\"\n        elif [[ \"\
    $bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n     \
    \           echo \"false\"\n                return\n            fi\n         \
    \   stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if [[ \"$bracket\"\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ \"$bracket\"\
    \ == \")\" ]]; then\n            if [[ \"$stack\" == \"\" ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            stack=\"\
    ${stack:0:-1}\"\n        fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ stack=()\n    local brackets=$1\n    local i=0\n    local c\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        c=${brackets:$i:1}\n        if [[ \"$c\"\
    \ == \"(\" ]]; then\n            stack+=(\"$c\")\n        elif [[ \"$c\" == \"\
    )\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n                echo\
    \ \"false\"\n                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n  \
    \  local stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local\
    \ char=${brackets:$i:1}\n        if [[ $char == \"(\" ]]; then\n            stack=\"\
    $stack(\"\n        elif [[ $char == \")\" ]]; then\n            if [[ -z $stack\
    \ ]]; then\n                echo \"false\"\n                return\n         \
    \   fi\n            stack=${stack:0:-1}\n        fi\n    done\n    if [[ -z $stack\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local brackets=\"$1\"\n    local stack=\"\"\n    local bracket\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        bracket=\"${brackets:$i:1}\"\n        if\
    \ [[ \"$bracket\" == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n            if [[ -z \"$stack\" ]]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \        stack=\"${stack%?}\"\n        fi\n    done\n    if [[ -z \"$stack\" ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=\"$1\"\n    local open_brackets=0\n    local close_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"${brackets:$i:1}\"\
    \n        if [[ \"$bracket\" == \"(\" ]]; then\n            open_brackets=$((\
    \ open_brackets + 1 ))\n        elif [[ \"$bracket\" == \")\" ]]; then\n     \
    \       close_brackets=$(( close_brackets + 1 ))\n        fi\n        if [[ $close_brackets\
    \ -gt $open_brackets ]]; then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=$1\n    local stack=()\n    for ((i=0; i<${#brackets}; i++)); do\n\
    \        local bracket=${brackets:$i:1}\n        if [[ $bracket == \"(\" ]]; then\n\
    \            stack+=($bracket)\n        elif [[ $bracket == \")\" ]]; then\n \
    \           if [[ ${#stack[@]} -eq 0 ]]; then\n                echo \"false\"\n\
    \                return\n            fi\n            unset stack[${#stack[@]}-1]\n\
    \        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    local brackets=$1\n  \
    \  local stack=\"\"\n    local bracket\n    for ((i=0; i<${#brackets}; i++));\
    \ do\n        bracket=${brackets:$i:1}\n        if [[ \"$bracket\" == \"(\" ]];\
    \ then\n            stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]];\
    \ then\n            if [[ -z \"$stack\" ]]; then\n                echo \"false\"\
    \n                return\n            fi\n            stack=${stack:0:-1}\n  \
    \      fi\n    done\n    if [[ -z \"$stack\" ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            (( count++ ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            (( count-- ))\n        fi\n        if (( count\
    \ < 0 )); then\n            echo \"false\"\n            return\n        fi\n \
    \   done\n    if (( count == 0 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local open_brackets=0\n\
    \    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            open_brackets=$(( open_brackets + 1 ))\n    \
    \    elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            open_brackets=$((\
    \ open_brackets - 1 ))\n        fi\n        if [[ $open_brackets -lt 0 ]]; then\n\
    \            echo \"false\"\n            return\n        fi\n    done\n    if\
    \ [[ $open_brackets -eq 0 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local brackets=\"$1\"\n    local open=0\n    local\
    \ close=0\n    for ((i=0; i<${#brackets}; i++)); do\n        if [[ \"${brackets:$i:1}\"\
    \ == \"(\" ]]; then\n            ((open++))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            ((close++))\n        fi\n    done\n    if [[\
    \ $open -eq $close ]]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local brackets=$1\n    local stack=()\n    for ((i=0; i<${#brackets};\
    \ i++)); do\n        if [[ ${brackets:$i:1} == \"(\" ]]; then\n            stack+=($i)\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n                echo \"false\"\n                return\n   \
    \         fi\n            unset stack[${#stack[@]}-1]\n        fi\n    done\n\
    \    if [[ ${#stack[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "  local bracketing=\"$1\"\n  local stack=\"\"\n\
    \  local bracket\n  for (( i=0; i<${#bracketing}; i++ )); do\n    bracket=\"${bracketing:$i:1}\"\
    \n    if [[ \"$bracket\" == \"(\" ]]; then\n      stack=\"$stack(\"\n    elif\
    \ [[ \"$bracket\" == \")\" ]]; then\n      if [[ \"$stack\" == \"\" ]]; then\n\
    \        echo \"false\"\n        return\n      fi\n      stack=\"${stack:0:-1}\"\
    \n    fi\n  done\n  if [[ \"$stack\" == \"\" ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "    local brackets=$1\n    local open_brackets=0\n\
    \    local close_brackets=0\n    for (( i=0; i<${#brackets}; i++ )); do\n    \
    \    if [[ ${brackets:$i:1} == \"(\" ]]; then\n            open_brackets=$((open_brackets+1))\n\
    \        elif [[ ${brackets:$i:1} == \")\" ]]; then\n            close_brackets=$((close_brackets+1))\n\
    \        fi\n    done\n    if [[ $open_brackets -eq $close_brackets ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=\"$1\"\n    local open_count=0\n    local close_count=0\n    for ((\
    \ i=0; i<${#brackets}; i++ )); do\n        if [[ \"${brackets:$i:1}\" == \"(\"\
    \ ]]; then\n            open_count=$(( open_count + 1 ))\n        elif [[ \"${brackets:$i:1}\"\
    \ == \")\" ]]; then\n            close_count=$(( close_count + 1 ))\n        fi\n\
    \    done\n    if [[ $open_count -eq $close_count ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ count=0\n    for (( i=0; i<${#brackets}; i++ )); do\n        if [[ ${brackets:$i:1}\
    \ == \"(\" ]]; then\n            count=$(( count + 1 ))\n        elif [[ ${brackets:$i:1}\
    \ == \")\" ]]; then\n            count=$(( count - 1 ))\n        fi\n        if\
    \ [[ $count -lt 0 ]]; then\n            echo \"false\"\n            return\n \
    \       fi\n    done\n    if [[ $count -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ stack=\"\"\n    for (( i=0; i<${#brackets}; i++ )); do\n        local bracket=\"\
    ${brackets:$i:1}\"\n        if [[ \"$bracket\" == \"(\" ]]; then\n           \
    \ stack=\"$stack(\"\n        elif [[ \"$bracket\" == \")\" ]]; then\n        \
    \    if [[ \"$stack\" == \"\" ]]; then\n                echo \"false\"\n     \
    \           return\n            fi\n            stack=\"${stack:0:-1}\"\n    \
    \    fi\n    done\n    if [[ \"$stack\" == \"\" ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local brackets=\"$1\"\n    local\
    \ open_count=0\n    local close_count=0\n    for (( i=0; i<${#brackets}; i++ ));\
    \ do\n        if [[ \"${brackets:$i:1}\" == \"(\" ]]; then\n            (( open_count++\
    \ ))\n        elif [[ \"${brackets:$i:1}\" == \")\" ]]; then\n            (( close_count++\
    \ ))\n        fi\n    done\n    if [[ $open_count -eq $close_count ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ brackets=$1\n    local stack=()\n    local i=0\n    local bracket\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket\
    \ == \"(\" ]]; then\n            stack+=(\"$bracket\")\n        elif [[ $bracket\
    \ == \")\" ]]; then\n            if [[ ${#stack[@]} -eq 0 ]]; then\n         \
    \       echo \"false\"\n                return\n            fi\n            unset\
    \ stack[${#stack[@]}-1]\n        fi\n    done\n    if [[ ${#stack[@]} -eq 0 ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  local brackets=$1\n    local stack=\"\"\n    local bracket\n    for ((i=0;\
    \ i<${#brackets}; i++)); do\n        bracket=${brackets:$i:1}\n        if [[ $bracket\
    \ == \"(\" ]]; then\n            stack=\"$stack(\"\n        elif [[ $bracket ==\
    \ \")\" ]]; then\n            if [[ -z $stack ]]; then\n                echo \"\
    false\"\n                return\n            fi\n            stack=${stack:0:-1}\n\
    \        fi\n    done\n    if [[ -z $stack ]]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi"]
stop_tokens:
- "\n}"
