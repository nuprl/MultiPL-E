language: sh
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \" \" ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \\,\\\"/g')\\\"]\"\n    elif [[ $1 =~ \",\" ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\",\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ \\ |\\' ]]; then\n    echo -n \"[\"\n    echo -n \"$1\"\
    \ | tr ' ' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed -e 's/,$//'\n\
    \    echo -n \"]\"\n  elif [[ \"$1\" =~ , ]]; then\n    echo -n \"[\"\n    echo\
    \ -n \"$1\" | tr ',' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ',' | sed\
    \ -e 's/,$//'\n    echo -n \"]\"\n  else\n    echo -n \"$1\" | grep -o '[a-z]'\
    \ | awk '{print tolower($0)}' | awk '{a[$0]++}END{for(i in a)if(a[i]%2==1)print\
    \ i}' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local words=()\n  local word=\"\"\n  local char=\"\
    \"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n\
    \  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n\
    \  local e=0\n  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n\
    \  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n  local h=0\n\
    \  local i=0\n  local j=0\n  local k=0\n \n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo $1 | tr ' ' '\\n' | sed 's/^/\"\
    /g' | sed 's/$/\"/g'\n    elif [[ $1 =~ , ]]; then\n        echo $1 | tr ',' '\\\
    n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    else\n        echo $1 | grep -o '[a-z]'\
    \ | awk '{print ord($1)%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `ord'' not defined

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"[\\\"$1\\\"]\"\n\
    \    elif [[ \"$1\" =~ [, ] ]]; then\n        echo \"[\\\"${1//,/\\\",\\\"}\\\"\
    ]\"\n    else\n        echo \"$(echo \"$1\" | grep -o '[a-z]' | awk '{print tolower($0)}'\
    \ | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr36px6tt.sh: line 15: syntax error in conditional expression

    /tmp/tmpr36px6tt.sh: line 15: syntax error near `]''

    /tmp/tmpr36px6tt.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"\\\"$1\\\"\"\n      else\n  \
    \      echo \"\\\"$1\\\"\"\n      fi\n    else\n      echo \"\\\"$1\\\"\"\n  \
    \  fi\n  else\n    echo \"\\\"$1\\\"\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"$1\" | tr\
    \ ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print $1}' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,\\ ] ]]; then\n        echo \"\\\"$1\\\"\"\n   \
    \ elif [[ $1 =~ [,] ]]; then\n        echo \"\\\"${1//,/\\\" \\\"}\"\n    else\n\
    \        echo $(echo $1 | grep -o [a-z] | awk '{print tolower($0)}' | awk '{print\
    \ NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [ ] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"\
    /g')\\\"]\"\n  elif [[ $1 =~ [,] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    ,\"/g')\\\"]\"\n  else\n    echo \"$(echo $1 | sed 's/[^a-z]//g' | grep -o . |\
    \ awk '{print tolower($0)}' | awk '{if (NR % 2 == 1) print $0}' | wc -l)\"\n \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp886i91fe.sh: line 15: syntax error in conditional expression

    /tmp/tmp886i91fe.sh: line 15: syntax error near `]''

    /tmp/tmp886i91fe.sh: line 15: `  if [[ $1 =~ [ ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [[:space:]] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\"\
    , \"/g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    , \"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o [a-z] | awk '{print NR%2}'\
    \ | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ '[a-zA-Z]' | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0}\
    \ END {print s}'\n            else\n                echo $1 | grep -o '[a-zA-Z]'\
    \ | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END\
    \ {print s}'\n            fi\n        else\n            echo $1 | grep -o '[a-zA-Z]'\
    \ | awk '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END\
    \ {print s}'\n        fi\n    else\n        echo $1 | grep -o '[a-zA-Z]' | awk\
    \ '{print tolower($0)}' | awk '{print length($0)%2}' | awk '{s+=$0} END {print\
    \ s}'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^[:space:],] ]]; then\n        echo \"$1\" | grep -o\
    \ \"[[:lower:]]\" | awk '{print tolower($0)}' | awk '{if (NR % 2 == 1) {print\
    \ $0}}' | wc -l\n    elif [[ \"$1\" =~ [^[:space:]] ]]; then\n        echo \"\
    $1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | tr\
    \ ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ \\s ]]; then\n    echo \"$1\" | sed -e 's/\\s/\", \"/g'\n\
    \  elif [[ \"$1\" =~ , ]]; then\n    echo \"$1\" | sed -e 's/,/\", \"/g'\n  else\n\
    \    echo \"$1\" | sed -e 's/[a-z]/\\n&/g' | grep -c '[a-z]'\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local words=()\n    local count=0\n    if [[ \"\
    $string\" =~ [a-z] ]]; then\n        for (( i=0; i<${#string}; i++ )); do\n  \
    \          local char=${string:$i:1}\n            if [[ \"$char\" =~ [a-z] ]];\
    \ then\n                local ord=$(printf \"%d\" \"'$char\")\n              \
    \  if (( $ord % 2 == 0 )); then\n                    (( count++ ))\n         \
    \       fi\n            fi\n        done\n        echo \"$count\"\n    elif [[\
    \ \"$string\" =~ [,] ]]; then\n        IFS=',' read -ra words <<< \"$string\"\n\
    \        echo \"${words[@]}\"\n    else\n        IFS=' ' read -ra words <<< \"\
    $string\"\n        echo \"${words[@]}\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,\\ ] ]]; then\n        echo \"\\\"$1\\\"\"\n   \
    \ elif [[ $1 =~ [,] ]]; then\n        echo \"\\\"${1//,/\\\"\\\",\\\"}\\\"\"\n\
    \    else\n        echo \"${#1}\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [[:space:]] ]]; then\n    echo \"$1\" | tr ' ' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n  elif [[ \"$1\" =~ , ]]; then\n    echo \"$1\" | tr\
    \ ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n  else\n    echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{a[NR]=$0} END {for (i=1;i<=length(a);i++) {if (i%2==1) {print a[i]}}}'\
    \ | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ [a-z] | awk '{print length($0) % 2}' | grep -c 1\n            else\n       \
    \         echo $1 | grep -o [a-z] | awk '{print length($0) % 2}' | grep -c 1\n\
    \            fi\n        else\n            echo $1 | grep -o [a-z] | awk '{print\
    \ length($0) % 2}' | grep -c 1\n        fi\n    else\n        echo $1 | grep -o\
    \ [a-z] | awk '{print length($0) % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | awk '{print\
    \ \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n    elif [[ $1 =~ , ]]; then\n        echo\
    \ \"$1\" | tr ',' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n  \
    \  else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c\
    \ 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"\
    $(echo $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo \"$(echo $1\
    \ | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | tr ' ' '\\n'\
    \ | tr '\\'' '\\n' | tr ',' '\\n' | tr -d '\"' | tr -d '!' | tr -d '?' | tr -d\
    \ '.' | tr -d ';' | tr -d ':' | tr -d '-' | tr -d '(' | tr -d ')' | tr -d '['\
    \ | tr -d ']' | tr -d '{' | tr -d '}' | tr -d '*' | tr -d '&' | tr -d '^' | tr\
    \ -d '%' | tr -d '$' | tr -d '#' | tr -d '@' | tr -d '~' | tr -d '`' | tr -d '\\\
    \\' | tr -d '|' | tr -d '<' | tr -d '>' | tr -d '=' | tr -d '/' | tr -d '+' |\
    \ tr -d '0' | tr -d '1' | tr -d '2' | tr -d '3' | tr -d '4' | tr -d '5' | tr -d\
    \ '6' | tr -d '7' | tr -d '8' | tr -d '9' | tr -d '\\n' | tr -d '\\t' | tr -d\
    \ '\\r' | tr -d '\\v' | tr -d '\\f' | tr -d '\\b' | tr -d '\\a' | tr -d '\\e'\
    \ | tr -d '\\033' | tr -d '\\x1b' | tr -d '\\x1f' | tr -d '\\x7f' | tr -d '\\\
    x1a' | tr -d '\\x1c' | tr -d '\\x1d' | tr -d '\\x1e' | tr -d '\\x0c' | tr -d '\\\
    x0b' | tr -d '\\x0e' | tr -d '\\x0f' | tr -d '\\x0d' | tr -d '\\x0a' | tr -\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu2wbyqx5.sh: line 16: unexpected EOF while looking for matching
    ``''

    /tmp/tmpu2wbyqx5.sh: line 36: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [, ] ]]; then\n        echo \"$1\" | sed -e 's/[, ]/\\\
    n/g' | sed -e 's/^/\"/' -e 's/$/\"/'\n    else\n        echo \"$1\" | grep -o\
    \ '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwjbogzpj.sh: line 15: syntax error in conditional expression

    /tmp/tmpwjbogzpj.sh: line 15: syntax error near `]''

    /tmp/tmpwjbogzpj.sh: line 15: `    if [[ "$1" =~ [, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | sed 's/[^a-zA-Z,]/\\\
    \\&/g'\n    elif [[ \"$1\" =~ [^a-zA-Z] ]]; then\n        echo \"$1\" | sed 's/[^a-zA-Z]/\\\
    \\&/g'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' |\
    \ grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [\\ ] ]]; then\n        echo $1 | tr ' ' '\\n' | sed 's/^/\"\
    /g' | sed 's/$/\"/g'\n    elif [[ $1 =~ [,] ]]; then\n        echo $1 | tr ','\
    \ '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    else\n        echo $1 | grep -o\
    \ '[a-z]' | awk '{print $1}' | awk '{print length($0)}'\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\ |\\' ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\"\\\
    ,\\\"/g')\\\"]\"\n  elif [[ $1 =~ \\, ]]; then\n    echo \"[\\\"$(echo $1 | sed\
    \ 's/,/\",\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o \"[a-z]\" | awk\
    \ '{print NR%2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z0-9,\\!\\ ] ]]; then\n    echo \"Invalid input\"\n\
    \    return 1\n  fi\n  if [[ $1 =~ [\\ ] ]]; then\n    echo \"[$(echo $1 | sed\
    \ -e 's/ /\", \"/g')]\"\n  elif [[ $1 =~ [,] ]]; then\n    echo \"[$(echo $1 |\
    \ sed -e 's/,/\", \"/g')]\"\n  else\n    echo \"$(echo $1 | grep -o '[a-z]' |\
    \ awk '{print NR%2}' | grep -c 1)\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\s ]]; then\n    echo \"[\\\"$(echo \"$1\" | sed 's/ /\\\\\
    \ /g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo \"$1\" | sed\
    \ 's/,/\\\\,/g')\\\"]\"\n  else\n    echo \"$(echo \"$1\" | grep -o '[a-z]' |\
    \ awk '{print NR%2}' | grep -c 1)\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [^a-zA-Z,\\!\\ ] ]]; then\n    echo \"\\\"$1\\\"\"\n  elif\
    \ [[ \"$1\" =~ [\\ ] ]]; then\n    echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"\
    /'\n  elif [[ \"$1\" =~ [,] ]]; then\n    echo \"$1\" | tr ',' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n  else\n    echo \"$1\" | sed 's/[^a-z]//g' | grep -o . | awk '{print\
    \ tolower($0)}' | awk '{if (NR % 2 == 1) print $0}' | wc -l\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo \"$1\"\
    \ | sed 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ \"$1\" =~ , ]]; then\n        echo\
    \ \"[\\\"$(echo \"$1\" | sed 's/,/\",\"/g')\\\"]\"\n    else\n        echo \"\
    $(echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z] ]]; then\n    if [[ $1 =~ [^,] ]]; then\n      echo\
    \ \"\\\"$1\\\"\"\n    else\n      echo $1 | tr ',' '\\n' | awk '{print \"\\\"\"\
    $1\"\\\"\"}'\n    fi\n  else\n    echo $1 | grep -o [a-z] | awk '{print tolower($1)}'\
    \ | awk '{print index(\"abcdefghijklmnopqrstuvwxyz\", $1)%2}' | awk '{sum+=$1}\
    \ END {print sum}'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ '[a-zA-Z]' | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if(NR%2==1)print}'\
    \ | wc -l\n            else\n                echo $1 | tr ',' '\\n' | awk '{print\
    \ \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n            fi\n        else\n        \
    \    echo $1 | tr ' ' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n\
    \        fi\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `ord'' not defined

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    local result=''\n    if [[ $words =~ ' ' ]]; then\n\
    \        result=$(echo $words | sed -e 's/ /\", \"/g')\n    elif [[ $words =~\
    \ ',' ]]; then\n        result=$(echo $words | sed -e 's/,/\", \"/g')\n    else\n\
    \        result=$(echo $words | grep -o '[a-z]' | awk '{print NR%2}' | grep -c\
    \ 1)\n    fi\n    echo \"[\\\"$result\\\"]\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | sed 's/[^a-zA-Z]//g' | grep\
    \ -o . | awk '{print tolower($0)}' | awk '{if (NR % 2 == 1) print $0}' | wc -l\n\
    \  elif [[ $1 =~ [,] ]]; then\n    echo $1 | sed 's/[^,]//g' | wc -l\n  else\n\
    \    echo $1 | sed 's/[^ ]//g' | wc -l\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\s ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"\
    /g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    \ \"\\\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR % 2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=$1\n    if [[ $text =~ [[:space:]] ]]; then\n        echo\
    \ \"[\\\"$(echo $text | sed 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $text =~ ,\
    \ ]]; then\n        echo \"[\\\"$(echo $text | sed 's/,/\" \"\\\"/g')\\\"]\"\n\
    \    else\n        echo \"$(echo $text | grep -o [a-z] | sort | uniq -c | awk\
    \ '$1 % 2 == 1 {print $2}' | wc -l)\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | tr\
    \ ' ' '\\n' | sed 's/^/\"/;s/$/\"/')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n  \
    \      echo \"[\\\"$(echo $1 | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/')\\\"]\"\n\
    \    else\n        echo \"$(echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1)\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ '[a-zA-Z]' | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0\
    \ % 2 == 1) {print $0}}' | wc -l\n            else\n                echo $1 |\
    \ tr -d '\\n' | sed 's/\\(.*\\),/\\1/' | sed 's/\\(.*\\) /\\1/' | sed 's/\\(.*\\\
    )!/\\1/' | sed 's/\\(.*\\)\\./\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\\
    )\\\"/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\\
    (.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed\
    \ 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/'\
    \ | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\\
    /\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\\
    )\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\\
    (.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed 's/\\(.*\\)\\\\/\\1/' | sed\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmqgj7tcv.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmpmqgj7tcv.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr -d '\\n' | tr -d '\\r'\
    \ | tr -d ' ' | grep -o '[a-z]' | awk '{print length($0)}'\n      else\n     \
    \   echo $1 | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -o '[a-z]' | awk '{print\
    \ length($0)}'\n      fi\n    else\n      echo $1 | tr -d '\\n' | tr -d '\\r'\
    \ | tr -d ' ' | grep -o '[a-z]' | awk '{print length($0)}'\n    fi\n  else\n \
    \   echo $1 | tr -d '\\n' | tr -d '\\r' | tr -d ' ' | grep -o '[a-z]' | awk '{print\
    \ length($0)}'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local words=()\n    local word=\"\"\n    local\
    \ i=0\n    local c=\"\"\n    local odd_count=0\n    local in_word=0\n    local\
    \ in_quote=0\n    local in_escape=0\n    local in_comma=0\n    local in_space=0\n\
    \    local in_backslash=0\n    local in_single_quote=0\n    local in_double_quote=0\n\
    \    local in_double_backslash=0\n    local in_double_quote_escape=0\n    local\
    \ in_single_quote_escape=0\n    local in_backslash_escape=0\n    local in_comma_escape=0\n\
    \    local in_space_escape=0\n    local in_single_quote_escape_escape=0\n    local\
    \ in_double_quote_escape_escape=0\n    local in_backslash_escape_escape=0\n  \
    \  local in_comma_escape_escape=0\n    local in_space_escape_escape=0\n    local\
    \ in_double_backslash_escape=0\n    local in_double_backslash_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape=0\n    local in_double_backslash_escape_escape_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape_escape_escape=0\n    local\
    \ in_double_backslash_escape_escape_escape_escape_escape_escape=0\n    local in_double_backslash_escape_escape_escape_escape_escape_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape_escape_escape_escape_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape_escape_escape_escape_escape_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape=0\n\
    \    local in_double_backslash_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape=0\n\
    \    local\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"[$(echo \"$1\" | sed\
    \ -e 's/ /\", \"/g')]\"\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"[$(echo\
    \ \"$1\" | sed -e 's/,/\", \"/g')]\"\n    else\n        echo \"$(echo \"$1\" |\
    \ grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    if [[ $words =~ [[:space:]] ]]; then\n        echo\
    \ \"[\\\"$(echo $words | sed -e 's/ /\"\\,\\\"/g')\\\"]\"\n    elif [[ $words\
    \ =~ , ]]; then\n        echo \"[\\\"$(echo $words | sed -e 's/,/\",\"/g')\\\"\
    ]\"\n    else\n        local count=0\n        for (( i=0; i<${#words}; i++ ));\
    \ do\n            local char=${words:$i:1}\n            local ord=$(printf \"\
    %d\" \"'$char\")\n            if (( $ord % 2 == 1 )); then\n                ((\
    \ count++ ))\n            fi\n        done\n        echo $count\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z0-9,\\!\\ ] ]]; then\n        echo \"Invalid input\"\
    \n        return\n    fi\n    if [[ $1 =~ [\\ ] ]]; then\n        echo \"[$(echo\
    \ $1 | sed 's/ /\", \"/g')]\"\n    elif [[ $1 =~ [,] ]]; then\n        echo \"\
    [$(echo $1 | sed 's/,/\", \"/g')]\"\n    else\n        echo $(echo $1 | grep -o\
    \ [a-z] | awk '{print tolower($0)}' | awk '{if(NR%2==1) {print $0}}' | wc -l)\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z0-9, ] ]]; then\n        echo \"[\\\"$1\\\"]\"\
    \n    elif [[ \"$1\" =~ [,] ]]; then\n        echo \"[\\\"${1//,/\\\"\\\",\\\"\
    }\\\"]\"\n    else\n        echo \"${#1}\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm1ttml0u.sh: line 15: syntax error in conditional expression

    /tmp/tmpm1ttml0u.sh: line 15: syntax error near `]''

    /tmp/tmpm1ttml0u.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | tr ',' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{a[NR]=$0} END {for (i=1;i<=NR;i++) {if (i%2==1) {print a[i]}}}' | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"\\\"$1\\\"\"\n \
    \   elif [[ \"$1\" =~ [, ] ]]; then\n        echo \"\\\"${1//,/\\\",\\\"}\"\n\
    \    else\n        echo \"${#1}\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphwmbt4xn.sh: line 15: syntax error in conditional expression

    /tmp/tmphwmbt4xn.sh: line 15: syntax error near `]''

    /tmp/tmphwmbt4xn.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \" \" ]]; then\n        echo \"$1\" | tr -s ' ' '\\n'\
    \ | awk '{print \"\\\"\"$1\"\\\"\"}' | tr '\\n' ' '\n    elif [[ \"$1\" =~ \"\
    ,\" ]]; then\n        echo \"$1\" | tr -s ',' '\\n' | awk '{print \"\\\"\"$1\"\
    \\\"\"}' | tr '\\n' ' '\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print ord($1)}' | awk '{if ($1 % 2 == 1) {sum += 1}} END {print sum}'\n  \
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [a-zA-Z] ]]; then\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \      if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n          if [[ \"$1\" =~ [a-zA-Z] ]]; then\n            if [[ \"$1\"\
    \ =~ [a-zA-Z] ]]; then\n              if [[ \"$1\" =~ [a-zA-Z] ]]; then\n    \
    \            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                  if [[ \"$1\"\
    \ =~ [a-zA-Z] ]]; then\n                    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \                      if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                   \
    \     if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                          if [[ \"$1\"\
    \ =~ [a-zA-Z] ]]; then\n                            if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n                              if [[ \"$1\" =~ [a-zA-Z] ]]; then\n    \
    \                            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n             \
    \                     if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                    \
    \                if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                         \
    \             if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                            \
    \            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                             \
    \             if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                            \
    \                if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                         \
    \                     if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                    \
    \                            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n             \
    \                                     if [[ \"$1\" =~ [a-zA\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdn_frhgo.sh: line 39: syntax error in conditional expression

    /tmp/tmpdn_frhgo.sh: line 40: syntax error near `}''

    /tmp/tmpdn_frhgo.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \" \" ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\"\\,\\\
    \"/g')\\\"]\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo \"[\\\"$(echo $1 | sed\
    \ 's/,/\",\"/g')\\\"]\"\n  else\n    echo \"$(echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1)\"\n  fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^[:space:],] ]]; then\n        echo \"\\\"$1\\\"\"\n\
    \    else\n        echo \"$(echo \"$1\" | tr -d -c '[:lower:]' | grep -o . | awk\
    \ '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z,] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \\,\\\"/g')\\\"]\"\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n    echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\",\"/g')\\\"]\"\n  else\n    echo $1 | grep -o [a-z] | awk '{print\
    \ NR%2}' | grep 1 | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    if [[ \"$words\" =~ [^a-zA-Z,\\ ] ]]; then\n    \
    \    echo \"\\\"$words\\\"\"\n    elif [[ \"$words\" =~ [,] ]]; then\n       \
    \ echo \"\\\"${words//,/\\\" \\\"}\"\n    else\n        echo \"$(echo \"$words\"\
    \ | grep -o '[a-z]' | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep\
    \ -c 1)\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(( $(echo $1 | tr\
    \ -d -c 'a-z' | wc -c) % 2 ))\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr -d '\\n' | sed 's/[^a-zA-Z]/\
    \ /g' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr ' ' '\\n' | sed 's/^/\"/g' | sed\
    \ 's/$/\"/g'\n  else\n    echo $1 | tr -d '\\n' | sed 's/[^a-zA-Z]//g' | awk '{print\
    \ length($0)%2}'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo \"$(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    if [[ $string =~ [[:space:]] ]]; then\n        echo\
    \ \"[\\\"$(echo $string | sed 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $string =~\
    \ , ]]; then\n        echo \"[\\\"$(echo $string | sed 's/,/\" \"\\\"/g')\\\"\
    ]\"\n    else\n        local odd_count=0\n        for (( i=0; i<${#string}; i++\
    \ )); do\n            local char=${string:$i:1}\n            if [[ $(( $(printf\
    \ \"%d\" \"'$char\") % 2 )) -eq 1 ]]; then\n                odd_count=$(( odd_count\
    \ + 1 ))\n            fi\n        done\n        echo $odd_count\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo \"$(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo \"$(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR % 2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local s=$1\n  if [[ $s =~ [\\ \\t] ]]; then\n    echo \"[\\\"$(echo $s\
    \ | sed 's/ /\"\\,\\\"/g')\\\"]\"\n  elif [[ $s =~ , ]]; then\n    echo \"[\\\"\
    $(echo $s | sed 's/,/\",\"/g')\\\"]\"\n  else\n    echo $(echo $s | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,\\! ] ]]; then\n        echo \"\\\"$1\\\"\"\n  \
    \  elif [[ $1 =~ [,\\!] ]]; then\n        echo \"\\\"${1//,/\\\" \\\"}\\\"\"\n\
    \    else\n        echo $(echo $1 | grep -o [a-z] | awk '{print tolower($0)}'\
    \ | awk '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpce8jvxpe.sh: line 15: syntax error in conditional expression

    /tmp/tmpce8jvxpe.sh: line 15: syntax error near `]''

    /tmp/tmpce8jvxpe.sh: line 15: `    if [[ $1 =~ [^a-zA-Z,\! ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr -d '\\n' | tr -d ' ' |\
    \ tr -d ',' | grep -o . | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep\
    \ -c 1\n      else\n        echo $1 | tr -d '\\n' | tr -d ' ' | tr -d ',' | grep\
    \ -o . | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep -c 1\n      fi\n\
    \    else\n      echo $1 | tr -d '\\n' | tr -d ' ' | tr -d ',' | grep -o . | awk\
    \ '{print tolower($0)}' | awk '{print NR % 2}' | grep -c 1\n    fi\n  else\n \
    \   echo $1 | tr -d '\\n' | tr -d ' ' | tr -d ',' | grep -o . | awk '{print tolower($0)}'\
    \ | awk '{print NR % 2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [\\ \\!\\,] ]]; then\n    echo \"$1\" | sed 's/[\\ \\!\\\
    ,]/\\n/g' | sed 's/^/\"/g' | sed 's/$/\"/g'\n  else\n    echo \"$1\" | grep -o\
    \ '[a-z]' | awk '{a[NR]=$0} END {for (i=1;i<=NR;i++) if (i%2) print a[i]}' | wc\
    \ -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\  ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | tr ',' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0 % 2 == 1) {print\
    \ $0}}' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\s ]]; then\n    echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n  elif [[ $1 =~ , ]]; then\n    echo \"$1\" | tr ',' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' | grep\
    \ -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [\\ ] ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ [,] ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\",\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                if [[ \"\
    $1\" =~ [a-zA-Z] ]]; then\n                    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \                        if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                 \
    \           if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                              \
    \  if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                                    if [[\
    \ \"$1\" =~ [a-zA-Z] ]]; then\n                                        if [[ \"\
    $1\" =~ [a-zA-Z] ]]; then\n                                            if [[ \"\
    $1\" =~ [a-zA-Z] ]]; then\n                                                if\
    \ [[ \"$1\" =~ [a-zA-Z] ]]; then\n                                           \
    \         if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                                \
    \                        if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                 \
    \                                           if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \                                                                if [[ \"$1\"\
    \ =~ [a-zA-Z] ]]; then\n                                                     \
    \               if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                          \
    \                                              if [[ \"$1\" =~ [a-zA-Z] ]]; then\n\
    \                                                                            if\
    \ [[ \"$1\" =~ [a-zA-Z] ]]; then\n                                           \
    \                                     if [[ \"$1\" =~ [a-zA-Z] ]]; then\n    \
    \                                                                            \
    \    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                                     \
    \                                                   if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n                                                                     \
    \                       if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                  \
    \                                                                            \
    \ \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp1b_n8xi.sh: line 39: syntax error near unexpected token `}''

    /tmp/tmpp1b_n8xi.sh: line 39: `}''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | tr ',' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk\
    \ '{print tolower($0)}' | awk '{a[$0]++}END{for(i in a)if(a[i]%2==1)print i}'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\  ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"\
    /g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    \ \"\\\"/g')\\\"]\"\n  else\n    echo \"$(echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR%2}' | grep -c 1)\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=\"$1\"\n    local words\n    local word\n    local i\n   \
    \ local n\n    local c\n    local ord\n\n    if [[ \"$text\" =~ [[:space:]] ]];\
    \ then\n        words=($(echo \"$text\" | tr ' ' '\\n'))\n        for word in\
    \ \"${words[@]}\"; do\n            echo -n '\"'\n            for ((i = 0; i <\
    \ ${#word}; i++)); do\n                c=\"${word:$i:1}\"\n                if\
    \ [[ \"$c\" =~ [\\\\\"] ]]; then\n                    echo -n \"\\\\$c\"\n   \
    \             else\n                    echo -n \"$c\"\n                fi\n \
    \           done\n            echo -n '\" '\n        done\n    elif [[ \"$text\"\
    \ =~ , ]]; then\n        words=($(echo \"$text\" | tr ',' '\\n'))\n        for\
    \ word in \"${words[@]}\"; do\n            echo -n '\"'\n            for ((i =\
    \ 0; i < ${#word}; i++)); do\n                c=\"${word:$i:1}\"\n           \
    \     if [[ \"$c\" =~ [\\\\\"] ]]; then\n                    echo -n \"\\\\$c\"\
    \n                else\n                    echo -n \"$c\"\n                fi\n\
    \            done\n            echo -n '\" '\n        done\n    else\n       \
    \ n=0\n        for ((i = 0; i < ${#text}; i++)); do\n            c=\"${text:$i:1}\"\
    \n            ord=$(printf '%d' \"'$c\")\n            if ((ord >= 97 && ord <=\
    \ 122 && i % 2 == 0)); then\n                ((n++))\n            fi\n       \
    \ done\n        echo \"$n\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6r_2cvd.sh: line 29: syntax error in conditional expression

    /tmp/tmpe6r_2cvd.sh: line 43: syntax error near `[\\"]''

    /tmp/tmpe6r_2cvd.sh: line 43: `                if [[ "$c" =~ [\\"] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo $1 | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo $1 | tr ',' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{a[NR]=$0}\
    \ END {for (i=1;i<=NR;i++) {if (i%2==1) {print a[i]}}}' | wc -l\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed 's/^/\"\
    /g' | sed 's/$/\"/g'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | tr ','\
    \ '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    else\n        echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{print tolower($0)}' | awk '{print ord($0)%2}' | grep -c 1\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `ord'' not defined

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"\\\"$1\\\"\"\n \
    \   elif [[ \"$1\" =~ [a-zA-Z] ]]; then\n        echo \"$(echo \"$1\" | tr -cd\
    \ 'a-z' | grep -o . | awk '{print tolower($0)}' | awk '{print length($0)%2}' |\
    \ grep -c 1)\"\n    else\n        echo \"$(echo \"$1\" | tr ',' ' ')\"\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplll_oc0a.sh: line 15: syntax error in conditional expression

    /tmp/tmplll_oc0a.sh: line 15: syntax error near `]''

    /tmp/tmplll_oc0a.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"$1\" | sed 's/[[:space:]]/\"\
    , \"/g'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | sed 's/,/\", \"/g'\n\
    \    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR % 2}' | grep\
    \ -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=\"$1\"\n    local result=\"\"\n    if [[ \"$text\" =~ [[:space:]]\
    \ ]]; then\n        result=\"$(echo \"$text\" | sed 's/\\([^[:space:]]\\+\\)/\"\
    \\1\"/g')\"\n    elif [[ \"$text\" =~ , ]]; then\n        result=\"$(echo \"$text\"\
    \ | sed 's/\\([^,]\\+\\)/\"\\1\"/g')\"\n    else\n        local count=0\n    \
    \    for ((i=0; i<${#text}; i++)); do\n            local char=\"${text:$i:1}\"\
    \n            local ord=\"$(printf \"%d\" \"'$char\")\"\n            if ((ord\
    \ % 2 == 0)); then\n                ((count++))\n            fi\n        done\n\
    \        result=\"$count\"\n    fi\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [\\ \\!\\,] ]]; then\n    echo -n \"[\"\n    echo -n $1 | sed\
    \ -e 's/\\([\\ \\!\\,]\\)/\"\\1\"/g'\n    echo -n \"]\"\n  else\n    echo -n $1\
    \ | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo $1 | tr -d ' ' | tr -d ',' | grep\
    \ -o '[a-z]' | awk '{print length($0)}'\n  elif [[ $1 =~ [,] ]]; then\n    echo\
    \ $1 | tr -d ' ' | tr -d ',' | grep -o '[a-z]' | awk '{print length($0)}'\n  else\n\
    \    echo $1 | tr -d ' ' | tr -d ',' | grep -o '[a-z]' | awk '{print length($0)}'\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [[:space:]] ]]; then\n        echo \"$1\" | tr ' ' '\\\
    n' | sed 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"\
    $1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0\
    \ % 2 == 1) {print $0}}' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo $1 | tr ' ' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo $1 | tr ',' '\\\
    n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [,] ]]; then\n   \
    \         echo \"[\\\"$(echo $1 | sed 's/,/\\\",\\\"/g')\\\"]\"\n        else\n\
    \            echo $(echo $1 | grep -o [a-z] | awk '{print length}')\n        fi\n\
    \    else\n        echo \"[\\\"$(echo $1 | sed 's/ /\\\",\\\"/g')\\\"]\"\n   \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"\
    $(echo $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 |\
    \ grep -o \"[a-z]\" | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | tr -d '\\\
    n' | sed 's/\\([^ ]\\)/\"\\1\"/g'\n    elif [[ \"$1\" =~ [^a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([^,]\\)/\"\\1\"/g'\n    else\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([a-z]\\)/\\1\\n/g' | grep -v '^$'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  if [[ $string =~ [[:space:]] ]]; then\n    echo\
    \ \"$string\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n  elif [[ $string =~ , ]];\
    \ then\n    echo \"$string\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n  else\n\
    \    echo \"$string\" | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n \
    \ fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [,] ]]; then\n      echo\
    \ $1 | tr ',' '\\n'\n    else\n      echo $1 | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n    fi\n  else\n    echo $1 | tr ' ' '\\n'\n  fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\ |\\' ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\"\\\
    ,\\\"/g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed\
    \ 's/,/\",\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{print NR % 2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  echo $1 | tr -d '\\n' | sed -e 's/[^a-zA-Z]/\\n/g' | grep -v '^$' | wc -l\n\
    \    else\n      echo $1 | tr -d '\\n' | sed -e 's/[^a-zA-Z]/\\n/g' | grep -v\
    \ '^$' | sed -e 's/^/\"/g' -e 's/$/\"/g' | tr '\\n' ',' | sed -e 's/,$//g'\n \
    \   fi\n  else\n    echo $1 | tr -d '\\n' | sed -e 's/[^a-zA-Z]/\\n/g' | grep\
    \ -v '^$' | sed -e 's/^/\"/g' -e 's/$/\"/g' | tr '\\n' ',' | sed -e 's/,$//g'\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then\n        echo '\"'\"$1\"'\"'\n  \
    \  elif [[ $1 =~ [,] ]]; then\n        echo '\"'\"${1//,/\\\" \\\"}\"'\"'\n  \
    \  else\n        echo \"${#1}\"\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpplk1h3hv.sh: line 15: syntax error in conditional expression

    /tmp/tmpplk1h3hv.sh: line 15: syntax error near `]''

    /tmp/tmpplk1h3hv.sh: line 15: `    if [[ $1 =~ [^a-zA-Z0-9, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local s=$1\n  if [[ $s =~ [^a-zA-Z,\\ ] ]]; then\n    echo \"\\\"$s\\\"\
    \"\n  elif [[ $s =~ [a-zA-Z] ]]; then\n    echo $(echo $s | tr -d , | wc -w)\n\
    \  else\n    echo $(echo $s | tr -d , | wc -c)\n  fi\n}\n\ncandidate() {\n   \
    \ split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | sed -e 's/[^a-zA-Z]/\
    \ /g' | tr ' ' '\\n' | awk '{print length($1)}' | awk '{sum+=$1} END {print sum}'\n\
    \            else\n                echo $1 | sed -e 's/[^a-zA-Z]/ /g' | tr ' '\
    \ '\\n' | awk '{print length($1)}' | awk '{sum+=$1} END {print sum}'\n       \
    \     fi\n        else\n            echo $1 | sed -e 's/[^a-zA-Z]/ /g' | tr '\
    \ ' '\\n' | awk '{print length($1)}' | awk '{sum+=$1} END {print sum}'\n     \
    \   fi\n    else\n        echo $1 | sed -e 's/[^a-zA-Z]/ /g' | tr ' ' '\\n' |\
    \ awk '{print length($1)}' | awk '{sum+=$1} END {print sum}'\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo -n \"[\"\n        for word in\
    \ $1; do\n            echo -n \"\\\"$word\\\" \"\n        done\n        echo -n\
    \ \"]\"\n    elif [[ $1 =~ , ]]; then\n        echo -n \"[\"\n        for word\
    \ in $(echo $1 | tr \",\" \"\\n\"); do\n            echo -n \"\\\"$word\\\" \"\
    \n        done\n        echo -n \"]\"\n    else\n        echo -n $(echo $1 | grep\
    \ -o \"[a-z]\" | grep -v -n -e \"[02468]\" | wc -l)\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [\\ \\t] ]]; then\n    echo \"$1\" | sed 's/\\([^ ]*\\\
    )/\"\\1\"/g'\n  elif [[ \"$1\" =~ [,] ]]; then\n    echo \"$1\" | sed 's/\\([^,]*\\\
    )/\"\\1\"/g'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' |\
    \ grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    if [[ \"$str\" =~ \\  ]]; then\n        echo \"\
    $str\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n    elif [[ \"$str\" =~ , ]]; then\n\
    \        echo \"$str\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n    \
    \    echo \"$str\" | grep -o '[a-z]' | awk '{print length($0)}'\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,] ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\"\\,\\\"/g')\\\"]\"\n    elif [[ $1 =~ [^a-zA-Z] ]]; then\n        echo\
    \ \"[\\\"$(echo $1 | sed 's/,/\"\\,\\\"/g')\\\"]\"\n    else\n        echo \"\
    $(echo $1 | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,] ]]; then\n        echo -n \"[\"\n        echo\
    \ -n $1 | sed -e 's/\\(.\\)/\"\\1\" /g'\n        echo -n \"]\"\n    elif [[ $1\
    \ =~ [^a-zA-Z] ]]; then\n        echo -n $1 | sed -e 's/[^a-zA-Z]//g' | grep -o\
    \ . | awk '{print tolower($0)}' | awk '{if(NR%2==1) print $0}' | wc -l\n    else\n\
    \        echo -n $1 | sed -e 's/[^a-zA-Z]//g' | grep -o . | awk '{print tolower($0)}'\
    \ | awk '{if(NR%2==1) print $0}' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local words=$(echo \"$string\" | tr -s ' ' '\\\
    n' | tr -d '\\n')\n    if [ -z \"$words\" ]; then\n        words=$(echo \"$string\"\
    \ | tr -s ',' '\\n' | tr -d '\\n')\n        if [ -z \"$words\" ]; then\n     \
    \       words=$(echo \"$string\" | grep -o '[a-z]' | awk '{print ord($0)}' | awk\
    \ '{if ($0 % 2 == 1) print $0}' | wc -l)\n        fi\n    fi\n    echo \"$words\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z,] ]]; then\n        echo \"[\\\"${1//[^a-zA-Z]/\\\
    \",\\\"}\\\"]\"\n    elif [[ $1 =~ [^a-zA-Z,] ]]; then\n        echo \"[\\\"${1//[^a-zA-Z,]/\\\
    \",\\\"}\\\"]\"\n    else\n        echo \"$(echo $1 | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{if (NR % 2 == 1) {print $0}}' | wc -l)\"\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | sed -E 's/([a-zA-Z]+)/\"\\1\"/g'\n        else\n  \
    \          echo \"$1\" | sed -E 's/([a-zA-Z]+)/\"\\1\"/g' | wc -w\n        fi\n\
    \    else\n        echo \"$1\" | sed -E 's/([a-zA-Z]+)/\"\\1\"/g'\n    fi\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [,] ]]; then\n   \
    \         echo $1 | tr ',' '\\n'\n        else\n            echo $1 | tr -cd [a-z]\
    \ | grep -o . | awk '{print tolower($0)}' | awk '{a[$0]++} END {for (i in a) if\
    \ (a[i] % 2 == 1) print i}' | wc -l\n        fi\n    else\n        echo $1 | tr\
    \ ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  if [[ $words =~ \\ |\\' ]]; then\n    echo $words | sed\
    \ -E 's/[ ]+/\",\"/g'\n  elif [[ $words =~ , ]]; then\n    echo $words | sed -E\
    \ 's/,+/\",\"/g'\n  else\n    local count=0\n    for (( i=0; i<${#words}; i++\
    \ )); do\n      local char=${words:$i:1}\n      local ord=$(printf '%d' \"'$char\"\
    )\n      if (( $ord % 2 == 0 )); then\n        (( count++ ))\n      fi\n    done\n\
    \    echo $count\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | tr -d '\\n' | tr -d ' ' |\
    \ sed 's/\\(.\\)/\"\\1\"/g'\n      else\n        echo $1 | tr -d '\\n' | tr -d\
    \ ' ' | sed 's/\\(.\\)/\"\\1\"/g'\n      fi\n    else\n      echo $1 | tr -d '\\\
    n' | tr -d ' ' | sed 's/\\(.\\)/\"\\1\"/g'\n    fi\n  else\n    echo $1 | tr -d\
    \ '\\n' | tr -d ' ' | sed 's/\\(.\\)/\"\\1\"/g'\n  fi\n}\n\ncandidate() {\n  \
    \  split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\"\
    \ ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\  ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"$1\" | tr\
    \ ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{a[NR]=$0} END {for (i=1;i<=length(a);i++) if (i%2==1) print a[i]}' |\
    \ wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    if [[ \"$string\" =~ \\ |\\' ]]; then\n    \
    \    echo \"$string\" | tr ' ' '\\n' | tr '\\'' '\\n' | tr '\\!' '\\n' | tr ','\
    \ '\\n' | tr '\"' '\\n' | tr '\\.' '\\n' | tr '\\?' '\\n' | tr '\\-' '\\n' | tr\
    \ '\\:' '\\n' | tr '\\;' '\\n' | tr '\\(' '\\n' | tr '\\)' '\\n' | tr '\\[' '\\\
    n' | tr '\\]' '\\n' | tr '\\{' '\\n' | tr '\\}' '\\n' | tr '\\#' '\\n' | tr '\\\
    $' '\\n' | tr '\\%' '\\n' | tr '\\&' '\\n' | tr '\\*' '\\n' | tr '\\+' '\\n' |\
    \ tr '\\=' '\\n' | tr '\\^' '\\n' | tr '\\|' '\\n' | tr '\\~' '\\n' | tr '\\`'\
    \ '\\n' | tr '\\@' '\\n' | tr '\\>' '\\n' | tr '\\<' '\\n' | tr '\\_' '\\n' |\
    \ tr '\\!' '\\n' | tr '\\?' '\\n' | tr '\\:' '\\n' | tr '\\;' '\\n' | tr '\\('\
    \ '\\n' | tr '\\)' '\\n' | tr '\\[' '\\n' | tr '\\]' '\\n' | tr '\\{' '\\n' |\
    \ tr '\\}' '\\n' | tr '\\#' '\\n' | tr '\\$' '\\n' | tr '\\%' '\\n' | tr '\\&'\
    \ '\\n' | tr '\\*' '\\n' | tr '\\+' '\\n' | tr '\\=' '\\n' | tr '\\^' '\\n' |\
    \ tr '\\|' '\\n' | tr '\\~' '\\n\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp55vbv_qe.sh: line 33: unexpected EOF while looking for matching
    `"''

    /tmp/tmp55vbv_qe.sh: line 37: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ \" \" ]]; then\n    echo \"$1\" | sed -e 's/ /\", \"/g'\n\
    \  elif [[ \"$1\" =~ \",\" ]]; then\n    echo \"$1\" | sed -e 's/,/\", \"/g'\n\
    \  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print length($0) % 2}' | grep\
    \ -c 1\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=\"$1\"\n    local words\n    local word\n    local i\n   \
    \ local c\n    local count\n    local ord\n    local ord_a\n    local ord_z\n\
    \    local ord_a_ord_z\n    local ord_a_ord_z_2\n    local ord_a_ord_z_2_1\n \
    \   local ord_a_ord_z_2_1_1\n    local ord_a_ord_z_2_1_1_1\n    local ord_a_ord_z_2_1_1_1_1\n\
    \    local ord_a_ord_z_2_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1\n    local\
    \ ord_a_ord_z_2_1_1_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1_1_1\n    local\
    \ ord_a_ord_z_2_1_1_1_1_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1\n\
    \    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1_1_1\n\
    \    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1_1_1_1_1\n\
    \    local ord_a_ord_z_2_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1\n    local ord_a_ord_z_2_1_1_1_1_1_1_1\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-z] ]]; then\n        echo $(echo $1 | grep -o [a-z] |\
    \ awk '{print NR%2}' | grep -c 1)\n    elif [[ $1 =~ [,] ]]; then\n        echo\
    \ $(echo $1 | sed 's/,/\",\"/g')\n    else\n        echo $(echo $1 | sed 's/ /\"\
    ,\"/g')\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local words\n  if [[ \"$string\" =~ [[:space:]]\
    \ ]]; then\n    words=$(echo \"$string\" | sed -e 's/[[:space:]]/\",\"/g')\n \
    \ elif [[ \"$string\" =~ , ]]; then\n    words=$(echo \"$string\" | sed -e 's/,/\"\
    ,\"/g')\n  else\n    words=$(echo \"$string\" | sed -e 's/./&\\n/g' | grep -v\
    \ '[aeiou]' | wc -l)\n  fi\n  echo \"$words\"\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | tr -d '\\\
    n' | sed 's/\\([^ ]\\)/\"\\1\"/g'\n    elif [[ \"$1\" =~ [^a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([^,]\\)/\"\\1\"/g'\n    else\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([^a-zA-Z]\\)/\"\\1\"/g'\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"[\\\"$(echo \"$1\" |\
    \ sed 's/ /\" \"\\\\/g')\\\"]\"\n    elif [[ \"$1\" =~ , ]]; then\n        echo\
    \ \"[\\\"$(echo \"$1\" | sed 's/,/\" \"\\\\/g')\\\"]\"\n    else\n        echo\
    \ \"$(echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\  ]]; then\n        echo \"$1\" | tr ' ' '\\n' | sed\
    \ 's/^/\"/g' | sed 's/$/\"/g'\n    elif [[ \"$1\" =~ , ]]; then\n        echo\
    \ \"$1\" | tr ',' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    else\n        echo\
    \ \"$1\" | grep -o '[a-z]' | awk '{print ord($1)%2}' | grep -c 1\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n        fi\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [[:space:]] ]]; then\n        echo \"$1\" | tr ' ' '\\\
    n' | sed -e 's/^/\"/' -e 's/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n       \
    \ echo \"$1\" | tr ',' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n    else\n     \
    \   echo \"$1\" | grep -o '[a-z]' | awk '{print tolower($0)}' | awk '{print ord($0)}'\
    \ | awk '{if ($0 % 2 == 1) {print $0}}' | wc -l\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z0-9,] ]]; then\n    echo \"$1\" | tr -d '\\n' | sed\
    \ -e 's/\\([^ ]\\)/\"\\1\"/g'\n  elif [[ $1 =~ [^a-zA-Z0-9] ]]; then\n    echo\
    \ \"$1\" | tr -d '\\n' | sed -e 's/\\([^,]\\)/\"\\1\"/g'\n  else\n    echo \"\
    $1\" | tr -d '\\n' | sed -e 's/\\([^a-zA-Z0-9]\\)/\\1\\n/g' | grep -c '[a-z]'\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [,] ]]; then\n   \
    \         echo \"[\\\"$(echo $1 | sed 's/,/\\\",\\\"/g')\\\"]\"\n        else\n\
    \            echo $(echo $1 | tr -d -c 'a-z' | wc -c)\n        fi\n    else\n\
    \        echo \"[\\\"$(echo $1 | sed 's/ /\\\",\\\"/g')\\\"]\"\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"\\\"$1\\\"\"\n \
    \   elif [[ \"$1\" =~ [, ] ]]; then\n        echo \"$1\" | tr ' ' '\\n' | tr -d\
    \ ',' | tr '\\n' ' ' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    else\n        echo\
    \ \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgu8v2jql.sh: line 15: syntax error in conditional expression

    /tmp/tmpgu8v2jql.sh: line 15: syntax error near `]''

    /tmp/tmpgu8v2jql.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"\
    $(echo $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 |\
    \ grep -o '[a-z]' | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep -c\
    \ 1)\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local text=$1\n    if [[ $text =~ [[:space:]] ]]; then\n        echo\
    \ \"[\\\"$(echo $text | tr ' ' '\"','\"' | sed 's/^/\"/;s/$/\"/')\\\"]\"\n   \
    \ elif [[ $text =~ , ]]; then\n        echo \"[\\\"$(echo $text | tr ',' '\"','\"\
    ' | sed 's/^/\"/;s/$/\"/')\\\"]\"\n    else\n        echo $(echo $text | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo $1 | tr ' ' '\\n' | sed 's/^/\"\
    /;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo $1 | tr ',' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    else\n        echo $1 | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{a[$0]++}END{for(i in a)if(a[i]%2==1)c++}END{print c}'\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo \"\\\"$1\\\"\"\
    \n            else\n                echo $1\n            fi\n        else\n  \
    \          echo $1\n        fi\n    else\n        echo $1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\s ]]; then\n        echo \"$1\" | sed -e 's/\\s/\"\
    , \"/g'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"$1\" | sed -e 's/,/\"\
    , \"/g'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | sed -e 's/\\s/\",\"/g'\n\
    \    elif [[ $1 =~ , ]]; then\n        echo \"$1\" | sed -e 's/,/\",\"/g'\n  \
    \  else\n        echo \"$1\" | sed -e 's/./&\\n/g' | grep -v '[aeiou]' | wc -l\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z,\\!\\ ] ]]; then\n    echo \"\\\"$1\\\"\"\n  elif\
    \ [[ $1 =~ [\\ ] ]]; then\n    echo \"[$(echo $1 | sed 's/ /\", \"/g')]\"\n  elif\
    \ [[ $1 =~ [\\,] ]]; then\n    echo \"[$(echo $1 | sed 's/,/\", \"/g')]\"\n  else\n\
    \    echo $(echo $1 | grep -o [a-z] | awk '{print tolower($0)}' | awk '{a[$0]++}END{for(i\
    \ in a)if(a[i]%2==1)print i}' | wc -l)\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | sed 's/[^a-z]//g'\
    \ | grep -o . | awk '{print tolower($0)}' | awk '{print NR%2}' | grep -c 1)\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n        fi\n    else\n \
    \       echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local words\n  local word\n  local word_count\n\
    \  local i\n  local char\n  local char_count\n  local char_index\n  local char_index_odd\n\
    \  local char_index_even\n  local char_index_odd_count\n  local char_index_even_count\n\
    \  local char_index_odd_count_max\n  local char_index_even_count_max\n  local\
    \ char_index_odd_count_max_index\n  local char_index_even_count_max_index\n  local\
    \ char_index_odd_count_max_index_char\n  local char_index_even_count_max_index_char\n\
    \  local char_index_odd_count_max_index_char_count\n  local char_index_even_count_max_index_char_count\n\
    \  local char_index_odd_count_max_index_char_count_max\n  local char_index_even_count_max_index_char_count_max\n\
    \  local char_index_odd_count_max_index_char_count_max_index\n  local char_index_even_count_max_index_char_count_max_index\n\
    \  local char_index_odd_count_max_index_char_count_max_index_char\n  local char_index_even_count_max_index_char_count_max_index_char\n\
    \  local char_index_odd_count_max_index_char_count_max_index_char_count\n  local\
    \ char_index_even_count_max_index_char_count_max_index_char_count\n  local char_index_odd_count_max_index_char_count_max_index_char_count_max\n\
    \  local char_index_even_count_max_index_char_count_max_index_char_count_max\n\
    \  local char_index_odd_count_max_index_char_count_max_index_char_count_max_index\n\
    \  local char_index_even_count_max_index_char_count_max_index_char_count_max_index\n\
    \  local char_index_odd_count_max_index\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z,] ]]; then\n    echo \"[\\\"$(echo \"$1\" | sed 's/\
    \ /\" \"\\\"/g')\\\"]\"\n  elif [[ $1 =~ [^a-zA-Z] ]]; then\n    echo \"[\\\"\
    $(echo \"$1\" | sed 's/,/\" \"\\\"/g')\\\"]\"\n  else\n    echo \"$(echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print tolower($0)}' | awk '{a[$0]++}END{for(i in a)if(a[i]%2==1)print\
    \ i}' | wc -l)\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [, ] ]]; then\n    echo \"$1\" | sed 's/[, ]/\\n/g' | sed 's/^/\"\
    /' | sed 's/$/\"/'\n  else\n    echo \"$1\" | sed 's/[^a-z]//g' | sed 's/[a-z]/\\\
    n&/g' | grep -c '[a-z]'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoafw4p39.sh: line 15: syntax error in conditional expression

    /tmp/tmpoafw4p39.sh: line 15: syntax error near `]''

    /tmp/tmpoafw4p39.sh: line 15: `  if [[ $1 =~ [, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \" \" ]]; then\n        echo \"$1\" | sed -e 's/ /\"\
    , \"/g'\n    elif [[ \"$1\" =~ \",\" ]]; then\n        echo \"$1\" | sed -e 's/,/\"\
    , \"/g'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=\"$1\"\n  local words=()\n  local word=''\n  local c\n  local\
    \ i=0\n  local len=${#str}\n  local in_word=0\n  local in_quote=0\n  local quote_char=''\n\
    \  local odd_chars=0\n  local is_odd=0\n  local ord_a=97\n  local ord_z=122\n\
    \  local ord_A=65\n  local ord_Z=90\n  local ord_0=48\n  local ord_9=57\n  local\
    \ ord_space=32\n  local ord_comma=44\n  local ord_quote=34\n  local ord_backslash=92\n\
    \  local ord_exclamation=33\n  local ord_question=63\n  local ord_period=46\n\
    \  local ord_colon=58\n  local ord_semicolon=59\n  local ord_dash=45\n  local\
    \ ord_underscore=95\n  local ord_plus=43\n  local ord_equals=61\n  local ord_open_paren=40\n\
    \  local ord_close_paren=41\n  local ord_open_bracket=91\n  local ord_close_bracket=93\n\
    \  local ord_open_brace=123\n  local ord_close_brace=125\n  local ord_slash=47\n\
    \  local ord_backtick=96\n  local ord_tilde=126\n  local ord_ampersand=38\n  local\
    \ ord_pipe=124\n  local ord_caret=94\n  local ord_percent=37\n  local ord_dollar=36\n\
    \  local ord_pound=35\n  local ord_at=64\n  local ord_star=42\n  local ord_less_than=60\n\
    \  local ord_greater_than=62\n  local ord_newline=10\n  local ord_tab=9\n  local\
    \ ord_carriage_return=13\n  local ord_backspace=8\n  local ord_delete=127\n  local\
    \ ord_escape=27\n  local ord_null=0\n  local ord_bell=7\n  local ord_form_feed=12\n\
    \  local ord_vertical_tab=11\n  local ord\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [,\\ ] ]]; then\n        echo \"$1\" | tr -s '[:space:]'\
    \ ',' | sed 's/^,//' | sed 's/,$//'\n    else\n        echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c '1'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | sed -e 's/ /\"\
    , \"/g'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"$1\" | sed -e 's/,/\"\
    , \"/g'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print length($0)\
    \ % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep 1 | wc -l)\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | tr -d '\\n' |\
    \ sed -e 's/ /\", \"/g' -e 's/^/\"/' -e 's/$/\"/'\n    elif [[ \"$1\" =~ , ]];\
    \ then\n        echo \"$1\" | tr -d '\\n' | sed -e 's/,/, \"/g' -e 's/^/\"/' -e\
    \ 's/$/\"/'\n    else\n        echo \"$1\" | tr -d '\\n' | grep -o '[a-z]' | awk\
    \ '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n        fi\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                echo \"\
    $1\" | grep -o '[a-zA-Z]' | tr '[:upper:]' '[:lower:]' | awk '{print length($0)%2}'\
    \ | grep -o 1 | wc -l\n            else\n                echo \"$1\" | tr ','\
    \ '\\n' | sed 's/^/\"/;s/$/\"/'\n            fi\n        else\n            echo\
    \ \"$1\" | tr ' ' '\\n' | sed 's/^/\"/;s/$/\"/'\n        fi\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\ |\\' ]]; then\n        echo -n \"[\"\n        echo -n\
    \ $1 | sed -e 's/ /\", \"/g'\n        echo -n \"]\"\n    elif [[ $1 =~ , ]]; then\n\
    \        echo -n \"[\"\n        echo -n $1 | sed -e 's/,/\", \"/g'\n        echo\
    \ -n \"]\"\n    else\n        echo -n $1 | sed -e 's/[a-z]/&\\n/g' | sed -e '/^$/d'\
    \ | awk 'NR%2==1' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [^[:space:],] ]]; then\n    echo \"$1\" | grep -o '[^[:space:],]*'\
    \ | tr -d '\\n'\n  else\n    echo \"$1\" | grep -o '[^[:space:],]*' | tr -d '\\\
    n' | wc -c\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local string=\"$1\"\n  local words=()\n  local word=\"\"\n  local c=\"\"\
    \n  local i=0\n  local len=${#string}\n  local in_word=false\n  local in_quote=false\n\
    \  local in_escape=false\n  local in_escape_quote=false\n  local in_escape_escape=false\n\
    \  local in_escape_escape_quote=false\n  local in_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_quote=false\n  local in_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_quote=false\n  local in_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_quote=false\n  local in_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_quote=false\n  local in_escape_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_quote=false\n  local\
    \ in_escape_escape_escape_escape_escape_escape_escape_escape=false\n  local in_escape_escape_escape_escape_escape_escape_escape_escape_quote=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_quote=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_quote=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_quote=false\n\
    \  local in_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape_escape=false\n\
    \  local in_escape_escape_\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | tr\
    \ ' ' '\"', '\"')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | tr ',' '\"', '\"')\\\"]\"\n    else\n        echo $(echo $1 | grep -o '[a-z]'\
    \ | awk '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018\"\u2019\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\s ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"\
    /g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    \ \"\\\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR%2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n \
    \   split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"$1\" | tr ' ' '\\n'\
    \ | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n    elif [[ $1 =~ , ]]; then\n\
    \        echo \"$1\" | tr ',' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\\
    n' ' '\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' |\
    \ grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    if [[ $1 =~ [a-zA-Z] ]]; then\n    \
    \  if [[ $1 =~ [a-zA-Z] ]]; then\n        echo $1 | grep -o '[a-zA-Z]' | awk '{print\
    \ length($0)}'\n      else\n        echo $1 | grep -o '[a-zA-Z]' | awk '{print\
    \ length($0)}'\n      fi\n    else\n      echo $1 | grep -o '[a-zA-Z]' | awk '{print\
    \ length($0)}'\n    fi\n  else\n    echo $1 | grep -o '[a-zA-Z]' | awk '{print\
    \ length($0)}'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \" \" ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \\,\\\"/g')\\\"]\"\n    elif [[ $1 =~ \",\" ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\",\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep -o '[a-z]'\
    \ | awk '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep 1 | wc -l)\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n        fi\n    else\n\
    \        echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | tr -d '\\\
    n' | sed -E 's/([^ ]+)/\"\\1\"/g'\n    elif [[ \"$1\" =~ [^a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr -d '\\n' | sed -E 's/([^,]+)/\"\\1\"/g'\n    else\n\
    \        echo \"$1\" | tr -d '\\n' | sed -E 's/([a-z])/\\1\\n/g' | grep -c '[a-z]'\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^[:space:]] ]]; then\n        echo \"$1\" | sed -e 's/\\\
    ([^[:space:]]\\+\\)/\"\\1\"/g'\n    else\n        echo \"$1\" | sed -e 's/\\([^,]\\\
    +\\)/\"\\1\"/g'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | tr -d '\\\
    n' | tr -d '\\r' | tr -d '\\t' | tr -d ' ' | tr -d '\\!' | tr -d '\\,' | wc -c\n\
    \            else\n                echo $1 | tr -d '\\n' | tr -d '\\r' | tr -d\
    \ '\\t' | tr -d '\\!' | tr -d ' ' | tr -d '\\,' | tr -d '\\!' | tr -d '\\,' |\
    \ wc -c\n            fi\n        else\n            echo $1 | tr -d '\\n' | tr\
    \ -d '\\r' | tr -d '\\t' | tr -d '\\!' | tr -d ' ' | tr -d '\\,' | tr -d '\\!'\
    \ | tr -d '\\,' | tr -d '\\!' | tr -d '\\,' | wc -c\n        fi\n    else\n  \
    \      echo $1 | tr -d '\\n' | tr -d '\\r' | tr -d '\\t' | tr -d '\\!' | tr -d\
    \ ' ' | tr -d '\\,' | tr -d '\\!' | tr -d '\\,' | tr -d '\\!' | tr -d '\\,' |\
    \ tr -d '\\!' | tr -d '\\,' | wc -c\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | tr -d '\\\
    n' | tr -s ' ' | tr ' ' '\\n' | tr -d '\\n' | tr ' ' ','\n            else\n \
    \               echo $1 | tr -d '\\n' | tr -s ' ' | tr ' ' '\\n' | tr -d '\\n'\
    \ | tr ' ' ','\n            fi\n        else\n            echo $1 | tr -d '\\\
    n' | tr -s ' ' | tr ' ' '\\n' | tr -d '\\n' | tr ' ' ','\n        fi\n    else\n\
    \        echo $1 | tr -d '\\n' | tr -s ' ' | tr ' ' '\\n' | tr -d '\\n' | tr '\
    \ ' ','\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | tr -d '\\\
    n' | tr -d '\\r' | tr -d ' ' | sed 's/\\(.\\)/\"\\1\"/g'\n    elif [[ \"$1\" =~\
    \ [^a-zA-Z] ]]; then\n        echo \"$1\" | tr -d '\\n' | tr -d '\\r' | tr -d\
    \ ',' | sed 's/\\(.\\)/\"\\1\"/g'\n    else\n        echo \"$1\" | tr -d '\\n'\
    \ | tr -d '\\r' | tr -d ' ' | tr -d ',' | wc -c\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [,] ]]; then\n   \
    \         echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\" |\
    \ grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n        fi\n    else\n   \
    \     echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [[:space:]] ]]; then\n        echo \"$1\" | tr ' ' '\\\
    n' | sed 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"\
    $1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{print $1}' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\n\
    candidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | sed -e 's/ /\"\
    ,\"/g'\n    elif [[ \"$1\" =~ , ]]; then\n        echo \"$1\" | sed -e 's/,/\"\
    ,\"/g'\n    else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}' |\
    \ grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,] ]]; then\n        echo \"$1\" | tr -d '\\\
    n' | sed 's/\\([^ ]\\)/\"\\1\"/g'\n    elif [[ \"$1\" =~ [^a-zA-Z] ]]; then\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([^,]\\)/\"\\1\"/g'\n    else\n\
    \        echo \"$1\" | tr -d '\\n' | sed 's/\\([a-z]\\)/\\1\\n/g' | grep -v '^$'\
    \ | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local result=\"\"\n    if [[ \"$string\" =~\
    \ [^a-zA-Z, ] ]]; then\n        result=\"$(echo \"$string\" | tr ' ' '\\n' | sed\
    \ -e 's/^/\"/' -e 's/$/\"/')\"\n    elif [[ \"$string\" =~ [^a-zA-Z] ]]; then\n\
    \        result=\"$(echo \"$string\" | tr ',' '\\n' | sed -e 's/^/\"/' -e 's/$/\"\
    /')\"\n    else\n        result=\"$(echo \"$string\" | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{print NR % 2}' | grep -c 1)\"\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_6rr7y0t.sh: line 17: syntax error in conditional expression

    /tmp/tmp_6rr7y0t.sh: line 17: syntax error near `]''

    /tmp/tmp_6rr7y0t.sh: line 17: `    if [[ "$string" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo $1 | tr ' ' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo $1 | tr ',' '\\\
    n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo $1 | grep -o '[a-z]' | awk\
    \ '{print tolower($0)}' | awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\ |\\! ]]; then\n    echo \"[\\\"$(echo \"$1\" | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo \"$1\"\
    \ | sed 's/,/\",\"/g')\\\"]\"\n  else\n    echo \"$(echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1)\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | tr -d '\\n' |\
    \ sed -e 's/ /,/g' -e 's/\\(.*\\)/[\"\\1\"]/'\n    elif [[ \"$1\" =~ , ]]; then\n\
    \        echo \"$1\" | tr -d '\\n' | sed -e 's/,/ /g' -e 's/\\(.*\\)/[\"\\1\"\
    ]/'\n    else\n        echo \"$1\" | tr -d '\\n' | sed -e 's/\\(.*\\)/\\1/' -e\
    \ 's/[a-z]/\\n&/g' -e '/^$/d' | wc -l\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local words=$1\n  if [[ $words =~ \\s ]]; then\n    echo \"[\\\"$(echo\
    \ $words | sed 's/ /\"\\,\\\"/g')\\\"]\"\n  elif [[ $words =~ , ]]; then\n   \
    \ echo \"[\\\"$(echo $words | sed 's/,/\",\\\"/g')\\\"]\"\n  else\n    echo \"\
    $(echo $words | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n  fi\n}\n\
    \ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    if [[ \"$string\" =~ \\  ]]; then\n        echo\
    \ \"$string\" | tr ' ' '\\n' | sed 's/^/\"/g' | sed 's/$/\"/g'\n    elif [[ \"\
    $string\" =~ , ]]; then\n        echo \"$string\" | tr ',' '\\n' | sed 's/^/\"\
    /g' | sed 's/$/\"/g'\n    else\n        echo \"$string\" | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \" \" ]]; then\n        echo \"$1\" | tr ' ' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n    elif [[ \"$1\" =~ \",\" ]]; then\n        echo \"\
    $1\" | tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{a[$1]++}END{for(i in a)if(a[i]%2==1)print a[i]}'\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [a-zA-Z] ]];\
    \ then\n            if [[ \"$1\" =~ [a-zA-Z] ]]; then\n                echo \"\
    $1\" | sed -e 's/[^a-zA-Z]/ /g' | tr ' ' '\\n' | grep -c '[a-z]'\n           \
    \ else\n                echo \"$1\" | sed -e 's/[^a-zA-Z]/ /g' | tr ' ' '\\n'\
    \ | grep -c '[a-z]'\n            fi\n        else\n            echo \"$1\" | sed\
    \ -e 's/[^a-zA-Z]/ /g' | tr ' ' '\\n' | grep -c '[a-z]'\n        fi\n    else\n\
    \        echo \"$1\" | sed -e 's/[^a-zA-Z]/ /g' | tr ' ' '\\n' | grep -c '[a-z]'\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z0-9,\\! ] ]]; then\n        echo \"Invalid input\"\
    \n        return 1\n    fi\n    if [[ \"$1\" =~ [ ] ]]; then\n        echo \"\
    [$(echo \"$1\" | sed -e 's/ /\", \"/g')]\"\n    elif [[ \"$1\" =~ [,] ]]; then\n\
    \        echo \"[$(echo \"$1\" | sed -e 's/,/\", \"/g')]\"\n    else\n       \
    \ echo \"$(echo \"$1\" | grep -o \"[a-z]\" | awk '{print tolower($0)}' | awk '{if(NR%2==1)\
    \ print $0}' | wc -l)\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy23ntgba.sh: line 15: syntax error in conditional expression

    /tmp/tmpy23ntgba.sh: line 15: syntax error near `]''

    /tmp/tmpy23ntgba.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z0-9,\! ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [^a-zA-Z,\\ ] ]]; then\n    echo \"\\\"$1\\\"\"\n  elif [[\
    \ $1 =~ [,] ]]; then\n    echo \"\\\"${1//,/\\\" \\\"}\\\"\"\n  else\n    echo\
    \ \"$(($(echo \"$1\" | grep -o '[a-z]' | tr -d '\\n' | awk '{print length}') %\
    \ 2))\"\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ \\ |\\' ]]; then\n        echo \"$1\" | tr -d '\\n' |\
    \ sed -E 's/([^ ]+)/\"\\1\"/g'\n    elif [[ \"$1\" =~ , ]]; then\n        echo\
    \ \"$1\" | tr -d '\\n' | sed -E 's/([^,]+)/\"\\1\"/g'\n    else\n        echo\
    \ \"$1\" | tr -d '\\n' | sed -E 's/([a-z])/\\1\\n/g' | grep -c '[a-z]'\n    fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"$1\" | tr ' ' '\\n' | awk '{print\
    \ \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n    elif [[ $1 =~ , ]]; then\n        echo\
    \ \"$1\" | tr ',' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n  \
    \  else\n        echo \"$1\" | grep -o '[a-z]' | awk '{print ord($0)%2}' | grep\
    \ -c 1\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `ord'' not defined

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | tr -d '\\\
    n' | tr -d ' ' | grep -o . | awk '{print length($0) % 2}' | grep -o 1 | wc -l\n\
    \            else\n                echo $1 | tr -d '\\n' | tr -d ' ' | grep -o\
    \ . | awk '{print length($0) % 2}' | grep -o 1 | wc -l\n            fi\n     \
    \   else\n            echo $1 | tr -d '\\n' | tr -d ' ' | grep -o . | awk '{print\
    \ length($0) % 2}' | grep -o 1 | wc -l\n        fi\n    else\n        echo $1\
    \ | tr -d '\\n' | tr -d ' ' | grep -o . | awk '{print length($0) % 2}' | grep\
    \ -o 1 | wc -l\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"$1\" | tr ' ' '\\n'\
    \ | sed 's/^/\"/;s/$/\"/'\n    elif [[ $1 =~ , ]]; then\n        echo \"$1\" |\
    \ tr ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n    else\n        echo \"$1\" | grep -o\
    \ '[a-z]' | awk '{print NR%2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(( $(echo $1 | sed\
    \ 's/[^a-z]//g' | wc -c) % 2 ))\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local words=$1\n    if [[ $words =~ \\s ]]; then\n        echo \"[\\\"\
    $(echo $words | sed 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $words =~ , ]]; then\n\
    \        echo \"[\\\"$(echo $words | sed 's/,/\",\"/g')\\\"]\"\n    else\n   \
    \     echo $(echo $words | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n\
    \    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [a-zA-Z] ]]; then\n        if [[ \"$1\" =~ [,] ]]; then\n\
    \            echo \"$1\" | tr ',' '\\n'\n        else\n            echo \"$1\"\
    \ | grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n        fi\n    else\n \
    \       echo \"$1\" | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=$1\n    local words=()\n    local word=''\n    local char=''\n\
    \    local i=0\n    local len=${#string}\n    local has_whitespace=0\n    local\
    \ has_comma=0\n    local has_odd_letters=0\n    local odd_letters=0\n    local\
    \ odd_letters_count=0\n    local odd_letters_index=0\n    local odd_letters_array=()\n\
    \    local odd_letters_array_index=0\n    local odd_letters_array_len=0\n    local\
    \ odd_letters_array_count=0\n    local odd_letters_array_count_index=0\n    local\
    \ odd_letters_array_count_len=0\n    local odd_letters_array_count_char=''\n \
    \   local odd_letters_array_count_char_index=0\n    local odd_letters_array_count_char_len=0\n\
    \    local odd_letters_array_count_char_char=''\n    local odd_letters_array_count_char_char_index=0\n\
    \    local odd_letters_array_count_char_char_len=0\n    local odd_letters_array_count_char_char_char=''\n\
    \    local odd_letters_array_count_char_char_char_index=0\n    local odd_letters_array_count_char_char_char_len=0\n\
    \    local odd_letters_array_count_char_char_char_char=''\n    local odd_letters_array_count_char_char_char_char_index=0\n\
    \    local odd_letters_array_count_char_char_char_char_len=0\n    local odd_letters_array_count_char_char_char_char_char=''\n\
    \    local odd_letters_array_count_char_char_char_char_char_index=0\n    local\
    \ odd_letters_array_count_char_char_char_char_char_len=0\n    local odd_letters_array_count_char_char_char_char_char_char=''\n\
    \    local odd_letters_array_count_char_char_char_char_char_char_index=0\n   \n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [[:space:]] ]]; then\n    echo \"$1\" | tr ' ' '\\n' |\
    \ sed 's/^/\"/;s/$/\"/'\n  elif [[ \"$1\" =~ , ]]; then\n    echo \"$1\" | tr\
    \ ',' '\\n' | sed 's/^/\"/;s/$/\"/'\n  else\n    echo \"$1\" | grep -o '[a-z]'\
    \ | awk '{a[NR]=$0} END {for (i=1;i<=NR;i++) if (i%2==1) {print a[i]}}' | wc -l\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \\s ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\"\
    /g')\\\"]\"\n  elif [[ $1 =~ , ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    \ \"\\\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o '[a-z]' | awk '{print\
    \ NR%2}' | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z, ] ]]; then\n        echo \"\\\"$1\\\"\"\n \
    \   elif [[ \"$1\" =~ [, ] ]]; then\n        echo \"$1\" | tr ' ' '\\n' | tr ','\
    \ '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n    else\n        echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{print NR % 2}' | grep -c 1\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsgji3x08.sh: line 15: syntax error in conditional expression

    /tmp/tmpsgji3x08.sh: line 15: syntax error near `]''

    /tmp/tmpsgji3x08.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z, ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=$1\n    local words=()\n    local word=\"\"\n    local i=0\n\
    \    local c=\"\"\n    local in_word=0\n    local in_quote=0\n    local quote_char=\"\
    \"\n    local odd_count=0\n    local ord_a=`printf '%d' \"'a\"`\n    local ord_z=`printf\
    \ '%d' \"'z\"`\n    local ord_A=`printf '%d' \"'A\"`\n    local ord_Z=`printf\
    \ '%d' \"'Z\"`\n    local ord_0=`printf '%d' \"'0\"`\n    local ord_9=`printf\
    \ '%d' \"'9\"`\n    local ord_space=`printf '%d' \"' \"`\n    local ord_comma=`printf\
    \ '%d' \"','\"`\n    local ord_quote=`printf '%d' \"'\"`\n    local ord_backslash=`printf\
    \ '%d' \"'\\\\\"`\n    local ord_exclamation=`printf '%d' \"'!\"`\n    local ord_question=`printf\
    \ '%d' \"'?\"`\n    local ord_hash=`printf '%d' \"'#\"`\n    local ord_dollar=`printf\
    \ '%d' \"'$\"`\n    local ord_percent=`printf '%d' \"'%\"`\n    local ord_ampersand=`printf\
    \ '%d' \"'&\"`\n    local ord_apostrophe=`printf '%d' \"'\"'\"`\n    local ord_left_parenthesis=`printf\
    \ '%d' \"'('\"`\n    local ord_right_parenthesis=`printf '%d' \"')\"`\n    local\
    \ ord_asterisk=`printf '%d' \"'*\"`\n    local ord_plus=`printf '%d' \"'+\"`\n\
    \    local ord_comma=`printf '%d' \"','\"`\n    local ord_minus=`printf '%d' \"\
    '-\"`\n    local ord_period=`printf '%d' \"'.'\"`\n    local ord_slash=`printf\
    \ '%d' \"'/\"`\n    local ord_colon=`printf '%d' \"':\"`\n\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_m2micz8.sh: command substitution: line 33: unexpected EOF while
    looking for matching `"''

    /tmp/tmp_m2micz8.sh: command substitution: line 34: syntax error: unexpected end
    of file

    /tmp/tmp_m2micz8.sh: command substitution: line 40: unexpected EOF while looking
    for matching `''''

    /tmp/tmp_m2micz8.sh: command substitution: line 41: syntax error: unexpected end
    of file

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n                    if [[ $1 =~ [a-zA-Z] ]]; then\n              \
    \          if [[ $1 =~ [a-zA-Z] ]]; then\n                            if [[ $1\
    \ =~ [a-zA-Z] ]]; then\n                                if [[ $1 =~ [a-zA-Z] ]];\
    \ then\n                                    if [[ $1 =~ [a-zA-Z] ]]; then\n  \
    \                                      if [[ $1 =~ [a-zA-Z] ]]; then\n       \
    \                                     if [[ $1 =~ [a-zA-Z] ]]; then\n        \
    \                                        if [[ $1 =~ [a-zA-Z] ]]; then\n     \
    \                                               if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \                                                        if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n                                                            if [[\
    \ $1 =~ [a-zA-Z] ]]; then\n                                                  \
    \              if [[ $1 =~ [a-zA-Z] ]]; then\n                               \
    \                                     if [[ $1 =~ [a-zA-Z] ]]; then\n        \
    \                                                                if [[ $1 =~ [a-zA-Z]\
    \ ]]; then\n                                                                 \
    \           if [[ $1 =~ [a-zA-Z] ]]; then\n                                  \
    \                                              if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \                                                                            \
    \        if [[ $1 =~ [a-zA-Z] ]]; then\n                                     \
    \                                                   if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \                                                                            \
    \                if [[ $1 =~ [a-zA-Z] ]]; then\n                             \
    \                                                                   if [[ $1 =~\
    \ [a-zA-Z] ]]; then\n                                                        \
    \                        \n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptdhexu2o.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmptdhexu2o.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [a-zA-Z] ]]; then\n\
    \            if [[ $1 =~ [a-zA-Z] ]]; then\n                echo $1 | grep -o\
    \ '[a-zA-Z]' | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0\
    \ % 2 == 1) print $0}' | wc -l\n            else\n                echo $1 | tr\
    \ ',' '\\n' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\n' ' '\n            fi\n\
    \        else\n            echo $1 | tr ' ' '\\n' | awk '{print \"\\\"\"$0\"\\\
    \"\"}' | tr '\\n' ' '\n        fi\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `ord'' not defined

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[\\\"$(echo $1 | sed\
    \ 's/ /\" \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"\
    $(echo $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo $(echo $1 |\
    \ grep -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [a-zA-Z] ]]; then\n    echo -n \"[\"\n    echo -n $1 | sed\
    \ -e 's/\\([a-zA-Z]\\)/\"\\1\"/g'\n    echo -n \"]\"\n  else\n    echo -n $1 |\
    \ sed -e 's/\\([a-zA-Z]\\)/\\1/g' | grep -o . | grep -v -e '[02468]' | wc -l\n\
    \  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,\\ ] ]]; then\n        echo \"\\\"$1\\\"\"\n\
    \    elif [[ \"$1\" =~ [,] ]]; then\n        echo \"\\\"${1//,/}\\\"\"\n    else\n\
    \        echo \"${#1}\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^[:space:],] ]]; then\n        echo \"$1\" | grep -o\
    \ -E '[a-z]+' | grep -c -E '^(..)*(.)(.)(..)*$'\n    elif [[ \"$1\" =~ [^[:space:]]\
    \ ]]; then\n        echo \"$1\" | grep -o -E '[^,]+' | sed 's/^/\"/;s/$/\"/'\n\
    \    else\n        echo \"$1\" | grep -o -E '[^[:space:]]+' | sed 's/^/\"/;s/$/\"\
    /'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local string=\"$1\"\n    local words=()\n    local word=\"\"\n    local\
    \ i=0\n    local c\n    local len=${#string}\n    local quote_mode=false\n   \
    \ local escape_mode=false\n    local split_on=''\n    local odd_count=0\n    local\
    \ ord_a=97\n    local ord_z=122\n    local ord_0=48\n    local ord_9=57\n    local\
    \ ord_A=65\n    local ord_Z=90\n    local ord_space=32\n    local ord_comma=44\n\
    \    local ord_backslash=92\n    local ord_quote=34\n    local ord_exclamation=33\n\
    \    local ord_question=63\n    local ord_period=46\n    local ord_colon=58\n\
    \    local ord_semicolon=59\n    local ord_dash=45\n    local ord_underscore=95\n\
    \    local ord_plus=43\n    local ord_equals=61\n    local ord_open_paren=40\n\
    \    local ord_close_paren=41\n    local ord_open_bracket=91\n    local ord_close_bracket=93\n\
    \    local ord_open_brace=123\n    local ord_close_brace=125\n    local ord_slash=47\n\
    \    local ord_backtick=96\n    local ord_tilde=126\n    local ord_ampersand=38\n\
    \    local ord_caret=94\n    local ord_percent=37\n    local ord_dollar=36\n \
    \   local ord_pound=35\n    local ord_at=64\n    local ord_asterisk=42\n    local\
    \ ord_pipe=124\n    local ord_less_than=60\n    local ord_greater_than=62\n  \
    \  local ord_newline=10\n    local ord_tab=9\n    local ord_carriage_return=13\n\
    \    local ord_form_feed=12\n    local ord_vertical_tab=11\n    local ord_delete=127\n\
    \    local ord_escape=27\n    local ord_null=0\n    local ord_bell=7\n    local\
    \ ord_backspace=8\n    local ord_space=32\n    local ord_\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-z] ]]; then\n        if [[ $1 =~ [^,] ]]; then\n    \
    \        echo \"[\\\"$1\\\"]\"\n        else\n            echo \"[\\\"${1//,/\\\
    \"\\\",\\\"}\\\"]\"\n        fi\n    else\n        echo $(echo $1 | grep -o '[a-z]'\
    \ | awk '{print NR%2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo \"[$(echo $1 | sed 's/\
    \ /\", \"/g')]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[$(echo $1 | sed\
    \ 's/,/\", \"/g')]\"\n    else\n        echo $(echo $1 | grep -o '[a-z]' | awk\
    \ '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n    split_words \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello\
    \ world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ \\s ]]; then\n        echo \"[\\\"$(echo $1 | sed 's/ /\"\
    \ \"\\\"/g')\\\"]\"\n    elif [[ $1 =~ , ]]; then\n        echo \"[\\\"$(echo\
    \ $1 | sed 's/,/\" \"\\\"/g')\\\"]\"\n    else\n        echo \"$(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [[:space:]] ]]; then\n        echo '[\"'\"$(echo $1 | sed\
    \ 's/ /\" \"\\\"/g')\"'\"]'\n    elif [[ $1 =~ , ]]; then\n        echo '[\"'\"\
    $(echo $1 | sed 's/,/\",\"/g')\"'\"]'\n    else\n        echo $(echo $1 | grep\
    \ -o '[a-z]' | awk '{print NR % 2}' | grep -c 1)\n    fi\n}\n\ncandidate() {\n\
    \    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello\
    \ world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\")\
    \ = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\\
    !\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\\
    !\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [\\ ] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\
    \"/g')\\\"]\"\n  elif [[ $1 =~ [,] ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/,/\"\
    ,\"/g')\\\"]\"\n  else\n    echo $(echo $1 | grep -o [a-z] | awk '{print NR%2}'\
    \ | grep -c 1)\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n\
    \    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=\"$1\"\n  if [[ \"$str\" =~ [a-z] ]]; then\n    echo \"$(echo\
    \ \"$str\" | grep -o [a-z] | grep -v -e [02468] | wc -l)\"\n  elif [[ \"$str\"\
    \ =~ [,] ]]; then\n    echo \"$(echo \"$str\" | tr ',' '\\n')\"\n  else\n    echo\
    \ \"$(echo \"$str\" | tr ' ' '\\n')\"\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 2
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^a-zA-Z,\\! ] ]]; then\n        echo \"\\\"$1\\\"\"\n\
    \    elif [[ \"$1\" =~ [,\\!] ]]; then\n        echo \"\\\"${1//,/\\\" \\\"}\\\
    \"\"\n    else\n        echo \"$(echo \"$1\" | grep -o '[a-z]' | awk '{print NR%2}'\
    \ | grep -c 1)\"\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\"\
    \ ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world\
    \ \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\"\
    \ ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\")\
    \ = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7ruucd1r.sh: line 15: syntax error in conditional expression

    /tmp/tmp7ruucd1r.sh: line 15: syntax error near `]''

    /tmp/tmp7ruucd1r.sh: line 15: `    if [[ "$1" =~ [^a-zA-Z,\! ] ]]; then''

    '
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ \" \" ]]; then\n    echo \"[\\\"$(echo $1 | sed 's/ /\" \"\\\
    \"/g')\\\"]\"\n  elif [[ $1 =~ \",\" ]]; then\n    echo \"[\\\"$(echo $1 | sed\
    \ 's/,/\",\\\"/g')\\\"]\"\n  else\n    echo $(echo $1 | sed 's/[^a-z]//g' | grep\
    \ -o . | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep -c 1)\n  fi\n\
    }\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ \"$1\" =~ [^[:space:],] ]]; then\n        echo \"$1\" | grep -o\
    \ \"[[:alpha:]]\" | awk '{print tolower($0)}' | awk '{print NR % 2}' | grep -c\
    \ \"1\"\n    elif [[ \"$1\" =~ [^[:space:]] ]]; then\n        echo \"$1\" | tr\
    \ -s ',' ' '\n    else\n        echo \"$1\" | tr -s ' ' ','\n    fi\n}\n\ncandidate()\
    \ {\n    split_words \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\\
    !\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello\
    \ world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world\
    \ \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\"\
    ) = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\"\
    ) = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [a-zA-Z] ]]; then\n        if [[ $1 =~ [,] ]]; then\n   \
    \         echo $1 | tr ',' '\\n'\n        else\n            echo $1 | grep -o\
    \ '[a-z]' | awk '{print NR%2}' | grep -c 1\n        fi\n    else\n        echo\
    \ $1 | tr ' ' '\\n'\n    fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[\
    \ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate\
    \ \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate\
    \ \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ $1 =~ [[:space:]] ]]; then\n    echo \"$1\" | tr ' ' '\\n' | sed\
    \ 's/^/\"/;s/$/\"/'\n  elif [[ $1 =~ , ]]; then\n    echo \"$1\" | tr ',' '\\\
    n' | sed 's/^/\"/;s/$/\"/'\n  else\n    echo \"$1\" | grep -o '[a-z]' | awk '{print\
    \ tolower($0)}' | awk '{a[$0]++} END {for (i in a) if (a[i] % 2 == 1) print i}'\
    \ | wc -l\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  local str=\"$1\"\n  local words=$(echo \"$str\" | sed -e 's/[^ ]* *//'\
    \ -e 's/[^,]*,//' -e 's/[^a-z]//g')\n  if [ -z \"$words\" ]; then\n    echo \"\
    $(echo \"$str\" | sed -e 's/[^a-z]//g' | grep -o . | awk 'NR % 2 == 1' | wc -l)\"\
    \n  else\n    echo \"$words\" | sed -e 's/ /\", \"/g' -e 's/^/\"/' -e 's/$/\"\
    /'\n  fi\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    local str=\"$1\"\n    local res=\"\"\n    local word=\"\"\n    local\
    \ i=0\n    local c=\"\"\n    local n=0\n    local is_word=0\n    local is_quote=0\n\
    \    local is_escape=0\n    local is_comma=0\n    local is_whitespace=0\n    local\
    \ is_odd=0\n    local is_even=0\n    local is_lower=0\n    local is_upper=0\n\
    \    local is_alpha=0\n    local is_digit=0\n    local is_alnum=0\n    local is_space=0\n\
    \    local is_print=0\n    local is_graph=0\n    local is_punct=0\n    local is_cntrl=0\n\
    \    local is_xdigit=0\n    local is_ascii=0\n    local is_blank=0\n    local\
    \ is_newline=0\n    local is_return=0\n    local is_tab=0\n    local is_backspace=0\n\
    \    local is_feed=0\n    local is_vtab=0\n    local is_page=0\n    local is_escape=0\n\
    \    local is_del=0\n    local is_null=0\n    local is_bell=0\n    local is_backslash=0\n\
    \    local is_question=0\n    local is_singlequote=0\n    local is_doublequote=0\n\
    \    local is_exclamation=0\n    local is_hash=0\n    local is_dollar=0\n    local\
    \ is_percent=0\n    local is_ampersand=0\n    local is_apostrophe=0\n    local\
    \ is_leftparen=0\n    local is_rightparen=0\n    local is_asterisk=0\n    local\
    \ is_plus=0\n    local is_comma=0\n    local is_minus=0\n    local is_period=0\n\
    \    local is_slash=0\n    local is_colon=0\n    local is_semicolon=0\n    local\
    \ is_less=0\n    local is_equal=0\n    local is_greater=0\n    local is_question=0\n\
    \    local is_at\n}\n\ncandidate() {\n    split_words \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"Hello world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate\
    \ \"Hello,world\\!\") = \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello world,\\\
    !\") = \"Hello world,\\!\" ]]\n    [[ $(candidate \"Hello,Hello,world \\!\") =\
    \ \"Hello,Hello,world \\!\" ]]\n    [[ $(candidate \"abcdef\") = \"3\" ]]\n  \
    \  [[ $(candidate \"aaabb\") = \"2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\"\
    \ ]]\n    [[ $(candidate \"\") = \"0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n  if [[ \"$1\" =~ [[:space:]] ]]; then\n    echo \"$1\" | tr ' ' '\\n' |\
    \ sed -e 's/^/\"/' -e 's/$/\"/'\n  elif [[ \"$1\" =~ , ]]; then\n    echo \"$1\"\
    \ | tr ',' '\\n' | sed -e 's/^/\"/' -e 's/$/\"/'\n  else\n    echo \"$1\" | grep\
    \ -o '[a-z]' | awk '{print NR%2}' | grep -c 1\n  fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
- exit_code: 1
  program: "#!/bin/bash\n# Given a string of words, return a list of words split on\
    \ whitespace, if no whitespaces exists in the text you\n# should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    # Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\
    \\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\\
    !\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words()\
    \ {\n    if [[ $1 =~ [^a-zA-Z] ]]; then\n        if [[ $1 =~ [^,] ]]; then\n \
    \           echo \"[\\\"$1\\\"]\"\n        else\n            echo \"[\\\"${1//,/\\\
    \"\\\",\\\"}\\\"]\"\n        fi\n    else\n        echo \"$(echo $1 | grep -o\
    \ -E '[a-z]' | awk '{print tolower($0)}' | awk '{print ord($0)}' | awk '{if ($0\
    \ % 2 == 1) {odd++}} END {print odd}')\"\n    fi\n}\n\ncandidate() {\n    split_words\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"Hello world\\!\") =\
    \ \"Hello world\\!\" ]]\n    [[ $(candidate \"Hello,world\\!\") = \"Hello world\\\
    !\" ]]\n    [[ $(candidate \"Hello world,\\!\") = \"Hello world,\\!\" ]]\n   \
    \ [[ $(candidate \"Hello,Hello,world \\!\") = \"Hello,Hello,world \\!\" ]]\n \
    \   [[ $(candidate \"abcdef\") = \"3\" ]]\n    [[ $(candidate \"aaabb\") = \"\
    2\" ]]\n    [[ $(candidate \"aaaBb\") = \"1\" ]]\n    [[ $(candidate \"\") = \"\
    0\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660017199
