language: sh
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ final=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n   \
    \ local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local a=0\n    local b=0\n  \
    \  local c=0\n    local d=0\n    local e=0\n    local\n}\n\ncandidate() {\n  \
    \  by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5\
    \ 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tac | tr \"\\n\" \" \"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -A dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\"\
    \ [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\"\
    )\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n \
    \     result+=(${dict[$i]})\n    fi\n  done\n  echo \"${result[@]}\" | tr ' '\
    \ '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a tmp\n  local -a tmp2\n  local -a tmp3\n  local -a tmp4\n\
    \  local -a tmp5\n  local -a tmp6\n  local -a tmp7\n  local -a tmp8\n  local -a\
    \ tmp9\n  local -a tmp10\n  local -a tmp11\n  local -a tmp12\n  local -a tmp13\n\
    \  local -a tmp14\n  local -a tmp15\n  local -a tmp16\n  local -a tmp17\n  local\
    \ -a tmp18\n  local -a tmp19\n  local -a tmp20\n  local -a tmp21\n  local -a tmp22\n\
    \  local -a tmp23\n  local -a tmp24\n  local -a tmp25\n  local -a tmp26\n  local\
    \ -a tmp27\n  local -a tmp28\n  local -a tmp29\n  local -a tmp30\n  local -a tmp31\n\
    \  local -a tmp32\n  local -a tmp33\n  local -a tmp34\n  local -a tmp35\n  local\
    \ -a tmp36\n  local -a tmp37\n  local -a tmp38\n  local -a tmp39\n  local -a tmp40\n\
    \  local -a tmp41\n  local -a tmp42\n  local -a tmp43\n  local -a tmp44\n  local\
    \ -a tmp45\n  local -a tmp46\n  local -a tmp47\n  local -a tmp48\n  local -a tmp49\n\
    \  local -a tmp50\n  local -a tmp51\n  local -a tmp52\n  local -a tmp53\n  local\
    \ -a tmp54\n  local -a tmp55\n  local -a tmp56\n  local -a tmp57\n  local -a tmp58\n\
    \  local -a tmp59\n  local -a tmp60\n  local -a tmp61\n  local -a tmp62\n  local\
    \ -a tmp63\n  local -a tmp64\n  local -a tmp65\n  local -a tmp66\n  local -a tmp67\n\
    \  local -a tmp68\n  local -a tmp69\n  local -a tmp70\n  local -a tmp71\n  local\
    \ -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[$(echo ${arr[@]} | tr ' ' '\\n' | sort -r\
    \ | sed -e 's/^/\\\"/' -e 's/$/\\\"/' | tr '\\n' ' ')]\"\n    fi\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint:\n    #   - Use a for loop to iterate over the list\n    #\
    \   - Use a case statement to check if the number is between 1 and 9\n    #  \
    \ - Use a case statement to convert the number to its corresponding name\n   \
    \ #   - Use the echo command to output the result\n    #   - Use the tr command\
    \ to remove the double quotes\n    #   - Use the rev command to reverse the array\n\
    \    #   - Use the tr command to remove the spaces\n    #   - Use the sed command\
    \ to remove the brackets\n    #   - Use the sed command to remove the commas\n\
    \    #   - Use the sed command to remove the extra spaces\n    #   - Use the sed\
    \ command to remove the trailing newline\n    #   - Use the sed command to remove\
    \ the leading newline\n    #   - Use the sed command to remove the leading spaces\n\
    \    #   - Use the sed command to remove the trailing spaces\n    #   - Use the\
    \ sed command to remove the leading double quotes\n    #   - Use the sed command\
    \ to remove the trailing double quotes\n    #   - Use the sed command to remove\
    \ the leading spaces\n    #   - Use the sed command to remove the trailing spaces\n\
    \    #   - Use the sed command to remove the leading double quotes\n    #   -\
    \ Use the sed command to remove the trailing double quotes\n    #   - Use the\
    \ sed command to remove the leading spaces\n    #   - Use the sed command to remove\
    \ the trailing spaces\n    #   - Use the sed command to remove the leading double\
    \ quotes\n    #   - Use the sed command to remove the trailing double quotes\n\
    \    #   - Use the sed command to remove the leading spaces\n    #   - Use the\
    \ sed command to remove the trailing spaces\n    #   - Use the sed command to\
    \ remove the leading double quotes\n    #   - Use the sed command to remove the\
    \ trailing double quotes\n    #   - Use the sed command to remove the leading\
    \ spaces\n    #   - Use the sed command to remove the trailing spaces\n    # \
    \  - Use the sed command to remove the leading double quotes\n    #   - Use the\
    \ sed command to remove the trailing double quotes\n    #   - Use the sed command\
    \ to remove the leading spaces\n    #   - Use the sed command to remove the trailing\
    \ spaces\n    #\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa4jjv9t2.sh: line 55: syntax error near unexpected token `}''

    /tmp/tmpa4jjv9t2.sh: line 55: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ \" \" \",\" | sed 's/,/\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        local -a res=()\n        for i in $(echo ${arr[@]}\
    \ | tr ' ' '\\n' | sort -nr); do\n            res+=(\"\\\"$(echo \"One Two Three\
    \ Four Five Six Seven Eight Nine\" | cut -d ' ' -f $i)\\\"\")\n        done\n\
    \        echo \"[${res[@]}]\"\n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_arr=()\n  local -a nums_rev_arr=()\n  local -a nums_arr_sorted=()\n  local\
    \ -a nums_rev_arr_sorted=()\n  local -a nums_arr_sorted_str=()\n  local -a nums_rev_arr_sorted_str=()\n\
    \  local -a nums_arr_sorted_str_rev=()\n  local -a nums_rev_arr_sorted_str_rev=()\n\
    \  local -a nums_arr_sorted_str_rev_str=()\n  local -a nums_rev_arr_sorted_str_rev_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str=()\n  local -a nums_rev_arr_sorted_str_rev_str_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str_str=()\n  local -a nums_rev_arr_sorted_str_rev_str_str_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str_str_str=()\n  local -a nums_rev_arr_sorted_str_rev_str_str_str_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str_str_str_str=()\n  local -a nums_rev_arr_sorted_str_rev_str_str_str_str_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str_str_str_str_str=()\n  local -a nums_rev_arr_sorted_str_rev_str_str_str_str_str_str=()\n\
    \  local -a nums_arr_sorted_str_rev_str_str\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  for i in \"${array[@]}\"; do\n    if [ \"$i\" -ge 1 ]\
    \ && [ \"$i\" -le 9 ]; then\n      result+=(\"$i\")\n    fi\n  done\n  result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -rn))\n  for i in \"${result[@]}\"; do\n \
    \   case \"$i\" in\n      1) result[$i]=\"One\";;\n      2) result[$i]=\"Two\"\
    ;;\n      3) result[$i]=\"Three\";;\n      4) result[$i]=\"Four\";;\n      5)\
    \ result[$i]=\"Five\";;\n      6) result[$i]=\"Six\";;\n      7) result[$i]=\"\
    Seven\";;\n      8) result[$i]=\"Eight\";;\n      9) result[$i]=\"Nine\";;\n \
    \   esac\n  done\n  printf '[\"%s\"]' \"${result[@]}\"\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in ${array[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo ${result[@]} | tr '\
    \ ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(\n    [1]=\"One\"\n    [2]=\"Two\"\n \
    \   [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"\
    Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${dict[$i]})\n \
    \   fi\n  done\n  echo \"${result[@]}\" | rev\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # write your solution\
    \ here\n    echo \"$1\" | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' |\
    \ tac | sed 's/\\([1-9]\\)/\"\\1\"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_sorted=(One Two Three Four Five Six Seven Eight Nine)\n  local -a nums_sorted_rev=(Nine\
    \ Eight Seven Six Five Four Three Two One)\n  local -a nums_sorted_rev_str=()\n\
    \  local -a nums_sorted_str=()\n  local -a nums_str=()\n  local -a nums_rev_str=()\n\
    \  local -a nums_str_rev=()\n  local -a nums_str_sorted=()\n  local -a nums_str_sorted_rev=()\n\
    \  local -a nums_str_sorted_rev_str=()\n  local -a nums_str_sorted_str=()\n  local\
    \ -a nums_str_rev_str=()\n  local -a nums_str_str=()\n  local -a nums_str_str_rev=()\n\
    \  local -a nums_str_str_sorted=()\n  local -a nums_str_str_sorted_rev=()\n  local\
    \ -a nums_str_str_sorted_rev_str=()\n  local -a nums_str_str_sorted_str=()\n \
    \ local -a nums_str_str_rev_str=()\n  local -a nums_str_str_str=()\n  local -a\
    \ nums_str_str_str_rev=()\n  local -a nums_str_str_str_sorted=()\n  local -a nums_str_str_str_sorted_rev=()\n\
    \  local -a nums_str_str_str_sorted_rev_str=()\n  local -a nums_str_str_str_sorted_str=()\n\
    \  local -a nums_str_str_str_rev_str=()\n  local -a nums_str_str_str_str=()\n\
    \  local\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted\n    local -a reversed\n    local -a result\n    for i in\
    \ \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n         \
    \   sorted+=($i)\n        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\"\
    \ | sort -n))\n    for (( i=${#sorted[@]}-1; i>=0; i-- )); do\n        reversed+=(${sorted[i]})\n\
    \    done\n    for i in \"${reversed[@]}\"; do\n        case $i in\n         \
    \   1) result+='\"One\"' ;;\n            2) result+='\"Two\"' ;;\n           \
    \ 3) result+='\"Three\"' ;;\n            4) result+='\"Four\"' ;;\n          \
    \  5) result+='\"Five\"' ;;\n            6) result+='\"Six\"' ;;\n           \
    \ 7) result+='\"Seven\"' ;;\n            8) result+='\"Eight\"' ;;\n         \
    \   9) result+='\"Nine\"' ;;\n        esac\n    done\n    echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/\"/g;s/$/\"/g'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Your code here\n  echo\
    \ \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a sorted\n  local -a reversed\n  local -a result\n\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      sorted+=($i)\n    fi\n  done\n\
    \n  sorted=($(printf \"%s\\n\" \"${sorted[@]}\" | sort -n))\n\n  for i in \"${sorted[@]}\"\
    ; do\n    reversed=($i \"${reversed[@]}\")\n  done\n\n  for i in \"${reversed[@]}\"\
    ; do\n    case $i in\n      1) result+=('\"One\"') ;;\n      2) result+=('\"Two\"\
    ') ;;\n      3) result+=('\"Three\"') ;;\n      4) result+=('\"Four\"') ;;\n \
    \     5) result+=('\"Five\"') ;;\n      6) result+=('\"Six\"') ;;\n      7) result+=('\"\
    Seven\"') ;;\n      8) result+=('\"Eight\"') ;;\n      9) result+=('\"Nine\"')\
    \ ;;\n    esac\n  done\n\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint:\n    #   1. Use 'echo' to print the result\n    #   2. Use\
    \ 'read' to read the input\n    #   3. Use 'sort' to sort the input\n    #   4.\
    \ Use 'rev' to reverse the input\n    #   5. Use 'sed' to replace the input\n\
    \    #   6. Use 'tr' to remove the space\n    #   7. Use 'sed' to remove the quotes\n\
    \    #   8. Use 'sed' to add the quotes\n    #   9. Use 'sed' to add the brackets\n\
    \    #\n    # Example:\n    #   echo \"1 2 3\" | read -a array\n    #   echo ${array[@]}\
    \ | sort -n | rev | sed 's/1/One/g' | sed 's/2/Two/g' | sed 's/3/Three/g' | tr\
    \ -d ' ' | sed 's/^/\"/g' | sed 's/$/\"/g' | sed 's/^/[/g' | sed 's/$/]/g'\n \
    \   #\n    # Note:\n    #   1. The input is an array of integers, not a string\n\
    \    #   2. The output should be a string, not an array\n    #   3. The output\
    \ should be a string of integers, not a string of strings\n    #   4. The output\
    \ should be a string of integers, not a string of integers\n    #   5. The output\
    \ should be a string of integers, not a string of integers\n    #   6. The output\
    \ should be a string of integers, not a string of integers\n    #   7. The output\
    \ should be a string of integers, not a string of integers\n    #   8. The output\
    \ should be a string of integers, not a string of integers\n    #   9. The output\
    \ should be a string of integers, not a string of integers\n    #\n    # Hint:\n\
    \    #   1. Use 'echo' to print the result\n    #   2. Use 'read' to read the\
    \ input\n    #   3. Use 'sort' to sort the input\n    #   4. Use 'rev' to reverse\
    \ the input\n    #   5. Use\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvltk9gmc.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmpvltk9gmc.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  for i in \"${array[@]}\"; do\n    case $i in\n      1)\
    \ result+=(\\\"One\\\") ;;\n      2) result+=(\\\"Two\\\") ;;\n      3) result+=(\\\
    \"Three\\\") ;;\n      4) result+=(\\\"Four\\\") ;;\n      5) result+=(\\\"Five\\\
    \") ;;\n      6) result+=(\\\"Six\\\") ;;\n      7) result+=(\\\"Seven\\\") ;;\n\
    \      8) result+=(\\\"Eight\\\") ;;\n      9) result+=(\\\"Nine\\\") ;;\n   \
    \ esac\n  done\n  echo ${result[@]} | tr ' ' '\\n' | sort -r\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_arr=()\n  local -a nums_rev_arr=()\n  local -a nums_arr_sorted=()\n  local\
    \ -a nums_rev_arr_sorted=()\n  local -a nums_arr_sorted_str=()\n  local -a nums_rev_arr_sorted_str=()\n\
    \  local -a nums_arr_sorted_str_rev=()\n  local -a nums_rev_arr_sorted_str_rev=()\n\
    \  local -a nums_arr_sorted_str_rev_final=()\n  local -a nums_rev_arr_sorted_str_rev_final=()\n\
    \  local -a nums_arr_sorted_str_rev_final_str=()\n  local -a nums_rev_arr_sorted_str_rev_final_str=()\n\
    \  local -a nums_arr_sorted_str_rev_final_str_final=()\n  local -a nums_rev_arr_sorted_str_rev_final_str_final=()\n\
    \  local -a nums_arr_sorted_str_rev_final_str_final_str=()\n  local -a nums_rev_arr_sorted_str_rev_final_str_final_str=()\n\
    \  local -a nums_arr_sorted_str_rev_final_str_final_str_final=()\n  local -a nums_rev_arr_sorted_str_rev_final_str_final_str_final=()\n\
    \  local -a nums_arr_sorted_str_rev_final_str_final_str_final_str=()\n  local\
    \ -a nums_rev_arr_sorted_str_rev_final_str_final_str_final_str=()\n  local -a\
    \ nums_arr_sorted_str_rev_final_str\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a result\n  \
    \  local -a numbers=($1)\n    local -a names=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted\n    local -a reversed\n    for number in \"\
    ${numbers[@]}\"; do\n        if [[ $number -ge 1 && $number -le 9 ]]; then\n \
    \           sorted+=(\"$number\")\n        fi\n    done\n    if [[ ${#sorted[@]}\
    \ -eq 0 ]]; then\n        echo \"[]\"\n    else\n        sorted=($(printf \"%s\\\
    n\" \"${sorted[@]}\" | sort -n))\n        for number in \"${sorted[@]}\"; do\n\
    \            reversed+=(\"${names[$number-1]}\")\n        done\n        reversed=($(printf\
    \ \"%s\\n\" \"${reversed[@]}\" | tac))\n        for name in \"${reversed[@]}\"\
    ; do\n            result+=(\"\\\"$name\\\"\")\n        done\n        echo \"[${result[*]}]\"\
    \n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following command to get the length of an array:\n    #\
    \ length=$(echo $1 | wc -w)\n    # You can use the following command to get the\
    \ i-th element of an array:\n    # element=$(echo $1 | cut -d ' ' -f $i)\n   \
    \ # You can use the following command to print the output:\n    # echo \"[$output]\"\
    \n    #\n    # Example:\n    # output=\"\"\n    # for ((i=1; i<=$length; i++));\
    \ do\n    #     element=$(echo $1 | cut -d ' ' -f $i)\n    #     output=\"$output\
    \ \\\"$element\\\"\"\n    # done\n    # echo \"[$output]\"\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpytygc5dk.sh: line 32: syntax error near unexpected token `}''

    /tmp/tmpytygc5dk.sh: line 32: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -eq 1 ]]; then\n      ((j++))\n    elif [[ $i -eq 2 ]]; then\n\
    \      ((k++))\n    elif [[ $i -eq 3 ]]; then\n      ((l++))\n    elif [[ $i -eq\
    \ 4 ]]; then\n      ((m++))\n    elif [[ $i -eq 5 ]]; then\n      ((n++))\n  \
    \  elif [[ $i -eq 6 ]]; then\n      ((o++))\n    elif [[ $i -eq 7 ]]; then\n \
    \     ((p++))\n    elif [[ $i -eq 8 ]]; then\n      ((q++))\n    elif [[ $i -eq\
    \ 9 ]]; then\n      ((r++))\n    fi\n  done\n  for ((s=0; s<j; s++)); do\n   \
    \ result+=(\"${numbers[0]}\")\n  done\n  for ((t=0; t<k; t++)); do\n    result+=(\"\
    ${numbers[1]}\")\n  done\n  for ((u=0; u<l; u++)); do\n    result+=(\"${numbers[2]}\"\
    )\n  done\n  for ((v=0; v<m; v++)); do\n    result+=(\"${numbers[3]}\")\n  done\n\
    \  for ((w=0; w<n; w++)); do\n    result+=\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi4mk44k7.sh: line 73: syntax error near unexpected token `}''

    /tmp/tmpi4mk44k7.sh: line 73: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${arr[@]}; do\n        if [[ $i -ge 1 && $i -le 9\
    \ ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n   \
    \ echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local i=0\n  local j=0\n\
    \  local k=0\n  local number=0\n  local -i length=${#array[@]}\n  for ((i=0; i<length;\
    \ i++)); do\n    number=${array[i]}\n    if [[ $number -ge 1 && $number -le 9\
    \ ]]; then\n      sorted[j]=$number\n      ((j++))\n    fi\n  done\n  if [[ $j\
    \ -gt 0 ]]; then\n    IFS=$'\\n' sorted=($(sort <<<\"${sorted[*]}\"))\n    unset\
    \ IFS\n    length=${#sorted[@]}\n    for ((i=length-1; i>=0; i--)); do\n     \
    \ reversed[k]=${sorted[i]}\n      ((k++))\n    done\n    for ((i=0; i<length;\
    \ i++)); do\n      result[i]=\"\\\"${numbers[${reversed[i]}-1]}\\\"\"\n    done\n\
    \  fi\n  echo \"[${result[*]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  echo $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/[/g;s/$/]/g'\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a arr_sorted\n    local -a arr_sorted_reversed\n    local -a arr_sorted_reversed_mapped\n\
    \    local -a arr_sorted_reversed_mapped_filtered\n    local -a arr_sorted_reversed_mapped_filtered_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped\n    local -a\
    \ arr_sorted_reversed_mapped_filtered_string_escaped_json\n    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string_string_string_string_string\n\
    \    local -a arr_sorted_reversed_mapped_filtered_string_escaped_json_string_string_string_string_string_string_string_string_string_string\n\
    \    local -a arr_s\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=${#array[@]}\n\
    \  local -i number=0\n  for ((i=0; i<len; i++)); do\n    number=${array[i]}\n\
    \    if [[ $number -ge 1 && $number -le 9 ]]; then\n      result[j]=$number\n\
    \      ((j++))\n    fi\n  done\n  len=${#result[@]}\n  for ((i=0; i<len; i++));\
    \ do\n    for ((j=i+1; j<len; j++)); do\n      if [[ ${result[i]} -gt ${result[j]}\
    \ ]]; then\n        number=${result[i]}\n        result[i]=${result[j]}\n    \
    \    result[j]=$number\n      fi\n    done\n  done\n  for ((i=0; i<len; i++));\
    \ do\n    number=${result[i]}\n    result[i]=${numbers[number-1]}\n  done\n  for\
    \ ((i=0; i<len; i++)); do\n    result[i]=\"\\\"${result[i]}\\\"\"\n  done\n  echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n \
    \ local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[$(printf '\"%s\" ' \"${arr[@]}\" | sort -nr | sed 's/\\([0-9]\\)/\"\\U\\\
    1\"/g')]\"\n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You may use echo\n    # You may use $(...) or `...`\n    # You may use\
    \ the following variables:\n    # $1 - the first argument\n    # $2 - the second\
    \ argument\n    # $3 - the third argument\n    # ...\n    # $9 - the ninth argument\n\
    \    # ${10} - the tenth argument\n    # ${11} - the eleventh argument\n    #\
    \ ...\n    # ${N} - the Nth argument\n    # $# - the number of arguments\n   \
    \ # $@ - all arguments\n    # $* - all arguments\n    # $0 - the name of the script\n\
    \    # $? - the exit status of the last command\n    # $$ - the process ID of\
    \ the script\n    # $! - the process ID of the last background command\n    #\
    \ $- - flags passed to the script\n    # $_ - the last argument of the previous\
    \ command\n    # $IFS - the field separator\n    # $UID - the user ID of the user\
    \ running the script\n    # $EUID - the effective user ID of the user running\
    \ the script\n    # $GROUPS - the group IDs of the user running the script\n \
    \   # $SECONDS - the number of seconds since the script was started\n    # $RANDOM\
    \ - a random number between 0 and 32767\n    # $LINENO - the current line number\
    \ in the script\n    # $DIRSTACK - an array of the current contents of the directory\
    \ stack\n    # $PIPESTATUS - an array of the exit statuses of the processes in\
    \ the most recently executed foreground pipeline\n    # $MACHTYPE - a string that\
    \ fully describes the system type on which the script is running\n    # $HOSTNAME\
    \ - the name of the system on which the script is running\n    # $HOSTTYPE - a\
    \ string that describes the system type on which the script is running\n    #\
    \ $OSTYPE - a string describing the operating system on which the script is running\n\
    \    # $SHELLOPTS - a list of enabled shell options\n    # $BASH - the full pathname\
    \ used to execute the current instance of Bash\n    # $BASH_VERSION - the version\
    \ number of the current instance of Bash\n    # $BASH_VERSINFO - a read-only\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgpzsh33g.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpgpzsh33g.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local\
    \ -i m\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i l\n    local -i o\n    local -i p\n    local -i q\n    local -i r\n    local\
    \ -i s\n    local -i t\n    local -i u\n    local -i v\n    local -i w\n    local\
    \ -i x\n    local -i y\n    local -i z\n    local -i a\n    local -i b\n    local\
    \ -i c\n    local -i d\n    local -i e\n    local -i f\n    local -i g\n    local\
    \ -i h\n    local -i l\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i a\n    local\
    \ -i b\n    local -i c\n    local -i d\n    local -i e\n    local -i f\n    local\
    \ -i g\n    local -i h\n    local -i l\n    local -i o\n    local -i p\n    local\
    \ -i q\n    local -i r\n    local -i s\n    local -i t\n    local -i u\n    local\
    \ -i v\n    local -i w\n    local -i x\n    local -i y\n    local -i z\n    local\
    \ -i a\n    local\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a result=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n\
    \  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local\
    \ gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n\
    \  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local\
    \ rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n\
    \  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local\
    \ ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n\
    \  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n \
    \ local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local\
    \ sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n\
    \  local yyy\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted\n    local -a result\n    local -a numbers=(\"One\" \"Two\"\
    \ \"Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for i\
    \ in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n      \
    \      sorted+=($i)\n        fi\n    done\n    sorted=($(printf \"%s\\n\" \"${sorted[@]}\"\
    \ | sort -n))\n    for i in \"${sorted[@]}\"; do\n        result+=(${numbers[$i-1]})\n\
    \    done\n    echo \"[$(printf '\"%s\", ' \"${result[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in ${array[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo $(echo ${result[@]}\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' ')\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdenkb6aa.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmpdenkb6aa.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr ' ' '\\n' | sort -n | uniq | tac | sed 's/1/One/g' | sed 's/2/Two/g'\
    \ | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g' | sed 's/6/Six/g'\
    \ | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g' | tr '\\n' ' ' |\
    \ sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a result\n  \
    \  local -a sorted\n    local -a reversed\n    local -a names\n    local -a numbers\n\
    \    local -a words\n    local -a numbers_and_names\n    local -a numbers_and_names_sorted\n\
    \    local -a numbers_and_names_reversed\n    local -a numbers_and_names_sorted_and_reversed\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined\n    local -a numbers_and_names_sorted_and_reversed_joined_quoted\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined\n   \
    \ local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined_quoted\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined\n\
    \    local -a numbers_and_names_sorted_and_reversed_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted_joined_quoted\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i len\n  local -i num\n  local -i max\n  local\
    \ -i min\n  local -i count\n  local -i index\n  local -i tmp\n  local -i tmp2\n\
    \  local -i tmp3\n  local -i tmp4\n  local -i tmp5\n  local -i tmp6\n  local -i\
    \ tmp7\n  local -i tmp8\n  local -i tmp9\n  local -i tmp10\n  local -i tmp11\n\
    \  local -i tmp12\n  local -i tmp13\n  local -i tmp14\n  local -i tmp15\n  local\
    \ -i tmp16\n  local -i tmp17\n  local -i tmp18\n  local -i tmp19\n  local -i tmp20\n\
    \  local -i tmp21\n  local -i tmp22\n  local -i tmp23\n  local -i tmp24\n  local\
    \ -i tmp25\n  local -i tmp26\n  local -i tmp27\n  local -i tmp28\n  local -i tmp29\n\
    \  local -i tmp30\n  local -i tmp31\n  local -i tmp32\n  local -i tmp33\n  local\
    \ -i tmp34\n  local -i tmp35\n  local -i tmp36\n  local -i tmp37\n  local -i tmp38\n\
    \  local -i tmp39\n  local -i tmp40\n  local -i tmp41\n  local -i tmp42\n  local\
    \ -i tmp43\n  local -i tmp44\n  local -i tmp45\n  local -i tmp46\n  local -i tmp47\n\
    \  local -i tmp48\n  local -i tmp49\n  local -i tmp50\n  local -i tmp51\n  local\
    \ -i tmp52\n  local -i tmp53\n  local -i tmp54\n  local -i tmp55\n  local -i tmp56\n\
    \  local -i tmp57\n  local -i tmp58\n  local -i tmp59\n  local -i tmp60\n  local\
    \ -i tmp61\n  local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a nums=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n\
    \    local num\n    local i\n    for num in $1; do\n        if [[ $num -ge 1 &&\
    \ $num -le 9 ]]; then\n            arr+=($num)\n        fi\n    done\n    if [[\
    \ ${#arr[@]} -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n   \
    \ arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n    for\
    \ ((i=${#arr[@]}-1; i>=0; i--)); do\n        res+=(${nums_rev[${arr[$i]}-1]})\n\
    \    done\n    echo \"[$(printf '\"%s\", ' \"${res[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted\n    local -a reversed\n    local -a result\n    local i\n\
    \    local j\n    local k\n    local l\n\n    for ((i = 0; i < ${#array[@]}; i++));\
    \ do\n        if [[ ${array[$i]} -ge 1 && ${array[$i]} -le 9 ]]; then\n      \
    \      sorted+=(${array[$i]})\n        fi\n    done\n\n    if [[ ${#sorted[@]}\
    \ -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n\n    sorted=($(for\
    \ ((i = 0; i < ${#sorted[@]}; i++)); do echo ${sorted[$i]}; done | sort -n))\n\
    \n    for ((i = ${#sorted[@]} - 1; i >= 0; i--)); do\n        reversed+=(${sorted[$i]})\n\
    \    done\n\n    for ((i = 0; i < ${#reversed[@]}; i++)); do\n        case ${reversed[$i]}\
    \ in\n            1) result+=('\"One\"') ;;\n            2) result+=('\"Two\"\
    ') ;;\n            3) result+=('\"Three\"') ;;\n            4) result+=('\"Four\"\
    ') ;;\n            5) result+=('\"Five\"') ;;\n            6) result+=('\"Six\"\
    ') ;;\n            7) result+=('\"Seven\"') ;;\n            8) result+=('\"Eight\"\
    ') ;;\n            9) result+=('\"Nine\"') ;;\n        esac\n    done\n\n    echo\
    \ \"[${result[@]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | uniq | grep -E \"^[1-9]$\" | tac | sed 's/1/One/g'\
    \ | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g'\
    \ | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g'\
    \ | tr \"\\n\" \" \" | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a digits=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n  local f=\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You may use echo to print the result\n    # You may use $(...) to execute\
    \ the command\n    # You may use `...` to execute the command\n    # You may use\
    \ local to define local variables\n    # You may use tr to replace characters\n\
    \    # You may use sort to sort the array\n    # You may use rev to reverse the\
    \ array\n    # You may use sed to replace the numbers by the corresponding words\n\
    \    # You may use paste to join the array elements\n    # You may use cut to\
    \ remove the last character\n    # You may use head to remove the first character\n\
    \    # You may use wc to count the number of elements in the array\n    # You\
    \ may use seq to generate a sequence of numbers\n    # You may use xargs to execute\
    \ a command on each element of the array\n    # You may use read to read the input\n\
    \    # You may use echo to print the result\n    # You may use $(...) to execute\
    \ the command\n    # You may use `...` to execute the command\n    # You may use\
    \ local to define local variables\n    # You may use tr to replace characters\n\
    \    # You may use sort to sort the array\n    # You may use rev to reverse the\
    \ array\n    # You may use sed to replace the numbers by the corresponding words\n\
    \    # You may use paste to join the array elements\n    # You may use cut to\
    \ remove the last character\n    # You may use head to remove the first character\n\
    \    # You may use wc to count the number of elements in the array\n    # You\
    \ may use seq to generate a sequence of numbers\n    # You may use xargs to execute\
    \ a command on each element of the array\n    # You may use read to read the input\n\
    \    # You may use echo to print the result\n    # You may use $(...) to execute\
    \ the command\n    # You may use `...` to execute the command\n    # You may use\
    \ local to define local variables\n    # You may use tr to replace characters\n\
    \    # You may use sort to sort the array\n    # You may use rev to reverse the\
    \ array\n    # You may use sed to replace the numbers by the corresponding words\n\
    \    # You may use paste to join the array elements\n    # You may use cut to\
    \ remove the last character\n    # You may use head to remove\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3tmgsnpv.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmp3tmgsnpv.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkvu7v_do.sh: line 187: syntax error near unexpected token `}''

    /tmp/tmpkvu7v_do.sh: line 187: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n      arr+=($i)\n    fi\n  done\n\
    \  arr=($(echo ${arr[@]} | tr ' ' '\\n' | sort -rn | tr '\\n' ' '))\n  for i in\
    \ ${!arr[@]}; do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"' ;;\n    \
    \  2) arr[$i]='\"Two\"' ;;\n      3) arr[$i]='\"Three\"' ;;\n      4) arr[$i]='\"\
    Four\"' ;;\n      5) arr[$i]='\"Five\"' ;;\n      6) arr[$i]='\"Six\"' ;;\n  \
    \    7) arr[$i]='\"Seven\"' ;;\n      8) arr[$i]='\"Eight\"' ;;\n      9) arr[$i]='\"\
    Nine\"' ;;\n    esac\n  done\n  echo ${arr[@]}\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tac | sed -e 's/1/One/g' -e 's/2/Two/g' -e\
    \ 's/3/Three/g' -e 's/4/Four/g' -e 's/5/Five/g' -e 's/6/Six/g' -e 's/7/Seven/g'\
    \ -e 's/8/Eight/g' -e 's/9/Nine/g' | tr \"\\n\" \" \" | sed -e 's/^/\"/' -e 's/$/\"\
    /'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo $(reverse \"${result[@]}\")\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr90u4jee.sh: line 25: reverse: command not found

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a a=($1)\n  local\
    \ -a b=()\n  local -a c=()\n  local -a d=()\n  local -a e=()\n  local -a f=()\n\
    \  local -a g=()\n  local -a h=()\n  local -a i=()\n  local -a j=()\n  local -a\
    \ k=()\n  local -a l=()\n  local -a m=()\n  local -a n=()\n  local -a o=()\n \
    \ local -a p=()\n  local -a q=()\n  local -a r=()\n  local -a s=()\n  local -a\
    \ t=()\n  local -a u=()\n  local -a v=()\n  local -a w=()\n  local -a x=()\n \
    \ local -a y=()\n  local -a z=()\n  for i in \"${a[@]}\"; do\n    if [[ $i -eq\
    \ 1 ]]; then\n      b+=(\"$i\")\n    elif [[ $i -eq 2 ]]; then\n      c+=(\"$i\"\
    )\n    elif [[ $i -eq 3 ]]; then\n      d+=(\"$i\")\n    elif [[ $i -eq 4 ]];\
    \ then\n      e+=(\"$i\")\n    elif [[ $i -eq 5 ]]; then\n      f+=(\"$i\")\n\
    \    elif [[ $i -eq 6 ]]; then\n      g+=(\"$i\")\n    elif [[ $i -eq 7 ]]; then\n\
    \      h+=(\"$i\")\n    elif [[ $i -eq 8 ]]; then\n      i+=(\"$i\")\n    elif\
    \ [[ $i -eq 9 ]]; then\n      j+=(\"$i\")\n    fi\n  done\n  for i in \"${b[@]}\"\
    ; do\n    k+=('\"One\"')\n  done\n  for i in \"${c[@]}\"; do\n    l+=('\"Two\"\
    ')\n  done\n  for i in \"${d[@]}\"; do\n    m+=('\"Three\"')\n  done\n  for i\
    \ in \"${e[@]}\"; do\n    n+=('\"Four\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7o0nm126.sh: line 74: unexpected EOF while looking for matching
    `''''

    /tmp/tmp7o0nm126.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a sorted\n  local -a reversed\n  local -a names\n  local\
    \ -a final\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  array=($1)\n  for ((i=0;\
    \ i<${#array[@]}; i++)); do\n    if [[ ${array[$i]} -ge 1 && ${array[$i]} -le\
    \ 9 ]]; then\n      result+=(${array[$i]})\n    fi\n  done\n  sorted=($(for ((i=0;\
    \ i<${#result[@]}; i++)); do echo ${result[$i]}; done | sort -n))\n  reversed=($(for\
    \ ((i=${#sorted[@]}-1; i>=0; i--)); do echo ${sorted[$i]}; done))\n  names=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n  for ((i=0; i<${#reversed[@]}; i++));\
    \ do\n    for ((j=0; j<${#names[@]}; j++)); do\n      if [[ ${reversed[$i]} -eq\
    \ $((j+1)) ]]; then\n        final+=(${names[$j]})\n      fi\n    done\n  done\n\
    \  echo ${final[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in ${array[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${dict[$i-1]})\n    fi\n  done\n  echo ${result[@]} | tr ' ' '\\\
    n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_arr=()\n  local -a nums_rev_arr=()\n  local -i i=0\n  local -i j=0\n  local\
    \ -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local\
    \ -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local\
    \ -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local\
    \ -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local\
    \ -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local\
    \ -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n\
    \  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i\
    \ ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n \
    \ local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i\
    \ bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n \
    \ local -i gg=0\n  local -i hh=0\n\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a sorted\n    local -a reversed\n    local -a mapped\n\
    \    local -a filtered\n    local -a joined\n    local -a quoted\n    local -a\
    \ escaped\n    local -a quoted_escaped\n    local -a quoted_escaped_joined\n \
    \   local -a quoted_escaped_joined_escaped\n    local -a quoted_escaped_joined_escaped_quoted\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped\n    local -a quoted_escaped_joined_escaped_quoted_escaped_joined\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped\n  \
    \  local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped\n\
    \    local -a quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_escaped_joined_escaped_quoted_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a res\n    local -a nums\n    local -a words\n    local i\n    local j\n  \
    \  local k\n    local n\n    local w\n    local s\n    local t\n    arr=($1)\n\
    \    nums=(1 2 3 4 5 6 7 8 9)\n    words=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        n=${arr[$i]}\n        for ((j=0; j<${#nums[@]}; j++)); do\n    \
    \        if [[ $n -eq ${nums[$j]} ]]; then\n                res+=($n)\n      \
    \          break\n            fi\n        done\n    done\n    for ((i=0; i<${#res[@]};\
    \ i++)); do\n        n=${res[$i]}\n        for ((j=0; j<${#nums[@]}; j++)); do\n\
    \            if [[ $n -eq ${nums[$j]} ]]; then\n                w=${words[$j]}\n\
    \                res[$i]=$w\n                break\n            fi\n        done\n\
    \    done\n    for ((i=0; i<${#res[@]}; i++)); do\n        for ((j=0; j<${#res[@]}-1;\
    \ j++)); do\n            if [[ ${res[$j]} -gt ${res[$j+1]} ]]; then\n        \
    \        t=${res[$j]}\n                res[$j]=${res[$j+1]}\n                res[$j+1]=$t\n\
    \            fi\n        done\n    done\n    for ((i=0; i<${#res[@]}; i++)); do\n\
    \        for ((j=0; j<${#res[@]}-1; j++)); do\n            if [[ ${res[$j]} -eq\
    \ ${res[$j+1]} ]]; then\n                t=${res[$j]}\n                res[$j]=${res[$j+1]}\n\
    \                res[$j+1]=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpasrz6xpb.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpasrz6xpb.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: implement the\
    \ function here\n  # use the following command to create an array from a string:\n\
    \  #   arr=($(echo $1 | tr \" \" \"\\n\"))\n  # use the following command to print\
    \ an array:\n  #   echo ${arr[@]}\n  # use the following command to sort an array:\n\
    \  #   arr=($(echo ${arr[@]} | tr \" \" \"\\n\" | sort -n))\n  # use the following\
    \ command to reverse an array:\n  #   arr=($(echo ${arr[@]} | tr \" \" \"\\n\"\
    \ | sort -nr))\n  # use the following command to print an array with double quotes:\n\
    \  #   echo ${arr[@]/#/\\\"}\n  # use the following command to replace an element\
    \ in an array:\n  #   arr[i]=${arr[i]/1/\\\"One\\\"}\n  #\n  # Note:\n  # - You\
    \ can use the following command to check if a number is between 1 and 9 inclusive:\n\
    \  #   if [[ $num -ge 1 && $num -le 9 ]]; then ...; fi\n  # - You can use the\
    \ following command to check if a number is an integer:\n  #   if [[ $num =~ ^-?[0-9]+$\
    \ ]]; then ...; fi\n  # - You can use the following command to check if a number\
    \ is a positive integer:\n  #   if [[ $num =~ ^[0-9]+$ ]]; then ...; fi\n  # -\
    \ You can use the following command to check if a number is a negative integer:\n\
    \  #   if [[ $num =~ ^-[0-9]+$ ]]; then ...; fi\n  # - You can use the following\
    \ command to check if a number is a non-negative integer:\n  #   if [[ $num =~\
    \ ^[0-9]*$ ]]; then ...; fi\n  # - You can use the following command to check\
    \ if a number is a non-positive integer:\n  #   if [[ $num =~ ^-[0-9]*$ ]]; then\
    \ ...; fi\n  # - You can use the following command to check if a number is a positive\
    \ integer or zero:\n  #   if [[ $num =~\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy0nflrdb.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmpy0nflrdb.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in ${array[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo ${result[@]} | tr '\
    \ ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [ $i -ge 1 ] && [ $i -le\
    \ 9 ]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n  \
    \  echo $(reverse_array \"${result[@]}\")\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa4nfhbpe.sh: line 25: reverse_array: command not found

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n   \
    \ local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n   \
    \ local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \   \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You may use echo\n    # You may use $(...)\n    # You may use `...`\n \
    \   # You may use [ ... ]\n    # You may use [[ ... ]]\n    # You may use grep\n\
    \    # You may use sed\n    # You may use tr\n    # You may use sort\n    # You\
    \ may use wc\n    # You may use head\n    # You may use tail\n    # You may use\
    \ cat\n    # You may use cut\n    # You may use uniq\n    # You may use wc\n \
    \   # You may use tr\n    # You may use sort\n    # You may use uniq\n    # You\
    \ may use wc\n    # You may use tr\n    # You may use sort\n    # You may use\
    \ uniq\n    # You may use wc\n    # You may use tr\n    # You may use sort\n \
    \   # You may use uniq\n    # You may use wc\n    # You may use tr\n    # You\
    \ may use sort\n    # You may use uniq\n    # You may use wc\n    # You may use\
    \ tr\n    # You may use sort\n    # You may use uniq\n    # You may use wc\n \
    \   # You may use tr\n    # You may use sort\n    # You may use uniq\n    # You\
    \ may use wc\n    # You may use tr\n    # You may use sort\n    # You may use\
    \ uniq\n    # You may use wc\n    # You may use tr\n    # You may use sort\n \
    \   # You may use uniq\n    # You may use wc\n    # You may use tr\n    # You\
    \ may use sort\n    # You may use uniq\n    # You may use wc\n    # You may use\
    \ tr\n    # You may use sort\n    # You may use uniq\n    # You may use wc\n \
    \   # You may use tr\n    # You may use sort\n    # You may use uniq\n    # You\
    \ may use wc\n    # You may use tr\n    # You may use sort\n    # You may use\
    \ uniq\n    # You may use wc\n    # You may use tr\n    # You may use sort\n \
    \   # You may use uniq\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmh8j0lq4.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmpmh8j0lq4.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | uniq | grep -E \"^[1-9]$\" | tac | sed -E\
    \ \"s/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g\"\
    \ | awk '{print \"\\\"\"$1\"\\\"\"}' | tr \"\\n\" \" \" | sed -E \"s/ $//\"\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    #\n    # Hint: use the following functions:\n    #\n    # sort_numbers()\n\
    \    # reverse_array()\n    # replace_digits()\n    #\n    # and the following\
    \ variables:\n    #\n    # DIGITS\n    #\n    # Example:\n    #\n    # local -a\
    \ array=(\"$@\")\n    # local -a sorted_array=($(sort_numbers \"${array[@]}\"\
    ))\n    # local -a reversed_array=($(reverse_array \"${sorted_array[@]}\"))\n\
    \    # local -a replaced_array=($(replace_digits \"${reversed_array[@]}\"))\n\
    \    # echo \"${replaced_array[@]}\"\n    local -a array=(\"$@\")\n    local -a\
    \ sorted_array=($(sort_numbers \"${array[@]}\"))\n    local -a reversed_array=($(reverse_array\
    \ \"${sorted_array[@]}\"))\n    local -a replaced_array=($(replace_digits \"${reversed_array[@]}\"\
    ))\n    echo \"${replaced_array[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk09vakxa.sh: line 37: sort_numbers: command not found

    /tmp/tmpk09vakxa.sh: line 38: reverse_array: command not found

    /tmp/tmpk09vakxa.sh: line 39: replace_digits: command not found

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    local -i i\n    local -i j\n    local -i k\n    local -i n\n    local\
    \ -i m\n    local -i p\n    local -i q\n    local -i r\n    local -i s\n    local\
    \ -i t\n    local -i u\n    local -i v\n    local -i w\n    local -i x\n    local\
    \ -i y\n    local -i z\n    local -i a\n    local -i b\n    local -i c\n    local\
    \ -i d\n    local -i e\n    local -i f\n    local -i g\n    local -i h\n    local\
    \ -i l\n    local -i o\n    local -i number\n    local -i length\n    local -i\
    \ max\n    local -i min\n    local -i tmp\n    local -i tmp2\n    local -i tmp3\n\
    \    local -i tmp4\n    local -i tmp5\n    local -i tmp6\n    local -i tmp7\n\
    \    local -i tmp8\n    local -i tmp9\n    local -i tmp10\n    local -i tmp11\n\
    \    local -i tmp12\n    local -i tmp13\n    local -i tmp14\n    local -i tmp15\n\
    \    local -i tmp16\n    local -i tmp17\n    local -i tmp18\n    local -i tmp19\n\
    \    local -i tmp20\n    local -i tmp21\n    local -i tmp22\n    local -i tmp23\n\
    \    local -i tmp24\n    local -i tmp25\n    local -i tmp26\n    local -i tmp27\n\
    \    local -i tmp28\n    local -i tmp29\n    local -i tmp30\n    local -i tmp31\n\
    \    local -i tmp32\n    local -i tmp33\n    local -i tmp34\n    local -i tmp35\n\
    \    local -i tmp36\n    local -i tmp37\n    local -i tmp38\n    local -i tmp39\n\
    \    local -i tmp40\n    local -i tmp41\n    local -i tmp42\n    local -i tmp43\n\
    \    local\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted\n  local number\n  local i\n  local j\n  local k\n  local n\n\
    \  local -i index\n\n  IFS=' ' read -r -a array <<< \"$1\"\n  for ((i = 0; i <\
    \ ${#array[@]}; i++)); do\n    number=${array[$i]}\n    if [[ $number =~ ^[1-9]$\
    \ ]]; then\n      sorted+=(\"$number\")\n    fi\n  done\n  sorted=($(printf '%s\\\
    n' \"${sorted[@]}\" | sort -n))\n  for ((i = ${#sorted[@]} - 1; i >= 0; i--));\
    \ do\n    number=${sorted[$i]}\n    result+=(\"\\\"${numbers[$number - 1]}\\\"\
    \")\n  done\n  echo \"[${result[*]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a nums=(1 2 3 4 5 6 7\
    \ 8 9)\n    local i\n    local j\n    local tmp\n    local num\n    local name\n\
    \n    for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n         \
    \   arr+=($i)\n        fi\n    done\n\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        for ((j=i+1; j<${#arr[@]}; j++)); do\n            if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n                tmp=${arr[i]}\n                arr[i]=${arr[j]}\n\
    \                arr[j]=$tmp\n            fi\n        done\n    done\n\n    for\
    \ ((i=${#arr[@]}-1; i>=0; i--)); do\n        num=${arr[i]}\n        for ((j=0;\
    \ j<${#nums[@]}; j++)); do\n            if [[ $num -eq ${nums[j]} ]]; then\n \
    \               name=${names[j]}\n                break\n            fi\n    \
    \    done\n        res+=($name)\n    done\n\n    echo \"${res[@]}\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr ' '\
    \ '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\"\
    \ \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a sorted=()\n  local -a reversed=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n\
    \  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i\
    \ ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n \
    \ local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i\
    \ uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n \
    \ local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i\
    \ dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n \
    \ local -i iii=0\n  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local i\n  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      res+=(\"${nums[$i-1]}\")\n    fi\n  done\n  echo \"${res[@]}\" | tr ' '\
    \ '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  #\
    \ echo \"$1\"\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n  # echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | rev\n  # echo \"$1\" | tr '\
    \ ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One'\n  # echo \"$1\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One' | tr '2' 'Two'\n  #\
    \ echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One' | tr\
    \ '2' 'Two' | tr '3' 'Three'\n  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' ' | rev | tr '1' 'One' | tr '2' 'Two' | tr '3' 'Three' | tr '4' 'Four'\n\
    \  # echo \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One'\
    \ | tr '2' 'Two' | tr '3' 'Three' | tr '4' 'Four' | tr '5' 'Five'\n  # echo \"\
    $1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One' | tr '2' 'Two'\
    \ | tr '3' 'Three' | tr '4' 'Four' | tr '5' 'Five' | tr '6' 'Six'\n  # echo \"\
    $1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ' | rev | tr '1' 'One' | tr '2' 'Two'\
    \ | tr '3' 'Three' | tr '4' 'Four' | tr '5' 'Five' | tr '6' 'Six' | tr '7' 'Seven'\n\
    \  # echo \"$1\" | tr ' ' '\\n' |\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcojmif02.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmpcojmif02.sh: line 29: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a arr2=()\n    local -a arr3=()\n    local -a arr4=()\n    local -a\
    \ arr5=()\n    local -a arr6=()\n    local -a arr7=()\n    local -a arr8=()\n\
    \    local -a arr9=()\n    local -a arr10=()\n    local -a arr11=()\n    local\
    \ -a arr12=()\n    local -a arr13=()\n    local -a arr14=()\n    local -a arr15=()\n\
    \    local -a arr16=()\n    local -a arr17=()\n    local -a arr18=()\n    local\
    \ -a arr19=()\n    local -a arr20=()\n    local -a arr21=()\n    local -a arr22=()\n\
    \    local -a arr23=()\n    local -a arr24=()\n    local -a arr25=()\n    local\
    \ -a arr26=()\n    local -a arr27=()\n    local -a arr28=()\n    local -a arr29=()\n\
    \    local -a arr30=()\n    local -a arr31=()\n    local -a arr32=()\n    local\
    \ -a arr33=()\n    local -a arr34=()\n    local -a arr35=()\n    local -a arr36=()\n\
    \    local -a arr37=()\n    local -a arr38=()\n    local -a arr39=()\n    local\
    \ -a arr40=()\n    local -a arr41=()\n    local -a arr42=()\n    local -a arr43=()\n\
    \    local -a arr44=()\n    local -a arr45=()\n    local -a arr46=()\n    local\
    \ -a arr47=()\n    local -a arr48=()\n    local -a arr49=()\n    local -a arr50=()\n\
    \    local -a arr51=()\n    local -a arr52=()\n    local -a arr53=()\n    local\
    \ -a arr54=()\n    local -a arr55=()\n    local -a arr56=()\n    local -a arr57=()\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local\
    \ -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n  local -i k\n\
    \  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local -i p\n  local\
    \ -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n\
    \  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i a\n  local\
    \ -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n  local -i g\n\
    \  local -i h\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n\
    \  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local\
    \ -i i\n  local -i j\n  local -\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[$(printf '\"%s\" ' \"${arr[@]}\" | sort -nr\
    \ | tr -d '\\n' | sed 's/ /, /g')]\"\n    fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a sorted=()\n  local -i\
    \ i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local\
    \ -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n\
    \  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i\
    \ qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n \
    \ local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i\
    \ zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n \
    \ local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i\
    \ iii=0\n  local -i jjj=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a arr_sorted=()\n    local -a arr_reversed=()\n    local -a arr_final=()\n\
    \    local -a arr_final_str=()\n    local -a arr_final_str_quoted=()\n    local\
    \ -a arr_final_str_quoted_joined=()\n    local -a arr_final_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted=()\n    local -a arr_final_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str=()\n    local\
    \ -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted=()\n    local -a\
    \ arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n    local\
    \ -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined=()\n\
    \    local -a arr_final_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted_joined_str_quoted\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use the echo command to print\n  # Example: echo \"Hello World\"\n\
    \  # Remember to echo the result\n  # Example: echo \"Hello World\"\n  #\n  #\
    \ Hint: You can use the following command to sort the array\n  # Example: echo\
    \ \"1 2 3\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \"\n  #\n  # Hint: You\
    \ can use the following command to reverse the array\n  # Example: echo \"1 2\
    \ 3\" | tr \" \" \"\\n\" | tac | tr \"\\n\" \" \"\n  #\n  # Hint: You can use\
    \ the following command to replace the number by its name\n  # Example: echo \"\
    1 2 3\" | tr \" \" \"\\n\" | sed 's/1/One/g' | tr \"\\n\" \" \"\n  #\n  # Hint:\
    \ You can use the following command to remove the strange number\n  # Example:\
    \ echo \"1 -1 2\" | tr \" \" \"\\n\" | grep -E '^[1-9]+$' | tr \"\\n\" \" \"\n\
    \  #\n  # Hint: You can use the following command to remove the double quote\n\
    \  # Example: echo '\"1\" \"2\" \"3\"' | tr \" \" \"\\n\" | sed 's/\"//g' | tr\
    \ \"\\n\" \" \"\n  #\n  # Hint: You can use the following command to remove the\
    \ double quote\n  # Example: echo '\"1\" \"2\" \"3\"' | tr \" \" \"\\n\" | sed\
    \ 's/\"//g' | tr \"\\n\" \" \"\n  #\n  # Hint: You can use the following command\
    \ to remove the double quote\n  # Example: echo '\"1\" \"2\" \"3\"' | tr \" \"\
    \ \"\\n\" | sed 's/\"//g' | tr \"\\n\" \" \"\n  #\n  # Hint: You can use the following\
    \ command to remove the double quote\n  # Example: echo '\"1\" \"2\" \"3\"' |\
    \ tr \" \" \"\\n\" | sed 's/\"//g' | tr \"\\n\" \" \"\n  #\n  # Hint: You can\
    \ use the following command to remove the double quote\n  #\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe6dfbjho.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpe6dfbjho.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a sorted\n  local -a reversed\n  local -a result\n  local -i i\n  local -i\
    \ j\n  local -i length\n  local -i max\n  local -i min\n  local -i number\n  local\
    \ -i position\n  local -i size\n  local -i tmp\n  local -i value\n  local -i value_length\n\
    \  local -i value_length_max\n  local -i value_length_min\n  local -i value_length_tmp\n\
    \  local -i value_length_value\n  local -i value_length_value_length\n  local\
    \ -i value_length_value_length_max\n  local -i value_length_value_length_min\n\
    \  local -i value_length_value_length_tmp\n  local -i value_length_value_length_value\n\
    \  local -i value_length_value_length_value_length\n  local -i value_length_value_length_value_length_max\n\
    \  local -i value_length_value_length_value_length_min\n  local -i value_length_value_length_value_length_tmp\n\
    \  local -i value_length_value_length_value_length_value\n  local -i value_length_value_length_value_length_value_length\n\
    \  local -i value_length_value_length_value_length_value_length_max\n  local -i\
    \ value_length_value_length_value_length_value_length_min\n  local -i value_length_value_length_value_length_value_length_tmp\n\
    \  local -i value_length_value_length_value_length_value_length_value\n  local\
    \ -i value_length_value_length_value_length_value_length_value_length\n  local\
    \ -i value_length_value_length_value_length_value_length_value_length_max\n  local\
    \ -i value_length_value_length_value_length_value_length_value_length_min\n  local\
    \ -i value_length_value_length_value_length_value_length_value_length_tmp\n  local\
    \ -i value_length_value_length_value\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    echo $1 | tr ' ' '\\\
    n' | grep -E '^[1-9]$' | sort -r | sed 's/^\\([1-9]\\)$/\"\\1\"/'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n  \
    \    result+=(\"${numbers[$i-1]}\")\n    fi\n  done\n  echo \"${result[@]}\" |\
    \ tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # TODO: implement this\
    \ function\n    # Hint: use the following functions:\n    # - sort_digits\n  \
    \  # - reverse_array\n    # - replace_digits\n    # - join_array\n    # - echo\n\
    \    #\n    # Example:\n    # >>> echo $(sort_digits \"2 1 1 4 5 8 2 3\")\n  \
    \  # 1 1 2 2 3 4 5 8\n    # >>> echo $(reverse_array \"1 1 2 2 3 4 5 8\")\n  \
    \  # 8 5 4 3 2 2 1 1\n    # >>> echo $(replace_digits \"8 5 4 3 2 2 1 1\")\n \
    \   # Eight Five Four Three Two Two One One\n    # >>> echo $(join_array \"Eight\
    \ Five Four Three Two Two One One\")\n    # '\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"'\n    # >>> echo $(by_length \"2 1 1 4 5 8 2\
    \ 3\")\n    # '\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"\
    One\"'\n    #\n    # Note:\n    # - You can use the following command to replace\
    \ a string with another string:\n    #   echo \"2 1 1 4 5 8 2 3\" | sed 's/2/Two/g'\n\
    \    # - You can use the following command to replace a string with another string:\n\
    \    #   echo \"2 1 1 4 5 8 2 3\" | sed 's/2/Two/g'\n    # - You can use the following\
    \ command to replace a string with another string:\n    #   echo \"2 1 1 4 5 8\
    \ 2 3\" | sed 's/2/Two/g'\n    # - You can use the following command to replace\
    \ a string with another string:\n    #   echo \"2 1 1 4 5 8 2 3\" | sed 's/2/Two/g'\n\
    \    # - You can use the following command to replace a string with another string:\n\
    \    #   echo \"2 1 1 4 5 8 2 3\" | sed 's/2/Two/g'\n    # - You can use the following\
    \ command to replace a string with another string:\n    #   echo \"2 1 1 4 5 8\
    \ 2 3\" | sed\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsr1uukg1.sh: line 50: syntax error near unexpected token `}''

    /tmp/tmpsr1uukg1.sh: line 50: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # Replace \"One\" with the correct value\n    echo '[\"One\"]'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | sed -e 's/1/One/g' -e 's/2/Two/g' -e 's/3/Three/g'\
    \ -e 's/4/Four/g' -e 's/5/Five/g' -e 's/6/Six/g' -e 's/7/Seven/g' -e 's/8/Eight/g'\
    \ -e 's/9/Nine/g' | tr '\\n' ' ' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -a final=()\n \
    \ local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n\
    \  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n\
    \  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n\
    \  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local\
    \ ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n\
    \  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local\
    \ qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n\
    \  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local\
    \ bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n\
    \  local hhh=0\n  local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n \
    \ local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local\
    \ rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n\
    \  local xxx=0\n  local yyy=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # Use echo to output the result, e.g.\n    # echo \"Some string\"\n    echo\
    \ \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a sorted\n  local -a reversed\n  local -a final\n  local\
    \ -a numbers\n  local -a names\n  local -a digits\n  local -a digits_names\n \
    \ local -a digits_names_sorted\n  local -a digits_names_reversed\n  local -a digits_names_final\n\
    \  local -a digits_names_final_string\n  local -a digits_names_final_string_quoted\n\
    \  local -a digits_names_final_string_quoted_string\n  local -a digits_names_final_string_quoted_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string\n  local -a\
    \ digits_names_final_string_quoted_string_string_string_string\n  local -a digits_names_final_string_quoted_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string_string_string_string_string_string_string_string_string_string_string_string\n\
    \  local -a digits_names_final_string_quoted_string_string\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=()\n\
    \    for i in $1; do\n        if [[ $i =~ ^[1-9]$ ]]; then\n            array+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#array[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[$(printf '\"%s\" ' \"${array[@]}\" | sort\
    \ -n | tac | sed 's/\\([1-9]\\)/\"\\U\\1\"/g')]\"\n    fi\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr \" \" \"\\n\" | sort -n | tac | sed 's/1/One/g' | sed 's/2/Two/g'\
    \ | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g' | sed 's/6/Six/g'\
    \ | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g' | tr \"\\n\" \" \"\
    \ | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr ' ' '\\n' | sort -n | tac | while read line; do\n        if [[\
    \ $line -eq 1 ]]; then\n            echo -n '\"One\" '\n        elif [[ $line\
    \ -eq 2 ]]; then\n            echo -n '\"Two\" '\n        elif [[ $line -eq 3\
    \ ]]; then\n            echo -n '\"Three\" '\n        elif [[ $line -eq 4 ]];\
    \ then\n            echo -n '\"Four\" '\n        elif [[ $line -eq 5 ]]; then\n\
    \            echo -n '\"Five\" '\n        elif [[ $line -eq 6 ]]; then\n     \
    \       echo -n '\"Six\" '\n        elif [[ $line -eq 7 ]]; then\n           \
    \ echo -n '\"Seven\" '\n        elif [[ $line -eq 8 ]]; then\n            echo\
    \ -n '\"Eight\" '\n        elif [[ $line -eq 9 ]]; then\n            echo -n '\"\
    Nine\" '\n        fi\n    done\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a sorted\n  local -a reversed\n  local -a result\n  local -i i\n  local\
    \ -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n\
    \  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local\
    \ -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n\
    \  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local\
    \ -i f\n  local -i g\n  local -i h\n  local -i ii\n  local -i jj\n  local -i kk\n\
    \  local -i ll\n  local -i mm\n  local -i nn\n  local -i oo\n  local -i pp\n \
    \ local -i qq\n  local -i rr\n  local -i ss\n  local -i tt\n  local -i uu\n  local\
    \ -i vv\n  local -i ww\n  local -i xx\n  local -i yy\n  local -i zz\n  local -i\
    \ aa\n  local -i bb\n  local -i cc\n  local -i dd\n  local -i ee\n  local -i ff\n\
    \  local -i gg\n  local -i hh\n  local -i iii\n  local -i jjj\n  local -i kkk\n\
    \  local -i lll\n  local -i mmm\n  local -i nnn\n  local -i ooo\n  local -i ppp\n\
    \  local -i qqq\n  local -i rrr\n  local -i sss\n  local -i ttt\n  local -i uuu\n\
    \  local -i vvv\n  local -i www\n  local -i xxx\n  local -i yyy\n  local -i zzz\n\
    \  local -i aaa\n  local -i bbb\n  local -i ccc\n  local -i ddd\n  local\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort -rn))\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    case ${arr[$i]} in\n      1) arr[$i]='\"One\"';;\n      2) arr[$i]='\"\
    Two\"';;\n      3) arr[$i]='\"Three\"';;\n      4) arr[$i]='\"Four\"';;\n    \
    \  5) arr[$i]='\"Five\"';;\n      6) arr[$i]='\"Six\"';;\n      7) arr[$i]='\"\
    Seven\"';;\n      8) arr[$i]='\"Eight\"';;\n      9) arr[$i]='\"Nine\"';;\n  \
    \  esac\n  done\n  echo ${arr[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    local -A dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\"\
    \ [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\"\
    )\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            result+=(\"${dict[$i]}\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a sorted_array=()\n    local -a result=()\n    local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    local i=0\n    local j=0\n  \
    \  local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n   \
    \ local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local\
    \ u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n\
    \    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n    local ee=0\n\
    \    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n    local jj=0\n\
    \    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n    local oo=0\n\
    \    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n    local tt=0\n\
    \    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n    local yy=0\n\
    \    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n    local\
    \ ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local hhh=0\n\
    \    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n    local\
    \ mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local qqq=0\n\
    \    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n    local\
    \ vvv=0\n    local www=0\n    local xxx=0\n    local yyy=0\n    local zzz=0\n\
    \    local aaaa=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n\
    \    fi\n  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n\
    \    IFS=$'\\n' sorted=($(sort <<<\"${arr[*]}\"))\n    IFS=$' '\n    for i in\
    \ ${sorted[@]}; do\n      res+=(${nums[$((i-1))]})\n    done\n    echo \"[\\\"\
    ${res[*]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  arr=($(for i in ${arr[@]}; do echo $i; done | sort -nr))\n  for i in\
    \ ${arr[@]}; do\n    case $i in\n      1) echo -n '\"One\"' ;;\n      2) echo\
    \ -n '\"Two\"' ;;\n      3) echo -n '\"Three\"' ;;\n      4) echo -n '\"Four\"\
    ' ;;\n      5) echo -n '\"Five\"' ;;\n      6) echo -n '\"Six\"' ;;\n      7)\
    \ echo -n '\"Seven\"' ;;\n      8) echo -n '\"Eight\"' ;;\n      9) echo -n '\"\
    Nine\"' ;;\n    esac\n    echo -n ' '\n  done\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ \" \" \",\" | sed 's/^/[/;s/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a numbers\n  local -a names\n  local -a sorted\n  local\
    \ -a reversed\n  local -i i\n  local -i j\n  local -i k\n  local -i l\n  local\
    \ -i m\n  local -i n\n  local -i o\n  local -i p\n  local -i q\n  local -i r\n\
    \  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local\
    \ -i x\n  local -i y\n  local -i z\n  local -i a\n  local -i b\n  local -i c\n\
    \  local -i d\n  local -i e\n  local -i f\n  local -i g\n  local -i h\n  local\
    \ -i i\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n\
    \  local -i o\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local\
    \ -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n\
    \  local -i z\n  local -i a\n  local -i b\n  local -i c\n  local -i d\n  local\
    \ -i e\n  local -i f\n  local -i g\n  local -i h\n  local -i i\n  local -i j\n\
    \  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i o\n  local\
    \ -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n\
    \  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local\
    \ -i a\n  local -i b\n  local -i c\n  local -i d\n  local -i e\n  local -i f\n\
    \  local -i g\n  local -i h\n  local -i i\n \n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a nums_rev=(Nine Eight Seven Six Five Four Three Two One)\n  local -a\
    \ nums_arr=(1 2 3 4 5 6 7 8 9)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i l=0\n  local -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n\
    \  local -i q=0\n  local -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n\
    \  local -i v=0\n  local -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n\
    \  local -i a=0\n  local -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n\
    \  local -i f=0\n  local -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n\
    \  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i\
    \ oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n \
    \ local -i tt=0\n  local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i\
    \ xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n \
    \ local -i cc=0\n  local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i\
    \ gg=0\n  local -i hh=0\n  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # echo \"Not implemented yet\"\n    # exit 1\n    # echo $1\n    # echo $2\n\
    \    # echo $3\n    # echo $4\n    # echo $5\n    # echo $6\n    # echo $7\n \
    \   # echo $8\n    # echo $9\n    # echo ${10}\n    # echo ${11}\n    # echo ${12}\n\
    \    # echo ${13}\n    # echo ${14}\n    # echo ${15}\n    # echo ${16}\n    #\
    \ echo ${17}\n    # echo ${18}\n    # echo ${19}\n    # echo ${20}\n    # echo\
    \ ${21}\n    # echo ${22}\n    # echo ${23}\n    # echo ${24}\n    # echo ${25}\n\
    \    # echo ${26}\n    # echo ${27}\n    # echo ${28}\n    # echo ${29}\n    #\
    \ echo ${30}\n    # echo ${31}\n    # echo ${32}\n    # echo ${33}\n    # echo\
    \ ${34}\n    # echo ${35}\n    # echo ${36}\n    # echo ${37}\n    # echo ${38}\n\
    \    # echo ${39}\n    # echo ${40}\n    # echo ${41}\n    # echo ${42}\n    #\
    \ echo ${43}\n    # echo ${44}\n    # echo ${45}\n    # echo ${46}\n    # echo\
    \ ${47}\n    # echo ${48}\n    # echo ${49}\n    # echo ${50}\n    # echo ${51}\n\
    \    # echo ${52}\n    # echo ${53}\n    # echo ${54}\n    # echo ${55}\n    #\
    \ echo ${56}\n    # echo ${57}\n    # echo ${58}\n    # echo ${59}\n    # echo\
    \ ${60}\n    # echo ${61}\n    # echo ${62}\n    # echo ${63}\n    # echo ${64}\n\
    \    # echo ${65}\n    # echo ${66}\n    # echo ${67}\n    # echo ${68}\n    #\
    \ echo ${69}\n    # echo ${70}\n    # echo ${71}\n    #\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpquqpjxof.sh: line 92: syntax error near unexpected token `}''

    /tmp/tmpquqpjxof.sh: line 92: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n\
    \  done\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo\
    \ \"[$(for i in $(echo ${arr[@]} | tr ' ' '\\n' | sort -rn); do\n      case $i\
    \ in\n        1) echo '\"One\"';;\n        2) echo '\"Two\"';;\n        3) echo\
    \ '\"Three\"';;\n        4) echo '\"Four\"';;\n        5) echo '\"Five\"';;\n\
    \        6) echo '\"Six\"';;\n        7) echo '\"Seven\"';;\n        8) echo '\"\
    Eight\"';;\n        9) echo '\"Nine\"';;\n      esac\n    done | tr '\\n' ' ')]\"\
    \n  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a new_arr=()\n    local -a dict=([1]=\"One\" [2]=\"Two\" [3]=\"Three\"\
    \ [4]=\"Four\" [5]=\"Five\" [6]=\"Six\" [7]=\"Seven\" [8]=\"Eight\" [9]=\"Nine\"\
    )\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \            new_arr+=(\"${dict[$i]}\")\n        fi\n    done\n    echo \"${new_arr[@]}\"\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: Your code here\n\
    \  echo \"Not yet implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        local -a arr2=()\n        for i in $(echo ${arr[@]}\
    \ | tr ' ' '\\n' | sort -rn); do\n            case $i in\n                1) arr2+=('\"\
    One\"') ;;\n                2) arr2+=('\"Two\"') ;;\n                3) arr2+=('\"\
    Three\"') ;;\n                4) arr2+=('\"Four\"') ;;\n                5) arr2+=('\"\
    Five\"') ;;\n                6) arr2+=('\"Six\"') ;;\n                7) arr2+=('\"\
    Seven\"') ;;\n                8) arr2+=('\"Eight\"') ;;\n                9) arr2+=('\"\
    Nine\"') ;;\n            esac\n        done\n        echo \"[${arr2[@]}]\"\n \
    \   fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/^/\\\"\
    /' | sed 's/$/\\\"/' | tr '\\n' ' ' | sed 's/^ //'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local i=0\n  local j=0\n  local k=0\n  local n=0\n  local num=0\n  local tmp=0\n\
    \  local len=0\n  local -i num_len=0\n  local -i max_len=0\n  local -i min_len=0\n\
    \  local -i max_num=0\n  local -i min_num=0\n  local -i num_len=0\n  local -i\
    \ max_len=0\n  local -i min_len=0\n  local -i max_num=0\n  local -i min_num=0\n\
    \  local -i num_len=0\n  local -i max_len=0\n  local -i min_len=0\n  local -i\
    \ max_num=0\n  local -i min_num=0\n  local -i num_len=0\n  local -i max_len=0\n\
    \  local -i min_len=0\n  local -i max_num=0\n  local -i min_num=0\n  local -i\
    \ num_len=0\n  local -i max_len=0\n  local -i min_len=0\n  local -i max_num=0\n\
    \  local -i min_num=0\n  local -i num_len=0\n  local -i max_len=0\n  local -i\
    \ min_len=0\n  local -i max_num=0\n  local -i min_num=0\n  local -i num_len=0\n\
    \  local -i max_len=0\n  local -i min_len=0\n  local -i max_num=0\n  local -i\
    \ min_num=0\n  local -i num_len=0\n  local -i max_len=0\n  local -i min_len=0\n\
    \  local -i max_num=0\n  local -i min_num=0\n  local -i num_len=0\n  local -i\
    \ max_len=0\n  local -i min_len=0\n  local -i max_\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a sorted\n    local -a reversed\n    local -a final\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i aa\n    local\
    \ -i bb\n    local -i cc\n    local -i dd\n    local -i ee\n    local -i ff\n\
    \    local -i gg\n    local -i hh\n    local -i ii\n    local -i jj\n    local\
    \ -i kk\n    local -i ll\n    local -i mm\n    local -i nn\n    local -i oo\n\
    \    local -i pp\n    local -i qq\n    local -i rr\n    local -i ss\n    local\
    \ -i tt\n    local -i uu\n    local -i vv\n    local -i ww\n    local -i xx\n\
    \    local -i yy\n    local -i zz\n    local -i aaa\n    local -i bbb\n    local\
    \ -i ccc\n    local -i ddd\n    local -i eee\n    local -i fff\n    local -i ggg\n\
    \    local -i hhh\n    local -i iii\n    local -i jjj\n    local -i kkk\n    local\
    \ -i lll\n    local -i mmm\n    local -i nnn\n    local -i ooo\n    local -i ppp\n\
    \    local -i qqq\n    local -i rrr\n    local -i sss\n    local -i ttt\n    local\
    \ -i uuu\n    local -i vvv\n    local -i www\n    local -i xxx\n    local -i yyy\n\
    \    local -i zzz\n    local -i aaaa\n    local -i bbbb\n    local -i c\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in ${array[@]}; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo ${result[@]::${#result[@]}/2}\
    \ ${result[@]:${#result[@]}/2}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a new_array=()\n  local -a result=()\n  local -a dict=(\n    [1]=\"\
    One\"\n    [2]=\"Two\"\n    [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n\
    \    [6]=\"Six\"\n    [7]=\"Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n\
    \  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n   \
    \   new_array+=($i)\n    fi\n  done\n  if [[ ${#new_array[@]} -eq 0 ]]; then\n\
    \    echo \"[]\"\n  else\n    IFS=$'\\n' sorted=($(sort <<<\"${new_array[*]}\"\
    ))\n    unset IFS\n    for i in \"${sorted[@]}\"; do\n      result+=(\\\"${dict[$i]}\\\
    \");\n    done\n    echo \"[${result[*]}]\"\n  fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a result=()\n  local i=0\n\
    \  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n\
    \  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n\
    \  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local a=0\n\
    \  local b=0\n  local c=0\n  local d=0\n  local e=0\n  local f=0\n  local g=0\n\
    \  local h=0\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n\
    \  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n\
    \  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  local a=0\n  local b=0\n  local c=0\n  local d=0\n  local e=0\n\
    \  local f=0\n  local g=0\n  local h=0\n  local i=0\n  local j=0\n  local k=0\n\
    \  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n\
    \  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n\
    \  local x=0\n  local y=0\n  local z=0\n  local a=0\n  local b=0\n  local c=0\n\
    \  local d=0\n  local e=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(\n    [1]=\"One\"\n    [2]=\"Two\"\n \
    \   [3]=\"Three\"\n    [4]=\"Four\"\n    [5]=\"Five\"\n    [6]=\"Six\"\n    [7]=\"\
    Seven\"\n    [8]=\"Eight\"\n    [9]=\"Nine\"\n  )\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      result+=(${dict[$i]})\n \
    \   fi\n  done\n  echo \"${result[@]}\" | rev\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # Write your code here\n\
    \  # You can use the following command to convert a number to its name:\n  # echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n  #\n\
    \  # For example:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\" |\
    \ cut -d' ' -f5\n  # will return \"Five\"\n  #\n  # You can use the following\
    \ command to convert a number to its name:\n  # echo \"One Two Three Four Five\
    \ Six Seven Eight Nine\" | cut -d' ' -f$number\n  #\n  # For example:\n  # echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f5\n  # will return\
    \ \"Five\"\n  #\n  # You can use the following command to convert a number to\
    \ its name:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut -d'\
    \ ' -f$number\n  #\n  # For example:\n  # echo \"One Two Three Four Five Six Seven\
    \ Eight Nine\" | cut -d' ' -f5\n  # will return \"Five\"\n  #\n  # You can use\
    \ the following command to convert a number to its name:\n  # echo \"One Two Three\
    \ Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n  #\n  # For example:\n\
    \  # echo \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f5\n \
    \ # will return \"Five\"\n  #\n  # You can use the following command to convert\
    \ a number to its name:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\"\
    \ | cut -d' ' -f$number\n  #\n  # For example:\n  # echo \"One Two Three Four\
    \ Five Six Seven Eight Nine\" | cut -d' ' -f5\n  # will return \"Five\"\n  #\n\
    \  # You can use the following command to convert a number to its name:\n  # echo\
    \ \"One Two Three Four Five Six Seven Eight Nine\" | cut -d' ' -f$number\n  #\n\
    \  # For example:\n  # echo \"One Two Three Four Five Six Seven Eight Nine\" |\
    \ cut -d' ' -f5\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqnkoazvm.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpqnkoazvm.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  for i in $1; do\n        if [[ $i -ge 1 && $i -le 9 ]]; then\n            arr+=($i)\n\
    \        fi\n    done\n    local -a sorted=($(printf \"%s\\n\" \"${arr[@]}\" |\
    \ sort -n))\n    local -a reversed=($(printf \"%s\\n\" \"${sorted[@]}\" | tac))\n\
    \    local -a result=()\n    for i in \"${reversed[@]}\"; do\n        case $i\
    \ in\n            1) result+=('\"One\"') ;;\n            2) result+=('\"Two\"\
    ') ;;\n            3) result+=('\"Three\"') ;;\n            4) result+=('\"Four\"\
    ') ;;\n            5) result+=('\"Five\"') ;;\n            6) result+=('\"Six\"\
    ') ;;\n            7) result+=('\"Seven\"') ;;\n            8) result+=('\"Eight\"\
    ') ;;\n            9) result+=('\"Nine\"') ;;\n        esac\n    done\n    echo\
    \ \"${result[@]}\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local i=0\n\
    \    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n \
    \   local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n  \
    \  local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n   \
    \ local y=0\n    local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n \
    \   local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n\
    \    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n\
    \    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n\
    \    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n\
    \    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n\
    \    local ccc=0\n    local ddd=0\n    local eee=0\n    local fff=0\n    local\
    \ ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n\
    \    local lll=0\n    local mmm=0\n    local nnn=0\n    local ooo=0\n    local\
    \ ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n\
    \    local uuu=0\n    local vvv=0\n    local www=0\n    local xxx=0\n    local\
    \ yyy=0\n    local zzz=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented yet\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # echo \"Not implemented yet\"\n    # return 1\n    # echo \"$1\"\n    #\
    \ echo \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \"\n    # echo \"$1\"\
    \ | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | rev\n    # echo \"$1\" | tr\
    \ \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | rev | tr \"1\" \"One\"\n    # echo\
    \ \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | rev | tr \"1\" \"One\"\
    \ | tr \"2\" \"Two\"\n    # echo \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\\
    n\" \" \" | rev | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\"\n \
    \   # echo \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | rev | tr \"\
    1\" \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\" | tr \"4\" \"Four\"\n    #\
    \ echo \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \" | rev | tr \"1\"\
    \ \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\" | tr \"4\" \"Four\" | tr \"\
    5\" \"Five\"\n    # echo \"$1\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \"\
    \ | rev | tr \"1\" \"One\" | tr \"2\" \"Two\" | tr \"3\" \"Three\" | tr \"4\"\
    \ \"Four\" | tr \"5\" \"Five\" | tr \"6\" \"Six\"\n    # echo \"$1\" | tr \" \"\
    \ \"\\n\" | sort -n | tr \"\\n\" \" \" | rev | tr \"1\" \"One\" | tr \"2\" \"\
    Two\" | tr \"3\" \"Three\" | tr \"4\" \"Four\" | tr \"5\" \"Five\" | tr \"6\"\
    \ \"Six\" | tr \"7\" \"Seven\"\n    # echo \"$1\" | tr \" \" \"\\n\" | sort -n\
    \ |\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgqvhbilg.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpgqvhbilg.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ final=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n\
    \    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -i\
    \ i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i a=0\n    local -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n\
    \    local -i f=0\n    local -i g=0\n    local -i h=0\n    local -i ii=0\n   \
    \ local -i jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n   \
    \ local -i nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n   \
    \ local -i rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n   \
    \ local -i vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n   \
    \ local -i zz=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n   \
    \ local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n   \
    \ local -i hh=0\n    local -i iii=0\n    local -i jjj=0\n    local -i kkk=0\n\
    \   \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local\
    \ -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local\
    \ -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local\
    \ -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local\
    \ -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local\
    \ -i h=0\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # Replace \"pass\" by your code\n    pass\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp96ayg2gq.sh: line 19: pass: command not found

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i =~ ^[1-9]$ ]];\
    \ then\n            result+=($i)\n        fi\n    done\n    if [[ ${#result[@]}\
    \ -gt 0 ]]; then\n        IFS=$'\\n' sorted=($(sort <<<\"${result[*]}\"))\n  \
    \      unset IFS\n        for i in \"${sorted[@]}\"; do\n            echo -n \"\
    \\\"${numbers[$i-1]}\\\" \"\n        done\n    fi\n    echo\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr\n    local\
    \ -a sorted\n    local -a reversed\n    local -a result\n    local -a numbers=(One\
    \ Two Three Four Five Six Seven Eight Nine)\n    local i\n    local j\n    local\
    \ k\n    local n\n    local s\n    local t\n\n    arr=($1)\n    for ((i = 0; i\
    \ < ${#arr[@]}; i++)); do\n        n=${arr[$i]}\n        if [[ $n =~ ^[1-9]$ ]];\
    \ then\n            sorted[${#sorted[@]}]=$n\n        fi\n    done\n    sorted=($(printf\
    \ \"%s\\n\" \"${sorted[@]}\" | sort -n))\n    for ((i = 0; i < ${#sorted[@]};\
    \ i++)); do\n        n=${sorted[$i]}\n        s=${numbers[$n-1]}\n        reversed[${#reversed[@]}]=$s\n\
    \    done\n    for ((i = ${#reversed[@]}-1; i >= 0; i--)); do\n        result[${#result[@]}]=${reversed[$i]}\n\
    \    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/[/;s/$/]/'\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  IFS='\
    \ ' read -r -a array <<< \"$1\"\n  local -a result\n  for i in \"${array[@]}\"\
    ; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n      result+=(\"$i\")\n    fi\n  done\n\
    \  if [[ ${#result[@]} -gt 0 ]]; then\n    echo \"$(reverse \"$(sort_array \"\
    ${result[@]}\")\")\" | sed 's/\\([1-9]\\)/\"\\1\"/g'\n  else\n    echo \"[]\"\n\
    \  fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One\
    \ One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\"\
    ) = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[\
    \ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuq460oz4.sh: line 26: sort_array: command not found

    /tmp/tmpuq460oz4.sh: line 26: reverse: command not found

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | grep -E '^[1-9]$' | sort -r | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/[/g;s/$/]/g'\n}\n\ncandidate() {\n    by_length \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"\
    Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  for i in ${arr[@]}; do\n    if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n      sorted+=($i)\n    fi\n  done\n  sorted=($(for i in ${sorted[@]};\
    \ do echo $i; done | sort -rn))\n  for i in ${sorted[@]}; do\n    res+=(${numbers[$i-1]})\n\
    \  done\n  echo ${res[@]}\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ array=($1)\n    local -a result\n    for i in \"${array[@]}\"; do\n        if\
    \ [[ $i -ge 1 && $i -le 9 ]]; then\n            result+=($i)\n        fi\n   \
    \ done\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n\
    \        result=($(for i in \"${result[@]}\"; do echo $i; done | sort -n | tac))\n\
    \        for i in \"${!result[@]}\"; do\n            case ${result[$i]} in\n \
    \               1) result[$i]='\"One\"';;\n                2) result[$i]='\"Two\"\
    ';;\n                3) result[$i]='\"Three\"';;\n                4) result[$i]='\"\
    Four\"';;\n                5) result[$i]='\"Five\"';;\n                6) result[$i]='\"\
    Six\"';;\n                7) result[$i]='\"Seven\"';;\n                8) result[$i]='\"\
    Eight\"';;\n                9) result[$i]='\"Nine\"';;\n            esac\n   \
    \     done\n        echo \"[${result[@]}]\"\n    fi\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following function to convert a digit to its name:\n  \
    \  # digit_to_name() {\n    #     case $1 in\n    #         1) echo \"One\" ;;\n\
    \    #         2) echo \"Two\" ;;\n    #         3) echo \"Three\" ;;\n    # \
    \        4) echo \"Four\" ;;\n    #         5) echo \"Five\" ;;\n    #       \
    \  6) echo \"Six\" ;;\n    #         7) echo \"Seven\" ;;\n    #         8) echo\
    \ \"Eight\" ;;\n    #         9) echo \"Nine\" ;;\n    #     esac\n    # }\n \
    \   #\n    # For example:\n    # >>> digit_to_name 5\n    # Five\n    # >>> digit_to_name\
    \ 12\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsprlz0ra.sh: line 147: syntax error near unexpected token `}''

    /tmp/tmpsprlz0ra.sh: line 147: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(\"${nums[$i-1]}\")\n    fi\n  done\n  echo \"${res[@]}\" | tr ' ' '\\\
    n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local -a output=()\n  local number\n\
    \  local index\n  local i\n\n  # convert the input to an array\n  IFS=' ' read\
    \ -r -a array <<< \"$1\"\n\n  # sort the array\n  for number in \"${array[@]}\"\
    ; do\n    if [[ \"$number\" =~ ^[1-9]$ ]]; then\n      sorted+=(\"$number\")\n\
    \    fi\n  done\n  sorted=($(printf '%s\\n' \"${sorted[@]}\" | sort -n))\n\n \
    \ # reverse the array\n  for ((i=${#sorted[@]}-1; i>=0; i--)); do\n    reversed+=(\"\
    ${sorted[i]}\")\n  done\n\n  # convert the array to the output\n  for number in\
    \ \"${reversed[@]}\"; do\n    index=$((number-1))\n    output+=(\"${numbers[index]}\"\
    )\n  done\n\n  # convert the array to a string\n  printf '%s\\n' \"${output[@]}\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | tac | tr '\\n' ' ' | sed 's/[0-9]/& /g' | sed\
    \ 's/1/One/g' | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g' | sed 's/5/Five/g'\
    \ | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g' | sed 's/9/Nine/g'\
    \ | sed 's/ /\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate() {\n \
    \   by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  IFS='\
    \ ' read -r -a arr <<< \"$1\"\n  local -a res\n  local -a nums=(One Two Three\
    \ Four Five Six Seven Eight Nine)\n  for i in \"${arr[@]}\"; do\n    if [[ $i\
    \ =~ ^[1-9]$ ]]; then\n      res+=(\"${nums[$((i-1))]}\")\n    fi\n  done\n  echo\
    \ \"${res[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a new_arr=()\n  local -a result=()\n  local -a names=(\"One\" \"Two\" \"Three\"\
    \ \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local i\n  local\
    \ j\n  local k\n  local num\n  local name\n\n  arr=($1)\n  new_arr=($(for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    num=${arr[$i]}\n    if [[ $num -ge 1 && $num -le\
    \ 9 ]]; then\n      echo $num\n    fi\n  done | sort -nr))\n\n  for ((j=0; j<${#new_arr[@]};\
    \ j++)); do\n    num=${new_arr[$j]}\n    for ((k=0; k<${#names[@]}; k++)); do\n\
    \      if [[ $num -eq $((k+1)) ]]; then\n        name=${names[$k]}\n        break\n\
    \      fi\n    done\n    result+=(\"\\\"$name\\\"\")\n  done\n\n  echo \"[${result[@]}]\"\
    \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo $(sort -r <<< \"${result[*]}\"\
    )\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(\n        [1]=\"One\"\n       \
    \ [2]=\"Two\"\n        [3]=\"Three\"\n        [4]=\"Four\"\n        [5]=\"Five\"\
    \n        [6]=\"Six\"\n        [7]=\"Seven\"\n        [8]=\"Eight\"\n        [9]=\"\
    Nine\"\n    )\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tac | sed 's/ /\", \"/g' | sed 's/^/\\[\"/' | sed\
    \ 's/$/\"\\]/'\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result\n  local -a sorted\n  local -a reversed\n  local -a words\n\
    \  local -a final\n  local i\n  local j\n  local k\n  local l\n  local m\n  local\
    \ n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local\
    \ u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local\
    \ b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"\
    One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate\
    \ \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  for\
    \ i in $1; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n      arr+=(\"$i\")\n    fi\n\
    \  done\n  arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n\
    \  for i in $(seq ${#arr[@]} -1 0); do\n    case ${arr[$i]} in\n      1) arr[$i]='\"\
    One\"';;\n      2) arr[$i]='\"Two\"';;\n      3) arr[$i]='\"Three\"';;\n     \
    \ 4) arr[$i]='\"Four\"';;\n      5) arr[$i]='\"Five\"';;\n      6) arr[$i]='\"\
    Six\"';;\n      7) arr[$i]='\"Seven\"';;\n      8) arr[$i]='\"Eight\"';;\n   \
    \   9) arr[$i]='\"Nine\"';;\n    esac\n  done\n  echo \"[${arr[@]}]\"\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array\n   \
    \ local -a result\n    local -a numbers\n    local -a words\n    local -a sorted\n\
    \    local -a reversed\n    local -a final\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local -i counter\n    local -i\
    \ counter2\n    local -i counter3\n    local -i counter4\n    local -i counter5\n\
    \    local -i counter6\n    local -i counter7\n    local -i counter8\n    local\
    \ -i counter9\n    local -i counter10\n    local -i counter11\n    local -i counter12\n\
    \    local -i counter13\n    local -i counter14\n    local -i counter15\n    local\
    \ -i counter16\n    local -i counter17\n    local -i counter18\n    local -i counter19\n\
    \    local -i counter20\n    local -i counter21\n    local -i counter22\n    local\
    \ -i counter23\n    local -i counter24\n    local -i counter25\n    local -i counter26\n\
    \    local -i counter27\n    local -i counter28\n    local -i counter29\n    local\
    \ -i counter30\n    local -i counter31\n    local -i counter32\n    local -i counter33\n\
    \    local -i counter34\n    local -i counter35\n    local -i counter36\n    local\
    \ -i counter37\n    local -i counter38\n    local -i counter39\n    local -i counter40\n\
    \    local -i counter41\n    local -i counter42\n    local -i counter43\n    local\
    \ -i counter44\n    local -i counter45\n    local -i counter46\n    local -i counter47\n\
    \    local -i counter48\n    local -i counter49\n    local -i counter50\n    local\
    \ -i counter51\n    local -i counter52\n    local -i counter53\n    local -i counter54\n\
    \    local -i counter55\n    local -i counter56\n    local -i counter57\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i l=0\n  local\
    \ -i m=0\n  local -i n=0\n  local -i o=0\n  local -i p=0\n  local -i q=0\n  local\
    \ -i r=0\n  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local\
    \ -i w=0\n  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local\
    \ -i b=0\n  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local\
    \ -i g=0\n  local -i h=0\n  local -i ii=0\n  local -i jj=0\n  local -i kk=0\n\
    \  local -i ll=0\n  local -i mm=0\n  local -i nn=0\n  local -i oo=0\n  local -i\
    \ pp=0\n  local -i qq=0\n  local -i rr=0\n  local -i ss=0\n  local -i tt=0\n \
    \ local -i uu=0\n  local -i vv=0\n  local -i ww=0\n  local -i xx=0\n  local -i\
    \ yy=0\n  local -i zz=0\n  local -i aa=0\n  local -i bb=0\n  local -i cc=0\n \
    \ local -i dd=0\n  local -i ee=0\n  local -i ff=0\n  local -i gg=0\n  local -i\
    \ hh=0\n  local -i iii=0\n  local -i jjj=0\n  local -i kkk=0\n  local -i lll=0\n\
    \  local -i mmm=0\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  arr=($1)\n\
    \  local -a res\n  for i in \"${arr[@]}\"; do\n    if [[ $i =~ ^[1-9]$ ]]; then\n\
    \      res+=($i)\n    fi\n  done\n  if [[ ${#res[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[$(echo ${res[@]} | tr ' ' '\\n' | sort -n | tac\
    \ | sed 's/\\([1-9]\\)/\"\\1\"/g' | tr '\\n' ' ')]\"\n  fi\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in ${array[@]}; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n \
    \   echo ${result[@]} | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a arr_sorted=()\n  local -a arr_reversed=()\n  local -a arr_names=()\n  local\
    \ -a arr_final=()\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local\
    \ m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local\
    \ s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local\
    \ y=0\n  local z=0\n  local -a arr_numbers=(\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"\
    \ \"7\" \"8\" \"9\")\n  local -a arr_names=('\"One\"' '\"Two\"' '\"Three\"' '\"\
    Four\"' '\"Five\"' '\"Six\"' '\"Seven\"' '\"Eight\"' '\"Nine\"')\n  for i in $1;\
    \ do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n      arr+=($i)\n    fi\n  done\n\
    \  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0;\
    \ i<${#arr[@]}; i++)); do\n    for ((j=0; j<${#arr[@]}; j++)); do\n      if [[\
    \ ${arr[$i]} -lt ${arr[$j]} ]]; then\n        k=${arr[$i]}\n        arr[$i]=${arr[$j]}\n\
    \        arr[$j]=$k\n      fi\n    done\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    arr_sorted+=(${arr[$i]})\n  done\n  for ((i=${#arr_sorted[@]}-1; i>=0;\
    \ i--)); do\n    arr_reversed+=(${arr_sorted[$i]})\n  done\n  for ((i=0; i<\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz6j2qmpd.sh: line 66: unexpected EOF while looking for matching
    `)''

    /tmp/tmpz6j2qmpd.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1_1yk6gk.sh: line 18: syntax error near unexpected token `}''

    /tmp/tmp1_1yk6gk.sh: line 18: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1 && $i\
    \ -le 9 ]]; then\n            result+=(${numbers[$i-1]})\n        fi\n    done\n\
    \    echo \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a dict=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${dict[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr '\
    \ ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five\
    \ Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"\
    Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr \" \" \"\\n\" | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -i i=0\n  local -i j=0\n  local -i k=0\n\
    \  local -i n=0\n  local -i m=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n\
    \  local -i s=0\n  local -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n\
    \  local -i x=0\n  local -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n\
    \  local -i c=0\n  local -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n\
    \  local -i h=0\n  local -i l=0\n  local -i o=0\n  local -i number=0\n  local\
    \ -i length=0\n  local -i index=0\n  local -i count=0\n  local -i size=0\n  local\
    \ -i max=0\n  local -i min=0\n  local -i sum=0\n  local -i avg=0\n  local -i median=0\n\
    \  local -i mode=0\n  local -i mode_count=0\n  local -i mode_index=0\n  local\
    \ -i mode_max=0\n  local -i mode_min=0\n  local -i mode_sum=0\n  local -i mode_avg=0\n\
    \  local -i mode_median=0\n  local -i mode_mode=0\n  local -i mode_mode_count=0\n\
    \  local -i mode_mode_index=0\n  local -i mode_mode_max=0\n  local -i mode_mode_min=0\n\
    \  local -i mode_mode_sum=0\n  local -i mode_mode_avg=0\n  local -i mode_mode_median=0\n\
    \  local -i\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a res=()\n    local -a dict=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n    for i in ${arr[@]}; do\n        if [ $i -ge 1 ] && [ $i -le 9 ];\
    \ then\n            res+=($i)\n        fi\n    done\n    res=($(echo ${res[@]}\
    \ | tr ' ' '\\n' | sort -nr | tr '\\n' ' '))\n    for i in ${res[@]}; do\n   \
    \     echo -n '\"'${dict[$i-1]}'\"'\n        echo -n ' '\n    done\n    echo\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $(echo $1 | tr \" \" \"\\n\" | sort -n | tac | tr \"1\" \"One\" | tr \"2\" \"\
    Two\" | tr \"3\" \"Three\" | tr \"4\" \"Four\" | tr \"5\" \"Five\" | tr \"6\"\
    \ \"Six\" | tr \"7\" \"Seven\" | tr \"8\" \"Eight\" | tr \"9\" \"Nine\" | tr \"\
    \\n\" \" \")\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a new_array=()\n    local -a numbers=(One Two Three Four Five Six\
    \ Seven Eight Nine)\n    for i in \"${array[@]}\"; do\n        if [[ $i -ge 1\
    \ && $i -le 9 ]]; then\n            new_array+=($i)\n        fi\n    done\n  \
    \  if [[ ${#new_array[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n    \
    \    echo -n \"[\"\n        for i in \"${new_array[@]}\"; do\n            echo\
    \ -n \"\\\"${numbers[$i-1]}\\\"\"\n            if [[ $i -ne ${new_array[-1]} ]];\
    \ then\n                echo -n \", \"\n            fi\n        done\n       \
    \ echo \"]\"\n    fi\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following function to convert a number to its corresponding\
    \ name:\n    # echo $(number_to_name $number)\n    #\n    # For example:\n   \
    \ # >>> echo $(number_to_name 1)\n    # \"One\"\n    # >>> echo $(number_to_name\
    \ 9)\n    # \"Nine\"\n    # >>> echo $(number_to_name 10)\n    # \"Ten\"\n   \
    \ #\n    # You can use the following function to convert a name to its corresponding\
    \ number:\n    # echo $(name_to_number $name)\n    #\n    # For example:\n   \
    \ # >>> echo $(name_to_number \"One\")\n    # 1\n    # >>> echo $(name_to_number\
    \ \"Nine\")\n    # 9\n    # >>> echo $(name_to_number \"Ten\")\n    # 10\n   \
    \ #\n    # You can use the following function to sort an array of integers:\n\
    \    # echo $(sort_array $array)\n    #\n    # For example:\n    # >>> echo $(sort_array\
    \ \"2 1 1 4 5 8 2 3\")\n    # 1 1 2 2 3 4 5 8\n    # >>> echo $(sort_array \"\"\
    )\n    #\n    # You can use the following function to reverse an array:\n    #\
    \ echo $(reverse_array $array)\n    #\n    # For example:\n    # >>> echo $(reverse_array\
    \ \"1 2 3 4 5\")\n    # 5 4 3 2 1\n    # >>> echo $(reverse_array \"\")\n    #\n\
    \    # You can use the following function to convert an array of integers to an\
    \ array of strings:\n    # echo $(int_array_to_string_array $array)\n    #\n \
    \   # For example:\n    # >>> echo $(int_array_to_string_array \"1 2 3 4 5\")\n\
    \    # 1 2 3 4 5\n    # >>> echo $(int_array_to_string_array \"\")\n    #\n  \
    \  # You can use the following function to convert an array of strings to an array\
    \ of integers:\n    # echo $(string_array_to_int_array $array)\n    #\n    # For\
    \ example:\n    # >>> echo $(string_array_to_\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfcd7swnw.sh: line 69: syntax error near unexpected token `}''

    /tmp/tmpfcd7swnw.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a new_arr=()\n  local -a num_arr=()\n  local -a num_name=(\"One\" \"Two\" \"\
    Three\" \"Four\" \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n  local -a res_arr=()\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  local -i len=0\n  local -i\
    \ num=0\n  local -i index=0\n  local -i flag=0\n  local -i flag1=0\n  local -i\
    \ flag2=0\n  local -i flag3=0\n  local -i flag4=0\n  local -i flag5=0\n  local\
    \ -i flag6=0\n  local -i flag7=0\n  local -i flag8=0\n  local -i flag9=0\n  local\
    \ -i flag10=0\n  local -i flag11=0\n  local -i flag12=0\n  local -i flag13=0\n\
    \  local -i flag14=0\n  local -i flag15=0\n  local -i flag16=0\n  local -i flag17=0\n\
    \  local -i flag18=0\n  local -i flag19=0\n  local -i flag20=0\n  local -i flag21=0\n\
    \  local -i flag22=0\n  local -i flag23=0\n  local -i flag24=0\n  local -i flag25=0\n\
    \  local -i flag26=0\n  local -i flag27=0\n  local -i flag28=0\n  local -i flag29=0\n\
    \  local -i flag30=0\n  local -i flag31=0\n  local -i flag32=0\n  local -i flag33=0\n\
    \  local -i flag34=0\n  local -i flag35=0\n  local -i flag36=0\n  local -i flag37=0\n\
    \  local -i flag38=0\n  local -i flag39=0\n  local -i flag40=0\n  local -i flag41=0\n\
    \  local -i flag42=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | sed 's/^/\\\"/g;s/$/\\\"/g' | tr '\\n' ' ' | sed 's/^\\(.*\\) $/\\[\\1\\]/g'\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=()\n\
    \    local -a result=()\n    local -a numbers=(\"One\" \"Two\" \"Three\" \"Four\"\
    \ \"Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local number\n    local\
    \ index\n\n    array=($1)\n    for number in \"${array[@]}\"; do\n        if [[\
    \ $number -ge 1 && $number -le 9 ]]; then\n            result+=($number)\n   \
    \     fi\n    done\n\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo \"\
    []\"\n    else\n        echo -n \"[\"\n        for index in $(seq 0 $((${#result[@]}\
    \ - 1))); do\n            echo -n \"\\\"${numbers[${result[$index]} - 1]}\\\"\"\
    \n            if [[ $index -lt $((${#result[@]} - 1)) ]]; then\n             \
    \   echo -n \", \"\n            fi\n        done\n        echo \"]\"\n    fi\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n\
    \  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i\
    \ rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \
    \ local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i\
    \ aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n \
    \ local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i\
    \ jjj=0\n  local -i kkk=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array\n  local\
    \ -a result\n  local -a sorted\n  local -a reversed\n  local -a mapped\n  local\
    \ -a filtered\n  local -a final\n  local -a numbers\n  local -a names\n  local\
    \ -a numbers_names\n  local -a numbers_names_sorted\n  local -a numbers_names_sorted_reversed\n\
    \  local -a numbers_names_sorted_reversed_mapped\n  local -a numbers_names_sorted_reversed_mapped_filtered\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final\n  local -a numbers_names_sorted_reversed_mapped_filtered_final_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result_result_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_final_result_array_result_result_result_result_result_result_result_result\n\
    \  local -a numbers_names_sorted_reversed_mapped_filtered_\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=()\n  local\
    \ -a res=()\n  local i=0\n  local j=0\n  local temp=0\n  local len=0\n  local\
    \ num=0\n  local -a nums=(\"One\" \"Two\" \"Three\" \"Four\" \"Five\" \"Six\"\
    \ \"Seven\" \"Eight\" \"Nine\")\n  for i in $1; do\n    if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n      arr[$j]=$i\n      ((j++))\n    fi\n  done\n  len=${#arr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    for ((j=i+1; j<len; j++)); do\n      if [[\
    \ ${arr[$i]} -gt ${arr[$j]} ]]; then\n        temp=${arr[$i]}\n        arr[$i]=${arr[$j]}\n\
    \        arr[$j]=$temp\n      fi\n    done\n  done\n  for ((i=len-1; i>=0; i--));\
    \ do\n    num=${arr[$i]}\n    res[$i]=\"\\\"${nums[$num-1]}\\\"\"\n  done\n  echo\
    \ \"[${res[@]}]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(${nums[$i-1]})\n    fi\n  done\n  echo \"${res[@]}\" | sort -r\n}\n\n\
    candidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # TODO: Implement this\
    \ function\n  echo \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo $(echo ${result[@]}\
    \ | tr ' ' '\\n' | sort -r | tr '\\n' ' ')\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | sed 's/^/\\\"/g;s/$/\\\"/g' | tr '\\n' ' ' | sed 's/ $//g'\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016765
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # Write your code here\n\
    \    # You can use the following function to convert a number to its name:\n \
    \   # echo $(number_to_name $number)\n    #\n    # For example:\n    # >>> number_to_name\
    \ 1\n    # \"One\"\n    # >>> number_to_name 9\n    # \"Nine\"\n    # >>> number_to_name\
    \ 10\n    # \"Ten\"\n    # >>> number_to_name -1\n    # \"-1\"\n    # >>> number_to_name\
    \ 0\n    # \"0\"\n    # >>> number_to_name 100\n    # \"100\"\n    #\n    # You\
    \ can use the following function to convert a name to its number:\n    # echo\
    \ $(name_to_number $name)\n    #\n    # For example:\n    # >>> name_to_number\
    \ \"One\"\n    # 1\n    # >>> name_to_number \"Nine\"\n    # 9\n    # >>> name_to_number\
    \ \"Ten\"\n    # 10\n    # >>> name_to_number \"-1\"\n    # -1\n    # >>> name_to_number\
    \ \"0\"\n    # 0\n    # >>> name_to_number \"100\"\n    # 100\n    #\n    # You\
    \ can use the following function to convert a number to its name:\n    # echo\
    \ $(number_to_name $number)\n    #\n    # For example:\n    # >>> number_to_name\
    \ 1\n    # \"One\"\n    # >>> number_to_name 9\n    # \"Nine\"\n    # >>> number_to_name\
    \ 10\n    # \"Ten\"\n    # >>> number_to_name -1\n    # \"-1\"\n    # >>> number_to_name\
    \ 0\n    # \"0\"\n    # >>> number_to_name 100\n    # \"100\"\n    #\n    # You\
    \ can use the following function to convert a name to its number:\n    # echo\
    \ $(name_to_number $name)\n    #\n    # For example:\n    # >>> name_to_number\
    \ \"One\"\n    # 1\n    # >>> name_to_number \"Nine\"\n    # 9\n    # >>> name_to_number\
    \ \"Ten\"\n    # 10\n\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqkjatalv.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmpqkjatalv.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr=($1)\n  local\
    \ -a res=()\n  local -a nums=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n     \
    \ res+=(${nums[$i-1]})\n    fi\n  done\n  echo ${res[@]} | tr ' ' '\\n' | sort\
    \ -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two\
    \ One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1\
    \ 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n\
    \    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr ' ' '\\n' | sort -n | uniq | tac | tr '\\n' ' ' | sed 's/[0-9]/&\
    \ /g' | sed 's/1/One/g' | sed 's/2/Two/g' | sed 's/3/Three/g' | sed 's/4/Four/g'\
    \ | sed 's/5/Five/g' | sed 's/6/Six/g' | sed 's/7/Seven/g' | sed 's/8/Eight/g'\
    \ | sed 's/9/Nine/g' | sed 's/[0-9]//g' | sed 's/^ *//g' | sed 's/ *$//g' | sed\
    \ 's/ /\", \"/g' | sed 's/^/\"/g' | sed 's/$/\"/g'\n}\n\ncandidate() {\n    by_length\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") =\
    \ \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1\
    \ 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight\
    \ Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016765
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a array=($1)\n\
    \    local -a result=()\n    local -a numbers=(One Two Three Four Five Six Seven\
    \ Eight Nine)\n    local -a sorted=()\n    local -a reversed=()\n    local -a\
    \ names=()\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local\
    \ m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n\
    \    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n \
    \   local x=0\n    local y=0\n    local z=0\n    local aa=0\n    local bb=0\n\
    \    local cc=0\n    local dd=0\n    local ee=0\n    local ff=0\n    local gg=0\n\
    \    local hh=0\n    local ii=0\n    local jj=0\n    local kk=0\n    local ll=0\n\
    \    local mm=0\n    local nn=0\n    local oo=0\n    local pp=0\n    local qq=0\n\
    \    local rr=0\n    local ss=0\n    local tt=0\n    local uu=0\n    local vv=0\n\
    \    local ww=0\n    local xx=0\n    local yy=0\n    local zz=0\n    local aaa=0\n\
    \    local bbb=0\n    local ccc=0\n    local ddd=0\n    local eee=0\n    local\
    \ fff=0\n    local ggg=0\n    local hhh=0\n    local iii=0\n    local jjj=0\n\
    \    local kkk=0\n    local lll=0\n    local mmm=0\n    local nnn=0\n    local\
    \ ooo=0\n    local ppp=0\n    local qqq=0\n    local rrr=0\n    local sss=0\n\
    \    local ttt=0\n    local uuu=0\n    local vvv=0\n    local www=0\n    local\
    \ xxx=0\n    local yyy=\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=($1)\n\
    \    local -a result=()\n    local -a dict=(\n        [1]=\"One\"\n        [2]=\"\
    Two\"\n        [3]=\"Three\"\n        [4]=\"Four\"\n        [5]=\"Five\"\n   \
    \     [6]=\"Six\"\n        [7]=\"Seven\"\n        [8]=\"Eight\"\n        [9]=\"\
    Nine\"\n    )\n    for i in \"${arr[@]}\"; do\n        if [[ $i -ge 1 && $i -le\
    \ 9 ]]; then\n            result+=(${dict[$i]})\n        fi\n    done\n    echo\
    \ \"${result[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ \"Not implemented\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    local -a arr=()\n  \
    \  local -a res=()\n    local -a names=(\"One\" \"Two\" \"Three\" \"Four\" \"\
    Five\" \"Six\" \"Seven\" \"Eight\" \"Nine\")\n    local -a sorted=()\n    local\
    \ -a reversed=()\n    local i=0\n    local j=0\n    local k=0\n    local len=0\n\
    \    local num=0\n    local str=\"\"\n    local name=\"\"\n\n    arr=($1)\n  \
    \  len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n\n    for ((i=0; i<$len; i++)); do\n        num=${arr[$i]}\n        if\
    \ [ $num -ge 1 ] && [ $num -le 9 ]; then\n            sorted[$j]=$num\n      \
    \      ((j++))\n        fi\n    done\n\n    len=${#sorted[@]}\n    if [ $len -eq\
    \ 0 ]; then\n        echo \"[]\"\n        return\n    fi\n\n    for ((i=0; i<$len;\
    \ i++)); do\n        for ((j=i+1; j<$len; j++)); do\n            if [ ${sorted[$i]}\
    \ -gt ${sorted[$j]} ]; then\n                num=${sorted[$i]}\n             \
    \   sorted[$i]=${sorted[$j]}\n                sorted[$j]=$num\n            fi\n\
    \        done\n    done\n\n    for ((i=$len-1; i>=0; i--)); do\n        reversed[$k]=${sorted[$i]}\n\
    \        ((k++))\n    done\n\n    for ((i=0; i<$len; i++)); do\n        num=${reversed[$i]}\n\
    \        name=${names[$num-1]}\n        str=\"$str \\\"$name\\\"\"\n    done\n\
    \n    echo \"[$str]\"\n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three\
    \ Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a arr\n  IFS=\"\
    \ \" read -a arr <<< \"$1\"\n  local -a result\n  for i in \"${arr[@]}\"; do\n\
    \    if [[ $i =~ ^[1-9]$ ]]; then\n      result+=(\"$i\")\n    fi\n  done\n  if\
    \ [[ ${#result[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    result=($(printf\
    \ \"%s\\n\" \"${result[@]}\" | sort -n))\n    result=($(printf \"%s\\n\" \"${result[@]}\"\
    \ | tac))\n    for i in \"${!result[@]}\"; do\n      case ${result[$i]} in\n \
    \       1) result[$i]='\"One\"';;\n        2) result[$i]='\"Two\"';;\n       \
    \ 3) result[$i]='\"Three\"';;\n        4) result[$i]='\"Four\"';;\n        5)\
    \ result[$i]='\"Five\"';;\n        6) result[$i]='\"Six\"';;\n        7) result[$i]='\"\
    Seven\"';;\n        8) result[$i]='\"Eight\"';;\n        9) result[$i]='\"Nine\"\
    ';;\n      esac\n    done\n    echo \"[${result[*]}]\"\n  fi\n}\n\ncandidate()\
    \ {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1\
    \ 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  local -a sorted=()\n  local -a reversed=()\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i l=0\n  local -i m=0\n  local -i n=0\n  local\
    \ -i o=0\n  local -i p=0\n  local -i q=0\n  local -i r=0\n  local -i s=0\n  local\
    \ -i t=0\n  local -i u=0\n  local -i v=0\n  local -i w=0\n  local -i x=0\n  local\
    \ -i y=0\n  local -i z=0\n  local -i a=0\n  local -i b=0\n  local -i c=0\n  local\
    \ -i d=0\n  local -i e=0\n  local -i f=0\n  local -i g=0\n  local -i h=0\n  local\
    \ -i ii=0\n  local -i jj=0\n  local -i kk=0\n  local -i ll=0\n  local -i mm=0\n\
    \  local -i nn=0\n  local -i oo=0\n  local -i pp=0\n  local -i qq=0\n  local -i\
    \ rr=0\n  local -i ss=0\n  local -i tt=0\n  local -i uu=0\n  local -i vv=0\n \
    \ local -i ww=0\n  local -i xx=0\n  local -i yy=0\n  local -i zz=0\n  local -i\
    \ aa=0\n  local -i bb=0\n  local -i cc=0\n  local -i dd=0\n  local -i ee=0\n \
    \ local -i ff=0\n  local -i gg=0\n  local -i hh=0\n  local -i iii=0\n  local -i\
    \ jjj=0\n  local -i kkk=0\n \n}\n\ncandidate() {\n    by_length \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight Five Four\
    \ Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\"\
    \ ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n    # your code here\n \
    \   echo $1 | tr ' ' '\\n' | sort -n | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/\"/g;s/$/\"/g;s/ /\", \"/g'\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016765
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=($1)\n\
    \  local -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight\
    \ Nine)\n  for i in \"${array[@]}\"; do\n    if [[ $i -ge 1 && $i -le 9 ]]; then\n\
    \      result+=(${numbers[$i-1]})\n    fi\n  done\n  echo \"${result[@]}\" | tr\
    \ ' ' '\\n' | sort -r | tr '\\n' ' '\n}\n\ncandidate() {\n    by_length \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4 5 8 2 3\") = \"Eight\
    \ Five Four Three Two Two One One\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n \
    \   [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate \"1 -1 3 2\"\
    ) = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine Eight Four\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016764
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a array=()\n  local\
    \ -a result=()\n  local -a numbers=(One Two Three Four Five Six Seven Eight Nine)\n\
    \  local -a sorted=()\n  local -a reversed=()\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local number=0\n  local number_index=0\n  local number_name=0\n  local\
    \ number_name_index=0\n  local number_name_index_plus_one=0\n  local number_name_index_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one=0\n  local number_name_index_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one=0\n  local\
    \ number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one=0\n\
    \  local number_name_index_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_\n\
    }\n\ncandidate() {\n    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2 1 1 4 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n\
    \    [[ $(candidate \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"\
    9 4 8\") = \"Nine Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016765
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n# reverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n#\
    \ >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"\
    ', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is\
    \ empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array\
    \ has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"\
    ']\n#\n# $1 is a space-separated list\nby_length() {\n  # your code here\n  echo\
    \ $1 | tr ' ' '\\n' | sort -n | uniq | grep -E '^[1-9]$' | tac | sed 's/1/One/g;s/2/Two/g;s/3/Three/g;s/4/Four/g;s/5/Five/g;s/6/Six/g;s/7/Seven/g;s/8/Eight/g;s/9/Nine/g'\
    \ | tr '\\n' ' ' | sed 's/^/\"/g;s/$/\"/g;s/ /\", \"/g'\n}\n\ncandidate() {\n\
    \    by_length \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2 1 1 4\
    \ 5 8 2 3\") = \"Eight Five Four Three Two Two One One\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 -1 55\") = \"One\" ]]\n    [[ $(candidate\
    \ \"1 -1 3 2\") = \"Three Two One\" ]]\n    [[ $(candidate \"9 4 8\") = \"Nine\
    \ Eight Four\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660016765
