name: HumanEval_100_make_a_pile
language: sh
prompt: "#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n# The first level has n stones.\n# The number of stones in the next\
  \ level is:\n# - the next odd number if n is odd.\n# - the next even number if n\
  \ is even.\n# Return the number of stones in each level in a list, where element\
  \ at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n\
  # >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\n\
  make_a_pile() {\n"
tests: "}\n\ncandidate() {\n    make_a_pile \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"3\") = \"3 5 7\" ]]\n    [[ $(candidate \"4\") = \"4 6 8 10\"\
  \ ]]\n    [[ $(candidate \"5\") = \"5 7 9 11 13\" ]]\n    [[ $(candidate \"6\")\
  \ = \"6 8 10 12 14 16\" ]]\n    [[ $(candidate \"8\") = \"8 10 12 14 16 18 20 22\"\
  \ ]]\n}\n\nrun_test"
completions: ["    local -a pile\n    local n=$1\n    local i=0\n    while [[ $n -gt\
    \ 0 ]]; do\n        pile[$i]=$n\n        if [[ $((n % 2)) -eq 0 ]]; then\n   \
    \         n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n \
    \       i=$((i + 1))\n    done\n    echo \"${pile[@]}\"", "  local -a pile\n \
    \ local n=$1\n  local i=0\n  while (( n > 0 )); do\n    pile[i++]=$n\n    (( n\
    \ % 2 == 0 )) && (( n += 1 )) || (( n += 2 ))\n  done\n  echo \"${pile[@]}\"",
  "    local n=$1\n    local stones=()\n    while [ $n -gt 0 ]; do\n        stones+=(\"\
    $n\")\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n     \
    \   else\n            n=$((n + 2))\n        fi\n    done\n    echo \"${stones[@]}\"",
  "    local n=\"$1\"\n    local stones=()\n    local i=0\n    while [ $n -gt 0 ];\
    \ do\n        stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n         \
    \   n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n       \
    \ i=$((i + 1))\n    done\n    echo \"${stones[@]}\"", "    local -i n=\"$1\"\n\
    \    local -i i=0\n    local -a pile=()\n    while (( i < n )); do\n        if\
    \ (( i % 2 == 0 )); then\n            pile+=($(( n + i )))\n        else\n   \
    \         pile+=($(( n + i + 1 )))\n        fi\n        (( i++ ))\n    done\n\
    \    echo \"${pile[@]}\"", "  local n=$1\n  local stones=$n\n  local i=1\n  local\
    \ result=()\n  while [[ $i -lt $n ]]; do\n    if [[ $stones -eq $n ]]; then\n\
    \      result+=(\"$stones\")\n    else\n      if [[ $stones -eq $((stones / 2\
    \ * 2)) ]]; then\n        stones=$((stones + 1))\n      else\n        stones=$((stones\
    \ + 2))\n      fi\n      result+=(\"$stones\")\n    fi\n    i=$((i + 1))\n  done\n\
    \  echo \"${result[@]}\"", "    local n=\"$1\"\n    local stones=()\n    local\
    \ i=0\n    while [[ $n -gt 0 ]]; do\n        stones[$i]=\"$n\"\n        if [[\
    \ $((n % 2)) -eq 0 ]]; then\n            n=$((n + 1))\n        else\n        \
    \    n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo \"${stones[@]}\"",
  "  local n=$1\n  local stones=()\n  local i=0\n  while [[ $n -gt 0 ]]; do\n    stones[$i]=$n\n\
    \    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 1))\n    else\n      n=$((n\
    \ + 2))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"", "    local\
    \ n=$1\n    local stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n     \
    \   stones[$i]=$n\n        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n +\
    \ 1))\n        else\n            n=$((n + 2))\n        fi\n        i=$((i + 1))\n\
    \    done\n    echo \"${stones[@]}\"", "  local n=$1\n  local stones=()\n  local\
    \ i=0\n  while [[ $n -gt 0 ]]; do\n    stones[$i]=$n\n    if [[ $((n % 2)) -eq\
    \ 0 ]]; then\n      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i\
    \ + 1))\n  done\n  echo \"${stones[@]}\"", "  local n=$1\n  local stones=()\n\
    \  local i=0\n  while (( i < n )); do\n    stones+=(\"$n\")\n    (( n % 2 == 0\
    \ )) && (( n += 2 )) || (( n += 1 ))\n    (( i++ ))\n  done\n  echo \"${stones[@]}\"",
  "    local n=\"$1\"\n    local stones\n    local i=0\n    while (( i < n )); do\n\
    \        if (( i % 2 == 0 )); then\n            stones[i]=$(( i + 1 ))\n     \
    \   else\n            stones[i]=$(( i + 2 ))\n        fi\n        (( i++ ))\n\
    \    done\n    echo \"${stones[@]}\"", "  local n=$1\n  local i=0\n  local stones=()\n\
    \  while [ $i -lt $n ]; do\n    stones[$i]=$n\n    if [ $((n % 2)) -eq 0 ]; then\n\
    \      n=$((n + 1))\n    else\n      n=$((n + 2))\n    fi\n    i=$((i + 1))\n\
    \  done\n  echo \"${stones[@]}\"", "    local n=$1\n    local stones=()\n    while\
    \ [ $n -gt 0 ]; do\n        stones+=($n)\n        if [ $((n % 2)) -eq 0 ]; then\n\
    \            n=$((n + 1))\n        else\n            n=$((n + 2))\n        fi\n\
    \    done\n    echo \"${stones[@]}\"", "    local n=$1\n    local stones=()\n\
    \    while [[ $n -gt 0 ]]; do\n        stones+=(\"$n\")\n        if [[ $((n %\
    \ 2)) -eq 0 ]]; then\n            n=$((n + 1))\n        else\n            n=$((n\
    \ + 2))\n        fi\n    done\n    echo \"${stones[@]}\"", "    local n=\"$1\"\
    \n    local stones=()\n    local i=0\n    while [ $n -gt 0 ]; do\n        stones[$i]=$n\n\
    \        if [ $((n % 2)) -eq 0 ]; then\n            n=$((n + 1))\n        else\n\
    \            n=$((n + 2))\n        fi\n        i=$((i + 1))\n    done\n    echo\
    \ \"${stones[@]}\"", "  local n=\"$1\"\n  local stones=\"$n\"\n  local next_level_stones\n\
    \  local stones_list\n  while [[ $stones -gt 1 ]]; do\n    if [[ $stones -eq $((stones/2*2))\
    \ ]]; then\n      next_level_stones=$((stones+2))\n    else\n      next_level_stones=$((stones+1))\n\
    \    fi\n    stones_list=\"$stones_list, \\\"$stones\\\"\"\n    stones=$next_level_stones\n\
    \  done\n  echo \"[$stones_list]\"", "    local n=$1\n    local stones=()\n  \
    \  while [[ $n -gt 0 ]]; do\n        stones+=(\"$n\")\n        if [[ $((n % 2))\
    \ -eq 0 ]]; then\n            n=$((n + 1))\n        else\n            n=$((n +\
    \ 2))\n        fi\n    done\n    echo \"${stones[@]}\"", "  local n=\"$1\"\n \
    \ local i=0\n  local stones=()\n  while [[ $i -lt $n ]]; do\n    stones+=(\"$n\"\
    )\n    if [[ $((n % 2)) -eq 0 ]]; then\n      n=$((n + 2))\n    else\n      n=$((n\
    \ + 1))\n    fi\n    i=$((i + 1))\n  done\n  echo \"${stones[@]}\"", "    local\
    \ n=\"$1\"\n    local stones=\"[$n\"\n    while [ \"$n\" -gt 1 ]; do\n       \
    \ (( n-- ))\n        (( n % 2 == 0 )) && (( n++ ))\n        stones=\"$stones,\
    \ $n\"\n    done\n    echo \"$stones]\""]
stop_tokens:
- "\n}"
