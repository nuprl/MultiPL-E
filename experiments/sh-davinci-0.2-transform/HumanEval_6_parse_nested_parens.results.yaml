language: sh
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_arr_idx=0\n  local parens_str_len=0\n\
    \  local parens_str_idx=0\n  local parens_str_idx_start=0\n  local parens_str_idx_end=0\n\
    \  local parens_str_idx_end_prev=0\n  local parens_str_idx_end_prev_prev=0\n \
    \ local parens_str_idx_end_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n \
    \ local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_idx_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_level=0\n\
    \    local level=0\n    local output=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local char=${str:$i:1}\n        if [ \"\
    $char\" == \"(\" ]; then\n            level=$((level+1))\n            if [ $level\
    \ -gt $max_level ]; then\n                max_level=$level\n            fi\n \
    \       elif [ \"$char\" == \")\" ]; then\n            level=$((level-1))\n  \
    \      fi\n        i=$((i+1))\n    done\n    echo $max_level\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_str=\"$1\"\n    local\
    \ paren_list=($paren_str)\n    local paren_list_len=${#paren_list[@]}\n    local\
    \ paren_list_idx=0\n    local paren_list_item\n    local paren_list_item_len\n\
    \    local paren_list_item_idx\n    local paren_list_item_char\n    local paren_list_item_stack\n\
    \    local paren_list_item_stack_len\n    local paren_list_item_stack_idx\n  \
    \  local paren_list_item_stack_char\n    local paren_list_item_stack_max_len\n\
    \    local paren_list_item_stack_max_len_idx\n    local paren_list_item_stack_max_len_char\n\
    \    local paren_list_item_stack_max_len_str\n    local paren_list_item_stack_max_len_str_len\n\
    \    local paren_list_item_stack_max_len_str_idx\n    local paren_list_item_stack_max_len_str_char\n\
    \    local paren_list_item_stack_max_len_str_stack\n    local paren_list_item_stack_max_len_str_stack_len\n\
    \    local paren_list_item_stack_max_len_str_stack_idx\n    local paren_list_item_stack_max_len_str_stack_char\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len\n    local paren_list_item_stack_max_len_str_stack_max_len_idx\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len_char\n    local paren_list_item_stack_max_len_str_stack_max_len_str\n\
    \    local paren_list_item_stack_max_len_str_stack_max_len_str_len\n    local\
    \ paren_list_item_stack_max_len_str_stack_max_len_str_idx\n   \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input_string=$1\n  local result=()\n\
    \  local current_level=0\n  local max_level=0\n  local current_char\n  local i\n\
    \  for ((i=0; i<${#input_string}; i++)); do\n    current_char=${input_string:$i:1}\n\
    \    if [[ \"$current_char\" == \"(\" ]]; then\n      ((current_level++))\n  \
    \    if ((current_level > max_level)); then\n        max_level=$current_level\n\
    \      fi\n    elif [[ \"$current_char\" == \")\" ]]; then\n      ((current_level--))\n\
    \    fi\n  done\n  result+=($max_level)\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a paren_stack\n    local -i\
    \ paren_count=0\n    local -i max_nesting=0\n    local -i nesting_count=0\n  \
    \  local -a output\n    local -i i=0\n    local -i j=0\n    local -i k=0\n   \
    \ local -i l=0\n    local -i m=0\n    local -i n=0\n    local -i o=0\n    local\
    \ -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n\
    \    local -i u=0\n    local -i v=0\n    local -i w=0\n    local -i x=0\n    local\
    \ -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i\
    \ cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i\
    \ gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i\
    \ kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i\
    \ oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i\
    \ ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i\
    \ ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i\
    \ aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local\
    \ -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local\
    \ -i iii=0\n    local -i jjj=0\n    local -i kkk\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local result=()\n\
    \    local max_nesting=0\n    local nesting=0\n    local i=0\n    local len=${#input}\n\
    \    local char\n\n    while [ $i -lt $len ]; do\n        char=${input:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            ((nesting++))\n        \
    \    if [ $nesting -gt $max_nesting ]; then\n                max_nesting=$nesting\n\
    \            fi\n        elif [ \"$char\" == \")\" ]; then\n            ((nesting--))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            result+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            nesting=0\n        fi\n        ((i++))\n\
    \    done\n    result+=(\"$max_nesting\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_nesting=0\n\
    \    local current_nesting=0\n    local output=()\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((current_nesting++))\n\
    \            if ((current_nesting > max_nesting)); then\n                max_nesting=$current_nesting\n\
    \            fi\n        elif [[ ${parens:$i:1} == \")\" ]]; then\n          \
    \  ((current_nesting--))\n        elif [[ ${parens:$i:1} == \" \" ]]; then\n \
    \           output+=(\"\\\"$max_nesting\\\"\")\n            max_nesting=0\n  \
    \          current_nesting=0\n        fi\n    done\n    output+=(\"\\\"$max_nesting\\\
    \"\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local paren_groups=($parens)\n\
    \    local paren_group\n    local paren_levels=()\n    local paren_level\n   \
    \ local paren_stack=()\n    local paren_stack_top\n    local paren_stack_top_level\n\
    \    local paren_stack_top_level_max\n    local paren_stack_top_level_max_index\n\
    \    local paren_stack_top_level_max_index_prev\n    local paren_stack_top_level_max_index_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev\n    local paren_stack_top_level_max_index_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev\n    local\
    \ paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev\n    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    \    local paren_stack_top_level_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input_str=$1\n    local output_str=\"\
    \"\n    local max_depth=0\n    local curr_depth=0\n    local i=0\n    local len=${#input_str}\n\
    \    for ((i=0; i<len; i++)); do\n        if [[ ${input_str:$i:1} == \"(\" ]];\
    \ then\n            ((curr_depth++))\n            if ((curr_depth > max_depth));\
    \ then\n                max_depth=$curr_depth\n            fi\n        elif [[\
    \ ${input_str:$i:1} == \")\" ]]; then\n            ((curr_depth--))\n        elif\
    \ [[ ${input_str:$i:1} == \" \" ]]; then\n            output_str+=\"\\\"$max_depth\\\
    \" \"\n            max_depth=0\n            curr_depth=0\n        fi\n    done\n\
    \    echo $output_str\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local string=$1\n  local parens_array=($string)\n\
    \  local result=()\n  for parens in \"${parens_array[@]}\"; do\n    local stack=()\n\
    \    local max_depth=0\n    local current_depth=0\n    for ((i=0; i<${#parens};\
    \ i++)); do\n      local char=${parens:$i:1}\n      if [[ $char == \"(\" ]]; then\n\
    \        stack+=($char)\n        current_depth=$(($current_depth + 1))\n     \
    \   if [[ $current_depth -gt $max_depth ]]; then\n          max_depth=$current_depth\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        if [[ ${#stack[@]}\
    \ -eq 0 ]]; then\n          echo \"ERROR: Unbalanced parentheses\"\n         \
    \ exit 1\n        fi\n        stack=(\"${stack[@]:0:$((${#stack[@]} - 1))}\")\n\
    \        current_depth=$(($current_depth - 1))\n      else\n        echo \"ERROR:\
    \ Invalid character $char\"\n        exit 1\n      fi\n    done\n    if [[ ${#stack[@]}\
    \ -ne 0 ]]; then\n      echo \"ERROR: Unbalanced parentheses\"\n      exit 1\n\
    \    fi\n    result+=($max_depth)\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_item\n  local parens_array_item_len\n  local parens_array_item_idx\n\
    \  local parens_array_item_char\n  local parens_array_item_parens_count\n  local\
    \ parens_array_item_parens_count_max\n  local parens_array_item_parens_count_max_array=()\n\
    \  while [[ $parens_array_idx -lt $parens_array_len ]]; do\n    parens_array_item=${parens_array[$parens_array_idx]}\n\
    \    parens_array_item_len=${#parens_array_item}\n    parens_array_item_idx=0\n\
    \    parens_array_item_parens_count=0\n    parens_array_item_parens_count_max=0\n\
    \    while [[ $parens_array_item_idx -lt $parens_array_item_len ]]; do\n     \
    \ parens_array_item_char=${parens_array_item:$parens_array_item_idx:1}\n     \
    \ if [[ $parens_array_item_char == \"(\" ]]; then\n        parens_array_item_parens_count=$((parens_array_item_parens_count\
    \ + 1))\n      elif [[ $parens_array_item_char == \")\" ]]; then\n        parens_array_item_parens_count=$((parens_array_item_parens_count\
    \ - 1))\n      fi\n      if [[ $parens_array_item_parens_count -gt $parens_array_item_parens_count_max\
    \ ]]; then\n        parens_array_item_parens_count_max=$parens_array_item_parens_count\n\
    \      fi\n      parens_array\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxa3wlb8h.sh: line 38: syntax error near unexpected token `}''

    /tmp/tmpxa3wlb8h.sh: line 38: `}''

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i\n    for ((i=0;\
    \ i<${#input}; i++)); do\n        local char=${input:$i:1}\n        if [[ \"$char\"\
    \ == \"(\" ]]; then\n            ((current_nesting++))\n            if ((current_nesting\
    \ > max_nesting)); then\n                max_nesting=$current_nesting\n      \
    \      fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((current_nesting--))\n\
    \        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            current_nesting=0\n        fi\n    done\n\
    \    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local i=0\n  local j=0\n  local parens_str_len=0\n  local parens_str_curr=0\n\
    \  local parens_str_prev=0\n  local parens_str_next=0\n  local parens_str_prev_prev=0\n\
    \  local parens_str_next_next=0\n  local parens_str_curr_char=''\n  local parens_str_prev_char=''\n\
    \  local parens_str_next_char=''\n  local parens_str_prev_prev_char=''\n  local\
    \ parens_str_next_next_char=''\n  local parens_str_curr_char_is_parens=false\n\
    \  local parens_str_prev_char_is_parens=false\n  local parens_str_next_char_is_parens=false\n\
    \  local parens_str_prev_prev_char_is_parens=false\n  local parens_str_next_next_char_is_parens=false\n\
    \  local parens_str_curr_char_is_open_parens=false\n  local parens_str_prev_char_is_open_parens=false\n\
    \  local parens_str_next_char_is_open_parens=false\n  local parens_str_prev_prev_char_is_open_parens=false\n\
    \  local parens_str_next_next_char_is_open_parens=false\n  local parens_str_curr_char_is_close_parens=false\n\
    \  local parens_str_prev_char_is_close_parens=false\n  local parens_str_next_char_is_close_parens=false\n\
    \  local parens_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_depth=0\n\
    \    local cur_depth=0\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    local c=\"\"\n    local start_paren=\"(\"\n    local end_paren=\")\"\n  \
    \  local start_paren_char_code=$(printf \"%d\" \"'$start_paren\")\n    local end_paren_char_code=$(printf\
    \ \"%d\" \"'$end_paren\")\n    local space_char_code=$(printf \"%d\" \"' '\")\n\
    \    local char_code=0\n    local is_paren=0\n    local is_space=0\n    local\
    \ is_start_paren=0\n    local is_end_paren=0\n    local is_start_paren_or_space=0\n\
    \    local is_end_paren_or_space=0\n    local is_end_paren_or_start_paren=0\n\
    \    local is_start_paren_or_end_paren=0\n    local is_start_paren_or_end_paren_or_space=0\n\
    \    local is_end_paren_or_start_paren_or_space=0\n    local is_start_paren_or_end_paren_or_start_paren=0\n\
    \    local is_end_paren_or_start_paren_or_end_paren=0\n    local is_start_paren_or_end_paren_or_start_paren_or_space=0\n\
    \    local is_end_paren_or_start_paren_or_end_paren_or_space=0\n    local is_start_paren_or_end_paren_or_end_paren=0\n\
    \    local is_end_paren_or_start_paren_or_start_paren=0\n    local is_start_paren_or_end_paren_or_end_paren_or_space=0\n\
    \    local is_end_paren_or_start_paren_or_start_paren_or_space=0\n    local is_start_paren_or_end_paren_or_end_paren_or_start_paren=0\n\
    \    local is_end_paren_or_start_paren_or_start_paren_or_end\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local paren_stack=()\n  local max_depth=0\n\
    \  local current_depth=0\n  local output=()\n  local paren_group\n  for paren_group\
    \ in $1; do\n    max_depth=0\n    current_depth=0\n    for (( i=0; i<${#paren_group};\
    \ i++ )); do\n      if [[ ${paren_group:$i:1} == \"(\" ]]; then\n        paren_stack+=(1)\n\
    \        current_depth=$(($current_depth + 1))\n        if [[ $current_depth -gt\
    \ $max_depth ]]; then\n          max_depth=$current_depth\n        fi\n      elif\
    \ [[ ${paren_group:$i:1} == \")\" ]]; then\n        paren_stack+=(-1)\n      \
    \  current_depth=$(($current_depth - 1))\n      fi\n    done\n    output+=($max_depth)\n\
    \  done\n  echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  local max_nested_parens=0\n  local parens_count=0\n  local parens_str_len=0\n\
    \  local parens_str_char=''\n  local parens_str_char_ascii=0\n  local parens_str_char_ascii_open=40\n\
    \  local parens_str_char_ascii_close=41\n  local parens_str_char_ascii_space=32\n\
    \  local i=0\n  local j=0\n\n  for ((i=0; i<parens_arr_len; i++)); do\n    parens_str=${parens_arr[$i]}\n\
    \    parens_str_len=${#parens_str}\n    parens_count=0\n    max_nested_parens=0\n\
    \n    for ((j=0; j<parens_str_len; j++)); do\n      parens_str_char=${parens_str:$j:1}\n\
    \      parens_str_char_ascii=$(printf \"%d\" \"'$parens_str_char\")\n\n      if\
    \ [ $parens_str_char_ascii -eq $parens_str_char_ascii_open ]; then\n        parens_count=$((parens_count+1))\n\
    \      elif [ $parens_str_char_ascii -eq $parens_str_char_ascii_close ]; then\n\
    \        parens_count=$((parens_count-1))\n      elif [ $parens_str_char_ascii\
    \ -eq $parens_str_char_ascii_space ]; then\n        continue\n      else\n   \
    \     echo \"Invalid character found in input string.\"\n        exit 1\n    \
    \  fi\n\n      if [ $parens_count -gt $max_nested_parens ]; then\n        max_n\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk1wzh70v.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmpk1wzh70v.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local nesting=0\n    local char\n    for (( i=0;\
    \ i<${#input}; i++ )); do\n        char=${input:$i:1}\n        if [[ \"$char\"\
    \ == \"(\" ]]; then\n            (( nesting++ ))\n            if (( nesting >\
    \ max_nesting )); then\n                max_nesting=$nesting\n            fi\n\
    \        elif [[ \"$char\" == \")\" ]]; then\n            (( nesting-- ))\n  \
    \      elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            nesting=0\n        fi\n    done\n  \
    \  output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local result=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local len=${#input}\n  local\
    \ curr_paren=''\n  local curr_char=''\n  local curr_group=''\n  local curr_group_len=0\n\
    \  local curr_group_depth=0\n  local curr_group_max_depth=0\n  local curr_group_max_depth_index=0\n\
    \  local curr_group_max_depth_paren=''\n  local curr_group_max_depth_paren_index=0\n\
    \  local curr_group_max_depth_paren_len=0\n  local curr_group_max_depth_paren_depth=0\n\
    \  local curr_group_max_depth_paren_max_depth=0\n  local curr_group_max_depth_paren_max_depth_index=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren=''\n  local curr_group_max_depth_paren_max_depth_paren_index=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_len=0\n  local curr_group_max_depth_paren_max_depth_paren_depth=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_max_depth=0\n  local curr_group_max_depth_paren_max_depth_paren_max_depth_index=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_max_depth_paren=''\n  local\
    \ curr_group_max_depth_paren_max_depth_paren_max_depth_paren_index=0\n  local\
    \ curr_group_max_depth_paren_max_depth_paren_max_depth_paren_len=0\n  local curr_group_max_depth_paren_max_depth_paren_max_depth_paren_depth=0\n\
    \  local curr_group_max_depth_paren_max_depth_paren_max_depth_paren_max_depth=0\n\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i=0\n    local\
    \ c\n    local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            current_nesting=$((current_nesting\
    \ + 1))\n            if [ $current_nesting -gt $max_nesting ]; then\n        \
    \        max_nesting=$current_nesting\n            fi\n        elif [ \"$c\" ==\
    \ \")\" ]; then\n            current_nesting=$((current_nesting - 1))\n      \
    \  fi\n        i=$((i + 1))\n    done\n    echo $max_nesting\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_arr_idx=0\n  local parens_str_len=${#parens_str}\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_next_next=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local nesting=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"\
    $c\" == \"(\" ]; then\n      nesting=$((nesting + 1))\n      if [ $nesting -gt\
    \ $max_nesting ]; then\n        max_nesting=$nesting\n      fi\n    elif [ \"\
    $c\" == \")\" ]; then\n      nesting=$((nesting - 1))\n    elif [ \"$c\" == \"\
    \ \" ]; then\n      output+=(\"$max_nesting\")\n      max_nesting=0\n      nesting=0\n\
    \    fi\n    i=$((i + 1))\n  done\n  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  for ((i=0; i<len; i++)); do\n    c=${input:$i:1}\n    if [[\
    \ \"$c\" == \"(\" ]]; then\n      ((current_depth++))\n      ((max_depth = current_depth\
    \ > max_depth ? current_depth : max_depth))\n    elif [[ \"$c\" == \")\" ]]; then\n\
    \      ((current_depth--))\n    elif [[ \"$c\" == \" \" ]]; then\n      output+=(\"\
    $max_depth\")\n      max_depth=0\n      current_depth=0\n    fi\n  done\n  output+=(\"\
    $max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_depth=0\n\
    \    local depth=0\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [ \"$c\"\
    \ == \"(\" ]; then\n            depth=$((depth+1))\n            if [ $depth -gt\
    \ $max_depth ]; then\n                max_depth=$depth\n            fi\n     \
    \   elif [ \"$c\" == \")\" ]; then\n            depth=$((depth-1))\n        elif\
    \ [ \"$c\" == \" \" ]; then\n            result=\"$result \\\"$max_depth\\\"\"\
    \n            max_depth=0\n            depth=0\n        fi\n        i=$((i+1))\n\
    \    done\n    result=\"$result \\\"$max_depth\\\"\"\n    echo \"[$result]\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local paren_groups=\"$1\"\n    local\
    \ paren_group\n    local max_nesting\n    local max_nesting_list=()\n    for paren_group\
    \ in $paren_groups; do\n        max_nesting=$(echo \"$paren_group\" | awk '{print\
    \ gsub(/[()]/,\"&\")}')\n        max_nesting_list+=(\"$max_nesting\")\n    done\n\
    \    echo \"${max_nesting_list[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local current_depth=0\n    local current_char=''\n\
    \    local i=0\n    local len=${#input}\n    for ((i=0; i<len; i++)); do\n   \
    \     current_char=${input:$i:1}\n        if [[ $current_char == '(' ]]; then\n\
    \            ((current_depth++))\n            if [[ $current_depth -gt $max_depth\
    \ ]]; then\n                max_depth=$current_depth\n            fi\n       \
    \ elif [[ $current_char == ')' ]]; then\n            ((current_depth--))\n   \
    \     fi\n    done\n    echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_idx=0\n  local\
    \ parens_array_item\n  local parens_array_item_len\n  local parens_array_item_idx\n\
    \  local parens_array_item_char\n  local parens_array_item_char_prev\n  local\
    \ parens_array_item_char_next\n  local parens_array_item_char_prev_idx\n  local\
    \ parens_array_item_char_next_idx\n  local parens_array_item_char_prev_char\n\
    \  local parens_array_item_char_next_char\n  local parens_array_item_char_prev_char_idx\n\
    \  local parens_array_item_char_next_char_idx\n  local parens_array_item_char_prev_char_prev_char\n\
    \  local parens_array_item_char_next_char_next_char\n  local parens_array_item_char_prev_char_prev_char_idx\n\
    \  local parens_array_item_char_next_char_next_char_idx\n  local parens_array_item_char_prev_char_prev_char_prev_char\n\
    \  local parens_array_item_char_next_char_next_char_next_char\n  local parens_array_item_char_prev_char_prev_char_prev_char_idx\n\
    \  local parens_array_item_char_next_char_next_char_next_char_idx\n  local parens_array_item_char_prev_char_prev_char_prev_char_prev_char\n\
    \  local parens_array_item_char_next_char_next_char_next_char_next_char\n  local\
    \ parens_array_item_char_prev_char_prev_char_prev_char_prev_char_idx\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<parens_arr_len; i++)); do\n    local parens_str=${parens_arr[$i]}\n    local\
    \ parens_str_len=${#parens_str}\n    local nesting_level=0\n    local max_nesting_level=0\n\
    \    for ((j=0; j<parens_str_len; j++)); do\n      local char=${parens_str:$j:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        ((nesting_level++))\n      \
    \  if [[ \"$nesting_level\" -gt \"$max_nesting_level\" ]]; then\n          max_nesting_level=$nesting_level\n\
    \        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        ((nesting_level--))\n\
    \      fi\n    done\n    max_nesting_arr+=(\"$max_nesting_level\")\n  done\n \
    \ echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local max_depth_arr=()\n    for parens in \"${parens_arr[@]}\"; do\n    \
    \    local max_depth=0\n        local depth=0\n        for ((i=0; i<${#parens};\
    \ i++)); do\n            if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n        \
    \        ((depth++))\n                if ((depth > max_depth)); then\n       \
    \             max_depth=$depth\n                fi\n            elif [[ \"${parens:$i:1}\"\
    \ == \")\" ]]; then\n                ((depth--))\n            fi\n        done\n\
    \        max_depth_arr+=(\"$max_depth\")\n    done\n    echo \"${max_depth_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_depth=0\n    local current_depth=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local c=${input:$i:1}\n        if [ \"\
    $c\" == \"(\" ]; then\n            current_depth=$((current_depth + 1))\n    \
    \        if [ $current_depth -gt $max_depth ]; then\n                max_depth=$current_depth\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            current_depth=$((current_depth\
    \ - 1))\n        elif [ \"$c\" == \" \" ]; then\n            output+=(\"\\\"$max_depth\\\
    \"\")\n            max_depth=0\n            current_depth=0\n        fi\n    \
    \    i=$((i + 1))\n    done\n    output+=(\"\\\"$max_depth\\\"\")\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local max_nesting=0\n  local max_nesting_str=\"\"\n  for parens in \"${parens_arr[@]}\"\
    ; do\n    local nesting=0\n    local nesting_str=\"\"\n    for ((i=0; i<${#parens};\
    \ i++)); do\n      local char=\"${parens:$i:1}\"\n      if [[ \"$char\" == \"\
    (\" ]]; then\n        nesting=$((nesting+1))\n      elif [[ \"$char\" == \")\"\
    \ ]]; then\n        nesting=$((nesting-1))\n      fi\n      nesting_str=\"$nesting_str\
    \ $nesting\"\n    done\n    if [[ \"$nesting\" -eq 0 ]]; then\n      max_nesting_str=\"\
    $max_nesting_str $nesting_str\"\n    fi\n  done\n  echo \"$max_nesting_str\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    for group in $input; do\n        local max_level=0\n        local level=0\n\
    \        for ((i=0; i<${#group}; i++)); do\n            if [[ ${group:$i:1} ==\
    \ \"(\" ]]; then\n                ((level++))\n                if ((level > max_level));\
    \ then\n                    max_level=$level\n                fi\n           \
    \ elif [[ ${group:$i:1} == \")\" ]]; then\n                ((level--))\n     \
    \       fi\n        done\n        output+=(\"\\\"$max_level\\\"\")\n    done\n\
    \    echo \"[${output[@]}]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input_string=$1\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local output_string=\"\"\n    local i=0\n  \
    \  local c=\"\"\n    local len=${#input_string}\n    for ((i=0; i<len; i++));\
    \ do\n        c=${input_string:$i:1}\n        if [[ $c == \"(\" ]]; then\n   \
    \         paren_count=$((paren_count+1))\n            if [[ $paren_count -gt $max_paren_count\
    \ ]]; then\n                max_paren_count=$paren_count\n            fi\n   \
    \     elif [[ $c == \")\" ]]; then\n            paren_count=$((paren_count-1))\n\
    \        elif [[ $c == \" \" ]]; then\n            output_string=\"$output_string\
    \ \\\"$max_paren_count\\\"\"\n            max_paren_count=0\n            paren_count=0\n\
    \        fi\n    done\n    output_string=\"$output_string \\\"$max_paren_count\\\
    \"\"\n    echo \"[$output_string]\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local max_nested_parens=0\n\
    \  local nested_parens=0\n  local i=0\n  local len=${#parens}\n  local output=()\n\
    \  while [ $i -lt $len ]; do\n    local char=${parens:$i:1}\n    if [ \"$char\"\
    \ == \"(\" ]; then\n      ((nested_parens++))\n      if [ $nested_parens -gt $max_nested_parens\
    \ ]; then\n        max_nested_parens=$nested_parens\n      fi\n    elif [ \"$char\"\
    \ == \")\" ]; then\n      ((nested_parens--))\n    elif [ \"$char\" == \" \" ];\
    \ then\n      output+=(\"$max_nested_parens\")\n      max_nested_parens=0\n  \
    \    nested_parens=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_nested_parens\"\
    )\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_nesting=0\n\
    \  local curr_nesting=0\n  local max_nesting_str=\"\"\n  local curr_nesting_str=\"\
    \"\n  local max_nesting_strs=()\n  local curr_nesting_strs=()\n  local max_nesting_strs_str=\"\
    \"\n  local curr_nesting_strs_str=\"\"\n  local max_nesting_strs_strs=()\n  local\
    \ curr_nesting_strs_strs=()\n  local max_nesting_strs_strs_str=\"\"\n  local curr_nesting_strs_strs_str=\"\
    \"\n  local max_nesting_strs_strs_strs=()\n  local curr_nesting_strs_strs_strs=()\n\
    \  local max_nesting_strs_strs_strs_str=\"\"\n  local curr_nesting_strs_strs_strs_str=\"\
    \"\n  local max_nesting_strs_strs_strs_strs=()\n  local curr_nesting_strs_strs_strs_strs=()\n\
    \  local max_nesting_strs_strs_strs_strs_str=\"\"\n  local curr_nesting_strs_strs_strs_strs_str=\"\
    \"\n  local max_nesting_strs_strs_strs_strs_strs=()\n  local curr_nesting_strs_strs_strs_strs_strs=()\n\
    \  local max_nesting_strs_strs_strs_strs_strs_str=\"\"\n  local curr_nesting_strs_strs_strs_strs_strs_str=\"\
    \"\n  local max_nesting_strs_strs_strs_strs_strs_strs=()\n  local curr_nesting_strs_strs_strs_strs_strs_strs=()\n\
    \  local max_nesting_strs_strs_strs_strs_strs_strs_str=\"\"\n  local\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item\n\
    \  local parens_arr_item_len\n  local parens_arr_item_idx\n  local parens_arr_item_char\n\
    \  local parens_arr_item_nesting_level\n  local parens_arr_item_nesting_level_max\n\
    \  local parens_arr_item_nesting_level_max_arr=()\n  while [ $parens_arr_idx -lt\
    \ $parens_arr_len ]; do\n    parens_arr_item=${parens_arr[$parens_arr_idx]}\n\
    \    parens_arr_item_len=${#parens_arr_item}\n    parens_arr_item_idx=0\n    parens_arr_item_nesting_level=0\n\
    \    parens_arr_item_nesting_level_max=0\n    while [ $parens_arr_item_idx -lt\
    \ $parens_arr_item_len ]; do\n      parens_arr_item_char=${parens_arr_item:$parens_arr_item_idx:1}\n\
    \      if [ \"$parens_arr_item_char\" == \"(\" ]; then\n        ((parens_arr_item_nesting_level++))\n\
    \        if [ $parens_arr_item_nesting_level -gt $parens_arr_item_nesting_level_max\
    \ ]; then\n          parens_arr_item_nesting_level_max=$parens_arr_item_nesting_level\n\
    \        fi\n      elif [ \"$parens_arr_item_char\" == \")\" ]; then\n       \
    \ ((parens_arr_item_nesting_level--))\n      fi\n      ((parens_arr_item_idx++))\n\
    \    done\n    parens_arr_item_nesting_level_max_arr+\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr5ussc8y.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpr5ussc8y.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    fi\n   \
    \ ((i++))\n  done\n  echo $max_depth\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  for ((i=0; i<$parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n\
    \    local max_nested_parens=$(max_nested_parens $parens)\n    max_nested_parens_arr+=($max_nested_parens)\n\
    \  done\n  echo ${max_nested_parens_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3ui2ujc1.sh: line 16: max_nested_parens: command not found

    /tmp/tmp3ui2ujc1.sh: line 16: max_nested_parens: command not found

    /tmp/tmp3ui2ujc1.sh: line 16: max_nested_parens: command not found

    /tmp/tmp3ui2ujc1.sh: line 16: max_nested_parens: command not found

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_nesting_level=0\n\
    \    local current_nesting_level=0\n    local output=()\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n        if [[ ${parens:$i:1} == \"(\" ]]; then\n            ((current_nesting_level++))\n\
    \            ((max_nesting_level = max_nesting_level < current_nesting_level ?\
    \ current_nesting_level : max_nesting_level))\n        elif [[ ${parens:$i:1}\
    \ == \")\" ]]; then\n            ((current_nesting_level--))\n        elif [[\
    \ ${parens:$i:1} == \" \" ]]; then\n            output+=(\"\\\"$max_nesting_level\\\
    \"\")\n            max_nesting_level=0\n            current_nesting_level=0\n\
    \        fi\n    done\n    output+=(\"\\\"$max_nesting_level\\\"\")\n    echo\
    \ ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            depth=$((depth+1))\n      \
    \      if [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            depth=$((depth-1))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            output+=(\"\\\"$max_depth\\\
    \"\")\n            max_depth=0\n            depth=0\n        fi\n        i=$((i+1))\n\
    \    done\n    output+=(\"\\\"$max_depth\\\"\")\n    echo \"${output[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=\"${input:$i:1}\"\n    if [[ \"$char\" == \"(\" ]]; then\n\
    \      ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local max_nesting=0\n\
    \  local nesting=0\n  local result=\"\"\n  for (( i=0; i<${#parens}; i++ )); do\n\
    \    if [[ ${parens:$i:1} == \"(\" ]]; then\n      ((nesting++))\n      if ((nesting\
    \ > max_nesting)); then\n        max_nesting=$nesting\n      fi\n    elif [[ ${parens:$i:1}\
    \ == \")\" ]]; then\n      ((nesting--))\n    elif [[ ${parens:$i:1} == \" \"\
    \ ]]; then\n      result+=\"\\\"$max_nesting\\\" \"\n      max_nesting=0\n   \
    \   nesting=0\n    fi\n  done\n  result+=\"\\\"$max_nesting\\\"\"\n  echo $result\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a parens_array\n  local -a parens_array_len\n\
    \  local -a parens_array_max_len\n  local -a parens_array_max_len_index\n  local\
    \ -a parens_array_max_len_index_len\n  local -a parens_array_max_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len\n  local -a parens_array_max_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len\n  local -a parens_array_max_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len\n  local\
    \ -a parens_array_max_len_index_len_index_len_index_len_index_len_index\n  local\
    \ -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_len_index_len_index_len_index_len\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_len_prev=0\n\
    \  local parens_str_len_diff=0\n  local parens_str_len_diff_prev=0\n  local parens_str_len_diff_max=0\n\
    \  local parens_str_len_diff_max_prev=0\n  local parens_str_len_diff_max_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input_str=$1\n    local output_str=\"\
    \"\n    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input_str}\n\
    \    local char=''\n    local char_prev=''\n    local char_next=''\n    local\
    \ char_prev_prev=''\n    local char_next_next=''\n    local char_prev_prev_prev=''\n\
    \    local char_next_next_next=''\n    local char_prev_prev_prev_prev=''\n   \
    \ local char_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next_next_next_next=''\n    local char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next_next_next_next_next=''\n    local\
    \ char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n    local char_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \    local char_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \    local char\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a parens_array\n  local -a parens_levels\n\
    \  local -a parens_levels_array\n  local -a parens_levels_array_sorted\n  local\
    \ -a parens_levels_array_sorted_unique\n  local -a parens_levels_array_sorted_unique_counts\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted\n  local -a parens_levels_array_sorted_unique_counts_sorted_unique\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts\n  local\
    \ -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted\n  local\
    \ -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted_unique\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted_unique_counts_sorted_unique\n\
    \  local -a parens_levels_array_sorted_unique_counts_sorted_unique_counts_sorted_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    local char=''\n    local result=''\n\n    while [ $i -lt $len ]; do\n   \
    \     char=${input:$i:1}\n        if [ \"$char\" == \"(\" ]; then\n          \
    \  ((level++))\n            if [ $level -gt $max_level ]; then\n             \
    \   max_level=$level\n            fi\n        elif [ \"$char\" == \")\" ]; then\n\
    \            ((level--))\n        elif [ \"$char\" == \" \" ]; then\n        \
    \    output+=(\"$max_level\")\n            max_level=0\n            level=0\n\
    \        fi\n        ((i++))\n    done\n    output+=(\"$max_level\")\n    result=$(printf\
    \ '\"%s\" ' \"${output[@]}\")\n    echo \"[${result:0:-1}]\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      level=$((level+1))\n      if [ $level -gt $max_level ]; then\n \
    \       max_level=$level\n      fi\n    elif [ \"$c\" == \")\" ]; then\n     \
    \ level=$((level-1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"\\\"\
    $max_level\\\"\")\n      max_level=0\n      level=0\n    fi\n    i=$((i+1))\n\
    \  done\n  output+=(\"\\\"$max_level\\\"\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=\"\
    \"\n    local max_level=0\n    local level=0\n    local i=0\n    local c=\"\"\n\
    \    for ((i=0; i<${#input}; i++)); do\n        c=${input:$i:1}\n        if [[\
    \ \"$c\" == \"(\" ]]; then\n            ((level++))\n            if ((level >\
    \ max_level)); then\n                max_level=$level\n            fi\n      \
    \  elif [[ \"$c\" == \")\" ]]; then\n            ((level--))\n        fi\n   \
    \     if [[ \"$c\" == \" \" ]]; then\n            output+=\"\\\"$max_level\\\"\
    \ \"\n            max_level=0\n            level=0\n        fi\n    done\n   \
    \ output+=\"\\\"$max_level\\\"\"\n    echo \"[$output]\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local char=''\n    for ((i=0; i<${#input};\
    \ i++)); do\n        char=${input:$i:1}\n        if [[ $char == '(' ]]; then\n\
    \            ((level++))\n            if ((level > max_level)); then\n       \
    \         max_level=$level\n            fi\n        elif [[ $char == ')' ]]; then\n\
    \            ((level--))\n        fi\n        if [[ $char == ' ' ]]; then\n  \
    \          output+=(\"$max_level\")\n            max_level=0\n            level=0\n\
    \        fi\n    done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local max_nesting_arr=()\n  for parens in \"${parens_arr[@]}\"; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n\
    \      if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n        ((nesting++))\n   \
    \     if ((nesting > max_nesting)); then\n          max_nesting=$nesting\n   \
    \     fi\n      elif [[ \"${parens:$i:1}\" == \")\" ]]; then\n        ((nesting--))\n\
    \      fi\n    done\n    max_nesting_arr+=(\"$max_nesting\")\n  done\n  echo \"\
    ${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a parens_array\n  local -a parens_array_len\n\
    \  local -a parens_array_max_depth\n  local -a parens_array_max_depth_str\n  local\
    \ -i max_depth\n  local -i i\n  local -i j\n  local -i len\n  local -i depth\n\
    \  local -i max_depth_len\n  local -i max_depth_len_str\n  local -i max_depth_len_str_len\n\
    \  local -i max_depth_len_str_len_str\n  local -i max_depth_len_str_len_str_len\n\
    \  local -i max_depth_len_str_len_str_len_str\n  local -i max_depth_len_str_len_str_len_str_len\n\
    \  local -i max_depth_len_str_len_str_len_str_len_str\n  local -i max_depth_len_str_len_str_len_str_len_str_len\n\
    \  local -i max_depth_len_str_len_str_len_str_len_str_len_str\n  local -i max_depth_len_str_len_str_len_str_len_str_len_str_len\n\
    \  local -i max_depth_len_str_len_str_len_str_len_str_len_str_len_str\n  local\
    \ -i max_depth_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local -i\
    \ max_depth_len_str_len_str_len_str_len_str_len_str_len_str_len_str\n  local -i\
    \ max_depth_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local\
    \ -i max_depth_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str\n\
    \  local -i max_depth_len_str_len_str_len_str_len_str_len_str\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  local i\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n \
    \     ((depth++))\n      ((max_depth = depth > max_depth ? depth : max_depth))\n\
    \    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    elif [[ \"$char\"\
    \ == \" \" ]]; then\n      output+=(\"\\\"$max_depth\\\"\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"\\\"$max_depth\\\"\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n   \
    \   depth=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_depth\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_len_prev=0\n\
    \  local parens_str_len_diff=0\n  local parens_str_len_diff_prev=0\n  local parens_str_len_diff_max=0\n\
    \  local parens_str_len_diff_max_prev=0\n  local parens_str_len_diff_max_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_str_len_diff_max_prev\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local arr=()\n \
    \   local max_nest=0\n    local nest=0\n    local word=\"\"\n    local i=0\n \
    \   local j=0\n    local k=0\n    local len=0\n    local ch=\"\"\n\n    # split\
    \ the string into groups\n    IFS=' ' read -r -a arr <<< \"$str\"\n\n    # for\
    \ each group\n    for ((i=0; i<${#arr[@]}; i++)); do\n        word=${arr[i]}\n\
    \        len=${#word}\n        max_nest=0\n        nest=0\n        # for each\
    \ character in the group\n        for ((j=0; j<len; j++)); do\n            ch=${word:j:1}\n\
    \            if [[ $ch == \"(\" ]]; then\n                ((nest++))\n       \
    \         if ((nest > max_nest)); then\n                    max_nest=$nest\n \
    \               fi\n            elif [[ $ch == \")\" ]]; then\n              \
    \  ((nest--))\n            fi\n        done\n        arr[i]=$max_nest\n    done\n\
    \n    # output the result\n    for ((k=0; k<${#arr[@]}; k++)); do\n        echo\
    \ -n \"\\\"${arr[k]}\\\"\"\n        if ((k < ${#arr[@]}-1)); then\n          \
    \  echo -n \" \"\n        fi\n    done\n    echo \"\"\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a parens_array\n    local -a\
    \ result\n    local -i i=0\n    local -i max_depth=0\n    local -i depth=0\n \
    \   local -i len=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n   \
    \ local -i m=0\n    local -i n=0\n    local -i o=0\n    local -i p=0\n    local\
    \ -i q=0\n    local -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n\
    \    local -i v=0\n    local -i w=0\n    local -i x=0\n    local -i y=0\n    local\
    \ -i z=0\n    local -i aa=0\n    local -i bb=0\n    local -i cc=0\n    local -i\
    \ dd=0\n    local -i ee=0\n    local -i ff=0\n    local -i gg=0\n    local -i\
    \ hh=0\n    local -i ii=0\n    local -i jj=0\n    local -i kk=0\n    local -i\
    \ ll=0\n    local -i mm=0\n    local -i nn=0\n    local -i oo=0\n    local -i\
    \ pp=0\n    local -i qq=0\n    local -i rr=0\n    local -i ss=0\n    local -i\
    \ tt=0\n    local -i uu=0\n    local -i vv=0\n    local -i ww=0\n    local -i\
    \ xx=0\n    local -i yy=0\n    local -i zz=0\n    local -i aaa=0\n    local -i\
    \ bbb=0\n    local -i ccc=0\n    local -i ddd=0\n    local -i eee=0\n    local\
    \ -i fff=0\n    local -i ggg=0\n    local -i hhh=0\n    local -i iii=0\n    local\
    \ -i jjj=0\n    local -i kkk=0\n    local\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local parens_regex=\"\
    [()]+\"\n    local parens_groups=$(echo $input | sed \"s/ /\\n/g\" | grep -o $parens_regex)\n\
    \    local parens_groups_count=$(echo $parens_groups | wc -w)\n    local max_nesting_levels=()\n\
    \    for (( i=1; i<=$parens_groups_count; i++ )); do\n        local parens_group=$(echo\
    \ $parens_groups | cut -d \" \" -f $i)\n        local parens_group_length=$(echo\
    \ $parens_group | wc -c)\n        local parens_group_length_minus_one=$((parens_group_length-1))\n\
    \        local parens_group_length_minus_two=$((parens_group_length-2))\n    \
    \    local parens_group_length_minus_three=$((parens_group_length-3))\n      \
    \  local parens_group_length_minus_four=$((parens_group_length-4))\n        local\
    \ parens_group_length_minus_five=$((parens_group_length-5))\n        local parens_group_length_minus_six=$((parens_group_length-6))\n\
    \        local parens_group_length_minus_seven=$((parens_group_length-7))\n  \
    \      local parens_group_length_minus_eight=$((parens_group_length-8))\n    \
    \    local parens_group_length_minus_nine=$((parens_group_length-9))\n       \
    \ local parens_group_length_minus_ten=$((parens_group_length-10))\n        local\
    \ parens_group_length_minus_eleven=$((parens_group_length-11))\n        local\
    \ parens_group_length_minus_twelve=$((parens_group_length-12))\n        local\
    \ parens_group_length_minus_thirteen=$((parens_group_length-13))\n        local\
    \ parens_group_length_minus_fourteen=$((parens_group\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5xslicil.sh: line 31: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5xslicil.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_max_str=\"$parens_arr_idx_max\"\n  local parens_arr_idx_max_str_len=${#parens_arr_idx_max_str}\n\
    \  local parens_arr_idx_max_str_len_1=$((parens_arr_idx_max_str_len - 1))\n  local\
    \ parens_arr_idx_max_str_len_1_str=\"$parens_arr_idx_max_str_len_1\"\n  local\
    \ parens_arr_idx_max_str_len_1_str_len=${#parens_arr_idx_max_str_len_1_str}\n\
    \  local parens_arr_idx_max_str_len_1_str_len_1=$((parens_arr_idx_max_str_len_1_str_len\
    \ - 1))\n  local parens_arr_idx_max_str_len_1_str_len_1_str=\"$parens_arr_idx_max_str_len_1_str_len_1\"\
    \n  local parens_arr_idx_max_str_len_1_str_len_1_str_len=${#parens_arr_idx_max_str_len_1_str_len_1_str}\n\
    \  local parens_arr_idx_max_str_len_1_str_len_1_str_len_1=$((parens_arr_idx_max_str_len_1_str_len_1_str_len\
    \ - 1))\n  local parens_arr_idx_max_str_len_1_str_len_1_str_len_1_str=\"$paren\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqha__n41.sh: line 35: unexpected EOF while looking for matching
    `"''

    /tmp/tmpqha__n41.sh: line 39: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local arr=()\n \
    \   local max_level=0\n    local level=0\n    local i=0\n    local c=''\n    local\
    \ len=${#str}\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n        if\
    \ [ \"$c\" == \"(\" ]; then\n            level=$((level+1))\n            if [\
    \ $level -gt $max_level ]; then\n                max_level=$level\n          \
    \  fi\n        elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            arr+=(\"$max_level\")\n \
    \           max_level=0\n            level=0\n        fi\n        i=$((i+1))\n\
    \    done\n    arr+=(\"$max_level\")\n    echo \"${arr[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local current_char\n\
    \    local i\n\n    for ((i=0; i<${#input}; i++)); do\n        current_char=${input:$i:1}\n\
    \        if [[ $current_char == \"(\" ]]; then\n            ((current_nesting++))\n\
    \            if ((current_nesting > max_nesting)); then\n                max_nesting=$current_nesting\n\
    \            fi\n        elif [[ $current_char == \")\" ]]; then\n           \
    \ ((current_nesting--))\n        elif [[ $current_char == \" \" ]]; then\n   \
    \         output+=($max_nesting)\n            max_nesting=0\n            current_nesting=0\n\
    \        fi\n    done\n    output+=($max_nesting)\n    echo ${output[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_max_str=$parens_arr_idx_max\n  local parens_arr_idx_max_str_len=${#parens_arr_idx_max_str}\n\
    \  local parens_arr_idx_max_str_len_1=$((parens_arr_idx_max_str_len - 1))\n  local\
    \ parens_arr_idx_max_str_len_1_str=$parens_arr_idx_max_str_len_1\n  local parens_arr_idx_max_str_len_1_str_len=${#parens_arr_idx_max_str_len_1_str}\n\
    \  local parens_arr_idx_max_str_len_1_str_len_1=$((parens_arr_idx_max_str_len_1_str_len\
    \ - 1))\n  local parens_arr_idx_max_str_len_1_str_len_1_str=$parens_arr_idx_max_str_len_1_str_len_1\n\
    \  local parens_arr_idx_max_str_len_1_str_len_1_str_len=${#parens_arr_idx_max_str_len_1_str_len_1_str}\n\
    \  local parens_arr_idx_max_str_len_1_str_len_1_str_len_1=$((parens_arr_idx_max_str_len_1_str_len_1_str_len\
    \ - 1))\n  local parens_arr_idx_max_str_len_1_str_len_1_str_len_1_str=$parens_arr_id\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_index=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_next_next\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local result=()\n\
    \    local max_nesting=0\n    local nesting=0\n    local i=0\n    local c=''\n\
    \    local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            nesting=$((nesting + 1))\n\
    \            if [ $nesting -gt $max_nesting ]; then\n                max_nesting=$nesting\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            nesting=$((nesting\
    \ - 1))\n        elif [ \"$c\" == \" \" ]; then\n            result+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            nesting=0\n        fi\n        i=$((i\
    \ + 1))\n    done\n    result+=(\"$max_nesting\")\n    echo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_nesting=0\n\
    \  local curr_nesting=0\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" ==\
    \ \"(\" ]; then\n      curr_nesting=$((curr_nesting + 1))\n      if [ $curr_nesting\
    \ -gt $max_nesting ]; then\n        max_nesting=$curr_nesting\n      fi\n    elif\
    \ [ \"$char\" == \")\" ]; then\n      curr_nesting=$((curr_nesting - 1))\n   \
    \ elif [ \"$char\" == \" \" ]; then\n      result=\"$result \\\"$max_nesting\\\
    \"\"\n      max_nesting=0\n      curr_nesting=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  result=\"$result \\\"$max_nesting\\\"\"\n  echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_depth=0\n\
    \  local curr_depth=0\n  local result=()\n  local i\n  for ((i=0; i<${#str}; i++));\
    \ do\n    if [[ ${str:$i:1} == \"(\" ]]; then\n      ((curr_depth++))\n      if\
    \ ((curr_depth > max_depth)); then\n        max_depth=$curr_depth\n      fi\n\
    \    elif [[ ${str:$i:1} == \")\" ]]; then\n      ((curr_depth--))\n    elif [[\
    \ ${str:$i:1} == \" \" ]]; then\n      result+=(\"\\\"$max_depth\\\"\")\n    \
    \  max_depth=0\n      curr_depth=0\n    fi\n  done\n  result+=(\"\\\"$max_depth\\\
    \"\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local char\n  local i\n  for\
    \ ((i=0; i<${#input}; i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" ==\
    \ \"(\" ]]; then\n      ((current_depth++))\n      if ((current_depth > max_depth));\
    \ then\n        max_depth=$current_depth\n      fi\n    elif [[ \"$char\" == \"\
    )\" ]]; then\n      ((current_depth--))\n    elif [[ \"$char\" == \" \" ]]; then\n\
    \      output+=(\"$max_depth\")\n      max_depth=0\n      current_depth=0\n  \
    \  fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a arr\n    local -a result\n\
    \    local -i i\n    local -i j\n    local -i k\n    local -i l\n    local -i\
    \ m\n    local -i n\n    local -i o\n    local -i p\n    local -i q\n    local\
    \ -i r\n    local -i s\n    local -i t\n    local -i u\n    local -i v\n    local\
    \ -i w\n    local -i x\n    local -i y\n    local -i z\n    local -i max_nesting\n\
    \    local -i cur_nesting\n    local -i cur_index\n    local -i cur_paren\n  \
    \  local -i cur_paren_index\n    local -i cur_paren_nesting\n    local -i cur_paren_max_nesting\n\
    \    local -i cur_paren_start_index\n    local -i cur_paren_end_index\n    local\
    \ -i cur_paren_start_nesting\n    local -i cur_paren_end_nesting\n    local -i\
    \ cur_paren_start_max_nesting\n    local -i cur_paren_end_max_nesting\n    local\
    \ -i cur_paren_start_paren_index\n    local -i cur_paren_end_paren_index\n   \
    \ local -i cur_paren_start_paren_nesting\n    local -i cur_paren_end_paren_nesting\n\
    \    local -i cur_paren_start_paren_max_nesting\n    local -i cur_paren_end_paren_max_nesting\n\
    \    local -i cur_paren_start_paren_start_index\n    local -i cur_paren_start_paren_end_index\n\
    \    local -i cur_paren_start_paren_start_nesting\n    local -i cur_paren_start_paren_end_nesting\n\
    \    local -i cur_paren_start_paren_start_max_nesting\n    local -i cur_paren_start_paren_end_max_nesting\n\
    \    local -i cur_paren_end_paren_start_index\n    local -i cur_paren_end_paren_end_index\n\
    \    local -i cur_paren_end_paren_start_n\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local max_depth=0\n\
    \  local depth=0\n  local result=()\n  for ((i=0; i<${#parens}; i++)); do\n  \
    \  if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n      ((depth++))\n      ((max_depth\
    \ = max_depth < depth ? depth : max_depth))\n    elif [[ \"${parens:$i:1}\" ==\
    \ \")\" ]]; then\n      ((depth--))\n    fi\n    if [[ \"${parens:$i:1}\" == \"\
    \ \" ]]; then\n      result+=(\"$max_depth\")\n      max_depth=0\n      depth=0\n\
    \    fi\n  done\n  result+=(\"$max_depth\")\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local groups=$(echo\
    \ $str | sed 's/ /\\n/g')\n  local result=\"\"\n  for group in $groups; do\n \
    \   local max_level=0\n    local level=0\n    for ((i=0; i<${#group}; i++)); do\n\
    \      local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n       \
    \ ((level++))\n        if [[ $level -gt $max_level ]]; then\n          max_level=$level\n\
    \        fi\n      elif [[ $char == \")\" ]]; then\n        ((level--))\n    \
    \  fi\n    done\n    result=\"$result \\\"$max_level\\\"\"\n  done\n  echo \"\
    [$result]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_depth=0\n\
    \    local curr_depth=0\n    local output=()\n    for (( i=0; i<${#str}; i++ ));\
    \ do\n        if [[ ${str:$i:1} == \"(\" ]]; then\n            (( curr_depth++\
    \ ))\n            if (( curr_depth > max_depth )); then\n                max_depth=$curr_depth\n\
    \            fi\n        elif [[ ${str:$i:1} == \")\" ]]; then\n            ((\
    \ curr_depth-- ))\n        elif [[ ${str:$i:1} == \" \" ]]; then\n           \
    \ output+=(\"\\\"$max_depth\\\"\")\n            max_depth=0\n            curr_depth=0\n\
    \        fi\n    done\n    output+=(\"\\\"$max_depth\\\"\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local curr_depth=0\n  local curr_char=''\n  local curr_group=''\n\
    \  local i=0\n  local j=0\n  local len=${#input}\n\n  for ((i=0; i<len; i++));\
    \ do\n    curr_char=${input:$i:1}\n    if [[ $curr_char == '(' ]]; then\n    \
    \  ((curr_depth++))\n      if ((curr_depth > max_depth)); then\n        max_depth=$curr_depth\n\
    \      fi\n    elif [[ $curr_char == ')' ]]; then\n      ((curr_depth--))\n  \
    \  elif [[ $curr_char == ' ' ]]; then\n      output[$j]=$max_depth\n      ((j++))\n\
    \      max_depth=0\n      curr_depth=0\n    fi\n  done\n  output[$j]=$max_depth\n\
    \  echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local char\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        char=${input:$i:1}\n        if [[ $char == \"(\" ]]; then\n\
    \            (( level++ ))\n            if (( level > max_level )); then\n   \
    \             max_level=$level\n            fi\n        elif [[ $char == \")\"\
    \ ]]; then\n            (( level-- ))\n        elif [[ $char == \" \" ]]; then\n\
    \            output+=(\"$max_level\")\n            max_level=0\n            level=0\n\
    \        fi\n    done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_char_prev\n  local parens_arr_val_char_next\n  local parens_arr_val_char_prev_is_open_paren\n\
    \  local parens_arr_val_char_prev_is_close_paren\n  local parens_arr_val_char_next_is_open_paren\n\
    \  local parens_arr_val_char_next_is_close_paren\n  local parens_arr_val_char_prev_is_open_paren_count=0\n\
    \  local parens_arr_val_char_prev_is_close_paren_count=0\n  local parens_arr_val_char_next_is_open_paren_count=0\n\
    \  local parens_arr_val_char_next_is_close_paren_count=0\n  local parens_arr_val_char_prev_is_open_paren_count_max=0\n\
    \  local parens_arr_val_char_prev_is_close_paren_count_max=0\n  local parens_arr_val_char_next_is_open_paren_count_max=0\n\
    \  local parens_arr_val_char_next_is_close_paren_count_max=0\n  local parens_arr_val_char_prev_is_open_paren_count_max_idx=0\n\
    \  local parens_arr_val_char_prev_is_close_paren_count_max_idx=0\n  local parens_arr_val_char_next_is_open_paren_count_max_idx=0\n\
    \  local parens_arr_val\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_level\")\n      max_level=0\n   \
    \   level=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_level\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local result=()\n  local i\n  for ((i=0; i<${#str};\
    \ i++)); do\n    if [[ ${str:$i:1} == \"(\" ]]; then\n      ((paren_count++))\n\
    \      ((max_paren_count = paren_count > max_paren_count ? paren_count : max_paren_count))\n\
    \    elif [[ ${str:$i:1} == \")\" ]]; then\n      ((paren_count--))\n    elif\
    \ [[ ${str:$i:1} == \" \" ]]; then\n      result+=($max_paren_count)\n      max_paren_count=0\n\
    \    fi\n  done\n  result+=($max_paren_count)\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local result=()\n    local paren_stack=()\n\
    \    local max_level=0\n    local level=0\n    local paren_count=0\n    local\
    \ paren_index=0\n    local paren_type=0\n    local paren_char=''\n    local paren_str=''\n\
    \    local paren_str_len=0\n    local paren_str_index=0\n    local paren_str_char=''\n\
    \    local paren_str_char_code=0\n    local paren_str_char_code_prev=0\n    local\
    \ paren_str_char_code_next=0\n    local paren_str_char_code_prev_prev=0\n    local\
    \ paren_str_char_code_next_next=0\n    local paren_str_char_code_prev_prev_prev=0\n\
    \    local paren_str_char_code_next_next_next=0\n    local paren_str_char_code_prev_prev_prev_prev=0\n\
    \    local paren_str_char_code_next_next_next_next=0\n    local paren_str_char_code_prev_prev_prev_prev_prev=0\n\
    \    local paren_str_char_code_next_next_next_next_next=0\n    local paren_str_char_code_prev_prev_prev_prev_prev_prev=0\n\
    \    local paren_str_char_code_next_next_next_next_next_next=0\n    local paren_str_char_code_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local paren_str_char_code_next_next_next_next_next_next_next=0\n    local\
    \ paren_str_char_code_prev_prev_prev_prev_prev_prev_prev_prev=0\n    local paren_str_char_code_next_next_next_next_next_next_next_next=0\n\
    \    local paren_str_char_code_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \    local paren_str_char\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    for ((i=0; i<${#input};\
    \ i++)); do\n        char=\"${input:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            ((depth++))\n            if ((depth > max_depth)); then\n\
    \                max_depth=$depth\n            fi\n        elif [[ \"$char\" ==\
    \ \")\" ]]; then\n            ((depth--))\n        elif [[ \"$char\" == \" \"\
    \ ]]; then\n            output+=(\"$max_depth\")\n            max_depth=0\n  \
    \          depth=0\n        fi\n    done\n    output+=(\"$max_depth\")\n    echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ i=0\n  local max_nesting=0\n  local nesting=0\n  local len=${#str}\n  local\
    \ char=''\n  local result=''\n\n  for ((i=0; i<len; i++)); do\n    char=${str:$i:1}\n\
    \    if [[ $char == '(' ]]; then\n      ((nesting++))\n      if [[ $nesting -gt\
    \ $max_nesting ]]; then\n        max_nesting=$nesting\n      fi\n    elif [[ $char\
    \ == ')' ]]; then\n      ((nesting--))\n      if [[ $nesting -eq 0 ]]; then\n\
    \        arr+=(\"$max_nesting\")\n        max_nesting=0\n      fi\n    elif [[\
    \ $char == ' ' ]]; then\n      continue\n    else\n      echo \"Invalid input:\
    \ $str\"\n      return 1\n    fi\n  done\n\n  result=$(printf '\"%s\" ' \"${arr[@]}\"\
    )\n  echo \"[${result% }]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  local\
    \ c=''\n  local c_prev=''\n  local c_next=''\n  local c_prev_prev=''\n  local\
    \ c_next_next=''\n  local c_prev_prev_prev=''\n  local c_next_next_next=''\n \
    \ local c_prev_prev_prev_prev=''\n  local c_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_next_next_next_next_next_next_next_next_next_next_next=''\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local c_next_next_next_next_next_next_next_next_next_next_next_next=''\n\
    \  local c_prev_prev_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local res=()\n  local\
    \ max_depth=0\n  local depth=0\n  local i=0\n  local len=${#str}\n  local c=''\n\
    \  local c_prev=''\n  local c_next=''\n  local c_next_next=''\n  local c_prev_prev=''\n\
    \  local c_prev_prev_prev=''\n  local c_prev_prev_prev_prev=''\n  local c_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev=''\n  local c_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local c_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local groups=$(echo\
    \ $input | tr \" \" \"\\n\")\n  local result=\"\"\n  for group in $groups; do\n\
    \    local max_level=0\n    local level=0\n    for (( i=0; i<${#group}; i++ ));\
    \ do\n      local char=${group:$i:1}\n      if [[ $char == \"(\" ]]; then\n  \
    \      (( level++ ))\n        if [[ $level -gt $max_level ]]; then\n         \
    \ max_level=$level\n        fi\n      elif [[ $char == \")\" ]]; then\n      \
    \  (( level-- ))\n      fi\n    done\n    result+=\"\\\"$max_level\\\" \"\n  done\n\
    \  echo $result\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local result=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local char=''\n\
    \    local len=${#str}\n    while [ $i -lt $len ]; do\n        char=${str:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            level=$((level+1))\n   \
    \         if [ $level -gt $max_level ]; then\n                max_level=$level\n\
    \            fi\n        elif [ \"$char\" == \")\" ]; then\n            level=$((level-1))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            result+=(\"$max_level\"\
    )\n            max_level=0\n            level=0\n        fi\n        i=$((i+1))\n\
    \    done\n    result+=(\"$max_level\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_string=\"$1\"\n    local\
    \ parens_array=($parens_string)\n    local parens_array_len=${#parens_array[@]}\n\
    \    local parens_array_idx=0\n    local parens_array_idx_max=$((parens_array_len\
    \ - 1))\n    local parens_array_idx_min=0\n    local parens_array_idx_mid=$((parens_array_len\
    \ / 2))\n    local parens_array_idx_mid_max=$((parens_array_len / 2))\n    local\
    \ parens_array_idx_mid_min=$((parens_array_len / 2))\n    local parens_array_idx_mid_prev=$((parens_array_len\
    \ / 2))\n    local parens_array_idx_mid_next=$((parens_array_len / 2))\n    local\
    \ parens_array_idx_mid_prev_prev=$((parens_array_len / 2))\n    local parens_array_idx_mid_next_next=$((parens_array_len\
    \ / 2))\n    local parens_array_idx_mid_prev_prev_prev=$((parens_array_len / 2))\n\
    \    local parens_array_idx_mid_next_next_next=$((parens_array_len / 2))\n   \
    \ local parens_array_idx_mid_prev_prev_prev_prev=$((parens_array_len / 2))\n \
    \   local parens_array_idx_mid_next_next_next_next=$((parens_array_len / 2))\n\
    \    local parens_array_idx_mid_prev_prev_prev_prev_prev=$((parens_array_len /\
    \ 2))\n    local parens_array_idx_mid_next_next_next_next_next=$((parens_array_len\
    \ / 2))\n    local parens_array_idx_mid_prev_prev_prev_prev_prev_prev=$((parens_array_len\
    \ / 2))\n\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local max_nesting_level=0\n  local current_nesting_level=0\n  local parens_str_len=${#parens_str}\n\
    \  local i=0\n  while [ $i -lt $parens_str_len ]; do\n    local current_char=${parens_str:$i:1}\n\
    \    if [ \"$current_char\" == \"(\" ]; then\n      current_nesting_level=$((current_nesting_level\
    \ + 1))\n      if [ $current_nesting_level -gt $max_nesting_level ]; then\n  \
    \      max_nesting_level=$current_nesting_level\n      fi\n    elif [ \"$current_char\"\
    \ == \")\" ]; then\n      current_nesting_level=$((current_nesting_level - 1))\n\
    \    elif [ \"$current_char\" == \" \" ]; then\n      parens_arr+=(\"$max_nesting_level\"\
    )\n      max_nesting_level=0\n      current_nesting_level=0\n    fi\n    i=$((i\
    \ + 1))\n  done\n  parens_arr+=(\"$max_nesting_level\")\n  echo \"${parens_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local parens_stack=()\n  local parens_stack_top=0\n  local parens_stack_max=0\n\
    \  local parens_stack_max_index=0\n  local parens_stack_max_index_prev=0\n  local\
    \ parens_stack_max_index_prev_prev=0\n  local parens_stack_max_index_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev=0\n  local parens_stack_max_index_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev=0\n  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n  local\
    \ parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \  local parens_stack_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=0\n\
    \ \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local nesting=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"\
    $c\" == \"(\" ]; then\n      nesting=$((nesting + 1))\n      if [ $nesting -gt\
    \ $max_nesting ]; then\n        max_nesting=$nesting\n      fi\n    elif [ \"\
    $c\" == \")\" ]; then\n      nesting=$((nesting - 1))\n    elif [ \"$c\" == \"\
    \ \" ]; then\n      output+=(\"$max_nesting\")\n      max_nesting=0\n      nesting=0\n\
    \    fi\n    i=$((i + 1))\n  done\n  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local char\n  for ((i=0; i<${#input};\
    \ i++)); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n \
    \     ((depth++))\n      if ((depth > max_depth)); then\n        max_depth=$depth\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      ((depth--))\n    elif\
    \ [[ \"$char\" == \" \" ]]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local max_paren_count_list=()\n    local i=0\n\
    \    local len=${#str}\n    while [ $i -lt $len ]; do\n        local char=${str:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            paren_count=$((paren_count+1))\n\
    \            if [ $paren_count -gt $max_paren_count ]; then\n                max_paren_count=$paren_count\n\
    \            fi\n        elif [ \"$char\" == \")\" ]; then\n            paren_count=$((paren_count-1))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            max_paren_count_list+=(\"\
    $max_paren_count\")\n            max_paren_count=0\n        fi\n        i=$((i+1))\n\
    \    done\n    max_paren_count_list+=(\"$max_paren_count\")\n    echo ${max_paren_count_list[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local max_nesting_arr=()\n  for parens in \"${parens_arr[@]}\"; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n\
    \      local char=${parens:$i:1}\n      if [[ $char == \"(\" ]]; then\n      \
    \  ((nesting++))\n        if [[ $nesting -gt $max_nesting ]]; then\n         \
    \ max_nesting=$nesting\n        fi\n      elif [[ $char == \")\" ]]; then\n  \
    \      ((nesting--))\n      fi\n    done\n    max_nesting_arr+=(\"$max_nesting\"\
    )\n  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local max_depth=0\n\
    \  local depth=0\n  local parens_array=()\n  local parens_array_index=0\n  local\
    \ parens_array_length=0\n  local parens_array_length_index=0\n  local parens_array_length_index_value=0\n\
    \  local parens_array_length_index_value_length=0\n  local parens_array_length_index_value_length_index=0\n\
    \  local parens_array_length_index_value_length_index_value=0\n  local parens_array_length_index_value_length_index_value_length=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index=0\n \
    \ local parens_array_length_index_value_length_index_value_length_index_value=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value_length=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value_length_index=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length=0\n\
    \  local parens_array_length_index_value_length_index_value_length_index_value_length_index_value_length_index\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#input}\n\
    \    while [ $i -lt $len ]; do\n        local c=${input:$i:1}\n        if [ \"\
    $c\" == \"(\" ]; then\n            level=$((level+1))\n            if [ $level\
    \ -gt $max_level ]; then\n                max_level=$level\n            fi\n \
    \       elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n     \
    \   elif [ \"$c\" == \" \" ]; then\n            output+=(\"\\\"$max_level\\\"\"\
    )\n            max_level=0\n            level=0\n        fi\n        i=$((i+1))\n\
    \    done\n    output+=(\"\\\"$max_level\\\"\")\n    echo \"${output[@]}\"\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        char=\"${input:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            (( depth++ ))\n            if (( depth > max_depth ));\
    \ then\n                max_depth=$depth\n            fi\n        elif [[ \"$char\"\
    \ == \")\" ]]; then\n            (( depth-- ))\n        elif [[ \"$char\" == \"\
    \ \" ]]; then\n            output+=(\"$max_depth\")\n            max_depth=0\n\
    \            depth=0\n        fi\n    done\n    output+=(\"$max_depth\")\n   \
    \ echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local char\n    for ((i=0; i<${#input};\
    \ i++)); do\n        char=\"${input:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            ((level++))\n            if ((level > max_level)); then\n\
    \                max_level=$level\n            fi\n        elif [[ \"$char\" ==\
    \ \")\" ]]; then\n            ((level--))\n        elif [[ \"$char\" == \" \"\
    \ ]]; then\n            output+=(\"$max_level\")\n            max_level=0\n  \
    \          level=0\n        fi\n    done\n    output+=(\"$max_level\")\n    echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_str=\"\
    \"\n    local parens_arr=()\n    local parens_arr_len=0\n    local parens_str_len=0\n\
    \    local max_parens_count=0\n    local parens_count=0\n    local i=0\n    local\
    \ j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n\
    \    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n \
    \   local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n  \
    \  local z=0\n    local aa=0\n    local bb=0\n    local cc=0\n    local dd=0\n\
    \    local ee=0\n    local ff=0\n    local gg=0\n    local hh=0\n    local ii=0\n\
    \    local jj=0\n    local kk=0\n    local ll=0\n    local mm=0\n    local nn=0\n\
    \    local oo=0\n    local pp=0\n    local qq=0\n    local rr=0\n    local ss=0\n\
    \    local tt=0\n    local uu=0\n    local vv=0\n    local ww=0\n    local xx=0\n\
    \    local yy=0\n    local zz=0\n    local aaa=0\n    local bbb=0\n    local ccc=0\n\
    \    local ddd=0\n    local eee=0\n    local fff=0\n    local ggg=0\n    local\
    \ hhh=0\n    local iii=0\n    local jjj=0\n    local kkk=0\n    local lll=0\n\
    \    local mmm=0\n    local nnn=0\n    local ooo=0\n    local ppp=0\n    local\
    \ qqq=0\n    local rrr=0\n    local sss=0\n    local ttt=0\n    local uuu=0\n\
    \    local vvv=0\n    local www=0\n   \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_level=0\n\
    \  local cur_level=0\n  local max_level_arr=()\n  local cur_level_arr=()\n  local\
    \ i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local\
    \ p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local\
    \ v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local\
    \ bb=0\n  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n\
    \  local hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local\
    \ mm=0\n  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n\
    \  local ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local\
    \ xx=0\n  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n\
    \  local ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n \
    \ local iii=0\n  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local\
    \ nnn=0\n  local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n\
    \  local ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n \
    \ local yyy=0\n  local zzz=0\n  local aaaa=0\n  local bbbb=0\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_count=0\n  local parens_max=0\n  local parens_max_arr=()\n  local\
    \ parens_max_count=0\n  local parens_max_count_arr=()\n  local parens_max_count_arr_len=0\n\
    \  local parens_max_count_arr_idx=0\n  local parens_max_count_arr_idx_str=0\n\
    \  local parens_max_count_arr_idx_str_len=0\n  local parens_max_count_arr_idx_str_len_arr=()\n\
    \  local parens_max_count_arr_idx_str_len_arr_len=0\n  local parens_max_count_arr_idx_str_len_arr_idx=0\n\
    \  local parens_max_count_arr_idx_str_len_arr_idx_str=0\n  local parens_max_count_arr_idx_str_len_arr_idx_str_len=0\n\
    \  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr=()\n  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr_len=0\n\
    \  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr_idx=0\n  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr_idx_str=0\n\
    \  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr_idx_str_len=0\n\
    \  local parens_max_count_arr_idx_str_len_arr_idx_str_len_arr_idx_str_len_arr=()\n\
    \  local parens_max_count_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_out=()\n\
    \  local parens_arr_out_idx=0\n  local parens_arr_out_len=0\n  local parens_arr_out_str=\"\
    \"\n  local parens_arr_out_str_len=0\n  local parens_arr_out_str_idx=0\n  local\
    \ parens_arr_out_str_char=\"\"\n  local parens_arr_out_str_char_idx=0\n  local\
    \ parens_arr_out_str_char_len=0\n  local parens_arr_out_str_char_arr=()\n  local\
    \ parens_arr_out_str_char_arr_len=0\n  local parens_arr_out_str_char_arr_idx=0\n\
    \  local parens_arr_out_str_char_arr_char=\"\"\n  local parens_arr_out_str_char_arr_char_idx=0\n\
    \  local parens_arr_out_str_char_arr_char_len=0\n  local parens_arr_out_str_char_arr_char_arr=()\n\
    \  local parens_arr_out_str_char_arr_char_arr_len=0\n  local parens_arr_out_str_char_arr_char_arr_idx=0\n\
    \  local parens_arr_out_str_char_arr_char_arr_char=\"\"\n  local parens_arr_out_str_char_arr_char_arr_char_idx=0\n\
    \  local parens_arr_out_str_char_arr_char_arr_char_len=0\n  local parens_arr_out_str_char_arr_char_arr_char_arr=()\n\
    \  local parens_arr_out_str_char_arr_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  local start_index=0\n  local end_index=0\n  local start_paren_index=0\n  local\
    \ end_paren_index=0\n  local start_paren_count=0\n  local end_paren_count=0\n\
    \  local start_paren_level=0\n  local end_paren_level=0\n  local start_paren_level_index=0\n\
    \  local end_paren_level_index=0\n  local start_paren_level_count=0\n  local end_paren_level_count=0\n\
    \  local start_paren_level_count_index=0\n  local end_paren_level_count_index=0\n\
    \  local start_paren_level_count_index_count=0\n  local end_paren_level_count_index_count=0\n\
    \  local start_paren_level_count_index_count_index=0\n  local end_paren_level_count_index_count_index=0\n\
    \  local start_paren_level_count_index_count_index_count=0\n  local end_paren_level_count_index_count_index_count=0\n\
    \  local start_paren_level_count_index_count_index_count_index=0\n  local end_paren_level_count_index_count_index_count_index=0\n\
    \  local start_paren_level_count_index_count_index_count_index_count=0\n  local\
    \ end_paren_level_count_index_count_index_count_index_count=0\n  local start_paren_level_count_index_count_index_count_index_count_index=0\n\
    \  local end_paren_level_count_index_count_index_count_index_count_index=0\n \
    \ local start_paren_level_count_index_count_index_count_index_count_index_count=0\n\
    \  local end_paren_level_count_index_count_index_count_index_count_index_count=0\n\
    \  local start_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2\
    \ 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local max_nesting_levels=()\n  for parens in \"${parens_arr[@]}\"; do\n   \
    \ local nesting_level=0\n    local max_nesting_level=0\n    for (( i=0; i<${#parens};\
    \ i++ )); do\n      if [[ ${parens:$i:1} == \"(\" ]]; then\n        ((nesting_level++))\n\
    \        if [[ $nesting_level -gt $max_nesting_level ]]; then\n          max_nesting_level=$nesting_level\n\
    \        fi\n      elif [[ ${parens:$i:1} == \")\" ]]; then\n        ((nesting_level--))\n\
    \      fi\n    done\n    max_nesting_levels+=($max_nesting_level)\n  done\n  echo\
    \ ${max_nesting_levels[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input_str=$1\n  local result=()\n\
    \  local max_depth=0\n  local curr_depth=0\n  local curr_char=''\n  local curr_str=''\n\
    \  local i=0\n  local j=0\n  local k=0\n  local len=0\n  local len_str=0\n  local\
    \ len_result=0\n\n  # Split the input string into groups of parentheses\n  IFS='\
    \ ' read -r -a result <<< \"$input_str\"\n  len_result=${#result[@]}\n\n  # For\
    \ each group, find the maximum depth of nesting\n  for ((i=0; i<len_result; i++));\
    \ do\n    curr_str=${result[$i]}\n    len_str=${#curr_str}\n    max_depth=0\n\
    \    curr_depth=0\n    for ((j=0; j<len_str; j++)); do\n      curr_char=${curr_str:$j:1}\n\
    \      if [[ $curr_char == '(' ]]; then\n        ((curr_depth++))\n        if\
    \ [[ $curr_depth -gt $max_depth ]]; then\n          max_depth=$curr_depth\n  \
    \      fi\n      elif [[ $curr_char == ')' ]]; then\n        ((curr_depth--))\n\
    \      fi\n    done\n    result[$i]=$max_depth\n  done\n\n  # Convert the array\
    \ to a string\n  len_result=${#result[@]}\n  for ((k=0; k<len_result; k++)); do\n\
    \    if [[ $k -eq 0 ]]; then\n      result_str=\"\\\"${result[$k]}\\\"\"\n   \
    \ else\n      result_str=\"$result_str, \\\"${result[$k]}\\\"\"\n    fi\n  done\n\
    \  echo \"[$result_str]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_string=$1\n    local\
    \ parens_array=($parens_string)\n    local parens_array_len=${#parens_array[@]}\n\
    \    local parens_array_idx=0\n    local parens_array_idx_max=$((parens_array_len\
    \ - 1))\n    local parens_array_idx_min=0\n    local parens_array_item\n    local\
    \ parens_array_item_len\n    local parens_array_item_idx\n    local parens_array_item_idx_max\n\
    \    local parens_array_item_idx_min=0\n    local parens_array_item_char\n   \
    \ local parens_array_item_char_prev\n    local parens_array_item_char_next\n \
    \   local parens_array_item_char_idx\n    local parens_array_item_char_idx_max\n\
    \    local parens_array_item_char_idx_min=0\n    local parens_array_item_char_idx_prev\n\
    \    local parens_array_item_char_idx_next\n    local parens_array_item_char_idx_prev_max\n\
    \    local parens_array_item_char_idx_next_max\n    local parens_array_item_char_idx_prev_min=0\n\
    \    local parens_array_item_char_idx_next_min=0\n    local parens_array_item_char_idx_prev_max_prev\n\
    \    local parens_array_item_char_idx_next_max_prev\n    local parens_array_item_char_idx_prev_max_next\n\
    \    local parens_array_item_char_idx_next_max_next\n    local parens_array_item_char_idx_prev_max_prev_max\n\
    \    local parens_array_item_char_idx_next_max_prev_max\n    local parens_array_item_char_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c\n  local\
    \ len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"\
    $c\" == \"(\" ]; then\n      current_depth=$((current_depth + 1))\n      if [\
    \ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n  \
    \    fi\n    elif [ \"$c\" == \")\" ]; then\n      current_depth=$((current_depth\
    \ - 1))\n    elif [ \"$c\" == \" \" ]; then\n      output+=(\"$max_depth\")\n\
    \      max_depth=0\n      current_depth=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local i=0\n  local j=0\n  local max_depth=0\n\
    \  local depth=0\n  local parens_depth_arr=()\n  while [ $i -lt $parens_arr_len\
    \ ]; do\n    local parens_str=${parens_arr[$i]}\n    local parens_str_len=${#parens_str}\n\
    \    j=0\n    depth=0\n    max_depth=0\n    while [ $j -lt $parens_str_len ];\
    \ do\n      local char=${parens_str:$j:1}\n      if [ \"$char\" == \"(\" ]; then\n\
    \        ((depth++))\n        if [ $depth -gt $max_depth ]; then\n          max_depth=$depth\n\
    \        fi\n      elif [ \"$char\" == \")\" ]; then\n        ((depth--))\n  \
    \    fi\n      ((j++))\n    done\n    parens_depth_arr+=($max_depth)\n    ((i++))\n\
    \  done\n  echo \"${parens_depth_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_list=()\n\
    \    local parens_list_len=0\n    local parens_list_index=0\n    local parens_list_str=\"\
    \"\n    local parens_list_str_len=0\n    local parens_list_str_index=0\n    local\
    \ parens_list_str_parens_count=0\n    local parens_list_str_parens_count_max=0\n\
    \    local parens_list_str_parens_count_max_str=\"\"\n    local parens_list_str_parens_count_max_str_len=0\n\
    \    local parens_list_str_parens_count_max_str_index=0\n    local parens_list_str_parens_count_max_str_parens_count=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max=0\n    local\
    \ parens_list_str_parens_count_max_str_parens_count_max_str=\"\"\n    local parens_list_str_parens_count_max_str_parens_count_max_str_len=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max_str_index=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max_str=\"\
    \"\n    local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count_max_str_len=0\n\
    \    local parens_list_str_parens_count_max_str_parens_count_max_str_parens_count\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((level++))\n            if\
    \ [ $level -gt $max_level ]; then\n                max_level=$level\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((level--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_level\")\n \
    \           max_level=0\n            level=0\n        fi\n        ((i++))\n  \
    \  done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local paren_count=0\n\
    \  local max_paren_count=0\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" ==\
    \ \"(\" ]; then\n      ((paren_count++))\n      ((max_paren_count=paren_count))\n\
    \    elif [ \"$char\" == \")\" ]; then\n      ((paren_count--))\n    elif [ \"\
    $char\" == \" \" ]; then\n      result+=\"\\\"$max_paren_count\\\" \"\n      max_paren_count=0\n\
    \      paren_count=0\n    fi\n    ((i++))\n  done\n  result+=\"\\\"$max_paren_count\\\
    \"\"\n  echo \"$result\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nested_parens_arr=()\n\
    \  for ((i=0; i<parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n\
    \    local parens_len=${#parens}\n    local max_nested_parens=0\n    local curr_nested_parens=0\n\
    \    for ((j=0; j<parens_len; j++)); do\n      local paren=${parens:$j:1}\n  \
    \    if [[ $paren == \"(\" ]]; then\n        ((curr_nested_parens++))\n      \
    \  if [[ $curr_nested_parens -gt $max_nested_parens ]]; then\n          max_nested_parens=$curr_nested_parens\n\
    \        fi\n      elif [[ $paren == \")\" ]]; then\n        ((curr_nested_parens--))\n\
    \      fi\n    done\n    max_nested_parens_arr+=($max_nested_parens)\n  done\n\
    \  echo ${max_nested_parens_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<parens_arr_len; i++)); do\n    local parens=${parens_arr[$i]}\n    local max_nesting=0\n\
    \    local nesting=0\n    local parens_len=${#parens}\n    for ((j=0; j<parens_len;\
    \ j++)); do\n      local char=${parens:$j:1}\n      if [[ $char == \"(\" ]]; then\n\
    \        ((nesting++))\n        if [[ $nesting -gt $max_nesting ]]; then\n   \
    \       max_nesting=$nesting\n        fi\n      elif [[ $char == \")\" ]]; then\n\
    \        ((nesting--))\n      fi\n    done\n    max_nesting_arr+=($max_nesting)\n\
    \  done\n  echo \"${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local i\n    for ((i=0;\
    \ i<${#input}; i++)); do\n        if [[ \"${input:$i:1}\" == \"(\" ]]; then\n\
    \            ((current_nesting++))\n            if ((current_nesting > max_nesting));\
    \ then\n                max_nesting=$current_nesting\n            fi\n       \
    \ elif [[ \"${input:$i:1}\" == \")\" ]]; then\n            ((current_nesting--))\n\
    \        elif [[ \"${input:$i:1}\" == \" \" ]]; then\n            output+=(\"\
    $max_nesting\")\n            max_nesting=0\n            current_nesting=0\n  \
    \      fi\n    done\n    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  # TODO: Write your code here\n  # Please\
    \ use the echo command to output the answer (e.g. echo 1)\n  echo 1\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item\n\
    \  local parens_arr_item_len\n  local parens_arr_item_idx\n  local parens_arr_item_char\n\
    \  local parens_arr_item_max_depth=0\n  local parens_arr_item_depth=0\n  local\
    \ parens_arr_item_max_depth_arr=()\n  while [ $parens_arr_idx -lt $parens_arr_len\
    \ ]; do\n    parens_arr_item=${parens_arr[$parens_arr_idx]}\n    parens_arr_item_len=${#parens_arr_item}\n\
    \    parens_arr_item_idx=0\n    parens_arr_item_max_depth=0\n    parens_arr_item_depth=0\n\
    \    while [ $parens_arr_item_idx -lt $parens_arr_item_len ]; do\n      parens_arr_item_char=${parens_arr_item:$parens_arr_item_idx:1}\n\
    \      if [ \"$parens_arr_item_char\" == \"(\" ]; then\n        ((parens_arr_item_depth++))\n\
    \        if [ $parens_arr_item_depth -gt $parens_arr_item_max_depth ]; then\n\
    \          parens_arr_item_max_depth=$parens_arr_item_depth\n        fi\n    \
    \  elif [ \"$parens_arr_item_char\" == \")\" ]; then\n        ((parens_arr_item_depth--))\n\
    \      fi\n      ((parens_arr_item_idx++))\n    done\n    parens_arr_item_max_depth_arr+=($parens_arr_item_max_depth)\n\
    \    ((parens_arr_idx++))\n  done\n  echo ${\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptwr65u6j.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local -a parens_array\n\
    \  local -a parens_array_len\n  local -a parens_array_max_nesting\n  local -a\
    \ parens_array_max_nesting_index\n  local -a parens_array_max_nesting_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index\n  local -a parens_array_max_nesting_index_len_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index\n  local -a parens_array_max_nesting_index_len_index_len_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index\n  local\
    \ -a parens_array_max_nesting_index_len_index_len_index_len_index_len\n  local\
    \ -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len_index_len_index_len\n\
    \  local -a parens_array_max_nesting_index_len_index_len_index_len_index_len_index_len_index_len_index_len_index\n\
    \ \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_level=0\n\
    \  local cur_level=0\n  local result=\"\"\n  local i=0\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" ==\
    \ \"(\" ]; then\n      ((cur_level++))\n      if [ $cur_level -gt $max_level ];\
    \ then\n        max_level=$cur_level\n      fi\n    elif [ \"$char\" == \")\"\
    \ ]; then\n      ((cur_level--))\n    fi\n    ((i++))\n  done\n  echo $max_level\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_nesting_level=0\n\
    \  local curr_nesting_level=0\n  local max_nesting_level_list=()\n  local i=0\n\
    \  local len=${#str}\n  while [ $i -lt $len ]; do\n    if [ \"${str:$i:1}\" ==\
    \ \"(\" ]; then\n      ((curr_nesting_level++))\n      ((max_nesting_level=curr_nesting_level>max_nesting_level?curr_nesting_level:max_nesting_level))\n\
    \    elif [ \"${str:$i:1}\" == \")\" ]; then\n      ((curr_nesting_level--))\n\
    \    elif [ \"${str:$i:1}\" == \" \" ]; then\n      max_nesting_level_list+=(\"\
    $max_nesting_level\")\n      max_nesting_level=0\n      curr_nesting_level=0\n\
    \    fi\n    ((i++))\n  done\n  max_nesting_level_list+=(\"$max_nesting_level\"\
    )\n  echo \"${max_nesting_level_list[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        char=${input:$i:1}\n        if [[ \"$char\" == \"(\" ]];\
    \ then\n            (( depth++ ))\n            (( max_depth = depth > max_depth\
    \ ? depth : max_depth ))\n        elif [[ \"$char\" == \")\" ]]; then\n      \
    \      (( depth-- ))\n        elif [[ \"$char\" == \" \" ]]; then\n          \
    \  output+=(\"$max_depth\")\n            max_depth=0\n        fi\n    done\n \
    \   output+=(\"$max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local output=()\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [[ ${str:$i:1} == \"(\" ]]; then\n            ((paren_count++))\n\
    \            ((max_paren_count = paren_count > max_paren_count ? paren_count :\
    \ max_paren_count))\n        elif [[ ${str:$i:1} == \")\" ]]; then\n         \
    \   ((paren_count--))\n        elif [[ ${str:$i:1} == \" \" ]]; then\n       \
    \     output+=(\"\\\"$max_paren_count\\\"\")\n            max_paren_count=0\n\
    \        fi\n    done\n    output+=(\"\\\"$max_paren_count\\\"\")\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_string=\"$1\"\n    local\
    \ parens_array=($parens_string)\n    local parens_array_len=${#parens_array[@]}\n\
    \    local parens_array_idx=0\n    local parens_array_element\n    local parens_array_element_len\n\
    \    local parens_array_element_idx\n    local parens_array_element_char\n   \
    \ local parens_array_element_char_prev\n    local parens_array_element_char_next\n\
    \    local parens_array_element_char_prev_idx\n    local parens_array_element_char_next_idx\n\
    \    local parens_array_element_char_prev_prev\n    local parens_array_element_char_next_next\n\
    \    local parens_array_element_char_prev_prev_idx\n    local parens_array_element_char_next_next_idx\n\
    \    local parens_array_element_char_prev_prev_prev\n    local parens_array_element_char_next_next_next\n\
    \    local parens_array_element_char_prev_prev_prev_idx\n    local parens_array_element_char_next_next_next_idx\n\
    \    local parens_array_element_char_prev_prev_prev_prev\n    local parens_array_element_char_next_next_next_next\n\
    \    local parens_array_element_char_prev_prev_prev_prev_idx\n    local parens_array_element_char_next_next_next_next_idx\n\
    \    local parens_array_element_char_prev_prev_prev_prev_prev\n    local parens_array_element_char_next_next_next_next_next\n\
    \    local parens_array_element_char_prev_prev_prev_prev_prev_idx\n    local parens_array_element_char_next_next_next_next_next_idx\n\
    \    local parens_array_element_char_prev_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_parens_count\n  local parens_arr_val_parens_count_max\n\
    \  local parens_arr_val_parens_count_max_arr=()\n  local parens_arr_val_parens_count_max_arr_len\n\
    \  local parens_arr_val_parens_count_max_arr_idx\n  local parens_arr_val_parens_count_max_arr_val\n\
    \n  while [ $parens_arr_idx -lt $parens_arr_len ]; do\n    parens_arr_val=${parens_arr[$parens_arr_idx]}\n\
    \    parens_arr_val_len=${#parens_arr_val}\n    parens_arr_val_idx=0\n    parens_arr_val_parens_count=0\n\
    \    parens_arr_val_parens_count_max=0\n\n    while [ $parens_arr_val_idx -lt\
    \ $parens_arr_val_len ]; do\n      parens_arr_val_char=${parens_arr_val:$parens_arr_val_idx:1}\n\
    \      if [ \"$parens_arr_val_char\" == \"(\" ]; then\n        ((parens_arr_val_parens_count++))\n\
    \        if [ $parens_arr_val_parens_count -gt $parens_arr_val_parens_count_max\
    \ ]; then\n          parens_arr_val_parens_count_max=$parens_arr_val_parens_count\n\
    \        fi\n      elif [ \"$parens_arr_val_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaz5mugvn.sh: line 50: unexpected EOF while looking for matching
    `"''

    /tmp/tmpaz5mugvn.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local curr_depth=0\n  local curr_char=''\n  local curr_group=''\n\
    \  local curr_group_max_depth=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ len=0\n  local len2=0\n  local len3=0\n\n  # Split the input string into groups\
    \ separated by spaces.\n  IFS=' ' read -r -a groups <<< \"$input\"\n  len=${#groups[@]}\n\
    \n  # For each group, find the maximum depth of nested parentheses.\n  for ((i=0;\
    \ i<len; i++)); do\n    curr_group=${groups[$i]}\n    len2=${#curr_group}\n  \
    \  curr_group_max_depth=0\n    curr_depth=0\n    for ((j=0; j<len2; j++)); do\n\
    \      curr_char=${curr_group:$j:1}\n      if [[ $curr_char == '(' ]]; then\n\
    \        ((curr_depth++))\n        if [[ $curr_depth -gt $curr_group_max_depth\
    \ ]]; then\n          curr_group_max_depth=$curr_depth\n        fi\n      elif\
    \ [[ $curr_char == ')' ]]; then\n        ((curr_depth--))\n      fi\n    done\n\
    \    output+=(\"$curr_group_max_depth\")\n  done\n\n  # Output the maximum depth\
    \ of nested parentheses for each group.\n  len3=${#output[@]}\n  for ((k=0; k<len3;\
    \ k++)); do\n    echo -n \"\\\"${output[$k]}\\\"\"\n    if [[ $k -lt $((len3-1))\
    \ ]]; then\n      echo -n ' '\n    fi\n  done\n  echo\n}\n\ncandidate() {\n  \
    \  parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    # TODO: implement this function\n\
    \    echo \"Not implemented\"\n}\n\ncandidate() {\n    parse_nested_parens \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local max_levels_array=()\n \
    \ local max_levels=0\n  local curr_levels=0\n  local i=0\n  local j=0\n  local\
    \ k=0\n  local curr_parens_string=''\n  local curr_parens_string_len=0\n  local\
    \ curr_parens_char=''\n  local curr_parens_char_ascii=0\n  local curr_parens_char_ascii_open=40\n\
    \  local curr_parens_char_ascii_close=41\n  local curr_parens_char_ascii_space=32\n\
    \  local curr_parens_char_ascii_newline=10\n  local curr_parens_char_ascii_tab=9\n\
    \  local curr_parens_char_ascii_carriage_return=13\n  local curr_parens_char_ascii_backspace=8\n\
    \  local curr_parens_char_ascii_form_feed=12\n  local curr_parens_char_ascii_vertical_tab=11\n\
    \  local curr_parens_char_ascii_null=0\n  local curr_parens_char_ascii_double_quote=34\n\
    \  local curr_parens_char_ascii_single_quote=39\n  local curr_parens_char_ascii_backslash=92\n\
    \  local curr_parens_char_ascii_open_square_bracket=91\n  local curr_parens_char_ascii_close_square_bracket=93\n\
    \  local curr_parens_char_ascii_open_curly_bracket=123\n  local curr_parens_char_ascii_close_curly_bracket=125\n\
    \  local curr_parens_char_ascii_open_angle_bracket=60\n\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local arr=()\n  local\
    \ max_level=0\n  local level=0\n  local i=0\n  local len=${#str}\n  local char=''\n\
    \  local result=''\n\n  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    if\
    \ [ \"$char\" == \"(\" ]; then\n      (( level++ ))\n      if [ $level -gt $max_level\
    \ ]; then\n        max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ];\
    \ then\n      (( level-- ))\n    elif [ \"$char\" == \" \" ]; then\n      arr+=($max_level)\n\
    \      max_level=0\n      level=0\n    fi\n    (( i++ ))\n  done\n  arr+=($max_level)\n\
    \n  result=$(printf '\"%s\" ' \"${arr[@]}\")\n  echo \"[${result% }]\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local max_nesting_arr=()\n  for parens in \"${parens_arr[@]}\"; do\n    local\
    \ max_nesting=0\n    local nesting=0\n    for ((i=0; i<${#parens}; i++)); do\n\
    \      if [[ \"${parens:$i:1}\" == \"(\" ]]; then\n        ((nesting++))\n   \
    \     if ((nesting > max_nesting)); then\n          max_nesting=$nesting\n   \
    \     fi\n      elif [[ \"${parens:$i:1}\" == \")\" ]]; then\n        ((nesting--))\n\
    \      fi\n    done\n    max_nesting_arr+=(\"$max_nesting\")\n  done\n  echo \"\
    ${max_nesting_arr[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_depth=0\n\
    \    local curr_depth=0\n    local paren_count=0\n    local paren_str=\"\"\n \
    \   local paren_str_arr=()\n    local paren_depth_arr=()\n    local paren_depth_str=\"\
    \"\n    local paren_depth_str_arr=()\n    local paren_depth_str_arr_len=0\n  \
    \  local i=0\n    local j=0\n    local k=0\n    local c=''\n    local paren_str_arr_len=0\n\
    \    local paren_depth_arr_len=0\n    local paren_depth_str_arr_len=0\n    local\
    \ paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n\
    \    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n  \
    \  local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local\
    \ paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n\
    \    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n  \
    \  local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local\
    \ paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n\
    \    local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n  \
    \  local paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n    local\
    \ paren_depth_str_arr_len=0\n    local paren_depth_str_arr_len=0\n   \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local result=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local len=${#input}\n\
    \    local char\n    local group\n    local group_start=0\n    local group_end=0\n\
    \    local group_len=0\n    local group_depth=0\n    local group_depth_max=0\n\
    \    local group_depth_min=0\n    local group_depth_min_index=0\n    local group_depth_max_index=0\n\
    \    local group_depth_min_char=0\n    local group_depth_max_char=0\n    local\
    \ group_depth_min_char_index=0\n    local group_depth_max_char_index=0\n    local\
    \ group_depth_min_char_index_end=0\n    local group_depth_max_char_index_end=0\n\
    \    local group_depth_min_char_index_start=0\n    local group_depth_max_char_index_start=0\n\
    \    local group_depth_min_char_index_start_end=0\n    local group_depth_max_char_index_start_end=0\n\
    \    local group_depth_min_char_index_start_end_len=0\n    local group_depth_max_char_index_start_end_len=0\n\
    \    local group_depth_min_char_index_start_end_len_max=0\n    local group_depth_max_char_index_start_end_len_max=0\n\
    \    local group_depth_min_char_index_start_end_len_max_index=0\n    local group_depth_max_char_index_start_end_len_max_index=0\n\
    \    local group_depth_min_char_index_start_end_len_max_index_start=0\n    local\
    \ group_depth_max_char_index_start_end_len_max_index_start=0\n    local group_depth_min_char_index_start_end_len_max_index_start_end=0\n\
    \    local group_depth_max_char_index_start_end_len_max_index_\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_length=${#parens_array[@]}\n  local parens_array_index=0\n\
    \  local parens_array_element\n  local parens_array_element_length\n  local parens_array_element_index=0\n\
    \  local parens_array_element_char\n  local parens_array_element_char_index=0\n\
    \  local parens_array_element_char_stack=()\n  local parens_array_element_char_stack_length=0\n\
    \  local parens_array_element_char_stack_index=0\n  local parens_array_element_char_stack_char\n\
    \  local parens_array_element_char_stack_char_index=0\n  local parens_array_element_char_stack_char_stack=()\n\
    \  local parens_array_element_char_stack_char_stack_length=0\n  local parens_array_element_char_stack_char_stack_index=0\n\
    \  local parens_array_element_char_stack_char_stack_char\n  local parens_array_element_char_stack_char_stack_char_index=0\n\
    \  local parens_array_element_char_stack_char_stack_char_stack=()\n  local parens_array_element_char_stack_char_stack_char_stack_length=0\n\
    \  local parens_array_element_char_stack_char_stack_char_stack_index=0\n  local\
    \ parens_array_element_char_stack_char_stack_char_stack_char\n  local parens_array_element_char_stack_char_stack_char_stack_char_index=0\n\
    \  local parens_array_element_char_stack_char_stack_char_stack_char_stack=()\n\
    \  local parens_array_element_char_stack_char_stack_char_stack_char_stack_length=0\n\
    \  local parens_array_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_val=\n    local parens_arr_val_len=\n    local parens_arr_val_idx=\n\
    \    local parens_arr_val_char=\n    local parens_arr_val_char_prev=\n    local\
    \ parens_arr_val_char_next=\n    local parens_arr_val_char_prev_idx=\n    local\
    \ parens_arr_val_char_next_idx=\n    local parens_arr_val_char_prev_char=\n  \
    \  local parens_arr_val_char_next_char=\n    local parens_arr_val_char_prev_char_idx=\n\
    \    local parens_arr_val_char_next_char_idx=\n    local parens_arr_val_char_prev_char_prev=\n\
    \    local parens_arr_val_char_next_char_next=\n    local parens_arr_val_char_prev_char_prev_idx=\n\
    \    local parens_arr_val_char_next_char_next_idx=\n    local parens_arr_val_char_prev_char_prev_char=\n\
    \    local parens_arr_val_char_next_char_next_char=\n    local parens_arr_val_char_prev_char_prev_char_idx=\n\
    \    local parens_arr_val_char_next_char_next_char_idx=\n    local parens_arr_val_char_prev_char_prev_char_prev=\n\
    \    local parens_arr_val_char_next_char_next_char_next=\n    local parens_arr_val_char_prev_char_prev_char_prev_idx=\n\
    \    local parens_arr_val_char_next_char_next_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_len_rem=0\n\
    \  local parens_str_len_rem_prev=0\n  local parens_str_len_rem_curr=0\n  local\
    \ parens_str_len_rem_next=0\n  local parens_str_len_rem_next_next=0\n  local parens_str_len_rem_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next=0\n  local parens_str_len_rem_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next=0\n  local parens_str_len_rem_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next_next_next=0\n  local\
    \ parens_str_len_rem_next_next_next_next_next_next_next_next_next=0\n  local parens_str_len_rem_next_next_next_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_next_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \  local parens_str_len_rem_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#input}\n  while\
    \ [ $i -lt $len ]; do\n    local c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      level=$((level+1))\n      if [ $level -gt $max_level ]; then\n \
    \       max_level=$level\n      fi\n    elif [ \"$c\" == \")\" ]; then\n     \
    \ level=$((level-1))\n    elif [ \"$c\" == \" \" ]; then\n      result+=(\"\\\"\
    $max_level\\\"\")\n      max_level=0\n      level=0\n    fi\n    i=$((i+1))\n\
    \  done\n  result+=(\"\\\"$max_level\\\"\")\n  echo ${result[@]}\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local result=\"\
    \"\n    local max_nesting_level=0\n    local nesting_level=0\n    local i=0\n\
    \    local len=${#str}\n    local c=\"\"\n    local is_in_parens=false\n    local\
    \ is_in_quotes=false\n    local is_escaped=false\n    local is_in_parens_group=false\n\
    \    local is_in_quotes_group=false\n    local is_escaped_group=false\n    local\
    \ is_in_parens_group_group=false\n    local is_in_quotes_group_group=false\n \
    \   local is_escaped_group_group=false\n    local is_in_parens_group_group_group=false\n\
    \    local is_in_quotes_group_group_group=false\n    local is_escaped_group_group_group=false\n\
    \    local is_in_parens_group_group_group_group=false\n    local is_in_quotes_group_group_group_group=false\n\
    \    local is_escaped_group_group_group_group=false\n    local is_in_parens_group_group_group_group_group=false\n\
    \    local is_in_quotes_group_group_group_group_group=false\n    local is_escaped_group_group_group_group_group=false\n\
    \    local is_in_parens_group_group_group_group_group_group=false\n    local is_in_quotes_group_group_group_group_group_group=false\n\
    \    local is_escaped_group_group_group_group_group_group=false\n    local is_in_parens_group_group_group_group_group_group_group=false\n\
    \    local is_in_quotes_group_group_group_group_group_group_group=false\n    local\
    \ is_escaped_group_group_group_group_group_group_group=false\n    local is_in_parens_group_group_group_group_group_group_group_group=false\n\
    \    local is_in_quotes_group_group_group_group\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local paren_depth=0\n\
    \    local max_depth=0\n    local max_depth_list=()\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [[ \"${str:$i:1}\" == \"(\" ]]; then\n            ((\
    \ paren_depth++ ))\n            if (( paren_depth > max_depth )); then\n     \
    \           max_depth=$paren_depth\n            fi\n        elif [[ \"${str:$i:1}\"\
    \ == \")\" ]]; then\n            (( paren_depth-- ))\n            if (( paren_depth\
    \ == 0 )); then\n                max_depth_list+=(\"$max_depth\")\n          \
    \      max_depth=0\n            fi\n        fi\n    done\n    echo \"${max_depth_list[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local max_depth=0\n\
    \  local curr_depth=0\n  local max_depth_groups=()\n  local curr_group=\"\"\n\
    \  local curr_char=\"\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n\
    \  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n\
    \  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n\
    \  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n  local cc=0\n  local dd=0\n\
    \  local ee=0\n  local ff=0\n  local gg=0\n  local hh=0\n  local ii=0\n  local\
    \ jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n  local nn=0\n  local oo=0\n\
    \  local pp=0\n  local qq=0\n  local rr=0\n  local ss=0\n  local tt=0\n  local\
    \ uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n  local yy=0\n  local zz=0\n\
    \  local aaa=0\n  local bbb=0\n  local ccc=0\n  local ddd=0\n  local eee=0\n \
    \ local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n  local jjj=0\n  local\
    \ kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n  local ooo=0\n  local ppp=0\n\
    \  local qqq=0\n  local rrr=0\n  local sss=0\n  local ttt=0\n  local uuu=0\n \
    \ local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n  local zzz=0\n}\n\
    \ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input_string=$1\n  local output_array=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local i=0\n  local j=0\n\
    \  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n\
    \  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n\
    \  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local aa=0\n  local bb=0\n\
    \  local cc=0\n  local dd=0\n  local ee=0\n  local ff=0\n  local gg=0\n  local\
    \ hh=0\n  local ii=0\n  local jj=0\n  local kk=0\n  local ll=0\n  local mm=0\n\
    \  local nn=0\n  local oo=0\n  local pp=0\n  local qq=0\n  local rr=0\n  local\
    \ ss=0\n  local tt=0\n  local uu=0\n  local vv=0\n  local ww=0\n  local xx=0\n\
    \  local yy=0\n  local zz=0\n  local aaa=0\n  local bbb=0\n  local ccc=0\n  local\
    \ ddd=0\n  local eee=0\n  local fff=0\n  local ggg=0\n  local hhh=0\n  local iii=0\n\
    \  local jjj=0\n  local kkk=0\n  local lll=0\n  local mmm=0\n  local nnn=0\n \
    \ local ooo=0\n  local ppp=0\n  local qqq=0\n  local rrr=0\n  local sss=0\n  local\
    \ ttt=0\n  local uuu=0\n  local vvv=0\n  local www=0\n  local xxx=0\n  local yyy=0\n\
    \  local zzz=0\n  local aaaa=0\n  local bbbb=0\n \n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    echo $1 | tr \" \" \"\\n\" | awk '{\n\
    \        max_level = 0;\n        level = 0;\n        for (i = 1; i <= length($0);\
    \ i++) {\n            if (substr($0, i, 1) == \"(\") {\n                level++;\n\
    \                if (level > max_level) {\n                    max_level = level;\n\
    \                }\n            } else if (substr($0, i, 1) == \")\") {\n    \
    \            level--;\n            }\n        }\n        print max_level;\n  \
    \  }'\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a parens_array\n  local -a parens_nested_array\n\
    \  local parens_string\n  local parens_nested_string\n  local parens_nested_max\n\
    \  local parens_nested_max_index\n  local parens_nested_max_string\n  local parens_nested_max_string_index\n\
    \  local parens_nested_max_string_index_end\n  local parens_nested_max_string_index_start\n\
    \  local parens_nested_max_string_length\n  local parens_nested_max_string_length_end\n\
    \  local parens_nested_max_string_length_start\n  local parens_nested_max_string_length_temp\n\
    \  local parens_nested_max_string_temp\n  local parens_nested_max_temp\n  local\
    \ parens_nested_max_temp_index\n  local parens_nested_max_temp_string\n  local\
    \ parens_nested_max_temp_string_index\n  local parens_nested_max_temp_string_index_end\n\
    \  local parens_nested_max_temp_string_index_start\n  local parens_nested_max_temp_string_length\n\
    \  local parens_nested_max_temp_string_length_end\n  local parens_nested_max_temp_string_length_start\n\
    \  local parens_nested_max_temp_string_length_temp\n  local parens_nested_max_temp_string_temp\n\
    \  local parens_nested_max_temp_temp\n  local parens_nested_max_temp_temp_index\n\
    \  local parens_nested_max_temp_temp_string\n  local parens_nested_max_temp_temp_string_index\n\
    \  local parens_nested_max_temp_temp_string_index_end\n  local parens_nested_max_temp_temp_string_index_start\n\
    \  local p\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_string=$1\n  local parens_array=($parens_string)\n\
    \  local parens_array_len=${#parens_array[@]}\n  local parens_array_index=0\n\
    \  local parens_array_item\n  local parens_array_item_len\n  local parens_array_item_index=0\n\
    \  local parens_array_item_char\n  local parens_array_item_char_prev\n  local\
    \ parens_array_item_char_next\n  local parens_array_item_char_prev_count=0\n \
    \ local parens_array_item_char_next_count=0\n  local parens_array_item_char_prev_count_max=0\n\
    \  local parens_array_item_char_next_count_max=0\n  local parens_array_item_char_prev_count_max_prev=0\n\
    \  local parens_array_item_char_next_count_max_prev=0\n  local parens_array_item_char_prev_count_max_next=0\n\
    \  local parens_array_item_char_next_count_max_next=0\n  local parens_array_item_char_prev_count_max_prev_prev=0\n\
    \  local parens_array_item_char_next_count_max_prev_prev=0\n  local parens_array_item_char_prev_count_max_next_next=0\n\
    \  local parens_array_item_char_next_count_max_next_next=0\n  local parens_array_item_char_prev_count_max_prev_prev_prev=0\n\
    \  local parens_array_item_char_next_count_max_prev_prev_prev=0\n  local parens_array_item_char_prev_count_max_next_next_next=0\n\
    \  local parens_array_item_char_next_count_max_next_next_next=0\n  local parens_array_item_char_prev_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local result=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#str}\n\
    \    local c\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n        if\
    \ [ \"$c\" == \"(\" ]; then\n            level=$((level+1))\n            if [\
    \ $level -gt $max_level ]; then\n                max_level=$level\n          \
    \  fi\n        elif [ \"$c\" == \")\" ]; then\n            level=$((level-1))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            result+=(\"$max_level\")\n\
    \            max_level=0\n            level=0\n        fi\n        i=$((i+1))\n\
    \    done\n    result+=(\"$max_level\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((level++))\n            if\
    \ [ $level -gt $max_level ]; then\n                max_level=$level\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((level--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_level\")\n \
    \           max_level=0\n            level=0\n        fi\n        ((i++))\n  \
    \  done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local max_nesting=0\n\
    \    local curr_nesting=0\n    local max_nesting_str=\"\"\n    local curr_nesting_str=\"\
    \"\n    local max_nesting_strs=()\n    local curr_nesting_strs=()\n    local max_nesting_strs_idx=0\n\
    \    local curr_nesting_strs_idx=0\n    local parens_len=${#parens}\n    local\
    \ i=0\n    local c=\"\"\n    local parens_strs=()\n    local parens_strs_idx=0\n\
    \    local parens_strs_len=0\n    local parens_strs_len_idx=0\n    local parens_strs_len_idx_str=\"\
    \"\n    local parens_strs_len_idx_strs=()\n    local parens_strs_len_idx_strs_idx=0\n\
    \    local parens_strs_len_idx_strs_len=0\n    local parens_strs_len_idx_strs_len_idx=0\n\
    \    local parens_strs_len_idx_strs_len_idx_str=\"\"\n    local parens_strs_len_idx_strs_len_idx_strs=()\n\
    \    local parens_strs_len_idx_strs_len_idx_strs_idx=0\n    local parens_strs_len_idx_strs_len_idx_strs_len=0\n\
    \    local parens_strs_len_idx_strs_len_idx_strs_len_idx=0\n    local parens_strs_len_idx_strs_len_idx_strs_len_idx_str=\"\
    \"\n    local parens_strs_len_idx_strs_len_idx_strs_len_idx_strs=()\n    local\
    \ parens_strs_len_idx_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  local\
    \ max_nesting=0\n  local i=0\n  local j=0\n  local parens_str_len=0\n  local cur_nesting=0\n\
    \  local cur_parens_str=\"\"\n  local cur_parens_str_len=0\n  local cur_parens_str_char=\"\
    \"\n  local cur_parens_str_char_code=0\n  local cur_parens_str_char_code_open=40\n\
    \  local cur_parens_str_char_code_close=41\n  local cur_parens_str_char_code_space=32\n\
    \  local cur_parens_str_char_code_tab=9\n  local cur_parens_str_char_code_newline=10\n\
    \  local cur_parens_str_char_code_carriage_return=13\n  local cur_parens_str_char_code_form_feed=12\n\
    \  local cur_parens_str_char_code_vertical_tab=11\n  local cur_parens_str_char_code_backspace=8\n\
    \  local cur_parens_str_char_code_null=0\n  local cur_parens_str_char_code_open_arr=()\n\
    \  local cur_parens_str_char_code_close_arr=()\n  local cur_parens_str_char_code_open_arr_len=0\n\
    \  local cur_parens_str_char_code_close_arr_len=0\n  local cur_parens_str_char_code_open_arr_last_index=0\n\
    \  local cur_parens_str_char_code_close_arr_last_index=0\n  local cur_parens_str_char_code_open_arr_last_index_plus_one=0\n\
    \  local cur_parens_str_char_code_close_arr_last_index_plus_one=0\n \n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_val\n\
    \  local parens_arr_val_len\n  local parens_arr_val_idx\n  local parens_arr_val_char\n\
    \  local parens_arr_val_char_prev\n  local parens_arr_val_char_next\n  local parens_arr_val_char_prev_parens_count\n\
    \  local parens_arr_val_char_next_parens_count\n  local parens_arr_val_char_prev_parens_count_max\n\
    \  local parens_arr_val_char_next_parens_count_max\n  local parens_arr_val_char_prev_parens_count_max_str\n\
    \  local parens_arr_val_char_next_parens_count_max_str\n  local parens_arr_val_char_prev_parens_count_max_str_arr\n\
    \  local parens_arr_val_char_next_parens_count_max_str_arr\n  local parens_arr_val_char_prev_parens_count_max_str_arr_len\n\
    \  local parens_arr_val_char_next_parens_count_max_str_arr_len\n  local parens_arr_val_char_prev_parens_count_max_str_arr_idx\n\
    \  local parens_arr_val_char_next_parens_count_max_str_arr_idx\n  local parens_arr_val_char_prev_parens_count_max_str_arr_val\n\
    \  local parens_arr_val_char_next_parens_count_max_str_arr_val\n  local parens_arr_val_char_prev_parens_count_max_str_arr_val_len\n\
    \  local parens_arr\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"\
    2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        local char=${input:$i:1}\n        if [[ \"$char\" == \"\
    (\" ]]; then\n            ((current_nesting++))\n            if ((current_nesting\
    \ > max_nesting)); then\n                max_nesting=$current_nesting\n      \
    \      fi\n        elif [[ \"$char\" == \")\" ]]; then\n            ((current_nesting--))\n\
    \        elif [[ \"$char\" == \" \" ]]; then\n            output+=(\"$max_nesting\"\
    )\n            max_nesting=0\n            current_nesting=0\n        fi\n    done\n\
    \    output+=(\"$max_nesting\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local current_depth=0\n    local current_char\n  \
    \  local i\n    for ((i=0; i<${#input}; i++)); do\n        current_char=${input:$i:1}\n\
    \        if [[ $current_char == \"(\" ]]; then\n            ((current_depth++))\n\
    \            if ((current_depth > max_depth)); then\n                max_depth=$current_depth\n\
    \            fi\n        elif [[ $current_char == \")\" ]]; then\n           \
    \ ((current_depth--))\n        elif [[ $current_char == \" \" ]]; then\n     \
    \       output+=($max_depth)\n            max_depth=0\n            current_depth=0\n\
    \        fi\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a paren_stack\n    local -a\
    \ output\n    local -i paren_count=0\n    local -i max_paren_count=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i k=0\n    local -i l=0\n    local -i m=0\n\
    \    local -i n=0\n    local -i o=0\n    local -i p=0\n    local -i q=0\n    local\
    \ -i r=0\n    local -i s=0\n    local -i t=0\n    local -i u=0\n    local -i v=0\n\
    \    local -i w=0\n    local -i x=0\n    local -i y=0\n    local -i z=0\n    local\
    \ -i A=0\n    local -i B=0\n    local -i C=0\n    local -i D=0\n    local -i E=0\n\
    \    local -i F=0\n    local -i G=0\n    local -i H=0\n    local -i I=0\n    local\
    \ -i J=0\n    local -i K=0\n    local -i L=0\n    local -i M=0\n    local -i N=0\n\
    \    local -i O=0\n    local -i P=0\n    local -i Q=0\n    local -i R=0\n    local\
    \ -i S=0\n    local -i T=0\n    local -i U=0\n    local -i V=0\n    local -i W=0\n\
    \    local -i X=0\n    local -i Y=0\n    local -i Z=0\n    local -i a=0\n    local\
    \ -i b=0\n    local -i c=0\n    local -i d=0\n    local -i e=0\n    local -i f=0\n\
    \    local -i g=0\n    local -i h=0\n    local -i ii=0\n    local -i jj=0\n  \
    \  local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i nn=0\n  \
    \  local -i oo\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local arr=()\n \
    \   local max_level=0\n    local level=0\n    local i=0\n    local len=${#str}\n\
    \    local c=''\n    local output=''\n\n    while [ $i -lt $len ]; do\n      \
    \  c=${str:$i:1}\n        if [ \"$c\" == \"(\" ]; then\n            ((level++))\n\
    \            if [ $level -gt $max_level ]; then\n                max_level=$level\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            ((level--))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            arr+=(\"$max_level\")\n \
    \           max_level=0\n            level=0\n        fi\n        ((i++))\n  \
    \  done\n    arr+=(\"$max_level\")\n\n    for i in \"${arr[@]}\"; do\n       \
    \ output+=\"\\\"$i\\\" \"\n    done\n    echo \"[$output]\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_item=\"\
    \"\n  local parens_arr_item_len=0\n  local parens_arr_item_idx=0\n  local parens_arr_item_char=\"\
    \"\n  local parens_arr_item_char_idx=0\n  local parens_arr_item_char_len=0\n \
    \ local parens_arr_item_char_arr=()\n  local parens_arr_item_char_arr_len=0\n\
    \  local parens_arr_item_char_arr_idx=0\n  local parens_arr_item_char_arr_item=\"\
    \"\n  local parens_arr_item_char_arr_item_len=0\n  local parens_arr_item_char_arr_item_idx=0\n\
    \  local parens_arr_item_char_arr_item_char=\"\"\n  local parens_arr_item_char_arr_item_char_idx=0\n\
    \  local parens_arr_item_char_arr_item_char_len=0\n  local parens_arr_item_char_arr_item_char_arr=()\n\
    \  local parens_arr_item_char_arr_item_char_arr_len=0\n  local parens_arr_item_char_arr_item_char_arr_idx=0\n\
    \  local parens_arr_item_char_arr_item_char_arr_item=\"\"\n  local parens_arr_item_char_arr_item_char_arr_item_len=0\n\
    \  local parens_arr_item_char_arr_item_char_arr_item_idx=0\n  local parens_arr_item_char_arr_item_char_arr_item_char=\"\
    \"\n  local parens_arr_item_char_arr_item_char_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_nesting=0\n\
    \  local curr_nesting=0\n  local result=()\n  for (( i=0; i<${#str}; i++ )); do\n\
    \    local char=${str:$i:1}\n    if [[ \"$char\" == \"(\" ]]; then\n      (( curr_nesting++\
    \ ))\n      if (( curr_nesting > max_nesting )); then\n        max_nesting=$curr_nesting\n\
    \      fi\n    elif [[ \"$char\" == \")\" ]]; then\n      (( curr_nesting-- ))\n\
    \    elif [[ \"$char\" == \" \" ]]; then\n      result+=(\"$max_nesting\")\n \
    \     max_nesting=0\n      curr_nesting=0\n    fi\n  done\n  result+=(\"$max_nesting\"\
    )\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=\"$1\"\n    local\
    \ parens_arr=()\n    local max_nesting_level=0\n    local max_nesting_level_str=0\n\
    \    local parens_str_len=0\n    local i=0\n    local j=0\n    local k=0\n   \
    \ local parens_str_len_minus_one=0\n    local parens_str_len_minus_two=0\n   \
    \ local parens_str_len_minus_three=0\n    local parens_str_len_minus_four=0\n\
    \    local parens_str_len_minus_five=0\n    local parens_str_len_minus_six=0\n\
    \    local parens_str_len_minus_seven=0\n    local parens_str_len_minus_eight=0\n\
    \    local parens_str_len_minus_nine=0\n    local parens_str_len_minus_ten=0\n\
    \    local parens_str_len_minus_eleven=0\n    local parens_str_len_minus_twelve=0\n\
    \    local parens_str_len_minus_thirteen=0\n    local parens_str_len_minus_fourteen=0\n\
    \    local parens_str_len_minus_fifteen=0\n    local parens_str_len_minus_sixteen=0\n\
    \    local parens_str_len_minus_seventeen=0\n    local parens_str_len_minus_eighteen=0\n\
    \    local parens_str_len_minus_nineteen=0\n    local parens_str_len_minus_twenty=0\n\
    \    local parens_str_len_minus_twenty_one=0\n    local parens_str_len_minus_twenty_two=0\n\
    \    local parens_str_len_minus_twenty_three=0\n    local parens_str_len_minus_twenty_four=0\n\
    \    local parens_str_len_minus_twenty_five=0\n    local parens_str_len\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local char\n    local i\n    for\
    \ ((i=0; i<${#input}; i++)); do\n        char=${input:$i:1}\n        if [[ $char\
    \ == \"(\" ]]; then\n            ((level++))\n            if ((level > max_level));\
    \ then\n                max_level=$level\n            fi\n        elif [[ $char\
    \ == \")\" ]]; then\n            ((level--))\n        elif [[ $char == \" \" ]];\
    \ then\n            output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n\
    \            level=0\n        fi\n    done\n    output+=(\"\\\"$max_level\\\"\"\
    )\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local char=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    char=${input:$i:1}\n    if [ \"$char\" == \"\
    (\" ]; then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n   \
    \     max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ]; then\n    \
    \  ((level--))\n    elif [ \"$char\" == \" \" ]; then\n      output+=($max_level)\n\
    \      max_level=0\n      level=0\n    fi\n    ((i++))\n  done\n  output+=($max_level)\n\
    \  echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a parens_arr\n    local -a\
    \ parens_arr_len\n    local -a parens_arr_max_len\n    local -a parens_arr_max_len_index\n\
    \    local -a parens_arr_max_len_index_arr\n    local -a parens_arr_max_len_index_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr\n    local -a parens_arr_max_len_index_arr_len_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr\n    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr\n    local\
    \ -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len\n    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr_len_arr\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len_arr_len\n\
    \    local -a parens_arr_max_len_index_arr_len_arr_len_arr\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  for (( i=0; i<${#parens}; i++ )); do\n\
    \    if [[ ${parens:$i:1} == \"(\" ]]; then\n      (( level++ ))\n      if ((\
    \ level > max_level )); then\n        max_level=$level\n      fi\n    elif [[\
    \ ${parens:$i:1} == \")\" ]]; then\n      (( level-- ))\n    elif [[ ${parens:$i:1}\
    \ == \" \" ]]; then\n      result+=(\"\\\"$max_level\\\"\")\n      max_level=0\n\
    \      level=0\n    fi\n  done\n  result+=(\"\\\"$max_level\\\"\")\n  echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_list=($parens_str)\n\
    \    local parens_list_len=${#parens_list[@]}\n    local parens_list_idx=0\n \
    \   local parens_list_item\n    local parens_list_item_len\n    local parens_list_item_idx\n\
    \    local parens_list_item_char\n    local parens_list_item_char_prev\n    local\
    \ parens_list_item_char_next\n    local parens_list_item_char_prev_idx\n    local\
    \ parens_list_item_char_next_idx\n    local parens_list_item_char_prev_char\n\
    \    local parens_list_item_char_next_char\n    local parens_list_item_char_prev_char_prev\n\
    \    local parens_list_item_char_next_char_next\n    local parens_list_item_char_prev_char_prev_idx\n\
    \    local parens_list_item_char_next_char_next_idx\n    local parens_list_item_char_prev_char_prev_char\n\
    \    local parens_list_item_char_next_char_next_char\n    local parens_list_item_char_prev_char_prev_char_prev\n\
    \    local parens_list_item_char_next_char_next_char_next\n    local parens_list_item_char_prev_char_prev_char_prev_idx\n\
    \    local parens_list_item_char_next_char_next_char_next_idx\n    local parens_list_item_char_prev_char_prev_char_prev_char\n\
    \    local parens_list_item_char_next_char_next_char_next_char\n    local parens_list_item_char_prev_char_prev_char_prev_char_prev\n\
    \    local parens_list_item_char_next_char_next_char_next_char_next\n\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            let level++\n            if\
    \ [ $level -gt $max_level ]; then\n                max_level=$level\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            let level--\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=($max_level)\n     \
    \       max_level=0\n            level=0\n        fi\n        let i++\n    done\n\
    \    output+=($max_level)\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        char=${input:$i:1}\n        if [[ $char == \"(\" ]]; then\n\
    \            (( depth++ ))\n            if (( depth > max_depth )); then\n   \
    \             max_depth=$depth\n            fi\n        elif [[ $char == \")\"\
    \ ]]; then\n            (( depth-- ))\n        elif [[ $char == \" \" ]]; then\n\
    \            output+=($max_depth)\n            max_depth=0\n            depth=0\n\
    \        fi\n    done\n    output+=($max_depth)\n    echo ${output[@]}\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local -a parens_array\n    local parens_string=\"\
    $1\"\n    local parens_string_len=${#parens_string}\n    local parens_string_idx=0\n\
    \    local parens_string_char\n    local parens_level=0\n    local parens_level_max=0\n\
    \    local parens_level_max_str\n\n    while [ $parens_string_idx -lt $parens_string_len\
    \ ]; do\n        parens_string_char=${parens_string:$parens_string_idx:1}\n  \
    \      if [ \"$parens_string_char\" == \"(\" ]; then\n            parens_level=$((parens_level\
    \ + 1))\n            if [ $parens_level -gt $parens_level_max ]; then\n      \
    \          parens_level_max=$parens_level\n            fi\n        elif [ \"$parens_string_char\"\
    \ == \")\" ]; then\n            parens_level=$((parens_level - 1))\n        elif\
    \ [ \"$parens_string_char\" == \" \" ]; then\n            parens_level_max_str=\"\
    $parens_level_max\"\n            parens_array+=($parens_level_max_str)\n     \
    \       parens_level_max=0\n        fi\n        parens_string_idx=$((parens_string_idx\
    \ + 1))\n    done\n    parens_level_max_str=\"$parens_level_max\"\n    parens_array+=($parens_level_max_str)\n\
    \    echo \"${parens_array[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_depth=0\n\
    \  local depth=0\n  local result=\"\"\n  for (( i=0; i<${#str}; i++ )); do\n \
    \   if [[ \"${str:$i:1}\" == \"(\" ]]; then\n      (( depth++ ))\n      if ((\
    \ depth > max_depth )); then\n        max_depth=$depth\n      fi\n    elif [[\
    \ \"${str:$i:1}\" == \")\" ]]; then\n      (( depth-- ))\n    elif [[ \"${str:$i:1}\"\
    \ == \" \" ]]; then\n      result+=\"\\\"$max_depth\\\" \"\n      max_depth=0\n\
    \      depth=0\n    fi\n  done\n  result+=\"\\\"$max_depth\\\"\"\n  echo \"[$result]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local parens_arr=($parens)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local parens_arr_idx=0\n    local\
    \ parens_arr_idx_max=$((parens_arr_len - 1))\n    local parens_arr_idx_min=0\n\
    \    local parens_arr_idx_mid=$((parens_arr_len / 2))\n    local parens_arr_idx_mid_max=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_min=$((parens_arr_len / 2))\n    local parens_arr_idx_mid_prev=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_next=$((parens_arr_len / 2))\n    local\
    \ parens_arr_idx_mid_prev_prev=$((parens_arr_len / 2))\n    local parens_arr_idx_mid_next_next=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_prev_prev_prev=$((parens_arr_len / 2))\n\
    \    local parens_arr_idx_mid_next_next_next=$((parens_arr_len / 2))\n    local\
    \ parens_arr_idx_mid_prev_prev_prev_prev=$((parens_arr_len / 2))\n    local parens_arr_idx_mid_next_next_next_next=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_next_next_next_next_next=$((parens_arr_len\
    \ / 2))\n    local parens_arr_idx_mid_prev_prev_prev_prev_prev_prev=$((parens_arr_len\
    \ / 2))\n    local parens_\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_elem\n\
    \  local parens_arr_elem_len\n  local parens_arr_elem_idx\n  local parens_arr_elem_char\n\
    \  local parens_arr_elem_char_idx\n  local parens_arr_elem_char_idx_max\n  local\
    \ parens_arr_elem_char_idx_max_arr\n  local parens_arr_elem_char_idx_max_arr_len\n\
    \  local parens_arr_elem_char_idx_max_arr_idx\n  local parens_arr_elem_char_idx_max_arr_elem\n\
    \  local parens_arr_elem_char_idx_max_arr_elem_len\n  local parens_arr_elem_char_idx_max_arr_elem_idx\n\
    \  local parens_arr_elem_char_idx_max_arr_elem_char\n  local parens_arr_elem_char_idx_max_arr_elem_char_idx\n\
    \  local parens_arr_elem_char_idx_max_arr_elem_char_idx_max\n  local parens_arr_elem_char_idx_max_arr_elem_char_idx_max_arr\n\
    \  local parens_arr_elem_char_idx_max_arr_elem_char_idx_max_arr_len\n  local parens_arr_elem_char_idx_max_arr_elem_char_idx_max_arr_idx\n\
    \  local parens_arr_elem_char_idx_max_arr_elem_char_idx_max_arr_elem\n  local\
    \ parens_arr_elem_char_id\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    for group in $input; do\n        local level=0\n        local max_level=0\n\
    \        for (( i=0; i<${#group}; i++ )); do\n            local char=${group:$i:1}\n\
    \            if [[ $char == \"(\" ]]; then\n                (( level++ ))\n  \
    \              if (( level > max_level )); then\n                    max_level=$level\n\
    \                fi\n            elif [[ $char == \")\" ]]; then\n           \
    \     (( level-- ))\n            fi\n        done\n        output+=($max_level)\n\
    \    done\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local max_level=0\n\
    \  local level=0\n  local output=()\n  local i=0\n  local char=''\n  local len=${#str}\n\
    \  while [ $i -lt $len ]; do\n    char=${str:$i:1}\n    if [ \"$char\" == \"(\"\
    \ ]; then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n     \
    \   max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ]; then\n      ((level--))\n\
    \    elif [ \"$char\" == \" \" ]; then\n      output+=(\"\\\"$max_level\\\"\"\
    )\n      max_level=0\n      level=0\n    fi\n    ((i++))\n  done\n  if [ $level\
    \ -eq 0 ]; then\n    output+=(\"\\\"$max_level\\\"\")\n  fi\n  echo ${output[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local -a arr\n  local -a res\n  local\
    \ -i i\n  local -i j\n  local -i k\n  local -i max\n  local -i tmp\n  local -i\
    \ len\n  local -i len_arr\n  local -i len_res\n  local -i len_res_1\n  local -i\
    \ len_res_2\n  local -i len_res_3\n  local -i len_res_4\n  local -i len_res_5\n\
    \  local -i len_res_6\n  local -i len_res_7\n  local -i len_res_8\n  local -i\
    \ len_res_9\n  local -i len_res_10\n  local -i len_res_11\n  local -i len_res_12\n\
    \  local -i len_res_13\n  local -i len_res_14\n  local -i len_res_15\n  local\
    \ -i len_res_16\n  local -i len_res_17\n  local -i len_res_18\n  local -i len_res_19\n\
    \  local -i len_res_20\n  local -i len_res_21\n  local -i len_res_22\n  local\
    \ -i len_res_23\n  local -i len_res_24\n  local -i len_res_25\n  local -i len_res_26\n\
    \  local -i len_res_27\n  local -i len_res_28\n  local -i len_res_29\n  local\
    \ -i len_res_30\n  local -i len_res_31\n  local -i len_res_32\n  local -i len_res_33\n\
    \  local -i len_res_34\n  local -i len_res_35\n  local -i len_res_36\n  local\
    \ -i len_res_37\n  local -i len_res_38\n  local -i len_res_39\n  local -i len_res_40\n\
    \  local -i len_res_41\n  local -i len_res_42\n  local -i len_res_43\n  local\
    \ -i len_res_44\n  local -i len_res\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 2
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_max_str=$parens_arr_idx_max\n  local parens_arr_idx_max_str_len=${#parens_arr_idx_max_str}\n\
    \  local parens_arr_idx_max_str_len_plus_one=$((parens_arr_idx_max_str_len + 1))\n\
    \  local parens_arr_idx_max_str_len_plus_one_str=$parens_arr_idx_max_str_len_plus_one\n\
    \  local parens_arr_idx_max_str_len_plus_one_str_len=${#parens_arr_idx_max_str_len_plus_one_str}\n\
    \  local parens_arr_idx_max_str_len_plus_one_str_len_plus_one=$((parens_arr_idx_max_str_len_plus_one_str_len\
    \ + 1))\n  local parens_arr_idx_max_str_len_plus_one_str_len_plus_one_str=$parens_arr_idx_max_str_len_plus_one_str_len_plus_one\n\
    \  local parens_arr_idx_max_str_len_plus_one_str_len_plus_one_str_len=${#parens_arr_idx_max_str_len_plus_one_str_len_plus_one_str}\n\
    \  local parens_arr_idx_max_str_len_plus_one_str_len_plus_one_str_len_plus_one=$((parens_arr_idx_max_str_len_plus_one_str_len_plus_one_str_len\
    \ +\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaorntzhz.sh: line 23: unexpected EOF while looking for matching
    `)''

    /tmp/tmpaorntzhz.sh: line 38: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local max_depth=0\n\
    \    local depth=0\n    local result=\"\"\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [ \"$c\"\
    \ == \"(\" ]; then\n            depth=$((depth+1))\n            if [ $depth -gt\
    \ $max_depth ]; then\n                max_depth=$depth\n            fi\n     \
    \   elif [ \"$c\" == \")\" ]; then\n            depth=$((depth-1))\n        elif\
    \ [ \"$c\" == \" \" ]; then\n            result+=\"\\\"$max_depth\\\" \"\n   \
    \         max_depth=0\n            depth=0\n        fi\n        i=$((i+1))\n \
    \   done\n    result+=\"\\\"$max_depth\\\"\"\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local char=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    char=${input:$i:1}\n    if [ \"$char\" == \"\
    (\" ]; then\n      level=$((level+1))\n      if [ $level -gt $max_level ]; then\n\
    \        max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ]; then\n \
    \     level=$((level-1))\n    elif [ \"$char\" == \" \" ]; then\n      output+=(\"\
    $max_level\")\n      max_level=0\n      level=0\n    fi\n    i=$((i+1))\n  done\n\
    \  output+=(\"$max_level\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=\"$1\"\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((\
    \ i=0; i<$parens_arr_len; i++ )); do\n    local parens_str=${parens_arr[$i]}\n\
    \    local parens_str_len=${#parens_str}\n    local max_nesting=0\n    local nesting=0\n\
    \    for (( j=0; j<$parens_str_len; j++ )); do\n      local char=${parens_str:$j:1}\n\
    \      if [[ \"$char\" == \"(\" ]]; then\n        (( nesting++ ))\n        if\
    \ [[ \"$nesting\" -gt \"$max_nesting\" ]]; then\n          max_nesting=$nesting\n\
    \        fi\n      elif [[ \"$char\" == \")\" ]]; then\n        (( nesting-- ))\n\
    \      fi\n    done\n    max_nesting_arr+=($max_nesting)\n  done\n  echo ${max_nesting_arr[@]}\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local max_nesting_level=0\n\
    \    local nesting_level=0\n    local max_nesting_level_str=\"\"\n    local nesting_level_str=\"\
    \"\n    local result=\"\"\n    local i=0\n    local c=\"\"\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n        if [ \"$c\" ==\
    \ \"(\" ]; then\n            nesting_level=$((nesting_level + 1))\n          \
    \  nesting_level_str=\"$nesting_level_str$c\"\n        elif [ \"$c\" == \")\"\
    \ ]; then\n            nesting_level_str=\"$nesting_level_str$c\"\n          \
    \  if [ $nesting_level -gt $max_nesting_level ]; then\n                max_nesting_level=$nesting_level\n\
    \                max_nesting_level_str=$nesting_level_str\n            fi\n  \
    \          nesting_level=$((nesting_level - 1))\n            nesting_level_str=\"\
    \"\n        elif [ \"$c\" == \" \" ]; then\n            if [ $nesting_level -gt\
    \ $max_nesting_level ]; then\n                max_nesting_level=$nesting_level\n\
    \                max_nesting_level_str=$nesting_level_str\n            fi\n  \
    \          result=\"$result \\\"$max_nesting_level\\\"\"\n            max_nesting_level=0\n\
    \            max_nesting_level_str=\"\"\n            nesting_level=0\n       \
    \     nesting_level_str=\"\"\n        else\n            nesting_level_str=\"$nesting_level_str$c\"\
    \n        fi\n        i=$((i + 1))\n    done\n    if [ $nesting_level -gt $max_nesting_level\
    \ ]; then\n        max_nesting_level=$nesting_level\n        max_nesting_level_str=$nesting_level_str\n\
    \    fi\n    result=\"$result \\\"$max_nesting_level\\\"\"\n    echo \"[$result]\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=\"$1\"\n  local max_depth=0\n\
    \  local depth=0\n  local result=\"\"\n  local i=0\n  local len=${#parens}\n \
    \ while [ $i -lt $len ]; do\n    local c=${parens:$i:1}\n    if [ \"$c\" == \"\
    (\" ]; then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n   \
    \     max_depth=$depth\n      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n\
    \    elif [ \"$c\" == \" \" ]; then\n      result=\"$result \\\"$max_depth\\\"\
    \"\n      max_depth=0\n      depth=0\n    fi\n    ((i++))\n  done\n  result=\"\
    $result \\\"$max_depth\\\"\"\n  echo $result\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local current_char=''\n  local\
    \ i=0\n  local len=${#input}\n  while [ $i -lt $len ]; do\n    current_char=${input:$i:1}\n\
    \    if [ \"$current_char\" == \"(\" ]; then\n      current_depth=$((current_depth\
    \ + 1))\n      if [ $current_depth -gt $max_depth ]; then\n        max_depth=$current_depth\n\
    \      fi\n    elif [ \"$current_char\" == \")\" ]; then\n      current_depth=$((current_depth\
    \ - 1))\n    elif [ \"$current_char\" == \" \" ]; then\n      output+=(\"$max_depth\"\
    )\n      max_depth=0\n      current_depth=0\n    fi\n    i=$((i + 1))\n  done\n\
    \  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local -a arr=()\n\
    \    local -a stack=()\n    local -a result=()\n    local -i i=0\n    local -i\
    \ max_depth=0\n    local -i depth=0\n    local -i len=0\n    local -i j=0\n  \
    \  local -i k=0\n    local -i l=0\n    local -i m=0\n    local -i n=0\n    local\
    \ -i o=0\n    local -i p=0\n    local -i q=0\n    local -i r=0\n    local -i s=0\n\
    \    local -i t=0\n    local -i u=0\n    local -i v=0\n    local -i w=0\n    local\
    \ -i x=0\n    local -i y=0\n    local -i z=0\n    local -i aa=0\n    local -i\
    \ bb=0\n    local -i cc=0\n    local -i dd=0\n    local -i ee=0\n    local -i\
    \ ff=0\n    local -i gg=0\n    local -i hh=0\n    local -i ii=0\n    local -i\
    \ jj=0\n    local -i kk=0\n    local -i ll=0\n    local -i mm=0\n    local -i\
    \ nn=0\n    local -i oo=0\n    local -i pp=0\n    local -i qq=0\n    local -i\
    \ rr=0\n    local -i ss=0\n    local -i tt=0\n    local -i uu=0\n    local -i\
    \ vv=0\n    local -i ww=0\n    local -i xx=0\n    local -i yy=0\n    local -i\
    \ zz=0\n    local -i aaa=0\n    local -i bbb=0\n    local -i ccc=0\n    local\
    \ -i ddd=0\n    local -i eee=0\n    local -i fff=0\n    local -i ggg=0\n    local\
    \ -i hhh=0\n    local -i iii=0\n    local -i\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((depth++))\n            if\
    \ [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((depth--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=($max_depth)\n     \
    \       max_depth=0\n            depth=0\n        fi\n        ((i++))\n    done\n\
    \    output+=($max_depth)\n    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local result=()\n  local\
    \ level=0\n  local max_level=0\n  local i=0\n  local len=${#str}\n  local char=''\n\
    \  local is_in_parens=false\n\n  for ((i=0; i<len; i++)); do\n    char=${str:$i:1}\n\
    \    if [[ \"$char\" == \"(\" ]]; then\n      is_in_parens=true\n      ((level++))\n\
    \      if ((level > max_level)); then\n        max_level=$level\n      fi\n  \
    \  elif [[ \"$char\" == \")\" ]]; then\n      is_in_parens=false\n      ((level--))\n\
    \    elif [[ \"$char\" == \" \" ]] && [[ \"$is_in_parens\" == false ]]; then\n\
    \      result+=(\"$max_level\")\n      max_level=0\n    fi\n  done\n\n  result+=(\"\
    $max_level\")\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local output=()\n\
    \    local max_depth=0\n    local depth=0\n    local char\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        char=\"${input:$i:1}\"\n        if [[ \"$char\" == \"(\"\
    \ ]]; then\n            (( depth++ ))\n            (( max_depth = depth > max_depth\
    \ ? depth : max_depth ))\n        elif [[ \"$char\" == \")\" ]]; then\n      \
    \      (( depth-- ))\n        elif [[ \"$char\" == \" \" ]]; then\n          \
    \  output+=(\"$max_depth\")\n            max_depth=0\n        fi\n    done\n \
    \   output+=(\"$max_depth\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local result=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local len=${#str}\n\
    \    while [ $i -lt $len ]; do\n        local c=${str:$i:1}\n        if [ \"$c\"\
    \ == \"(\" ]; then\n            ((level++))\n            if [ $level -gt $max_level\
    \ ]; then\n                max_level=$level\n            fi\n        elif [ \"\
    $c\" == \")\" ]; then\n            ((level--))\n        elif [ \"$c\" == \" \"\
    \ ]; then\n            result+=(\"$max_level\")\n            max_level=0\n   \
    \         level=0\n        fi\n        ((i++))\n    done\n    result+=(\"$max_level\"\
    )\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local result=()\n\
    \    local max_depth=0\n    local depth=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            depth=$((depth+1))\n      \
    \      if [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            depth=$((depth-1))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            result+=(\"$max_depth\")\n\
    \            max_depth=0\n            depth=0\n        fi\n        i=$((i+1))\n\
    \    done\n    result+=(\"$max_depth\")\n    echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=()\n\
    \  local parens_arr_len=0\n  local parens_str_len=0\n  local parens_str_idx=0\n\
    \  local parens_str_char=''\n  local parens_str_char_prev=''\n  local parens_str_char_next=''\n\
    \  local parens_str_char_prev_prev=''\n  local parens_str_char_next_next=''\n\
    \  local parens_str_char_prev_prev_prev=''\n  local parens_str_char_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local parens_str_char_next_next_next_next_next_next_next_next=''\n\
    \  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n  local\
    \ parens_str_char_next_next_next_next_next_next_next_next_next=''\n  local parens_str_char_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev=''\n\
    \  local parens_str_char_next_next_\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_array=($(echo\
    \ $str | tr \" \" \"\\n\"))\n    local parens_array_len=${#parens_array[@]}\n\
    \    local max_nesting_level=0\n    local max_nesting_level_str=\"\"\n    local\
    \ curr_nesting_level=0\n    local curr_nesting_level_str=\"\"\n    local i=0\n\
    \    local j=0\n    local curr_parens=0\n    local curr_parens_str=\"\"\n    local\
    \ curr_parens_str_len=0\n    local curr_parens_str_len_minus_one=0\n    local\
    \ curr_parens_str_len_minus_two=0\n    local curr_parens_str_len_minus_three=0\n\
    \    local curr_parens_str_len_minus_four=0\n    local curr_parens_str_len_minus_five=0\n\
    \    local curr_parens_str_len_minus_six=0\n    local curr_parens_str_len_minus_seven=0\n\
    \    local curr_parens_str_len_minus_eight=0\n    local curr_parens_str_len_minus_nine=0\n\
    \    local curr_parens_str_len_minus_ten=0\n    local curr_parens_str_len_minus_eleven=0\n\
    \    local curr_parens_str_len_minus_twelve=0\n    local curr_parens_str_len_minus_thirteen=0\n\
    \    local curr_parens_str_len_minus_fourteen=0\n    local curr_parens_str_len_minus_fifteen=0\n\
    \    local curr_parens_str_len_minus_sixteen=0\n    local curr_parens_str_len_minus_seventeen=0\n\
    \    local curr_parens_str_len_minus_eighteen=0\n    local curr_parens_str_len_minus_nineteen=0\n\
    \    local curr_parens_str_len_minus_twenty=\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens=$1\n    local parens_array=($parens)\n\
    \    local result=()\n    for paren in \"${parens_array[@]}\"; do\n        local\
    \ max_level=0\n        local level=0\n        for (( i=0; i<${#paren}; i++ ));\
    \ do\n            if [[ ${paren:$i:1} == \"(\" ]]; then\n                ((level++))\n\
    \                if ((level > max_level)); then\n                    max_level=$level\n\
    \                fi\n            elif [[ ${paren:$i:1} == \")\" ]]; then\n   \
    \             ((level--))\n            fi\n        done\n        result+=($max_level)\n\
    \    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local char=''\n\
    \    local len=${#input}\n    while [ $i -lt $len ]; do\n        char=${input:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            ((level++))\n          \
    \  if [ $level -gt $max_level ]; then\n                max_level=$level\n    \
    \        fi\n        elif [ \"$char\" == \")\" ]; then\n            ((level--))\n\
    \        elif [ \"$char\" == \" \" ]; then\n            output+=(\"$max_level\"\
    )\n            max_level=0\n            level=0\n        fi\n        ((i++))\n\
    \    done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local parens_groups=$(echo\
    \ $str | tr ' ' '\\n')\n    local parens_groups_count=$(echo $str | tr ' ' '\\\
    n' | wc -l)\n    local parens_groups_max_nesting=()\n    local parens_groups_max_nesting_count=0\n\
    \    local parens_groups_max_nesting_index=0\n    local parens_groups_max_nesting_index_count=0\n\
    \    local parens_groups_max_nesting_index_count_count=0\n    local parens_groups_max_nesting_index_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count=0\n    local\
    \ parens_groups_max_nesting_index_count_count_count_count_count=0\n    local parens_groups_max_nesting_index_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local parens_groups_max_nesting_index_count_count_count_count_count_count_count_count_count_count_count_count_count=0\n\
    \    local p\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens_str=$1\n  local parens_arr=($parens_str)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local parens_arr_idx=0\n  local parens_arr_idx_max=$((parens_arr_len\
    \ - 1))\n  local parens_arr_idx_str\n  local parens_arr_idx_str_len\n  local parens_arr_idx_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len\n  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev\n \
    \ local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max_prev_str_len_max_prev_str_len_max\n\
    \  local parens_arr_idx_str_len_max_prev_str_len_max\n}\n\ncandidate() {\n   \
    \ parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    (()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local depth=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n        max_depth=$depth\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((depth--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_depth\")\n      max_depth=0\n   \
    \   depth=0\n    fi\n    ((i++))\n  done\n  if [ $max_depth -gt 0 ]; then\n  \
    \  output+=(\"$max_depth\")\n  fi\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_depth=0\n  local current_depth=0\n  local i=0\n  local c=''\n  local\
    \ len=${#input}\n  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"\
    $c\" == \"(\" ]; then\n      ((current_depth++))\n      if [ $current_depth -gt\
    \ $max_depth ]; then\n        max_depth=$current_depth\n      fi\n    elif [ \"\
    $c\" == \")\" ]; then\n      ((current_depth--))\n    elif [ \"$c\" == \" \" ];\
    \ then\n      output+=(\"$max_depth\")\n      max_depth=0\n      current_depth=0\n\
    \    fi\n    ((i++))\n  done\n  output+=(\"$max_depth\")\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local result=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local len=${#str}\n  while\
    \ [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" == \"(\"\
    \ ]; then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n     \
    \   max_level=$level\n      fi\n    elif [ \"$char\" == \")\" ]; then\n      ((level--))\n\
    \    elif [ \"$char\" == \" \" ]; then\n      result+=(\"$max_level\")\n     \
    \ max_level=0\n      level=0\n    fi\n    ((i++))\n  done\n  result+=(\"$max_level\"\
    )\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_nesting=0\n    local current_nesting=0\n    local current_char=''\n\
    \    local i=0\n    local len=${#input}\n    while [ $i -lt $len ]; do\n     \
    \   current_char=${input:$i:1}\n        if [ \"$current_char\" == \"(\" ]; then\n\
    \            current_nesting=$((current_nesting + 1))\n            if [ $current_nesting\
    \ -gt $max_nesting ]; then\n                max_nesting=$current_nesting\n   \
    \         fi\n        elif [ \"$current_char\" == \")\" ]; then\n            current_nesting=$((current_nesting\
    \ - 1))\n        elif [ \"$current_char\" == \" \" ]; then\n            output+=(\"\
    \\\"$max_nesting\\\"\")\n            max_nesting=0\n            current_nesting=0\n\
    \        fi\n        i=$((i + 1))\n    done\n    output+=(\"\\\"$max_nesting\\\
    \"\")\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=$1\n  local result=()\n  local\
    \ max_nesting=0\n  local nesting=0\n  local i=0\n  local c\n\n  for ((i=0; i<${#str};\
    \ i++)); do\n    c=${str:$i:1}\n    if [[ $c == \"(\" ]]; then\n      ((nesting++))\n\
    \      if ((nesting > max_nesting)); then\n        max_nesting=$nesting\n    \
    \  fi\n    elif [[ $c == \")\" ]]; then\n      ((nesting--))\n    elif [[ $c ==\
    \ \" \" ]]; then\n      result+=(\"\\\"$max_nesting\\\"\")\n      max_nesting=0\n\
    \      nesting=0\n    fi\n  done\n  result+=(\"\\\"$max_nesting\\\"\")\n  echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    # Split the string into groups of\
    \ parentheses\n    local groups=($(echo $1 | tr ' ' '\\n'))\n    local group_count=${#groups[@]}\n\
    \    local output=()\n    for (( i=0; i<$group_count; i++ )); do\n        local\
    \ group=${groups[$i]}\n        local level=0\n        local max_level=0\n    \
    \    local group_length=${#group}\n        for (( j=0; j<$group_length; j++ ));\
    \ do\n            local char=${group:$j:1}\n            if [ \"$char\" == \"(\"\
    \ ]; then\n                ((level++))\n                if [ $level -gt $max_level\
    \ ]; then\n                    max_level=$level\n                fi\n        \
    \    elif [ \"$char\" == \")\" ]; then\n                ((level--))\n        \
    \    fi\n        done\n        output+=(\"\\\"$max_level\\\"\")\n    done\n  \
    \  echo \"[${output[@]}]\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local groups=($str)\n\
    \    local max_nesting_level=0\n    local max_nesting_level_group=\"\"\n    for\
    \ group in \"${groups[@]}\"; do\n        local nesting_level=$(echo $group | grep\
    \ -o \"(\" | wc -l)\n        if [[ $nesting_level -gt $max_nesting_level ]]; then\n\
    \            max_nesting_level=$nesting_level\n            max_nesting_level_group=$group\n\
    \        fi\n    done\n    echo $max_nesting_level_group\n}\n\ncandidate() {\n\
    \    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local max_paren_count_arr=()\n    local i=0\n\
    \    local len=${#str}\n    local c\n    while [ $i -lt $len ]; do\n        c=${str:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((paren_count++))\n       \
    \     if [ $paren_count -gt $max_paren_count ]; then\n                max_paren_count=$paren_count\n\
    \            fi\n        elif [ \"$c\" == \")\" ]; then\n            ((paren_count--))\n\
    \        elif [ \"$c\" == \" \" ]; then\n            max_paren_count_arr+=(\"\
    $max_paren_count\")\n            max_paren_count=0\n        fi\n        ((i++))\n\
    \    done\n    max_paren_count_arr+=(\"$max_paren_count\")\n    echo \"${max_paren_count_arr[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local -a arr=()\n\
    \    local -a result=()\n    local -i i=0\n    local -i j=0\n    local -i k=0\n\
    \    local -i max_level=0\n    local -i level=0\n    local -i len=0\n    local\
    \ -i len_str=0\n    local -i len_arr=0\n    local -i len_result=0\n    local -i\
    \ len_result_prev=0\n    local -i len_result_curr=0\n    local -i len_result_next=0\n\
    \    local -i len_result_next_next=0\n    local -i len_result_next_next_next=0\n\
    \    local -i len_result_next_next_next_next=0\n    local -i len_result_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next=0\n    local -i len_result_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next=0\n    local\
    \ -i len_result_next_next_next_next_next_next_next_next_next=0\n    local -i len_result_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next=0\n\
    \    local -i len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_level=0\n  local level=0\n  local i=0\n  local c=''\n  local len=${#input}\n\
    \  while [ $i -lt $len ]; do\n    c=${input:$i:1}\n    if [ \"$c\" == \"(\" ];\
    \ then\n      ((level++))\n      if [ $level -gt $max_level ]; then\n        max_level=$level\n\
    \      fi\n    elif [ \"$c\" == \")\" ]; then\n      ((level--))\n    elif [ \"\
    $c\" == \" \" ]; then\n      output+=(\"$max_level\")\n      max_level=0\n   \
    \   level=0\n    fi\n    ((i++))\n  done\n  output+=(\"$max_level\")\n  echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\"\
    \ ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[\
    \ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=\"\
    \"\n    local max_depth=0\n    local depth=0\n    local char=\"\"\n    local i=0\n\
    \    local len=${#input}\n    while [ $i -lt $len ]; do\n        char=${input:$i:1}\n\
    \        if [ \"$char\" == \"(\" ]; then\n            ((depth++))\n          \
    \  if [ $depth -gt $max_depth ]; then\n                max_depth=$depth\n    \
    \        fi\n        elif [ \"$char\" == \")\" ]; then\n            ((depth--))\n\
    \        fi\n        ((i++))\n    done\n    echo $max_depth\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=\"$1\"\n    local paren_count=0\n\
    \    local max_paren_count=0\n    local result=()\n    for (( i=0; i<${#str};\
    \ i++ )); do\n        if [[ \"${str:$i:1}\" == \"(\" ]]; then\n            ((paren_count++))\n\
    \            ((max_paren_count = paren_count > max_paren_count ? paren_count :\
    \ max_paren_count))\n        elif [[ \"${str:$i:1}\" == \")\" ]]; then\n     \
    \       ((paren_count--))\n        elif [[ \"${str:$i:1}\" == \" \" ]]; then\n\
    \            result+=(\"$max_paren_count\")\n            max_paren_count=0\n \
    \       fi\n    done\n    result+=(\"$max_paren_count\")\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n  \
    \  [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local parens_str=$1\n    local parens_arr=($parens_str)\n\
    \    local parens_arr_len=${#parens_arr[@]}\n    local max_nested_parens_arr=()\n\
    \    local max_nested_parens=0\n    local curr_nested_parens=0\n    local curr_parens_str\n\
    \    local curr_parens_str_len\n    local curr_parens_str_char\n    local i\n\
    \    local j\n\n    for ((i=0; i<parens_arr_len; i++)); do\n        curr_parens_str=${parens_arr[$i]}\n\
    \        curr_parens_str_len=${#curr_parens_str}\n        curr_nested_parens=0\n\
    \        for ((j=0; j<curr_parens_str_len; j++)); do\n            curr_parens_str_char=${curr_parens_str:$j:1}\n\
    \            if [[ $curr_parens_str_char == \"(\" ]]; then\n                ((curr_nested_parens++))\n\
    \            elif [[ $curr_parens_str_char == \")\" ]]; then\n               \
    \ ((curr_nested_parens--))\n            fi\n        done\n        if [[ $curr_nested_parens\
    \ -gt $max_nested_parens ]]; then\n            max_nested_parens=$curr_nested_parens\n\
    \        fi\n        max_nested_parens_arr+=($max_nested_parens)\n    done\n \
    \   echo ${max_nested_parens_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local input=$1\n  local output=()\n\
    \  local max_nesting=0\n  local current_nesting=0\n  local char\n  for (( i=0;\
    \ i<${#input}; i++ )); do\n    char=${input:$i:1}\n    if [[ \"$char\" == \"(\"\
    \ ]]; then\n      ((current_nesting++))\n      if (( current_nesting > max_nesting\
    \ )); then\n        max_nesting=$current_nesting\n      fi\n    elif [[ \"$char\"\
    \ == \")\" ]]; then\n      ((current_nesting--))\n    elif [[ \"$char\" == \"\
    \ \" ]]; then\n      output+=(\"$max_nesting\")\n      max_nesting=0\n      current_nesting=0\n\
    \    fi\n  done\n  output+=(\"$max_nesting\")\n  echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate\
    \ \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\"\
    ) = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    for ((i=0; i<${#input};\
    \ i++)); do\n        local char=${input:$i:1}\n        if [[ $char == \"(\" ]];\
    \ then\n            ((level++))\n            if ((level > max_level)); then\n\
    \                max_level=$level\n            fi\n        elif [[ $char == \"\
    )\" ]]; then\n            ((level--))\n        elif [[ $char == \" \" ]]; then\n\
    \            output+=(\"\\\"$max_level\\\"\")\n            max_level=0\n     \
    \       level=0\n        fi\n    done\n    output+=(\"\\\"$max_level\\\"\")\n\
    \    echo ${output[@]}\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\") =\
    \ \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local parens=$1\n  local parens_arr=($parens)\n\
    \  local parens_arr_len=${#parens_arr[@]}\n  local max_nesting_arr=()\n  for ((i=0;\
    \ i<$parens_arr_len; i++)); do\n    local parens_str=${parens_arr[$i]}\n    local\
    \ parens_str_len=${#parens_str}\n    local nesting_level=0\n    local max_nesting_level=0\n\
    \    for ((j=0; j<$parens_str_len; j++)); do\n      local char=${parens_str:$j:1}\n\
    \      if [ \"$char\" == \"(\" ]; then\n        nesting_level=$((nesting_level\
    \ + 1))\n      elif [ \"$char\" == \")\" ]; then\n        nesting_level=$((nesting_level\
    \ - 1))\n      fi\n      if [ $nesting_level -gt $max_nesting_level ]; then\n\
    \        max_nesting_level=$nesting_level\n      fi\n    done\n    max_nesting_arr+=($max_nesting_level)\n\
    \  done\n  echo ${max_nesting_arr[@]}\n}\n\ncandidate() {\n    parse_nested_parens\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n  local str=\"$1\"\n  local max_depth=0\n\
    \  local depth=0\n  local result=()\n  local i=0\n  local len=${#str}\n  while\
    \ [ $i -lt $len ]; do\n    local char=${str:$i:1}\n    if [ \"$char\" == \"(\"\
    \ ]; then\n      ((depth++))\n      if [ $depth -gt $max_depth ]; then\n     \
    \   max_depth=$depth\n      fi\n    elif [ \"$char\" == \")\" ]; then\n      ((depth--))\n\
    \    elif [ \"$char\" == \" \" ]; then\n      result+=(\"$max_depth\")\n     \
    \ max_depth=0\n      depth=0\n    fi\n    ((i++))\n  done\n  result+=(\"$max_depth\"\
    )\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    parse_nested_parens \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"(()()) ((())) () ((())()())\"\
    ) = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015872
- exit_code: 0
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local input=$1\n    local output=()\n\
    \    local max_level=0\n    local level=0\n    local i=0\n    local c=''\n   \
    \ local len=${#input}\n    while [ $i -lt $len ]; do\n        c=${input:$i:1}\n\
    \        if [ \"$c\" == \"(\" ]; then\n            ((level++))\n            if\
    \ [ $level -gt $max_level ]; then\n                max_level=$level\n        \
    \    fi\n        elif [ \"$c\" == \")\" ]; then\n            ((level--))\n   \
    \     elif [ \"$c\" == \" \" ]; then\n            output+=(\"$max_level\")\n \
    \           max_level=0\n            level=0\n        fi\n        ((i++))\n  \
    \  done\n    output+=(\"$max_level\")\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[ $(candidate \"() (())\
    \ ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"(()(())((())))\")\
    \ = \"4\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660015871
- exit_code: 1
  program: "#!/bin/bash\n# Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n# For each of the group,\
    \ output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"\
    (()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1\
    \ is a string\nparse_nested_parens() {\n    local str=$1\n    local -a arr=()\n\
    \    local -a res=()\n    local -i max_level=0\n    local -i level=0\n    local\
    \ -i i=0\n    local -i j=0\n    local -i len=0\n    local -i len_arr=0\n    local\
    \ -i len_res=0\n    local -i len_str=0\n    local -i len_substr=0\n    local -i\
    \ len_substr_arr=0\n    local -i len_substr_res=0\n    local -i len_substr_str=0\n\
    \    local -i len_substr_substr=0\n    local -i len_substr_substr_arr=0\n    local\
    \ -i len_substr_substr_res=0\n    local -i len_substr_substr_str=0\n    local\
    \ -i len_substr_substr_substr=0\n    local -i len_substr_substr_substr_arr=0\n\
    \    local -i len_substr_substr_substr_res=0\n    local -i len_substr_substr_substr_str=0\n\
    \    local -i len_substr_substr_substr_substr=0\n    local -i len_substr_substr_substr_substr_arr=0\n\
    \    local -i len_substr_substr_substr_substr_res=0\n    local -i len_substr_substr_substr_substr_str=0\n\
    \    local -i len_substr_substr_substr_substr_substr=0\n    local -i len_substr_substr_substr_substr_substr_arr=0\n\
    \    local -i len_substr_substr_substr_substr_substr_res=0\n    local -i len_substr_substr_substr_substr_substr_str=0\n\
    \    local -i len_substr_substr_substr_substr_substr_substr=0\n    local -i len_substr_substr_substr_substr_substr_\n\
    }\n\ncandidate() {\n    parse_nested_parens \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"(()()) ((())) () ((())()())\") = \"2 3 1 3\" ]]\n    [[\
    \ $(candidate \"() (()) ((())) (((())))\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"(()(())((())))\") = \"4\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660015872
