name: HumanEval_147_get_max_triples
language: go_test.go
prompt: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a positive integer n. You have to create an integer list a\
  \ of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i -\
  \ i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n\
  // 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1,\
  \ 7, 13).\nfunc get_max_triples(n int) int {\n"
tests: "func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
  \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
  \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i\
    \ - i + 1\n    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n               \
    \     count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i :=\
    \ 0; i < n; i++ {\n        if i > 0 && i < n-1 {\n            if a[i] > a[i-1]\
    \ + a[i+1] {\n                count++\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i *\
    \ i - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n      \
    \          }\n            }\n        }\n    }\n    return max\n}\n", "    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    result := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > 0 {\n            result += 3\n        }\n        if a[i] > result {\n    \
    \        result = a[i]\n        }\n    }\n    return result\n}\n", "    var a\
    \ []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n \
    \   }\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n        for j\
    \ := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   result := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n   \
    \     arr[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if arr[i] + arr[j] + arr[k] == 3 {\n                    result++\n \
    \               }\n            }\n        }\n    }\n    return result\n}\n", " \
    \   var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    sort.Ints(a)\n    \n    var result int\n    for i := 0; i <\
    \ n; i++ {\n        if a[i] > 0 {\n            result += a[i]\n        }\n   \
    \ }\n    return result\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    result := 0\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    result++\n                }\n         \
    \   }\n        }\n    }\n    return result\n}\n", "    var a []int\n    for i\
    \ := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k :=\
    \ 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n    \
    \                a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n   \
    \         }\n        }\n    }\n    return len(a)\n}\n", "    var a []int\n   \
    \ for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for\
    \ k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n\
    \                    a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n\
    \            }\n        }\n    }\n    return len(a)\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 0; i <\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    var count int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] +\
    \ arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n          \
    \          return i + 1\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n     \
    \               count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n   \
    \     for j := 1; j <= i; j++ {\n            for k := 1; k <= j; k++ {\n     \
    \           a[i] = i * i - i + 1\n                a[j] = i * j - j + 1\n     \
    \           a[k] = i * k - k + 1\n                if a[i] < a[j] && a[j] < a[k]\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n\
    \        for j := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n  \
    \              if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a,\
    \ i*i*i + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n\
    \    return len(a)\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n   \
    \     a[i] = i * i - i + 1\n    }\n    \n    var result int\n    for i := 0; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n               \
    \     result++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := 0\n    arr := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n                \
    \    result++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    result := 0\n    arr := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n                \
    \    result++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= i; j++ {\n            for k := 1; k <= j; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n \
    \                   max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n     \
    \   for j := i; j <= n; j++ {\n            for k := j; k <= n; k++ {\n       \
    \         if i+j+k == i*i*i {\n                    a = append(a, i*i*i)\n    \
    \            }\n            }\n        }\n    }\n    return len(a)\n}\n", "  \
    \  var a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++\
    \ {\n            for k := 1; k <= n; k++ {\n                a[i] = i*i - i + 1\n\
    \                a[j] = j*j - j + 1\n                a[k] = k*k - k + 1\n    \
    \            if a[i] > a[j] && a[i] > a[k] {\n                    return 1\n \
    \               }\n            }\n        }\n    }\n    return 0\n}\n", "    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n;\
    \ i++ {\n        if i > 0 && i < n-1 && a[i] > a[i-1] && a[i] > a[i+1] {\n   \
    \         count++\n        }\n    }\n    return count\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    result := 0\n    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] ==\
    \ 3 {\n                    result++\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n", "    var a []int\n    for i := 1; i <= n;\
    \ i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    var\
    \ count int\n    for i := 0; i < len(a); i++ {\n        for j := i + 1; j < len(a);\
    \ j++ {\n            for k := j + 1; k < len(a); k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    result := 0\n    for\
    \ i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n            for k\
    \ := j; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n \
    \                   result++\n                }\n            }\n        }\n  \
    \  }\n    return result\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n\
    \        for j := 1; j <= i; j++ {\n            for k := 1; k <= j; k++ {\n  \
    \              if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a,\
    \ i*i*i + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n\
    \    return len(a)\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n   \
    \     a[i] = i * i - i + 1\n    }\n    sort.Ints(a)\n    var result int\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k] {\n\
    \                    result = result + 1\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n", "    var a []int\n    for i := 1; i\
    \ <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <=\
    \ n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n            \
    \        a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n           \
    \ }\n        }\n    }\n    return len(a)\n}\n", "    var a []int\n    for i :=\
    \ 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    \n    var count\
    \ int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if a[i] > a[j] && a[i]\
    \ > a[k] {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    \n    return count\n}\n", "    var a []int\n    for i :=\
    \ 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                   \
    \ return 1\n                }\n            }\n        }\n    }\n    return 0\n\
    }\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <=\
    \ n; j++ {\n            for k := 1; k <= n; k++ {\n                if i+j+k ==\
    \ i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n\
    \                }\n            }\n        }\n    }\n    return len(a)\n}\n",
  "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i +\
    \ 1)\n    }\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n      \
    \  for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if a[i] + a[j] + a[k] == 3 {\n                    count++\n        \
    \        }\n            }\n        }\n    }\n    return count\n}\n", "    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    count := 0\n    \n    for i := 0; i < len(a); i++ {\n        for j := i +\
    \ 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n      \
    \          if a[i] + a[j] + a[k] == 3 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    \n    return count\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var a []int\n \
    \   for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n           \
    \ for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k\
    \ {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n              \
    \  }\n            }\n        }\n    }\n    return len(a)\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    var count int\n    for i := 0; i < len(a); i++ {\n        if i > 0 && a[i-1]+a[i]\
    \ > 3 {\n            count++\n        }\n    }\n    return count\n}\n", "    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n", " \
    \   arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i *\
    \ i - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n          \
    \      }\n            }\n        }\n    }\n    return max\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    var count int\n    for i := 0; i < len(a); i++ {\n        if i+1 < len(a)\
    \ && a[i]+a[i+1] == a[i]+a[i+1]+3 {\n            count++\n        }\n    }\n \
    \   return count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n    \
    \    for j := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n      \
    \          if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a,\
    \ i*i*i + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n\
    \    return len(a)\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n         \
    \           max++\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n      \
    \  arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n\
    \                }\n            }\n        }\n    }\n    return max\n}\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var a []int\n \
    \   for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n   \
    \ sort.Ints(a)\n    var count int = 0\n    for _, v := range a {\n        if v%3\
    \ != 0 {\n            continue\n        }\n        count += 3\n        break\n\
    \    }\n    return count\n}\n", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n    \
    \    a[i] = i * i - i + 1\n    }\n    sort.Ints(a)\n    var count int = 0\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n", "    arr := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i :=\
    \ 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k :=\
    \ j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n  \
    \                  max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n     \
    \   a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    var count int\n \
    \   for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n            count +=\
    \ 3\n            count += a[i] - a[i] - a[i]\n        }\n    }\n    return count\n\
    }\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i\
    \ - i + 1)\n    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i\
    \ < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n               \
    \     count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i <\
    \ len(a); i++ {\n        if a[i] > 0 {\n            count += 3\n            \n\
    \            for j := i + 1; j < len(a); j++ {\n                if a[j] > 0 {\n\
    \                    count += 3\n                    \n                    for\
    \ k := j + 1; k < len(a); k++ {\n                        if a[k] > 0 {\n     \
    \                       count += 3\n                        }\n              \
    \      }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    \n    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    \n    var count int\n    for i := 0; i < len(a); i++\
    \ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k\
    \ < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    \n \
    \   return count\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n         \
    \           max++\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n", "    result := 0\n    arr := make([]int, n)\n    for i := 0; i <\
    \ n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n                \
    \    result++\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j\
    \ := i; j <= n; j++ {\n            for k := j; k <= n; k++ {\n               \
    \ if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i\
    \ + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n       \
    \ if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i\
    \ - i + 1)\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0;\
    \ i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i *\
    \ i - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n      \
    \          }\n            }\n        }\n    }\n    return max\n}\n", "    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var a []int\n\
    \    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var count\
    \ int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    count++\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n", "    var a []int\n   \
    \ for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    \n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] +\
    \ arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    var count int\n    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n\
    \            count += 3\n            \n            for j := i + 1; j < len(a);\
    \ j++ {\n                if a[j] > 0 {\n                    count += 3\n     \
    \               \n                    for k := j + 1; k < len(a); k++ {\n    \
    \                    if a[k] > 0 {\n                            count += 3\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n", "    var a []int\n    for i\
    \ := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    var count\
    \ int = 0\n    for i := 0; i < len(a); i++ {\n        for j := i + 1; j < len(a);\
    \ j++ {\n            for k := j + 1; k < len(a); k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    var a []int\n    for\
    \ i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n     \
    \               return 1\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    return 1\n                }\n    \
    \        }\n        }\n    }\n    return 0\n}\n", "    \n    var a []int\n   \
    \ for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    \n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    \n    return count\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    n := 0\n    for i := 0; i < n; i++\
    \ {\n        if a[i] > 0 {\n            n += 1\n        }\n    }\n    return n\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n        k := i +\
    \ 1\n        for j < n && k < n {\n            if arr[j] + arr[k] == 3 {\n   \
    \             max++\n            }\n            j++\n            k++\n       \
    \ }\n        i++\n    }\n    return max\n}\n", "    var a []int\n    for i :=\
    \ 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    \n    var count int\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] +\
    \ arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    arr := make([]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] ==\
    \ 3 {\n                    max++\n                }\n            }\n        }\n\
    \    }\n    return max\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n\
    \        a[i] = i * i - i + 1\n    }\n    \n    max := 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n\
    \                    max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n      \
    \  a[i] = i * i - i + 1\n    }\n    sort.Ints(a)\n    var count int\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j]\
    \ < a[k] {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    \n    sort.Ints(a)\n\
    \    \n    var count int = 0\n    for i := 0; i < len(a); i++ {\n        if i\
    \ > 0 && a[i-1] == a[i] {\n            continue\n        }\n        if i > 0 &&\
    \ a[i-1] + a[i] == 3 {\n            continue\n        }\n        if i > 0 && a[i-1]\
    \ + a[i] + 1 == 3 {\n            continue\n        }\n        \n        if a[i]\
    \ > 3 {\n            count++\n        }\n    }\n    \n    return count\n}\n",
  "    result := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++\
    \ {\n            for k := 1; k <= j; k++ {\n                if i*i + j*j + k*k\
    \ == i*i*i + j*j*j {\n                    result++\n                }\n      \
    \      }\n        }\n    }\n    return result\n}\n", "    var a []int\n    for\
    \ i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n          \
    \  for k := 1; k <= n; k++ {\n                if i+j+k == 3*(i+j+k) {\n      \
    \              return 1\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n       \
    \ a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    count := 0\n\
    \    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n            count +=\
    \ 3\n            count += a[i] - 1\n        }\n    }\n    return count\n}\n",
  "    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i\
    \ - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n         \
    \       }\n            }\n        }\n    }\n    return max\n}\n", "    arr :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n\
    \    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]+arr[j]+arr[k]\
    \ == 3 {\n                    max++\n                }\n            }\n      \
    \  }\n    }\n    return max\n}\n", "    arr := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n\
    \                    max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n \
    \   }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] {\n                    max++\n                }\n    \
    \        }\n        }\n    }\n    return max\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i]+arr[j]+arr[k]\
    \ == 3 {\n                    max++\n                }\n            }\n      \
    \  }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <= n; i++\
    \ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var\
    \ count int\n    for i := 0; i < len(a); i++ {\n        for j := i + 1; j < len(a);\
    \ j++ {\n            for k := j + 1; k < len(a); k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] +\
    \ arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 0; i <\
    \ n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var result int\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n     \
    \               result++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n         \
    \           max++\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n                if\
    \ i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a, i*i*i +\
    \ j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n    return\
    \ len(a)\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    result := 0\n    for _, v := range\
    \ a {\n        if v%3 != 0 {\n            continue\n        }\n        result\
    \ += 1\n    }\n    return result\n}\n", "    arr := make([]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] ==\
    \ 3 {\n                    max++\n                }\n            }\n        }\n\
    \    }\n    return max\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n\
    \        a[i] = i * i - i + 1\n    }\n    sort.Ints(a)\n    max := 0\n    for\
    \ i := 0; i < n; i++ {\n        if a[i] > max {\n            max = a[i]\n    \
    \    }\n    }\n    return max\n}\n", "    \n    var a []int\n    for i := 1; i\
    \ <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    \n    sort.Ints(a)\n\
    \    \n    var result int\n    \n    for i := 0; i < len(a); i++ {\n        if\
    \ i > 0 && a[i-1] > a[i] {\n            break\n        }\n        \n        if\
    \ a[i] > 3*a[i-1]+1 {\n            result = result + 1\n        }\n    }\n   \
    \ \n    return result\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n\
    \        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    count++\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                a[i] = i * i - i + 1\n                a[j] = i * j -\
    \ j + 1\n                a[k] = i * k - k + 1\n                if a[i] > a[j]\
    \ && a[i] > a[k] {\n                    return 1\n                } else if a[j]\
    \ > a[k] {\n                    return 2\n                } else if a[i] > a[j]\
    \ && a[j] > a[k] {\n                    return 3\n                }\n        \
    \    }\n        }\n    }\n    return 0\n}\n", "    var a []int\n    for i := 0;\
    \ i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    return\
    \ 1\n                }\n            }\n        }\n    }\n    return 0\n}\n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    sort.Ints(a)\n    var triples int\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n",
  "    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n \
    \   }\n    \n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i +\
    \ 1)\n    }\n    var result int\n    for i := 0; i < len(a); i++ {\n        for\
    \ j := 0; j < len(a); j++ {\n            for k := 0; k < len(a); k++ {\n     \
    \           if a[i] < a[j] && a[i] < a[k] {\n                    result = result\
    \ + 1\n                }\n            }\n        }\n    }\n    return result\n\
    }\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] < a[j] && a[i] < a[k] {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n", "    var a []int\n   \
    \ for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    max := 0\n    for i := 0; i < len(a); i++ {\n        if a[i] > max {\n  \
    \          max = a[i]\n        }\n    }\n    return max\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    \n    var count int\n    for i := 1; i <= n; i++ {\n    \
    \    for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n\
    \                if a[i] > a[j] && a[i] > a[k] && a[j] > a[k] {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    n := 0\n    for i := 0; i < len(a);\
    \ i++ {\n        if a[i] > 0 {\n            n += 1\n            if a[i] > a[i+1]\
    \ {\n                n += 3\n            }\n        }\n    }\n    return n\n}\n",
  "    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i\
    \ - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n             \
    \   }\n            }\n        }\n    }\n    return max\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n          \
    \  for k := 1; k <= j; k++ {\n                a[i] = i * i - i + 1\n         \
    \       a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n         \
    \       if a[i] < a[j] && a[i] < a[k] {\n                    return 1\n      \
    \          }\n                if a[j] < a[i] && a[j] < a[k] {\n              \
    \      return 1\n                }\n                if a[k] < a[i] && a[k] < a[j]\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n\
    \        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    count\
    \ := 0\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n   \
    \         for k := 1; k <= n; k++ {\n                if i+j+k == 3*i {\n     \
    \               count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n", "    result := 0\n    arr := make([]int, n)\n    for\
    \ i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for i := 0;\
    \ i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j +\
    \ 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n      \
    \              result++\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n  \
    \      a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    var count int\n\
    \    for _, v := range a {\n        if v%3 != 0 {\n            continue\n    \
    \    }\n        count += 3\n    }\n    return count\n}\n", "    var a []int\n\
    \    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    \n   \
    \ max := 0\n    \n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k] {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    \n    return max\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n          \
    \  for k := j; k <= n; k++ {\n                a[i] = i * i - i + 1\n         \
    \       a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n         \
    \       if a[i] + a[j] + a[k] == 3 {\n                    return 1\n         \
    \       }\n            }\n        }\n    }\n    return 0\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n               \
    \     a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n", "    var a []int\n    for i := 1;\
    \ i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    \n    var count int\n    for i := 0; i < len(a); i++ {\n        if i+1 <\
    \ len(a) && i+2 < len(a) && a[i] + a[j] + a[k] == 3 {\n            count++\n \
    \       }\n    }\n    return count\n}\n", "    var a []int\n    for i := 0; i\
    \ < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    \n    result := 0\n   \
    \ for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n\
    \                    result++\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n", "    result := 0\n    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n\
    \                    result++\n                }\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var a []int\n    for i := 1; i <= n; i++\
    \ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var\
    \ count int = 0\n    for i := 0; i < len(a); i++ {\n        if i+1 < len(a) &&\
    \ i+2 < len(a) && a[i] + a[i+1] + a[i+2] == 3*i {\n            count++\n     \
    \   }\n    }\n    return count\n}\n", "    arr := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n\
    \                    max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    i := 0\n    for\
    \ i < n {\n        j := i + 1\n        for j < n {\n            k := j + 1\n \
    \           for k < n {\n                if arr[i] + arr[j] + arr[k] == 3 {\n\
    \                    max++\n                }\n                k++\n         \
    \   }\n            j++\n        }\n        i++\n    }\n    return max\n}\n", " \
    \   var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i\
    \ + 1)\n    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i <\
    \ len(a); i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k\
    \ := j + 1; k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k] {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i\
    \ <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <=\
    \ n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n            \
    \        a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n           \
    \ }\n        }\n    }\n    return len(a)\n}\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    var a []int\n    for i := 1; i <= n; i++ {\n\
    \        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    var count int\
    \ = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    count++\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n               \
    \     a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n", "    arr := make([]int, n)\n    for\
    \ i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k]\
    \ == 3 {\n                    max++\n                }\n            }\n      \
    \  }\n    }\n    return max\n}\n", "    arr := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i\
    \ := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n\
    \                    max++\n                }\n            }\n        }\n    }\n\
    \    return max\n}\n", "    arr := make([]int, n)\n    for i := 0; i < n; i++\
    \ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n         \
    \           max++\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var result int\n    for i :=\
    \ 0; i < n; i++ {\n        if a[i] > 0 {\n            result += 3\n        }\n\
    \        if a[i] > 0 && a[i+1] > 0 {\n            result += 3\n        }\n   \
    \     if a[i] > 0 && a[i+1] > 0 && a[i+2] > 0 {\n            result += 3\n   \
    \     }\n    }\n    return result\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n               \
    \     a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n", "    var a []int\n    for i := 1;\
    \ i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k\
    \ <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n         \
    \           a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n        \
    \    }\n        }\n    }\n    return len(a)\n}\n", "    arr := make([]int, n)\n\
    \    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] +\
    \ arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    var a []int\n    for i := 1; i <= n; i++ {\n      \
    \  a = append(a, i*i - i + 1)\n    }\n    \n    sort.Ints(a)\n    \n    var triples\
    \ int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n    \
    \        for k := 1; k <= n; k++ {\n                if a[i] < a[j] && a[i] < a[k]\
    \ {\n                    triples++\n                }\n            }\n       \
    \ }\n    }\n    \n    return triples\n}\n", "    var a []int\n    for i := 1;\
    \ i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k\
    \ <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n         \
    \           a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n        \
    \    }\n        }\n    }\n    return len(a)\n}\n", "    var a []int\n    for i\
    \ := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n            for k :=\
    \ 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n    \
    \                a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n   \
    \         }\n        }\n    }\n    return len(a)\n}\n", "    \n    var a []int\n\
    \    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n   \
    \ \n    var max int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    max++\n                }\n       \
    \     }\n        }\n    }\n    return max\n}\n", "    var a []int\n    for i :=\
    \ 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    sort.Ints(a)\n   \
    \ \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] + a[j] + a[k] == 3 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if i+j+k == i*i*i + j*j*j + k*k*k {\n               \
    \     a = append(a, i*i*i + j*j*j + k*k*k)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n", "    var a []int\n    for i := 1;\
    \ i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n\
    \    var count int = 0\n    for i := 0; i < len(a); i++ {\n        for j := i\
    \ + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n    \
    \            if a[i] < a[j] && a[i] < a[k] {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i *\
    \ i - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n      \
    \          }\n            }\n        }\n    }\n    return max\n}\n", "    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n\
    \        for j < n {\n            k := j + 1\n            for k < n {\n      \
    \          if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n   \
    \             }\n                k++\n            }\n            j++\n       \
    \ }\n        i++\n    }\n    return max\n}\n", "    var a []int\n    for i :=\
    \ 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    var result\
    \ int\n    for i := 0; i < len(a); i++ {\n        for j := 0; j < len(a); j++\
    \ {\n            for k := 0; k < len(a); k++ {\n                if i+j+k == len(a)\
    \ && a[i] < a[j] && a[j] < a[k] {\n                    result++\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n", "    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n          \
    \  for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n         \
    \       a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n         \
    \       if a[i] + a[j] + a[k] == 3 {\n                    return 1\n         \
    \       }\n            }\n        }\n    }\n    return 0\n}\n", "    var a []int\n\
    \    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var count\
    \ int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    count++\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n", "    var a []int\n    for i := 1; i <=\
    \ n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n\
    \    var count int\n    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n\
    \            count += 3\n            for j := i + 1; j < len(a); j++ {\n     \
    \           if a[j] > 0 {\n                    count += 3\n                  \
    \  for k := j + 1; k < len(a); k++ {\n                        if a[k] > 0 {\n\
    \                            count += 3\n                            if a[i] <\
    \ a[j] && a[i] < a[k] && a[j] < a[k] {\n                                return\
    \ count\n                            }\n                        }\n          \
    \          }\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    var count int = 0\n    for i := 0; i < len(a); i++ {\n  \
    \      for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    return 1\n                }\n            }\n   \
    \     }\n    }\n    return 0\n}\n", "    var a []int\n    for i := 1; i <= n;\
    \ i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n \
    \   var count int\n    for i := 0; i < len(a); i++ {\n        if a[i] > 0 {\n\
    \            count += 3\n            if a[i] > a[i+1] && a[i] > a[i+2] {\n   \
    \             count += 2\n            }\n        }\n    }\n    return count\n\
    }\n", "    var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i\
    \ + 1\n    }\n    \n    count := 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                   \
    \ count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i\
    \ - i + 1)\n    }\n    \n    max := 0\n    i := 0\n    for j := 0; j < n; j++\
    \ {\n        for k := 0; k < n; k++ {\n            if a[i] < a[j] && a[i] < a[k]\
    \ {\n                max++\n            }\n        }\n        i++\n    }\n   \
    \ return max\n}\n", "    result := 0\n    arr := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    for i := 0; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                if arr[i] + arr[j] + arr[k] == 3 {\n         \
    \           result++\n                }\n            }\n        }\n    }\n   \
    \ return result\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n      \
    \  a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var triples\
    \ int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n  \
    \          for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    triples++\n                }\n            }\n  \
    \      }\n    }\n    return triples\n}\n", "    var a []int\n    for i := 1; i\
    \ <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n \
    \   \n    var count int\n    for i := 0; i < len(a); i++ {\n        for j := i\
    \ + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n    \
    \            if a[i] + a[j] + a[k] == 3 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n", "    result\
    \ := 0\n    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n", "    var a []int\n\
    \    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n    }\n  \
    \  sort.Ints(a)\n    \n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        if i > 0 && a[i-1] > a[i] {\n            count++\n        }\n       \
    \ if i > 0 && a[i-1] < a[i] {\n            count--\n        }\n        if a[i]\
    \ > 3*a[i-1] {\n            count++\n        }\n        if a[i] < 3*a[i-1] {\n\
    \            count--\n        }\n    }\n    return count\n}\n", "    arr := make([]int,\
    \ n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n  \
    \  max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j]\
    \ + arr[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n", "    arr := make([]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n    }\n    max := 0\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if arr[i] + arr[j] + arr[k] ==\
    \ 3 {\n                    max++\n                }\n            }\n        }\n\
    \    }\n    return max\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n\
    \        a = append(a, i*i - i + 1)\n    }\n    sort.Ints(a)\n    \n    var result\
    \ int\n    for i := 0; i < len(a); i++ {\n        if i > 0 && a[i-1] + a[i] ==\
    \ a[i-2]+a[i] {\n            result++\n        }\n    }\n    return result\n}\n",
  "    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i\
    \ - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n         \
    \       }\n            }\n        }\n    }\n    return max\n}\n", "    arr :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n\
    \    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    max++\n                }\n   \
    \         }\n        }\n    }\n    return max\n}\n", "    var a []int\n    for\
    \ i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    \n    max :=\
    \ 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] ==\
    \ 3 {\n                    max++\n                }\n            }\n        }\n\
    \    }\n    return max\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n\
    \        a[i] = i * i - i + 1\n    }\n    \n    var count int = 0\n    for i :=\
    \ 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k :=\
    \ j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n        \
    \            count++\n                }\n            }\n        }\n    }\n   \
    \ return count\n}\n", "    var a []int\n    for i := 1; i <= n; i++ {\n      \
    \  for j := 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n        \
    \        if i+j+k == i*i*i + j*j*j + k*k*k {\n                    a = append(a,\
    \ i*i*i + j*j*j + k*k*k)\n                }\n            }\n        }\n    }\n\
    \    return len(a)\n}\n", "    var a []int\n    for i := 0; i < n; i++ {\n   \
    \     a[i] = i * i - i + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n\
    \        j := i + 1\n        for j < n {\n            k := j + 1\n           \
    \ for k < n {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n\
    \                    max++\n                }\n                k++\n         \
    \   }\n            j++\n        }\n        i++\n    }\n    return max\n}\n", " \
    \   var a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++\
    \ {\n            for k := 1; k <= n; k++ {\n                a[i] = i * i - i +\
    \ 1\n                a[j] = i * j - j + 1\n                a[k] = i * k - k +\
    \ 1\n                if a[i] < a[j] && a[j] < a[k] {\n                    return\
    \ 1\n                }\n            }\n        }\n    }\n    return 0\n}\n", " \
    \   var a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    sort.Ints(a)\n    \n    var triples int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n",
  "    arr := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i\
    \ - i + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n         \
    \       }\n            }\n        }\n    }\n    return max\n}\n", "    arr :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i + 1\n\
    \    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if arr[i]\
    \ + arr[j] + arr[k] == 3 {\n                    max++\n                }\n   \
    \         }\n        }\n    }\n    return max\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
