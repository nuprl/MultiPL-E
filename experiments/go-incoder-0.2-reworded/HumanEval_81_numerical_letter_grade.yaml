name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string\
  \ {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n\
    \    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-1] / float64(gradesLen)\n\
    \n    gradesGrade := []string{}\n    for i := 0; i < gradesLen; i++ {\n      \
    \  gradesGrade = append(gradesGrade, fmt.Sprintf(\"%+.2f\", grades[i]))\n    }\n\
    \n    gradesGrade = append(gradesGrade, \"E\")\n\n    gradesGrade = append(gradesGrade,\
    \ fmt.Sprintf(\"%+.2f\", gradesAvg))\n\n    if gradesAvg > gradesMax {\n     \
    \   gradesGrade = append(gradesGrade, \"D+\")\n    } else if gradesAvg < gradesMin\
    \ {\n        gradesGrade = append(gradesGrade, \"D-\")\n    } else {\n       \
    \ gradesGrade = append(gradesGrade, \"D\")\n    }\n\n    if gradesAvg > gradesMax\
    \ {\n        gradesGrade = append(gradesGrade, \"C+\")\n    } else if gradesAvg\
    \ < gradesMin {\n        gradesGrade = append(gradesGrade, \"C\")\n    } else\
    \ {\n        gradesGrade = append(gradesGrade, \"C-\")\n    }\n\n    if gradesAvg\
    \ > gradesMax {\n        gradesGrade = append(gradesGrade, \"B+\")\n    } else\
    \ if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade, \"B\"\
    )\n    } else {\n        gradesGrade = append(gradesGrade, \"B-\")\n    }\n\n\
    \    if gradesAvg > gradesMax {\n        gradesGrade = append(gradesGrade, \"\
    A+\")\n    } else if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade,\
    \ \"A\")\n    } else {\n        gradesGrade = append(gradesGrade, \"A-\")\n  \
    \  }\n\n    if gradesAvg > gradesMax {\n        gradesGrade = append(gradesGrade,\
    \ \"A\")\n    } else if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade,\
    \ \"A+\")\n    } else {\n        gradesGrade = append(gradesGrade, \"A+\")\n \
    \   }\n\n    return gradesGrade\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n        } else if grades[i] >= 3.0 && grades[i] < 4.0 {\n         \
    \   result[i] = \"D-\"\n        } else if grades[i] >= 4.0 && grades[i] < 5.0\
    \ {\n            result[i] = \"B-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 6.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 6.0\
    \ && grades[i] < 7.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 7.0 && grades[i] < 8.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 8.0 && grades[i] < 9.0 {\n            result[i] = \"B-\"\n \
    \       } else if grades[i] >= 9.0 && grades[i] < 10.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 10.0 && grades[i] < 11.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 11.0 && grades[i] <\
    \ 12.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 12.0\
    \ && grades[i] < 13.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 13.0 && grades[i] < 14.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 14.0 && grades[i] < 15.0 {\n            result[i] = \"B-\"\n\
    \        } else if grades[i] >= 15.0 && grades[i] < 16.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 16.0 && grades[i] < 17.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 17.0 && grades[i] <\
    \ 18.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 18.0\
    \ && grades[i] < 19.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 19.0 && grades[i] < 20.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 20.0 && grades[i] < 21.0 {\n            result[i] = \"B-\"\n\
    \        } else if grades[i] >= 21.0 && grades[i] < 22.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 22.0 && grades[i] < 23.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 23.0 && grades[i] <\
    \ 24.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 24.0\
    \ && grades[i] < 25.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 25.0 && grades[i] < 26.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 26.0 && grades[i] < 27.0 {\n            result[i] = \"B-\"\n\
    \        ", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0\
    \ {\n            letter_grades[i] = \"E\"\n            continue\n        }\n \
    \       if grades[i] < 3.3 {\n            letter_grades[i] = \"D-\"\n        \
    \    continue\n        }\n        if grades[i] < 3.7 {\n            letter_grades[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 4.0 {\n  \
    \          letter_grades[i] = \"B-\"\n            continue\n        }\n      \
    \  if grades[i] < 4.3 {\n            letter_grades[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.7 {\n            letter_grades[i] = \"A-\"\
    \n            continue\n        }\n        if grades[i] < 5.0 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 5.3 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 5.7 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 6.3 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 6.7 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 7.0 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 7.3 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 7.7 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 8.0 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 8.3 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 8.7 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 9.0 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 9.3 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 9.7 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 10.0 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 10.3 {\n           \
    \ letter_grades[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 10.7 {\n            letter_grades[i] = \"A\"\n            continue\n     \
    \   }\n        if grades[i] < 11.0 {\n            letter_grades[i] = \"A\"", " \
    \   grades_len := len(grades)\n    result := make([]string, grades_len)\n    \n\
    \    // The first grade is always A+\n    result[0] = fmt.Sprintf(\"A+\", grades[0])\n\
    \    \n    // The second grade is always B\n    if grades[1] > 3.7 { \n      \
    \  result[1] = fmt.Sprintf(\"B\", grades[1])\n    } else if grades[1] > 3.3 {\
    \ \n        result[1] = fmt.Sprintf(\"B-\", grades[1])\n    } else if grades[1]\
    \ > 3.0 { \n        result[1] = fmt.Sprintf(\"C+\", grades[1])\n    } else if\
    \ grades[1] > 2.7 { \n        result[1] = fmt.Sprintf(\"C\", grades[1])\n    }\
    \ else if grades[1] > 2.3 { \n        result[1] = fmt.Sprintf(\"C-\", grades[1])\n\
    \    } else if grades[1] > 2.0 { \n        result[1] = fmt.Sprintf(\"D+\", grades[1])\n\
    \    } else if grades[1] > 1.7 { \n        result[1] = fmt.Sprintf(\"D\", grades[1])\n\
    \    } else if grades[1] > 1.3 { \n        result[1] = fmt.Sprintf(\"D-\", grades[1])\n\
    \    } else if grades[1] > 1.0 { \n        result[1] = fmt.Sprintf(\"E\", grades[1])\n\
    \    }\n    \n    // The third grade is always C\n    if grades[2] > 3.7 { \n\
    \        result[2] = fmt.Sprintf(\"C\", grades[2])\n    } else if grades[2] >\
    \ 3.3 { \n        result[2] = fmt.Sprintf(\"C-\", grades[2])\n    } else if grades[2]\
    \ > 3.0 { \n        result[2] = fmt.Sprintf(\"C+\", grades[2])\n    } else if\
    \ grades[2] > 2.7 { \n        result[2] = fmt.Sprintf(\"C\", grades[2])\n    }\
    \ else if grades[2] > 2.3 { \n        result[2] = fmt.Sprintf(\"C-\", grades[2])\n\
    \    } else if grades[2] > 2.0 { \n        result[2] = fmt.Sprintf(\"D+\", grades[2])\n\
    \    } else if grades[2] > 1.7 { \n        result[2] = fmt.Sprintf(\"D\", grades[2])\n\
    \    } else if grades[2] > 1.3 { \n        result[2] = fmt.Sprintf(\"D-\", grades[2])\n\
    \    } else if grades[2] > 1.0 { \n        result[2] = fmt.Sprintf(\"E\", grades[2])\n\
    \    }\n    \n    // The fourth grade is always A-\n    if grades[3] > 3.7 { \n\
    \        result[3] = fmt.Sprintf(\"A-\", grades[3])\n    } else if grades[3] >\
    \ 3.3 { \n        result[3] = fmt.Sprintf(\"A+\", grades[3])\n    } else if grades[3]\
    \ > 3.0 { \n        result[3] = fmt.S", "    var result []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            result = append(result,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            result = append(result,\
    \ \"B\")\n        } else if grade > 2.3 {\n            result = append(result,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.0 {\n            result\
    \ = append(result, \"C+\")\n        } else if grade > 1.3 && grade < 1.7 {\n \
    \           result = append(result, \"C\")\n        } else if grade > 1.0 {\n\
    \            result = append(result, \"C-\")\n        } else if grade > 0.7 {\n\
    \            result = append(result, \"D+\")\n        } else if grade > 0.3 {\n\
    \            result = append(result, \"D\")\n        } else if grade > 0.0 {\n\
    \            result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n    return result\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The second letter grade is always B\n    letter_grades[1] = \"\
    B\"\n    \n    // The third letter grade is always C\n    letter_grades[2] = \"\
    C\"\n    \n    // The fourth letter grade is always C\n    letter_grades[3] =\
    \ \"C\"\n    \n    // The fifth letter grade is always C\n    letter_grades[4]\
    \ = \"C\"\n    \n    // The sixth letter grade is always C\n    letter_grades[5]\
    \ = \"C\"\n    \n    // The seventh letter grade is always C\n    letter_grades[6]\
    \ = \"C\"\n    \n    // The eighth letter grade is always C\n    letter_grades[7]\
    \ = \"C\"\n    \n    // The ninth letter grade is always C\n    letter_grades[8]\
    \ = \"C\"\n    \n    // The tenth letter grade is always C\n    letter_grades[9]\
    \ = \"C\"\n    \n    // The eleventh letter grade is always C\n    letter_grades[10]\
    \ = \"C\"\n    \n    // The twelfth letter grade is always C\n    letter_grades[11]\
    \ = \"C\"\n    \n    // The thirteenth letter grade is always C\n    letter_grades[12]\
    \ = \"C\"\n    \n    // The fourteenth letter grade is always C\n    letter_grades[13]\
    \ = \"C\"\n    \n    // The fifteenth letter grade is always C\n    letter_grades[14]\
    \ = \"C\"\n    \n    // The sixteenth letter grade is always C\n    letter_grades[15]\
    \ = \"C\"\n    \n    // The seventeenth letter grade is always C\n    letter_grades[16]\
    \ = \"C\"\n    \n    // The eighteenth letter grade is always C\n    letter_grades[17]\
    \ = \"C\"\n    \n    // The nineteenth letter grade is always C\n    letter_grades[18]\
    \ = \"C\"\n    \n    // The twentieth letter grade is always C\n    letter_grades[19]\
    \ = \"C\"\n    \n    // The twenty-first letter grade is always C\n    letter_grades[20]\
    \ = \"C\"\n    \n    // The twenty-second letter grade is always ", "    result\
    \ := make([]string, len(grades))\n    \n    // The first letter grade is always\
    \ A+\n    result[0] = \"A+\"\n    \n    // The second letter grade is always B\n\
    \    for i := 1; i < len(grades); i++ {\n        if grades[i] > 3.7 && grades[i]\
    \ < 3.3 {\n            result[i] = \"B+\"\n        } else if grades[i] > 3.3 &&\
    \ grades[i] < 3.0 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ > 3.0 && grades[i] < 2.7 {\n            result[i] = \"B-\"\n        } else if\
    \ grades[i] > 2.7 && grades[i] < 2.3 {\n            result[i] = \"B\"\n      \
    \  } else if grades[i] > 2.3 && grades[i] < 2.0 {\n            result[i] = \"\
    B-\"\n        } else if grades[i] > 2.0 && grades[i] < 1.7 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] > 1.7 && grades[i] < 1.3 {\n         \
    \   result[i] = \"C\"\n        } else if grades[i] > 1.3 && grades[i] < 1.0 {\n\
    \            result[i] = \"C-\"\n        } else if grades[i] > 1.0 && grades[i]\
    \ < 0.7 {\n            result[i] = \"C\"\n        } else if grades[i] > 0.7 &&\
    \ grades[i] < 0.0 {\n            result[i] = \"C-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    \n    return result\n}\n", " \
    \   grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n \
    \           letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"D-\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"C\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n        \
    \    letter_grades[i] = \"A\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"A+\"\n        }\n    }\n    return letter_grades\n}\n",
  "    var result []string\n    for _, grade := range grades {\n        if grade >\
    \ 3.0 {\n            result = append(result, fmt.Sprintf(\"A+\"))\n        } else\
    \ if grade > 2.7 {\n            result = append(result, fmt.Sprintf(\"B\"))\n\
    \        } else if grade > 2.3 {\n            result = append(result, fmt.Sprintf(\"\
    B-\"))\n        } else if grade > 1.3 {\n            result = append(result, fmt.Sprintf(\"\
    C+\"))\n        } else if grade > 0.7 {\n            result = append(result, fmt.Sprintf(\"\
    C\"))\n        } else if grade > 0.3 {\n            result = append(result, fmt.Sprintf(\"\
    C-\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D+\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D-\"))\n        } else {\n            result = append(result, fmt.Sprintf(\"E\"\
    ))\n        }\n    }\n    return result\n}\n", "    gradesLen := len(grades)\n\
    \    gradesMax := gradesLen - 1\n    gradesMin := 0\n    gradesSum, gradesProduct,\
    \ gradesAvg := 0, 0, 0\n    for i := 0; i < gradesLen; i++ {\n        gradesSum\
    \ += grades[i]\n        gradesProduct *= grades[i]\n        gradesAvg += grades[i]\n\
    \    }\n    gradesAvg /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n\
    \    gradesProduct /= float64(gradesLen)\n    gradesMin = math.Max(gradesMin,\
    \ grades[0])\n    gradesMax = math.Min(gradesMax, grades[gradesLen-1])\n    gradesSum\
    \ = math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct, 0)\n \
    \   gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n\
    \    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg = math.Min(gradesAvg,\
    \ gradesSum)\n    gradesSum = math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct,\
    \ 0)\n    gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum,\
    \ gradesMax)\n    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg\
    \ = math.Min(gradesAvg, gradesSum)\n    gradesSum = math.Max(gradesSum, 0)\n \
    \   gradesProduct = math.Max(gradesProduct, 0)\n    gradesAvg = math.Max(gradesAvg,\
    \ 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n    gradesProduct = math.Min(gradesProduct,\
    \ gradesMin)\n    gradesAvg = math.Min(gradesAvg, gradesSum)\n    gradesSum =\
    \ math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct, 0)\n   \
    \ gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n\
    \    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg = math.Min(gradesAv",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ <= 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] <= 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letterGrades[i] = \"\
    B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ <= 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 2.0 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] <= 1.3 {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ <= 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := 0;\
    \ i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSortedSorted\
    \ := make([]float64, len(gradesSorted))\n    sort.Float64s(gradesSorted)\n   \
    \ gradesSortedSorted2 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted2)\n\
    \    gradesSortedSorted3 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted3)\n\
    \    gradesSortedSorted4 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted4)\n\
    \    gradesSortedSorted5 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted5)\n\
    \    gradesSortedSorted6 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted6)\n\
    \    gradesSortedSorted7 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted7)\n\
    \    gradesSortedSorted8 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted8)\n\
    \    gradesSortedSorted9 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted9)\n\
    \    gradesSortedSorted10 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted10)\n\
    \    gradesSortedSorted11 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted11)\n\
    \    gradesSortedSorted12 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted12)\n\
    \    gradesSortedSorted13 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted13)\n\
    \    gradesSortedSorted14 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted14)\n\
    \    gradesSortedSorted15 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted15)\n\
    \    grades", "    var letter []string\n    var sum float64\n    var i int\n \
    \   for i = 0; i < len(grades); i++ {\n        sum += grades[i]\n        if sum\
    \ > 4.0 {\n            letter = append(letter, \"A+\")\n            sum += 4.0\
    \ - sum\n        } else if sum > 3.7 {\n            letter = append(letter, \"\
    A\")\n            sum += 3.7 - sum\n        } else if sum > 3.3 {\n          \
    \  letter = append(letter, \"A-\")\n            sum += 3.3 - sum\n        } else\
    \ if sum > 3.0 {\n            letter = append(letter, \"B+\")\n            sum\
    \ += 3.0 - sum\n        } else if sum > 2.7 {\n            letter = append(letter,\
    \ \"B\")\n            sum += 2.7 - sum\n        } else if sum > 2.3 {\n      \
    \      letter = append(letter, \"B-\")\n            sum += 2.3 - sum\n       \
    \ } else if sum > 2.0 {\n            letter = append(letter, \"C+\")\n       \
    \     sum += 2.0 - sum\n        } else if sum > 1.7 {\n            letter = append(letter,\
    \ \"C\")\n            sum += 1.7 - sum\n        } else if sum > 1.3 {\n      \
    \      letter = append(letter, \"C-\")\n            sum += 1.3 - sum\n       \
    \ } else if sum > 1.0 {\n            letter = append(letter, \"D+\")\n       \
    \     sum += 1.0 - sum\n        } else if sum > 0.7 {\n            letter = append(letter,\
    \ \"D\")\n            sum += 0.7 - sum\n        } else if sum > 0.0 {\n      \
    \      letter = append(letter, \"D-\")\n            sum += 0.0 - sum\n       \
    \ } else {\n            letter = append(letter, \"E\")\n        }\n    }\n   \
    \ return letter\n}\n", "    result := make([]string, len(grades))\n    \n    //\
    \ Loop through each grade and see if it is greater than the GPA \n    // of the\
    \ next grade and if so, add it to the result array\n    for i := 0; i < len(grades)-1;\
    \ i++ {\n        if grades[i] > grades[i+1] {\n            result[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i]+grades[i+1]/2)\n        } else {\n            result[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i])\n        }\n    }\n    \n    // Add the last grade to the\
    \ result array if it is not greater than the \n    // GPA of the next grade\n\
    \    if grades[len(grades)-1] > grades[len(grades)-2]+grades[len(grades)-1]/2\
    \ {\n        result[len(grades)-1] = fmt.Sprintf(\"%+.2f\", grades[len(grades)-1]+grades[len(grades)-2]/2)\n\
    \    }\n    \n    return result\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    result\
    \ := make([]string, len(grades))\n    for i := range grades {\n        if grades[i]\
    \ < 3.0 {\n            result[i] = \"E\"\n        } else if grades[i] < 3.3 {\n\
    \            result[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n       \
    \     result[i] = \"C+\"\n        } else if grades[i] < 4.0 {\n            result[i]\
    \ = \"B+\"\n        } else if grades[i] < 4.3 {\n            result[i] = \"B-\"\
    \n        } else if grades[i] < 4.7 {\n            result[i] = \"B\"\n       \
    \ } else if grades[i] < 5.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] < 5.3 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ < 5.7 {\n            result[i] = \"A-\"\n        } else if grades[i] < 6.0 {\n\
    \            result[i] = \"A\"\n        } else {\n            result[i] = \"A+\"\
    \n        }\n    }\n    return result\n}\n", "    result := make([]string, len(grades))\n\
    \    i := 0\n    for _, grade := range grades {\n        if grade > 3.0 {\n  \
    \          result[i] = \"B+\"\n        } else if grade > 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grade > 2.3 {\n            result[i] = \"B-\"\n \
    \       } else if grade > 2.0 {\n            result[i] = \"C+\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C\"\n        } else if grade > 1.3\
    \ {\n            result[i] = \"C-\"\n        } else if grade > 1.0 {\n       \
    \     result[i] = \"D+\"\n        } else if grade > 0.7 {\n            result[i]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            result[i] = \"D-\"\n \
    \       } else {\n            result[i] = \"E\"\n        }\n        i++\n    }\n\
    \    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula:\n\
    \    // GPA * 10 / 100\n    // The formula is valid for GPA between 3.0 and 3.7\n\
    \    // The formula is valid for GPA between 2.0 and 2.7\n    // The formula is\
    \ valid for GPA between 1.7 and 2.0\n    // The formula is valid for GPA between\
    \ 1.0 and 0.7\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid for\
    \ GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and\
    \ 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The formula\
    \ is valid for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between\
    \ 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid for\
    \ GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and\
    \ 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The formula\
    \ is valid for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between\
    \ 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // ", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n        }\
    \ else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else if grades[i] < 3.3 {\n            letterGrades[i] =\
    \ \"C-\"\n        } else if grades[i] < 3.7 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] < 4.0 {\n            letterGrades[i] = \"B+\"\
    \n        } else if grades[i] < 4.3 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] < 4.7 {\n            letterGrades[i] = \"A+\"\n  \
    \      } else if grades[i] < 5.0 {\n            letterGrades[i] = \"A\"\n    \
    \    } else if grades[i] < 5.3 {\n            letterGrades[i] = \"A-\"\n     \
    \   } else if grades[i] < 5.7 {\n            letterGrades[i] = \"A\"\n       \
    \ } else if grades[i] < 6.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    var result []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            result = append(result, \"B+\")\n        } else if\
    \ grade > 2.7 {\n            result = append(result, \"B\")\n        } else if\
    \ grade > 2.3 {\n            result = append(result, \"B-\")\n        } else if\
    \ grade > 2.0 {\n            result = append(result, \"C+\")\n        } else if\
    \ grade > 1.7 {\n            result = append(result, \"C\")\n        } else if\
    \ grade > 1.3 {\n            result = append(result, \"C-\")\n        } else if\
    \ grade > 1.0 {\n            result = append(result, \"D+\")\n        } else if\
    \ grade > 0.7 {\n            result = append(result, \"D\")\n        } else if\
    \ grade > 0.0 {\n            result = append(result, \"D-\")\n        } else {\n\
    \            result = append(result, \"E\")\n        }\n    }\n    return result\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n  \
    \  for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n         \
    \   letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] <=\
    \ 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] <= 1.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades := append([]float64{}, grades...)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(", "    gradesSorted := make([]float64,\
    \ len(grades))\n    sort.Float64s(grades)\n    gradesSorted = append(gradesSorted,\
    \ grades...)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted =\
    \ append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n  \
    \  gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(", "    grades := append([]float64{}, grades...)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n \
    \       } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n  \
    \      } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else {\n            letterGrades[i] = \"A+\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] =\
    \ \"\"\n    }\n    \n    // The first letter grade is A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is D-\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are A, B, C and D\n    for i\
    \ := 0; i < gradesLen-1; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i+1]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i+1]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i+1]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i+1]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i+1]\
    \ = \"C-\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i+1]\
    \ = \"C\"\n        } else if grades[i] >= 0.3 {\n            letterGrades[i+1]\
    \ = \"C\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -0.3 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -0.7 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -1.3 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -1.7 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -2.3 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -2.7 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else if grades[i] >= -3.0 {\n            letterGrades[i+1]\
    \ = \"D\"\n        } else {\n            letterGrades[i+1] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    // Loop through the grades and find\
    \ the letter grade\n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\n  \
    \      } else {\n            letterGrades[i] = \"D-\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    gradesSorted = append(gradesSorted, grades...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n      \
    \  } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n      \
    \  } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n     \
    \   } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n       \
    \     letter_grades[i] = \"D\"\n        } else if grades[i] < 1.0 {\n        \
    \    letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // Loop\
    \ through the grades\n    for i := 0; i < grades_len; i++ {\n        // If the\
    \ grade is greater than or equal to 3.7\n        if grades[i] >= 3.7 {\n     \
    \       // If the grade is greater than or equal to 3.0\n            if grades[i]\
    \ >= 3.0 {\n                // If the grade is greater than or equal to 2.0\n\
    \                if grades[i] >= 2.0 {\n                    // If the grade is\
    \ greater than or equal to 1.0\n                    if grades[i] >= 1.0 {\n  \
    \                      // If the grade is greater than or equal to 0.7\n     \
    \                   if grades[i] >= 0.7 {\n                            // If the\
    \ grade is greater than or equal to 0.0\n                            if grades[i]\
    \ >= 0.0 {\n                                // If the grade is less than or equal\
    \ to 0.0\n                                if grades[i] <= 0.0 {\n            \
    \                        // If the grade is less than or equal to 0.7\n      \
    \                              if grades[i] <= 0.7 {\n                       \
    \                 // If the grade is less than or equal to 1.0\n             \
    \                           if grades[i] <= 1.0 {\n                          \
    \                  // If the grade is less than or equal to 2.0\n            \
    \                                if grades[i] <= 2.0 {\n                     \
    \                           // If the grade is less than or equal to 3.0\n   \
    \                                             if grades[i] <= 3.0 {\n        \
    \                                            // If the grade is less than or equal\
    \ to 4.0\n                                                    if grades[i] <=\
    \ 4.0 {\n                                                        // If the grade\
    \ is less than or equal to 5.0\n                                             \
    \           if grades[i] <= 5.0 {\n                                          \
    \                  // If the grade is less than or equal to 6.0\n            \
    \                                                if grades[i] <= 6.0 {\n     \
    \                                                           // If the grade is\
    \ less than or equal to 7.0\n                                                \
    \                if grades[i] <= 7.0 {\n                                     \
    \                               // If the grade is less than or equal to 8.0\n\
    \                                                                    if grades[i]\
    \ <= 8.0 {\n                                                                 \
    \       // If the grade is less than or equal to 9.0\n                       \
    \                                                 if grades[i] <= 9.0 {\n    \
    \                                                                        // If\
    \ the grade is less than or equal to 10.0\n                                  \
    \                                          if grades[i] <= 10.0 {\n          \
    \                                                                      // If the\
    \ grade is less than or equal to 11.0\n                                      \
    \                                          if grades[i] <= 11.0 {\n          \
    \                                                                          //\
    \ If the grade is less than or equal to 12.0\n                               \
    \                                                     if grades[i] <= 12.0 {\n\
    \                                                                            \
    \            // If the grade is less than or equal to 13.0\n                 \
    \                                                                       if grades[i]\
    \ <= 13.0 {\n                                                                \
    \                            // If the grade is less than or equal to 14.0\n \
    \                                                                            \
    \               if grades[i] <= 14.0 {\n                                     \
    \                                                           // If the grade is\
    \ less than or equal to 15.0\n                                               \
    \                                                 if grades[i] <= 15.0 {\n   \
    \                                                                            \
    \                     // If the grade is less than or equal to 16.0\n        \
    \                                                                            \
    \                if grades[i] <= 16.0 {\n                                    \
    \                                                                    // If the\
    \ grade is less than or ", "    gradesLen := len(grades)\n    letterGrades :=\
    \ make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    for i := 1; i <\
    \ gradesLen; i++ {\n        if grades[i-1] > grades[i] {\n            letterGrades[i]\
    \ = \"D-\"\n        } else if grades[i-1] < grades[i] {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i-1] == grades[i] {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i-1] > grades[i] && grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1] > grades[i]\
    \ && grades[i-1] == grades[i] {\n            letterGrades[i] = \"B\"\n       \
    \ } else if grades[i-1] < grades[i] && grades[i-1] > grades[i] {\n           \
    \ letterGrades[i] = \"A+\"\n        } else if grades[i-1] < grades[i] && grades[i-1]\
    \ == grades[i] {\n            letterGrades[i] = \"A\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, grade", "    gradesLen := len(grades)\n    gradesMax :=\
    \ grades[gradesLen-1]\n    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-2]\n\
    \    gradesGrade := grades[gradesLen-3]\n    gradesGrades := []string{}\n    gradesGrades\
    \ = append(gradesGrades, \"A+\")\n    gradesGrades = append(gradesGrades, \"A\"\
    )\n    gradesGrades = append(gradesGrades, \"A-\")\n    gradesGrades = append(gradesGrades,\
    \ \"B+\")\n    gradesGrades = append(gradesGrades, \"B\")\n    gradesGrades =\
    \ append(gradesGrades, \"B-\")\n    gradesGrades = append(gradesGrades, \"C+\"\
    )\n    gradesGrades = append(gradesGrades, \"C\")\n    gradesGrades = append(gradesGrades,\
    \ \"C-\")\n    gradesGrades = append(gradesGrades, \"D+\")\n    gradesGrades =\
    \ append(gradesGrades, \"D\")\n    gradesGrades = append(gradesGrades, \"D-\"\
    )\n    gradesGrades = append(gradesGrades, \"E\")\n    gradesGrades = append(gradesGrades,\
    \ \"F\")\n    gradesGrades = append(gradesGrades, \"G\")\n    gradesGrades = append(gradesGrades,\
    \ \"H\")\n    gradesGrades = append(gradesGrades, \"I\")\n    gradesGrades = append(gradesGrades,\
    \ \"J\")\n    gradesGrades = append(gradesGrades, \"K\")\n    gradesGrades = append(gradesGrades,\
    \ \"L\")\n    gradesGrades = append(gradesGrades, \"M\")\n    gradesGrades = append(gradesGrades,\
    \ \"N\")\n    gradesGrades = append(gradesGrades, \"O\")\n    gradesGrades = append(gradesGrades,\
    \ \"P\")\n    gradesGrades = append(gradesGrades, \"Q\")\n    gradesGrades = append(gradesGrades,\
    \ \"R\")\n    gradesGrades = append(gradesGrades, \"S\")\n    gradesGrades = append(gradesGrades,\
    \ \"T\")\n    gradesGrades = append(gradesGrades, \"U\")\n    gradesGrades = append(gradesGra",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i]\
    \ = \"\"\n        if grades[i] > 3.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else if grades[i] < 3.7 {\n            letterGrades[i] = \"C\"\n   \
    \     } else if grades[i] < 4.0 {\n            letterGrades[i] = \"B\"\n     \
    \   } else if grades[i] < 4.3 {\n            letterGrades[i] = \"B+\"\n      \
    \  } else if grades[i] < 4.6 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] < 4.9 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] < 5.2 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] < 5.5 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i]\
    \ < 5.8 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] <\
    \ 6.1 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] < 6.4\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] < 6.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] < 7 {\n    \
    \        letterGrades[i] = \"A+\"\n        } else if grades[i] < 7.3 {\n     \
    \       letterGrades[i] = \"A+\"\n        } else if grades[i] < 7.6 {\n      \
    \      letterGrades[i] = \"A+\"\n        } else if grades[i] < 7.9 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] < 8.2 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] < 8.5 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] < 8.8 {\n          \
    \  letterGrades[i] = \"A+\"\n        } else if grades[i] < 9.1 {\n           \
    \ letterGrades[i] = \"A+\"\n        } else if grades[i] < 9.4 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] < 9.7 {\n            letterGrades[i] =\
    \ \"A+\"\n        } else if grades[i] < 10 {\n            letterGrades[i] = \"\
    A+\"\n        }\n    }\n    return letterGrades\n}\n", "    result := make([]string,\
    \ len(grades))\n    \n    min := grades[0]\n    max := grades[len(grades)-1]\n\
    \    \n    for i := 0; i < len(grades); i++ {\n        if grades[i] < min {\n\
    \            min = grades[i]\n        }\n        if grades[i] > max {\n      \
    \      max = grades[i]\n        }\n    }\n    \n    for i := 0; i < len(grades);\
    \ i++ {\n        if grades[i] >= min && grades[i] <= max {\n            result[i]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i])\n        } else {\n            result[i]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i]-min)\n        }\n    }\n    \n    return\
    \ result\n}\n", "    gradesLen := len(grades)\n    gradesGPA := make([]float64,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        gradesGPA[i] = grades[i]\n\
    \    }\n    gradesGPA[0] = gradesGPA[0]\n    gradesGPA[gradesLen-1] = gradesGPA[gradesLen-1]\n\
    \    gradesGPA[gradesLen-2] = gradesGPA[gradesLen-2]\n    gradesGPA[gradesLen-3]\
    \ = gradesGPA[gradesLen-3]\n    gradesGPA[gradesLen-4] = gradesGPA[gradesLen-4]\n\
    \    gradesGPA[gradesLen-5] = gradesGPA[gradesLen-5]\n    gradesGPA[gradesLen-6]\
    \ = gradesGPA[gradesLen-6]\n    gradesGPA[gradesLen-7] = gradesGPA[gradesLen-7]\n\
    \    gradesGPA[gradesLen-8] = gradesGPA[gradesLen-8]\n    gradesGPA[gradesLen-9]\
    \ = gradesGPA[gradesLen-9]\n    gradesGPA[gradesLen-10] = gradesGPA[gradesLen-10]\n\
    \    gradesGPA[gradesLen-11] = gradesGPA[gradesLen-11]\n    gradesGPA[gradesLen-12]\
    \ = gradesGPA[gradesLen-12]\n    gradesGPA[gradesLen-13] = gradesGPA[gradesLen-13]\n\
    \    gradesGPA[gradesLen-14] = gradesGPA[gradesLen-14]\n    gradesGPA[gradesLen-15]\
    \ = gradesGPA[gradesLen-15]\n    gradesGPA[gradesLen-16] = gradesGPA[gradesLen-16]\n\
    \    gradesGPA[gradesLen-17] = gradesGPA[gradesLen-17]\n    gradesGPA[gradesLen-18]\
    \ = gradesGPA[gradesLen-18]\n    gradesGPA[gradesLen-19] = gradesGPA[gradesLen-19]\n\
    \    gradesGPA[gradesLen-20] = gradesGPA[gradesLen-20]\n    gradesGPA[gradesLen-21]\
    \ = gradesGP", "    grades_string := \"\"\n    \n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            grades_string += \"B+\"\n        }\
    \ else if grade > 2.7 {\n            grades_string += \"B\"\n        } else if\
    \ grade > 2.3 {\n            grades_string += \"B-\"\n        } else if grade\
    \ > 2.0 {\n            grades_string += \"C+\"\n        } else if grade > 1.7\
    \ {\n            grades_string += \"C\"\n        } else if grade > 1.3 {\n   \
    \         grades_string += \"C-\"\n        } else if grade > 1.0 {\n         \
    \   grades_string += \"D+\"\n        } else if grade > 0.7 {\n            grades_string\
    \ += \"D\"\n        } else if grade > 0.0 {\n            grades_string += \"D-\"\
    \n        } else {\n            grades_string += \"E\"\n        }\n    }\n   \
    \ \n    return []string{grades_string}\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        letterGrades[i] = \"\"\n    }\n    \n    // The first letter\
    \ grade is always A+\n    letterGrades[0] = \"A+\"\n    \n    // The last letter\
    \ grade is always E\n    letterGrades[gradesLen-1] = \"E\"\n    \n    // The middle\
    \ letter grades are the letter grades using the formula\n    // GPA * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1) * 10^(-1)\
    \ * 10^(-1) * 10^(-1) * 10^(-1) * 10", "    gradesLen := len(grades)\n    result\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 4.0 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            result[i] = \"A\"\n        } else if grades[i] >= 3.3\
    \ {\n            result[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n  \
    \          result[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n        \
    \    result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 2.0 {\n            result[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            result[i] = \"C\"\n      \
    \  } else if grades[i] >= 1.3 {\n            result[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            result[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            result[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            result[i] = \"D-\"\n        } else {\n            result[i] =\
    \ \"E\"\n        }\n    }\n    return result\n}\n", "    var letterGrades []string\n\
    \    \n    // Loop through all the grades\n    for _, grade := range grades {\n\
    \        // If the grade is greater than or equal to 3.7\n        if grade >=\
    \ 3.7 {\n            // If the grade is greater than or equal to 3.0\n       \
    \     if grade >= 3.0 {\n                // If the grade is greater than or equal\
    \ to 2.0\n                if grade >= 2.0 {\n                    // If the grade\
    \ is greater than or equal to 1.0\n                    if grade >= 1.0 {\n   \
    \                     // If the grade is greater than or equal to 0.7\n      \
    \                  if grade >= 0.7 {\n                            // If the grade\
    \ is greater than or equal to 0.0\n                            if grade >= 0.0\
    \ {\n                                // If the grade is less than or equal to\
    \ 0.0\n                                if grade < 0.0 {\n                    \
    \                // If the grade is less than or equal to 0.0\n              \
    \                      if grade < 0.0 {\n                                    \
    \    // If the grade is less than or equal to 0.0\n                          \
    \              if grade < 0.0 {\n                                            //\
    \ If the grade is less than or equal to 0.0\n                                \
    \            if grade < 0.0 {\n                                              \
    \  // If the grade is less than or equal to 0.0\n                            \
    \                    if grade < 0.0 {\n                                      \
    \              // If the grade is less than or equal to 0.0\n                \
    \                                    if grade < 0.0 {\n                      \
    \                                  // If the grade is less than or equal to 0.0\n\
    \                                                        if grade < 0.0 {\n  \
    \                                                          // If the grade is\
    \ less than or equal to 0.0\n                                                \
    \            if grade < 0.0 {\n                                              \
    \                  // If the grade is less than or equal to 0.0\n            \
    \                                                    if grade < 0.0 {\n      \
    \                                                              // If the grade\
    \ is less than or equal to 0.0\n                                             \
    \                       if grade < 0.0 {\n                                   \
    \                                     // If the grade is less than or equal to\
    \ 0.0\n                                                                      \
    \  if grade < 0.0 {\n                                                        \
    \                    // If the grade is less than or equal to 0.0\n          \
    \                                                                  if grade <\
    \ 0.0 {\n                                                                    \
    \            // If the grade is less than or equal to 0.0\n                  \
    \                                                              if grade < 0.0\
    \ {\n                                                                        \
    \            // If the grade is less than or equal to 0.0\n                  \
    \                                                                  if grade <\
    \ 0.0 {\n                                                                    \
    \                    // If the grade is less than or equal to 0.0\n          \
    \                                                                            \
    \  if grade < 0.0 {\n                                                        \
    \                                    // If the grade is less than or equal to\
    \ 0.0\n                                                                      \
    \                      if grade < 0.0 {\n                                    \
    \                                                            // If the grade is\
    \ less than or equal to 0.0\n                                                \
    \                                                if grade < 0.0 {\n          \
    \                                                                            \
    \              // If the grade is less than or equal to 0.0\n                \
    \                                                                            \
    \        if grade < 0.0 {\n                                                  \
    \                                                      // If the grade is less\
    \ than or equal to 0.0\n                                                     \
    \                                                   if grade < 0.0 {\n       \
    \                                                                            \
    \                         // If the grade is less than or equal to 0.0", "   \
    \ var result []string\n    for _, grade := range grades {\n        if grade >\
    \ 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0 {\n\
    \            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n      \
    \      grade = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade\
    \ = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade = grade\
    \ + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n\
    \        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n      \
    \  }\n        if grade < 0.1 {\n            grade = grade + 0.1\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 0.0\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 0.0 {\n        \
    \    grade = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade\
    \ = grade + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 0.0\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n      \
    \  }\n        if grade < 0.0 ", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ letterGrades[i] = \"\"\n    }\n    for i := 0; i < gradesLen; i++ {\n      \
    \  if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if\
    \ grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if\
    \ grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i]\
    \ >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.7 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\
    \n        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    result := make([]string, len(grades))\n    \n\
    \    for i := 0; i < len(grades); i++ {\n        if grades[i] >= 3.0 {\n     \
    \       result[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n           \
    \ result[i] = \"B+\"\n        } else if grades[i] >= 2.3 {\n            result[i]\
    \ = \"B\"\n        } else if grades[i] >= 1.7 {\n            result[i] = \"C+\"\
    \n        } else if grades[i] >= 1.3 {\n            result[i] = \"C\"\n      \
    \  } else if grades[i] >= 0.7 {\n            result[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.3 {\n            result[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            result[i] = \"D-\"\n        } else {\n            result[i]\
    \ = \"E\"\n        }\n    }\n    return result\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\n \
    \           continue\n        }\n        letterGrades[i] = \"D-\"\n        if\
    \ grades[i] > 2.7 {\n            letterGrades[i] = \"D+\"\n            continue\n\
    \        }\n        if grades[i] > 2.3 {\n            letterGrades[i] = \"B-\"\
    \n            continue\n        }\n        if grades[i] > 2.0 {\n            letterGrades[i]\
    \ = \"B+\"\n            continue\n        }\n        if grades[i] > 1.7 {\n  \
    \          letterGrades[i] = \"B-\"\n            continue\n        }\n       \
    \ if grades[i] > 1.3 {\n            letterGrades[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] > 1.0 {\n            letterGrades[i] = \"C+\"\
    \n            continue\n        }\n        if grades[i] > 0.7 {\n            letterGrades[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] > 0.3 {\n   \
    \         letterGrades[i] = \"C-\"\n            continue\n        }\n        if\
    \ grades[i] > 0.0 {\n            letterGrades[i] = \"C\"\n            continue\n\
    \        }\n        if grades[i] > -0.3 {\n            letterGrades[i] = \"C-\"\
    \n            continue\n        }\n        if grades[i] > -0.7 {\n           \
    \ letterGrades[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ > -1.0 {\n            letterGrades[i] = \"C+\"\n            continue\n     \
    \   }\n        if grades[i] > -1.7 {\n            letterGrades[i] = \"C+\"\n \
    \           continue\n        }\n        if grades[i] > -2.0 {\n            letterGrades[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] > -3.0 {\n \
    \           letterGrades[i] = \"C+\"\n            continue\n        }\n      \
    \  if grades[i] > -3.7 {\n            letterGrades[i] = \"C+\"\n            continue\n\
    \        }\n        if grades[i] > -4.0 {\n            letterGrades[i] = \"C+\"\
    \n            continue\n        }\n        if grades[i] > -4.7 {\n           \
    \ letterGrades[i] = \"C+\"\n            continue\n        }\n        if grades[i]\
    \ > -5.0 {\n            letterGrades[i] = \"C+\"\n            continue\n     \
    \   }\n        if grades[i] > -5.7 {\n            letterGrades[i] = \"C+\"\n \
    \           continue\n        }\n        if grades[i] > -6.0 {\n            letterGrades[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] > -6.7 {\n \
    \           letterGrades[i] = \"C+\"\n            continue\n        }\n", "  \
    \  gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSor", "    result := make([]string, len(grades))\n\
    \    \n    // Loop through the grades and add them to the result list\n    for\
    \ i := 0; i < len(grades); i++ {\n        switch {\n        case grades[i] >=\
    \ 3.0:\n            result[i] = \"A+\"\n        case grades[i] >= 2.7:\n     \
    \       result[i] = \"B\"\n        case grades[i] >= 2.3:\n            result[i]\
    \ = \"B-\"\n        case grades[i] >= 1.7:\n            result[i] = \"C\"\n  \
    \      case grades[i] >= 1.3:\n            result[i] = \"C-\"\n        case grades[i]\
    \ >= 0.7:\n            result[i] = \"D\"\n        case grades[i] >= 0.0:\n   \
    \         result[i] = \"D-\"\n        case grades[i] >= 0.0:\n            result[i]\
    \ = \"E\"\n        default:\n            result[i] = \"F\"\n        }\n    }\n\
    \    \n    return result\n}\n", "    gradesLen := len(grades)\n    gradesTotal\
    \ := 0.0\n    for i := 0; i < gradesLen; i++ {\n        gradesTotal += grades[i]\n\
    \    }\n    gradesTotal /= float64(gradesLen)\n    gradesTotal -= 0.5\n    gradesTotal\
    \ /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n\
    \    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal\
    \ -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n\
    \    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal\
    \ /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n\
    \    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal\
    \ += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n\
    \    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal\
    \ /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n\
    \    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal\
    \ -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n\
    \    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal\
    \ /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal += 0.5\n\
    \    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n    gradesTotal\
    \ += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal /= 4.0\n\
    \    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n    gradesTotal\
    \ /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal -= 0.5\n\
    \    gradesTotal /= 4.0\n    gradesTotal += 0.5\n    gradesTotal /= 4.0\n    gradesTotal\
    \ -= 0.5\n    gradesTotal /= 4.0\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n\
    \    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] =\
    \ gradesSorted[0]\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n \
    \   gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n    gradesSorted[0] =\
    \ gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-1] = gradesSorted[0]\n\
    \    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)",
  "    grades := make([]float64, len(grades))\n    grades[0] = 4.0\n    grades[1]\
    \ = 3.7\n    grades[2] = 3.3\n    grades[3] = 3.0\n    grades[4] = 2.7\n    grades[5]\
    \ = 2.3\n    grades[6] = 2.0\n    grades[7] = 1.7\n    grades[8] = 1.3\n    grades[9]\
    \ = 1.0\n    grades[10] = 0.7\n    grades[11] = 0.0\n    grades[12] = 0.0\n  \
    \  grades[13] = 0.0\n    grades[14] = 0.0\n    grades[15] = 0.0\n    grades[16]\
    \ = 0.0\n    grades[17] = 0.0\n    grades[18] = 0.0\n    grades[19] = 0.0\n  \
    \  grades[20] = 0.0\n    grades[21] = 0.0\n    grades[22] = 0.0\n    grades[23]\
    \ = 0.0\n    grades[24] = 0.0\n    grades[25] = 0.0\n    grades[26] = 0.0\n  \
    \  grades[27] = 0.0\n    grades[28] = 0.0\n    grades[29] = 0.0\n    grades[30]\
    \ = 0.0\n    grades[31] = 0.0\n    grades[32] = 0.0\n    grades[33] = 0.0\n  \
    \  grades[34] = 0.0\n    grades[35] = 0.0\n    grades[36] = 0.0\n    grades[37]\
    \ = 0.0\n    grades[38] = 0.0\n    grades[39] = 0.0\n    grades[40] = 0.0\n  \
    \  grades[41] = 0.0\n    grades[42] = 0.0\n    grades[43] = 0.0\n    grades[44]\
    \ = 0.0\n    grades[45] = 0.0\n    grades[46] = 0.0\n    grades[47] = 0.0\n  \
    \  grades[48] = 0.0\n    grades[49] = 0.0\n    grades[50] = 0.0\n    grades[51]\
    \ = 0.0\n    grades[52] = 0.0\n    grades[53] = 0.0\n    grades[54] = 0.0\n  \
    \  grades[55] = 0.0\n    grades[56] = 0.0\n    grades[57] = 0.0\n    grades[58]\
    \ = 0.0\n    grades[59] = 0.0\n    grades[60] = 0.0\n    grades[61] = 0.0\n  \
    \  grades[62] = 0.0\n    grades[63] = 0.0\n    grades[64] = 0.0\n    grades[65]\
    \ = 0.0\n    grades[66] = 0.0\n    grades[67] = 0.0\n    grades[68] = 0.0\n  \
    \  grades[69] = 0.0\n    grades[70] = 0.0\n    grades[71]", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <\
    \ 2.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] >=\
    \ 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] < 1.0\
    \ {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    result := []string{}\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            grade = grade - 3.0\n        }\n        if grade < 0.0\
    \ {\n            grade = grade + 3.0\n        }\n        if grade < 2.0 {\n  \
    \          grade = grade + 2.0\n        }\n        if grade < 1.7 {\n        \
    \    grade = grade + 1.7\n        }\n        if grade < 1.0 {\n            grade\
    \ = grade + 1.0\n        }\n        if grade < 0.7 {\n            grade = grade\
    \ + 0.7\n        }\n        if grade < 0.3 {\n            grade = grade + 0.3\n\
    \        }\n        if grade < 0.1 {\n            grade = grade + 0.1\n      \
    \  }\n        if grade < 0.0 {\n            grade = grade + 0.0\n        }\n \
    \       if grade > 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade > 0.1 {\n            grade = grade + 0.1\n        }\n        if grade\
    \ > 0.3 {\n            grade = grade + 0.3\n        }\n        if grade > 0.7\
    \ {\n            grade = grade + 0.7\n        }\n        if grade > 1.0 {\n  \
    \          grade = grade + 1.0\n        }\n        if grade > 2.0 {\n        \
    \    grade = grade + 2.0\n        }\n        if grade > 3.0 {\n            grade\
    \ = grade + 3.0\n        }\n        if grade > 4.0 {\n            grade = grade\
    \ + 4.0\n        }\n        if grade > 5.0 {\n            grade = grade + 5.0\n\
    \        }\n        if grade > 6.0 {\n            grade = grade + 6.0\n      \
    \  }\n        if grade > 7.0 {\n            grade = grade + 7.0\n        }\n \
    \       if grade > 8.0 {\n            grade = grade + 8.0\n        }\n       \
    \ if grade > 9.0 {\n            grade = grade + 9.0\n        }\n        if grade\
    \ > 10.0 {\n            grade = grade + 10.0\n        }\n        if grade > 11.0\
    \ {\n            grade = grade + 11.0\n        }\n        if grade > 12.0 {\n\
    \            grade = grade + 12.0\n        }\n        if grade > 13.0 {\n    \
    \        grade = grade + 13.0\n        }\n        if grade > 14.0 {\n        \
    \    grade = grade + 14.0\n        }\n        if grade > 15.0 {\n            grade\
    \ = grade + 15.0\n        }\n        if grade > 16.0 {\n            grade = grade\
    \ + 16", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else if grades[i] > 3.0 {\n            letterGrades[i] =\
    \ \"D\"\n        } else if grades[i] < 3.3 {\n            letterGrades[i] = \"\
    C-\"\n        } else if grades[i] > 3.3 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] < 3.7 {\n            letterGrades[i] = \"B-\"\n\
    \        } else if grades[i] > 3.7 {\n            letterGrades[i] = \"B\"\n  \
    \      } else if grades[i] < 4.0 {\n            letterGrades[i] = \"B-\"\n   \
    \     } else if grades[i] > 4.0 {\n            letterGrades[i] = \"B+\"\n    \
    \    } else if grades[i] < 4.3 {\n            letterGrades[i] = \"A-\"\n     \
    \   } else if grades[i] > 4.3 {\n            letterGrades[i] = \"A+\"\n      \
    \  } else if grades[i] < 4.7 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] > 4.7 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] < 5.0 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] > 5.0 {\n            letterGrades[i] = \"A+\"\n        } else {\n\
    \            letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted\
    \ = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted, 2.0)\n\
    \    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.7)\n    gradesSorted = append(gradesSorted, 2.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 1.7)\n    gradesSorted = append(gradesSorted,\
    \ 1.3)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.7)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    \n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 1.7 && grades[i] <= 1.3 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.1 && grades[i] <= 0.7 {\n        \
    \    letter_grades[i] = \"C+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ <= 0.1 {\n            letter_grades[i] = \"D\"\n        } else if grades[i]\
    \ >= 0.0 {\n            letter_grades[i] = \"D-\"\n        } else {\n        \
    \    letter_grades[i] = \"E\"\n        }\n    }\n    return letter_grades\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n\n    gradesCount := 0\n    for _, grade :=\
    \ range gradesSorted {\n        gradesCount += 1\n        if grade > 3.0 {\n \
    \           gradesCount -= 1\n        }\n    }\n\n    letterGrades := make([]string,\
    \ gradesCount)\n    for i := 0; i < gradesCount; i++ {\n        letterGrades[i]\
    \ = \"E\"\n        if gradesSorted[i] > 3.0 {\n            letterGrades[i] = \"\
    D-\"\n            if gradesSorted[i] > 2.7 {\n                letterGrades[i]\
    \ = \"C+\"\n                if gradesSorted[i] > 2.3 {\n                    letterGrades[i]\
    \ = \"B+\"\n                    if gradesSorted[i] > 2.0 {\n                 \
    \       letterGrades[i] = \"A+\"\n                        if gradesSorted[i] >\
    \ 1.7 {\n                            letterGrades[i] = \"A\"\n               \
    \             if gradesSorted[i] > 1.3 {\n                                letterGrades[i]\
    \ = \"A-\"\n                                if gradesSorted[i] > 1.0 {\n     \
    \                               letterGrades[i] = \"B-\"\n                   \
    \                 if gradesSorted[i] > 0.7 {\n                               \
    \         letterGrades[i] = \"C\"\n                                        if\
    \ gradesSorted[i] > 0.3 {\n                                            letterGrades[i]\
    \ = \"C+\"\n                                            if gradesSorted[i] > 0.0\
    \ {\n                                                letterGrades[i] = \"D\"\n\
    \                                                if gradesSorted[i] > -0.7 {\n\
    \                                                    letterGrades[i] = \"D+\"\n\
    \                                                    if gradesSorted[i] > -0.3\
    \ {\n                                                        letterGrades[i] =\
    \ \"E\"\n                                                    }\n             \
    \                                   }\n                                      \
    \      }\n                                        }\n                        \
    \            }\n                                }\n                          \
    \  }\n                        }\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    grade", "    grades := append([]float64{}, grades...)\n    grades =\
    \ append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    \n    for i := 0; i < gradesLen; i++\
    \ {\n        letterGrades[i] = \"\"\n        if grades[i] >= 4.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 {\n         \
    \   letterGrades[i] = \"A\"\n        } else if grades[i] >= 3.3 {\n          \
    \  letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 {\n          \
    \  letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n          \
    \  letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n           \
    \ letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n           \
    \ letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n           \
    \ letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.7 {\n            letterGrades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] =\
    \ \"D-\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    for\
    \ i := 0; i < grades_len; i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        } else if grades[i] >= 2.7 {\n            letter_grades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.3 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 0.7 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 0.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D+\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D\"\n        } else if grades[i] >= 0.0 {\n            letter_grades[i]\
    \ = \"D-\"\n        } else {\n            letter_grades[i] = \"E\"\n        }\n\
    \    }\n    return letter_grades\n}\n", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grade", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n    }\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[1] = \"D+\"\n    letterGrades[gradesLen-1] = \"D-\"\
    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n      \
    \      letterGrades[i+1] = \"C+\"\n        } else if grades[i] >= 2.7 {\n    \
    \        letterGrades[i+1] = \"B+\"\n        } else if grades[i] >= 2.3 {\n  \
    \          letterGrades[i+1] = \"B\"\n        } else if grades[i] >= 1.7 {\n \
    \           letterGrades[i+1] = \"A+\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i+1] = \"A\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i+1] = \"A-\"\n        } else if grades[i] >= 0.0 {\n\
    \            letterGrades[i+1] = \"B-\"\n        } else {\n            letterGrades[i+1]\
    \ = \"C\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.7)\n    gradesSorted = append(gradesSorted, 2.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 1.7)\n    gradesSorted = append(gradesSorted,\
    \ 1.3)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.7)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letter_grades[i] = \"E\"\n\
    \            continue\n        }\n        if grades[i] < 3.3 {\n            letter_grades[i]\
    \ = \"D-\"\n            continue\n        }\n        if grades[i] < 3.7 {\n  \
    \          letter_grades[i] = \"C+\"\n            continue\n        }\n      \
    \  if grades[i] < 4.0 {\n            letter_grades[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.3 {\n            letter_grades[i] = \"B\"\
    \n            continue\n        }\n        if grades[i] < 4.7 {\n            letter_grades[i]\
    \ = \"A-\"\n            continue\n        }\n        if grades[i] < 5.0 {\n  \
    \          letter_grades[i] = \"A+\"\n            continue\n        }\n      \
    \  if grades[i] < 5.3 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 5.7 {\n            letter_grades[i] = \"A+\"\
    \n            continue\n        }\n        if grades[i] < 6.0 {\n            letter_grades[i]\
    \ = \"B+\"\n            continue\n        }\n        if grades[i] < 6.3 {\n  \
    \          letter_grades[i] = \"B\"\n            continue\n        }\n       \
    \ if grades[i] < 6.7 {\n            letter_grades[i] = \"B-\"\n            continue\n\
    \        }\n        if grades[i] < 7.0 {\n            letter_grades[i] = \"C+\"\
    \n            continue\n        }\n        if grades[i] < 7.3 {\n            letter_grades[i]\
    \ = \"C\"\n            continue\n        }\n        if grades[i] < 7.7 {\n   \
    \         letter_grades[i] = \"C-\"\n            continue\n        }\n       \
    \ if grades[i] < 8.0 {\n            letter_grades[i] = \"D+\"\n            continue\n\
    \        }\n        if grades[i] < 8.3 {\n            letter_grades[i] = \"D\"\
    \n            continue\n        }\n        if grades[i] < 8.7 {\n            letter_grades[i]\
    \ = \"D-\"\n            continue\n        }\n        if grades[i] < 9.0 {\n  \
    \          letter_grades[i] = \"E\"\n            continue\n        }\n       \
    \ if grades[i] < 9.3 {\n            letter_grades[i] = \"E\"\n            continue\n\
    \        }\n        if grades[i] < 9.7 {\n            letter_grades[i] = \"E\"\
    \n            continue\n        }\n        if grades[i] < 10.0 {\n           \
    \ letter_grades[i] = \"E\"\n            continue\n        }\n        if grades[i]\
    \ < 10.3 {\n            letter_grades[i] = \"E\"\n            continue\n     \
    \   }\n        if grades[i] < 10.7 {\n            letter_grades[i] = \"E\"\n \
    \           continue\n        }\n        if grades[i] < 11.0 {\n            letter_grades[i]\
    \ = \"E\"", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{0.0},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted =\
    \ append(gradesSorted, grade", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n\
    \            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"A+\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    // Loop\
    \ through each grade and find the letter grade using the\n    // formula above\n\
    \    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\n      \
    \  \n        // Loop through each grade and find the letter grade using the\n\
    \        // formula above\n        for j := 0; j < gradesLen; j++ {\n        \
    \    if grades[j] == grades[i] {\n                letterGrades[i] += \"+\"\n \
    \           } else {\n                letterGrades[i] += \"-\"\n            }\n\
    \        }\n    }\n    \n    return letterGrades\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n  \
    \  gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1]\
    \ = 0\n    gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n  \
    \  gradesSorted[0] = 0\n    gradesSorted[len(gradesSorted)-1] = 0\n    gradesSorted[0]\
    \ = 0\n    grade", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := 0; i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n\
    \    }\n    gradesSortedSorted := make([]float64, len(gradesSorted))\n    sort.Float64s(gradesSorted)\n\
    \    gradesSortedSortedCopy := make([]float64, len(gradesSortedSorted))\n    copy(gradesSortedSortedCopy,\
    \ gradesSortedSorted)\n    gradesSortedSortedCopy = append(gradesSortedSortedCopy,\
    \ gradesSortedSorted[len(gradesSortedSorted)-1])\n    gradesSortedSortedCopy =\
    \ append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n    gradesSortedSortedCopy\
    \ = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[len(gradesSortedSortedSorted)-1])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, gradesSortedSortedSorted[0])\n\
    \    gradesSortedSortedCopy = append(gradesSortedSortedCopy, ", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ The first letter grade is always A+\n    letterGrades[0] = \"A+\"\n    \n  \
    \  // The last letter grade is always E\n    letterGrades[gradesLen-1] = \"E\"\
    \n    \n    // The rest of the letter grades are calculated using the formula\n\
    \    // GPA - 2.7\n    // GPA - 2.3\n    // GPA - 2.0\n    // GPA - 1.7\n    //\
    \ GPA - 1.3\n    // GPA - 1.0\n    // GPA - 0.7\n    // GPA - 0.0\n    // GPA\
    \ - 0.0\n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i]-float64(2.7))\n    }\n    return letterGrades\n}\n", "    grades\
    \ := make([]float64, len(grades))\n    grades[0] = 4.0\n    grades[1] = 3.7\n\
    \    grades[2] = 3.3\n    grades[3] = 3.0\n    grades[4] = 2.7\n    grades[5]\
    \ = 2.3\n    grades[6] = 2.0\n    grades[7] = 1.7\n    grades[8] = 1.3\n    grades[9]\
    \ = 1.0\n    grades[10] = 0.7\n    grades[11] = 0.0\n    grades[12] = 0.0\n  \
    \  grades[13] = 0.0\n    grades[14] = 0.0\n    grades[15] = 0.0\n    grades[16]\
    \ = 0.0\n    grades[17] = 0.0\n    grades[18] = 0.0\n    grades[19] = 0.0\n  \
    \  grades[20] = 0.0\n    grades[21] = 0.0\n    grades[22] = 0.0\n    grades[23]\
    \ = 0.0\n    grades[24] = 0.0\n    grades[25] = 0.0\n    grades[26] = 0.0\n  \
    \  grades[27] = 0.0\n    grades[28] = 0.0\n    grades[29] = 0.0\n    grades[30]\
    \ = 0.0\n    grades[31] = 0.0\n    grades[32] = 0.0\n    grades[33] = 0.0\n  \
    \  grades[34] = 0.0\n    grades[35] = 0.0\n    grades[36] = 0.0\n    grades[37]\
    \ = 0.0\n    grades[38] = 0.0\n    grades[39] = 0.0\n    grades[40] = 0.0\n  \
    \  grades[41] = 0.0\n    grades[42] = 0.0\n    grades[43] = 0.0\n    grades[44]\
    \ = 0.0\n    grades[45] = 0.0\n    grades[46] = 0.0\n    grades[47] = 0.0\n  \
    \  grades[48] = 0.0\n    grades[49] = 0.0\n    grades[50] = 0.0\n    grades[51]\
    \ = 0.0\n    grades[52] = 0.0\n    grades[53] = 0.0\n    grades[54] = 0.0\n  \
    \  grades[55] = 0.0\n    grades[56] = 0.0\n    grades[57] = 0.0\n    grades[58]\
    \ = 0.0\n    grades[59] = 0.0\n    grades[60] = 0.0\n    grades[61] = 0.0\n  \
    \  grades[62] = 0.0\n    grades[63] = 0.0\n    grades[64] = 0.0\n    grades[65]\
    \ = 0.0\n    grades[66] = 0.0\n    grades[67] = 0.0\n    grades[68] = 0.0\n  \
    \  grades[69] = 0.0\n    grades[70] = 0.0\n    grades[71]", "    grades := append([]float64{},\
    \ grades...)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(",
  "    grades := append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    for i := 0; i < len(grades); i++ {\n        gradesSorted[i]\
    \ = grades[i]\n    }\n    gradesSorted := gradesSorted[:len(grades)-1]\n    gradesSorted[0]\
    \ = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    ", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if\
    \ grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if\
    \ grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n        } else if\
    \ grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else if grades[i]\
    \ >= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i]\
    \ >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] <\
    \ 2.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 && grades[i] < 0.7 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    grades := append([]float64{}, grades...)\n\
    \    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(", "    result :=\
    \ make([]string, len(grades))\n    i := 0\n    for _, grade := range grades {\n\
    \        if grade > 3.0 {\n            result[i] = \"B+\"\n        } else if grade\
    \ > 2.7 {\n            result[i] = \"B\"\n        } else if grade > 2.3 {\n  \
    \          result[i] = \"B-\"\n        } else if grade > 1.3 {\n            result[i]\
    \ = \"C+\"\n        } else if grade > 1.7 {\n            result[i] = \"C\"\n \
    \       } else if grade > 1.0 {\n            result[i] = \"C-\"\n        } else\
    \ if grade > 0.7 {\n            result[i] = \"D+\"\n        } else if grade >\
    \ 0.3 {\n            result[i] = \"D\"\n        } else if grade > 0.0 {\n    \
    \        result[i] = \"D-\"\n        } else {\n            result[i] = \"E\"\n\
    \        }\n        i++\n    }\n    return result\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    \n    // The first letter\
    \ grade is always A+\n    letterGrades[0] = \"A+\"\n    \n    // The second letter\
    \ grade is always B\n    letterGrades[1] = \"B\"\n    \n    // The third letter\
    \ grade is always C- \n    if gradesLen > 2 {\n        letterGrades[2] = \"C-\"\
    \n    }\n    \n    // The fourth letter grade is always C\n    if gradesLen >\
    \ 3 {\n        letterGrades[3] = \"C\"\n    }\n    \n    // The fifth letter grade\
    \ is always A-\n    if gradesLen > 4 {\n        letterGrades[4] = \"A-\"\n   \
    \ }\n    \n    // The sixth letter grade is always A\n    if gradesLen > 5 {\n\
    \        letterGrades[5] = \"A\"\n    }\n    \n    // The seventh letter grade\
    \ is always B- \n    if gradesLen > 6 {\n        letterGrades[6] = \"B-\"\n  \
    \  }\n    \n    // The eighth letter grade is always B\n    if gradesLen > 7 {\n\
    \        letterGrades[7] = \"B\"\n    }\n    \n    // The ninth letter grade is\
    \ always C+ \n    if gradesLen > 8 {\n        letterGrades[8] = \"C+\"\n    }\n\
    \    \n    // The tenth letter grade is always C\n    if gradesLen > 9 {\n   \
    \     letterGrades[9] = \"C\"\n    }\n    \n    // The eleventh letter grade is\
    \ always C-\n    if gradesLen > 10 {\n        letterGrades[10] = \"C-\"\n    }\n\
    \    \n    // The twelfth letter grade is always C\n    if gradesLen > 11 {\n\
    \        letterGrades[11] = \"C\"\n    }\n    \n    // The thirteenth letter grade\
    \ is always A-\n    if gradesLen > 12 {\n        letterGrades[12] = \"A-\"\n \
    \   }\n    \n    // The fourteenth letter grade is always A\n    if gradesLen\
    \ > 13 {\n        letterGrades[13] = \"A\"\n    }\n    \n    // The fifteenth\
    \ letter grade is always B+ \n    if gradesLen > 14 {\n        letterGrades[14]\
    \ = \"B+\"\n    }\n    \n    // The sixteenth letter ", "    grades_len := len(grades)\n\
    \    letter_grades := make([]string, grades_len)\n    \n    // The first letter\
    \ grade is always A+\n    letter_grades[0] = \"A+\"\n    \n    // The second letter\
    \ grade is always B\n    letter_grades[1] = \"B\"\n    \n    // The third letter\
    \ grade is always C\n    letter_grades[2] = \"C\"\n    \n    // The fourth letter\
    \ grade is always C\n    letter_grades[3] = \"C\"\n    \n    // The fifth letter\
    \ grade is always C\n    letter_grades[4] = \"C\"\n    \n    // The sixth letter\
    \ grade is always C\n    letter_grades[5] = \"C\"\n    \n    // The seventh letter\
    \ grade is always C\n    letter_grades[6] = \"C\"\n    \n    // The eighth letter\
    \ grade is always C\n    letter_grades[7] = \"C\"\n    \n    // The ninth letter\
    \ grade is always C\n    letter_grades[8] = \"C\"\n    \n    // The tenth letter\
    \ grade is always C\n    letter_grades[9] = \"C\"\n    \n    // The eleventh letter\
    \ grade is always C\n    letter_grades[10] = \"C\"\n    \n    // The twelfth letter\
    \ grade is always C\n    letter_grades[11] = \"C\"\n    \n    // The thirteenth\
    \ letter grade is always C\n    letter_grades[12] = \"C\"\n    \n    // The fourteenth\
    \ letter grade is always C\n    letter_grades[13] = \"C\"\n    \n    // The fifteenth\
    \ letter grade is always C\n    letter_grades[14] = \"C\"\n    \n    // The sixteenth\
    \ letter grade is always C\n    letter_grades[15] = \"C\"\n    \n    // The seventeenth\
    \ letter grade is always C\n    letter_grades[16] = \"C\"\n    \n    // The eighteenth\
    \ letter grade is always C\n    letter_grades[17] = \"C\"\n    \n    // The nineteenth\
    \ letter grade is always C\n    letter_grades[18] = \"C\"\n    \n    // The twentieth\
    \ letter grade is always C\n    letter_grades[19] = \"C\"\n    \n    // The twenty-first\
    \ letter grade is always C\n    letter_grades[20] = \"C\"\n    \n    // The twenty-second\
    \ letter grade is always ", "    gradesLen := len(grades)\n    letterGrades :=\
    \ make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1]\
    \ = \"E\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ <= 1.3 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.1 && grades[i] <= 0.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] <= 0.1 {\n            letterGrades[i] = \"\
    D+\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D\"\
    \n        } else {\n            letterGrades[i] = \"D-\"\n        }\n    }\n \
    \   return letterGrades\n}\n", "    var grades_string []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string = append(grades_string,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := range grades {\n        if grades[i] < 3.0 {\n  \
    \          result[i] = \"E\"\n            continue\n        }\n        if grades[i]\
    \ < 3.3 {\n            result[i] = \"D-\"\n            continue\n        }\n \
    \       if grades[i] < 3.7 {\n            result[i] = \"C+\"\n            continue\n\
    \        }\n        if grades[i] < 4.0 {\n            result[i] = \"B+\"\n   \
    \         continue\n        }\n        if grades[i] < 4.3 {\n            result[i]\
    \ = \"B\"\n            continue\n        }\n        if grades[i] < 4.7 {\n   \
    \         result[i] = \"B-\"\n            continue\n        }\n        if grades[i]\
    \ < 5.0 {\n            result[i] = \"A+\"\n            continue\n        }\n \
    \       if grades[i] < 5.3 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 5.7 {\n            result[i] = \"A-\"\n   \
    \         continue\n        }\n        if grades[i] < 6.0 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 6.3 {\n   \
    \         result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 6.7 {\n            result[i] = \"A\"\n            continue\n        }\n  \
    \      if grades[i] < 7.0 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 7.3 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 7.7 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 8.0 {\n   \
    \         result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 8.3 {\n            result[i] = \"A\"\n            continue\n        }\n  \
    \      if grades[i] < 8.7 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 9.0 {\n            result[i] = \"A\"\n    \
    \        continue\n        }\n        if grades[i] < 9.3 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 9.7 {\n   \
    \         result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 10.0 {\n            result[i] = \"A\"\n            continue\n        }\n \
    \       if grades[i] < 10.3 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 10.7 {\n            result[i] = \"A\"\n   \
    \         continue\n        }\n        if grades[i] < 11.0 {\n            result[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 11.3 {\n  \
    \          result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 11.7 {\n            result[i] = \"A\"\n            continue\n        }\n \
    \       if grades[i] < 12.0 {\n            result[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 12.3 {\n            result[i] = ", "    grades\
    \ := make([]float64, len(grades))\n    for i := 0; i < len(grades); i++ {\n  \
    \      grades[i] = grades[i]\n    }\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)", "    gradesLen := len(grades)\n    result := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        result [i] = \"\"\n        if grades[i]\
    \ > 3.0 {\n            result [i] = \"A+\"\n        } else if grades[i] >= 3.0\
    \ && grades[i] <= 3.7 {\n            result [i] = \"A\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] <= 3.3 {\n            result [i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.3 && grades[i] <= 3.0 {\n            result [i] = \"B+\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] <= 2.7 {\n            result\
    \ [i] = \"B\"\n        } else if grades[i] >= 2.7 && grades[i] <= 2.3 {\n    \
    \        result [i] = \"B-\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.0 {\n            result [i] = \"C+\"\n        } else if grades[i] >= 2.0\
    \ && grades[i] <= 1.7 {\n            result [i] = \"C\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 1.3 {\n            result [i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] <= 1.0 {\n            result [i] = \"D+\"\n\
    \        } else if grades[i] >= 1.0 && grades[i] <= 0.7 {\n            result\
    \ [i] = \"D\"\n        } else if grades[i] >= 0.7 && grades[i] <= 0.0 {\n    \
    \        result [i] = \"D-\"\n        } else {\n            result [i] = \"E\"\
    \n        }\n    }\n    return result\n}\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ 0.0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-2])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-3])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-4])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-5])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-6])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-7])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-8])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-9])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-10])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-11])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-12])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-13])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-14])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-15])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-16])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-17])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-18])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-19])\n\
    \    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-20])\n\
    \    gradesSorted := append(grade", "    gradesLen := len(grades)\n    result\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] < 3.0 {\n            result[i] = \"E\"\n            continue\n\
    \        }\n        if grades[i] >= 3.0 && grades[i] < 3.7 {\n            result[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] >= 3.7 && grades[i]\
    \ < 4.0 {\n            result[i] = \"D-\"\n            continue\n        }\n \
    \       if grades[i] >= 4.0 && grades[i] < 4.3 {\n            result[i] = \"C+\"\
    \n            continue\n        }\n        if grades[i] >= 4.3 && grades[i] <\
    \ 4.6 {\n            result[i] = \"C\"\n            continue\n        }\n    \
    \    if grades[i] >= 4.6 && grades[i] < 4.9 {\n            result[i] = \"B-\"\n\
    \            continue\n        }\n        if grades[i] >= 4.9 && grades[i] < 5.2\
    \ {\n            result[i] = \"B\"\n            continue\n        }\n        if\
    \ grades[i] >= 5.2 && grades[i] < 5.5 {\n            result[i] = \"A-\"\n    \
    \        continue\n        }\n        if grades[i] >= 5.5 && grades[i] < 5.8 {\n\
    \            result[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ >= 5.8 && grades[i] < 6.1 {\n            result[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] >= 6.1 && grades[i] < 6.4 {\n            result[i]\
    \ = \"B+\"\n            continue\n        }\n        if grades[i] >= 6.4 && grades[i]\
    \ < 6.7 {\n            result[i] = \"B\"\n            continue\n        }\n  \
    \      if grades[i] >= 6.7 && grades[i] < 7 {\n            result[i] = \"C+\"\n\
    \            continue\n        }\n        if grades[i] >= 7 && grades[i] < 7.3\
    \ {\n            result[i] = \"C\"\n            continue\n        }\n        if\
    \ grades[i] >= 7.3 && grades[i] < 7.6 {\n            result[i] = \"C-\"\n    \
    \        continue\n        }\n        if grades[i] >= 7.6 && grades[i] < 7.9 {\n\
    \            result[i] = \"C\"\n            continue\n        }\n        if grades[i]\
    \ >= 7.9 && grades[i] < 8.2 {\n            result[i] = \"D+\"\n            continue\n\
    \        }\n        if grades[i] >= 8.2 && grades[i] < 8.5 {\n            result[i]\
    \ = \"D\"\n            continue\n        }\n        if grades[i] >= 8.5 && grades[i]\
    \ < 8.8 {\n            result[i] = \"D-\"\n            continue\n        }\n \
    \       if grades[i] >= 8.8 && grades[i] < 9.1 {\n            result[i] = \"D\"\
    \n            continue\n        }\n        if grades[i] >= 9.1 && grades[i] <\
    \ 9.4 {\n            result[i] = \"D+\"\n            continue\n        }", " \
    \   grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(",
  "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n \
    \   for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n", "    gradesLen := len(grades)\n\
    \    result := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] < 3.0 {\n            result[i] = \"E\"\n        } else if\
    \ grades[i] >= 3.0 && grades[i] < 3.7 {\n            result[i] = \"D-\"\n    \
    \    } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            result[i] =\
    \ \"C+\"\n        } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n          \
    \  result[i] = \"B+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n\
    \            result[i] = \"B-\"\n        } else if grades[i] >= 4.6 && grades[i]\
    \ < 4.9 {\n            result[i] = \"B\"\n        } else if grades[i] >= 4.9 &&\
    \ grades[i] < 5.2 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.2 && grades[i] < 5.5 {\n            result[i] = \"A\"\n        } else if\
    \ grades[i] >= 5.5 && grades[i] < 5.8 {\n            result[i] = \"A+\"\n    \
    \    } else if grades[i] >= 5.8 && grades[i] < 6.0 {\n            result[i] =\
    \ \"D\"\n        } else if grades[i] >= 6.0 {\n            result[i] = \"D+\"\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ gpas []float64\n    for _, grade := range grades {\n        gpa := grade * 4.0\n\
    \        gpas = append(gpas, gpa)\n    }\n    for _, gpa := range gpas {\n   \
    \     result := append(result, fmt.Sprintf(\"%+.2f\", gpa))\n    }\n    return\
    \ result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >=\
    \ 2.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 1.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\
    \n        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] < 0.7 {\n            letterGrades[i] = \"D\"\n  \
    \      } else if grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    var letter []string\n    for _, grade := range grades\
    \ {\n        if grade > 3.0 {\n            letter = append(letter, \"B+\")\n \
    \       } else if grade > 2.7 {\n            letter = append(letter, \"B\")\n\
    \        } else if grade > 2.3 {\n            letter = append(letter, \"B-\")\n\
    \        } else if grade > 1.3 {\n            letter = append(letter, \"C+\")\n\
    \        } else if grade > 1.7 {\n            letter = append(letter, \"C\")\n\
    \        } else if grade > 1.0 {\n            letter = append(letter, \"C-\")\n\
    \        } else if grade > 0.7 {\n            letter = append(letter, \"D+\")\n\
    \        } else if grade > 0.3 {\n            letter = append(letter, \"D\")\n\
    \        } else if grade > 0.0 {\n            letter = append(letter, \"D-\")\n\
    \        } else if grade > 0.0 {\n            letter = append(letter, \"E\")\n\
    \        }\n    }\n    return letter\n}\n", "    grades_len := len(grades)\n \
    \   letter_grades := make([]string, grades_len)\n    \n    // The first letter\
    \ grade is always A+\n    letter_grades[0] = \"A+\"\n    \n    // The last letter\
    \ grade is always E\n    letter_grades[grades_len-1] = \"E\"\n    \n    // The\
    \ rest of the letter grades are calculated using the formula\n    // letter_grade\
    \ = GPA - letter_grade\n    for i := 1; i < grades_len; i++ {\n        letter_grades[i]\
    \ = fmt.Sprintf(\"%+.2f\", grades[i] - letter_grades[i-1])\n    }\n    \n    return\
    \ letter_grades\n}\n", "    gradesSorted := make([]float64, len(grades))\n   \
    \ sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[1]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-2]\n    gradesSorted[0] -= gradesSorted[1]",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    for i\
    \ := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 3.7 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 {\n            letterGrades[i] =\
    \ \"A-\"\n        } else if grades[i] >= 3.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i] =\
    \ \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"\
    B-\"\n        } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\
    \n        } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n \
    \       } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n \
    \       } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    grades_sum := 0.0\n    grades_count := 0\n    grades_letters\
    \ := []string{}\n    for _, grade := range grades {\n        grades_sum += grade\n\
    \        grades_count++\n    }\n    if grades_count > 0 {\n        grades_avg\
    \ := grades_sum / float64(grades_count)\n        for _, grade := range grades\
    \ {\n            if grade >= grades_avg {\n                grades_letters = append(grades_letters,\
    \ \"A+\")\n            } else if grade < grades_avg {\n                grades_letters\
    \ = append(grades_letters, \"A-\")\n            } else if grade > grades_avg {\n\
    \                grades_letters = append(grades_letters, \"B+\")\n           \
    \ } else if grade <= grades_avg {\n                grades_letters = append(grades_letters,\
    \ \"B\")\n            } else if grade > grades_avg {\n                grades_letters\
    \ = append(grades_letters, \"B-\")\n            } else if grade <= grades_avg\
    \ {\n                grades_letters = append(grades_letters, \"C+\")\n       \
    \     } else if grade < grades_avg {\n                grades_letters = append(grades_letters,\
    \ \"C\")\n            } else if grade > grades_avg {\n                grades_letters\
    \ = append(grades_letters, \"C-\")\n            } else if grade <= grades_avg\
    \ {\n                grades_letters = append(grades_letters, \"D+\")\n       \
    \     } else if grade < grades_avg {\n                grades_letters = append(grades_letters,\
    \ \"D\")\n            } else if grade > grades_avg {\n                grades_letters\
    \ = append(grades_letters, \"D-\")\n            } else {\n                grades_letters\
    \ = append(grades_letters, \"E\")\n            }\n        }\n    }\n    return\
    \ grades_letters\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1]\
    \ {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1]\
    \ {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] > grades[i-1]\
    \ && grades[i] < grades[i+1] {\n            letterGrades[i] = \"C+\"\n       \
    \ } else if grades[i] > grades[i-1] && grades[i] != grades[i+1] {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] < grades[i-1] && grades[i]\
    \ != grades[i+1] {\n            letterGrades[i] = \"B+\"\n        } else if grades[i]\
    \ > grades[i-1] && grades[i] != grades[i+1] {\n            letterGrades[i] = \"\
    A-\"\n        } else if grades[i] < grades[i-1] && grades[i] != grades[i+1] {\n\
    \            letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 1.0 {\n            letterGrades[i] = \"D-\"\n        } else if grades[i]\
    \ < 0.7 {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(grade", "    grades_len\
    \ := len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    //\
    \ Loop through each grade and determine letter grade\n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 {\n            letter_grades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letter_grades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letter_grades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 2.0 {\n            letter_grades[i] = \"C+\"\n\
    \        } else if grades[i] >= 1.7 {\n            letter_grades[i] = \"C\"\n\
    \        } else if grades[i] >= 1.3 {\n            letter_grades[i] = \"C-\"\n\
    \        } else if grades[i] >= 1.0 {\n            letter_grades[i] = \"D+\"\n\
    \        } else if grades[i] >= 0.7 {\n            letter_grades[i] = \"D\"\n\
    \        } else if grades[i] >= 0.0 {\n            letter_grades[i] = \"D-\"\n\
    \        } else {\n            letter_grades[i] = \"E\"\n        }\n    }\n  \
    \  return letter_grades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    // The first letter grade is always\
    \ A+\n    letterGrades[0] = \"A+\"\n    \n    // The last letter grade is always\
    \ D-\n    letterGrades[gradesLen-1] = \"D-\"\n    \n    // The middle letter grades\
    \ are calculated using the formula\n    // GPA - 3.7\n    middleGrades := make([]float64,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        middleGrades[i] =\
    \ grades[i] - 3.7\n    }\n    \n    // The letter grades are calculated using\
    \ the formula\n    // GPA - 3.3\n    lastGrades := make([]float64, gradesLen)\n\
    \    for i := gradesLen - 1; i >= 0; i-- {\n        lastGrades[i] = grades[i]\
    \ - 3.3\n    }\n    \n    // The letter grades are calculated using the formula\n\
    \    // GPA - 3.0\n    firstGrades := make([]float64, gradesLen)\n    for i :=\
    \ 0; i < gradesLen; i++ {\n        firstGrades[i] = grades[i] - 3.0\n    }\n \
    \   \n    // The letter grades are calculated using the formula\n    // GPA -\
    \ 2.7\n    secondGrades := make([]float64, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        secondGrades[i] = grades[i] - 2.7\n    }\n    \n    // The letter\
    \ grades are calculated using the formula\n    // GPA - 2.3\n    thirdGrades :=\
    \ make([]float64, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        thirdGrades[i]\
    \ = grades[i] - 2.3\n    }\n    \n    // The letter grades are calculated using\
    \ the formula\n    // GPA - 1.7\n    fourthGrades := make([]float64, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        fourthGrades[i] = grades[i] - 1.7\n\
    \    }\n    \n    // The letter grades are calculated using the formula\n    //\
    \ GPA - 1.0\n    fifthGrades := make([]float64, gradesLen)\n    for i := 0; i\
    \ < gradesLen; i++ {\n        fifthGrades[i] = grades[i] - 1.0\n    }\n    \n\
    \    // The letter grades are calculated using the formula\n    // GPA - 0.7\n\
    \    sixthGrades := make", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    gradesSorted = append(gradesSorted, grades...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n   \
    \ for i := 1; i < gradesLen; i++ {\n        if grades[i-1] > grades[i] {\n   \
    \         letterGrades[i] = \"A+\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A-\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i-1] > grades[i]\
    \ && grades[i-1] < grades[i+1] {\n            letterGrades[i] = \"B+\"\n     \
    \   } else if grades[i-1] > grades[i] && grades[i-1] == grades[i] {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i-1] > grades[i] && grades[i-1]\
    \ > grades[i+1] {\n            letterGrades[i] = \"B-\"\n        } else if grades[i-1]\
    \ > grades[i] && grades[i-1] < grades[i+1] {\n            letterGrades[i] = \"\
    C+\"\n        } else if grades[i-1] == grades[i] && grades[i-1] > grades[i+1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i-1] == grades[i]\
    \ && grades[i-1] == grades[i] {\n            letterGrades[i] = \"C\"\n       \
    \ } else if grades[i-1] > grades[i] && grades[i-1] < grades[i+1] {\n         \
    \   letterGrades[i] = \"D+\"\n        } else if grades[i-1] == grades[i] && grades[i-1]\
    \ == grades[i] {\n            letterGrades[i] = \"D\"\n        } else if grades[i-1]\
    \ > grades[i] && grades[i-1] > grades[i+1] {\n            letterGrades[i] = \"\
    D-\"\n        } else if grades[i-1] > grades[i] && grades[i-1] < grades[i+1] {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    var letterGrades []string\n    for _, grade := range grades {\n   \
    \     if grade > 3.0 {\n            letterGrades = append(letterGrades, \"B+\"\
    )\n        } else if grade > 2.7 {\n            letterGrades = append(letterGrades,\
    \ \"B\")\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    E\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letterGrades[i] =\
    \ \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n           \
    \ letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n           \
    \ letterGrades[i] = \"D+\"\n        } else if grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else {\n            letterGrades[i] = \"D-\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    sort.Float64s(grades)\n    gradesSorted = grades\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n", "    result := make([]string,\
    \ len(grades))\n    \n    for i := 0; i < len(grades); i++ {\n        if grades[i]\
    \ < 3.0 {\n            result[i] = \"E\"\n        } else if grades[i] >= 3.0 &&\
    \ grades[i] < 3.7 {\n            result[i] = \"D-\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] >= 4.0 && grades[i] < 4.3 {\n            result[i] = \"B+\"\n \
    \       } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n            result[i]\
    \ = \"B\"\n        } else if grades[i] >= 4.7 && grades[i] < 5.0 {\n         \
    \   result[i] = \"A-\"\n        } else if grades[i] >= 5.0 && grades[i] < 5.3\
    \ {\n            result[i] = \"A\"\n        } else if grades[i] >= 5.3 && grades[i]\
    \ < 5.7 {\n            result[i] = \"A+\"\n        } else if grades[i] >= 5.7\
    \ && grades[i] < 6.0 {\n            result[i] = \"D\"\n        } else if grades[i]\
    \ >= 6.0 {\n            result[i] = \"D+\"\n        }\n    }\n    return result\n\
    }\n", "    gradesLen := len(grades)\n    gradesMax := gradesLen - 1\n    gradesMin\
    \ := 0\n    gradesAvg := grades[gradesMax]\n    gradesSumm := 0.0\n    gradesSumm2\
    \ := 0.0\n    gradesSumm3 := 0.0\n    gradesSumm4 := 0.0\n    gradesSumm5 := 0.0\n\
    \    gradesSumm6 := 0.0\n    gradesSumm7 := 0.0\n    gradesSumm8 := 0.0\n    gradesSumm9\
    \ := 0.0\n    gradesSumm10 := 0.0\n    gradesSumm11 := 0.0\n    gradesSumm12 :=\
    \ 0.0\n    gradesSumm13 := 0.0\n    gradesSumm14 := 0.0\n    gradesSumm15 := 0.0\n\
    \    gradesSumm16 := 0.0\n    gradesSumm17 := 0.0\n    gradesSumm18 := 0.0\n \
    \   gradesSumm19 := 0.0\n    gradesSumm20 := 0.0\n    gradesSumm21 := 0.0\n  \
    \  gradesSumm22 := 0.0\n    gradesSumm23 := 0.0\n    gradesSumm24 := 0.0\n   \
    \ gradesSumm25 := 0.0\n    gradesSumm26 := 0.0\n    gradesSumm27 := 0.0\n    gradesSumm28\
    \ := 0.0\n    gradesSumm29 := 0.0\n    gradesSumm30 := 0.0\n    gradesSumm31 :=\
    \ 0.0\n    gradesSumm32 := 0.0\n    gradesSumm33 := 0.0\n    gradesSumm34 := 0.0\n\
    \    gradesSumm35 := 0.0\n    gradesSumm36 := 0.0\n    gradesSumm37 := 0.0\n \
    \   gradesSumm38 := 0.0\n    gradesSumm39 := 0.0\n    gradesSumm40 := 0.0\n  \
    \  gradesSumm41 := 0.0\n    gradesSumm42 := 0.0\n    gradesSumm43 := 0.0\n   \
    \ gradesSumm44 := 0.0\n    gradesSumm45 := 0.0\n    gradesSumm46 := 0.0\n    gradesSumm47\
    \ := 0.0\n    gradesSumm48 := 0.0\n    gradesSumm49 := 0.0\n    gradesSumm50 :=\
    \ 0.0\n    gradesSumm51 := 0.0\n    gradesSum", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n         \
    \   letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n         \
    \   letterGrades[i] = \"D\"\n        } else if grades[i] < 0.0 {\n           \
    \ letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2] = \"D\"\
    \n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4] = \"C\"\
    \n    letterGrades[gradesLen-5] = \"B+\"\n    letterGrades[gradesLen-6] = \"B\"\
    \n    letterGrades[gradesLen-7] = \"B-\"\n    letterGrades[gradesLen-8] = \"B\"\
    \n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10] = \"\
    A\"\n    letterGrades[gradesLen-11] = \"A-\"\n    letterGrades[gradesLen-12] =\
    \ \"A\"\n    letterGrades[gradesLen-13] = \"A+\"\n    letterGrades[gradesLen-14]\
    \ = \"A\"\n    letterGrades[gradesLen-15] = \"E\"\n    letterGrades[gradesLen-16]\
    \ = \"D-\"\n    letterGrades[gradesLen-17] = \"D\"\n    letterGrades[gradesLen-18]\
    \ = \"C-\"\n    letterGrades[gradesLen-19] = \"C\"\n    letterGrades[gradesLen-20]\
    \ = \"B+\"\n    letterGrades[gradesLen-21] = \"B\"\n    letterGrades[gradesLen-22]\
    \ = \"B-\"\n    letterGrades[gradesLen-23] = \"B\"\n    letterGrades[gradesLen-24]\
    \ = \"A+\"\n    letterGrades[gradesLen-25] = \"A\"\n    letterGrades[gradesLen-26]\
    \ = \"A-\"\n    letterGrades[gradesLen-27] = \"A\"\n    letterGrades[gradesLen-28]\
    \ = \"A+\"\n    letterGrades[gradesLen-29] = \"A\"\n    letterGrades[gradesLen-30]\
    \ = \"E\"\n    letterGrades[gradesLen-31] = \"D-\"\n    letterGrades[gradesLen-32]\
    \ = \"D\"\n    letterGrades[gradesLen-33] = \"C-\"\n    letterGrades[gradesLen-34]\
    \ = \"C\"\n    letterGrades[gradesLen-35] = \"B+\"\n    letterGrades[gradesLen-",
  "    gradesLen := len(grades)\n    gradesTotal := 0.0\n    for i := 0; i < gradesLen;\
    \ i++ {\n        gradesTotal += grades[i]\n    }\n    gradesAvg := gradesTotal\
    \ / float64(gradesLen)\n    gradesGrade := []string{}\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= gradesAvg {\n            gradesGrade = append(gradesGrade,\
    \ \"A+\")\n        } else if grades[i] >= gradesAvg - 0.3 {\n            gradesGrade\
    \ = append(gradesGrade, \"A-\")\n        } else if grades[i] >= gradesAvg - 0.2\
    \ {\n            gradesGrade = append(gradesGrade, \"B+\")\n        } else if\
    \ grades[i] >= gradesAvg - 0.1 {\n            gradesGrade = append(gradesGrade,\
    \ \"B\")\n        } else if grades[i] >= gradesAvg - 0.05 {\n            gradesGrade\
    \ = append(gradesGrade, \"B-\")\n        } else if grades[i] >= gradesAvg - 0.01\
    \ {\n            gradesGrade = append(gradesGrade, \"C+\")\n        } else if\
    \ grades[i] >= gradesAvg - 0.005 {\n            gradesGrade = append(gradesGrade,\
    \ \"C\")\n        } else if grades[i] >= gradesAvg - 0.001 {\n            gradesGrade\
    \ = append(gradesGrade, \"C-\")\n        } else if grades[i] >= gradesAvg - 0.0005\
    \ {\n            gradesGrade = append(gradesGrade, \"D+\")\n        } else if\
    \ grades[i] >= gradesAvg - 0.0001 {\n            gradesGrade = append(gradesGrade,\
    \ \"D\")\n        } else if grades[i] >= gradesAvg - 0.00005 {\n            gradesGrade\
    \ = append(gradesGrade, \"D-\")\n        } else if grades[i] >= gradesAvg - 0.00001\
    \ {\n            gradesGrade = append(gradesGrade, \"E\")\n        } else {\n\
    \            gradesGrade = append(gradesGrade, \"F\")\n        }\n    }\n    return\
    \ gradesGrade\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 1; i < gradesLen; i++ {\n        if grades[i] > grades[i-1]\
    \ {\n            letterGrades[i] = \"D+\"\n        } else if grades[i] < grades[i-1]\
    \ {\n            letterGrades[i] = \"D-\"\n        } else if grades[i] == grades[i-1]\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] < 3.0 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] > 3.0 {\n \
    \           letterGrades[i] = \"B+\"\n        } else if grades[i] < 2.0 {\n  \
    \          letterGrades[i] = \"B-\"\n        } else if grades[i] > 2.0 {\n   \
    \         letterGrades[i] = \"B+\"\n        } else if grades[i] < 1.7 {\n    \
    \        letterGrades[i] = \"B-\"\n        } else if grades[i] > 1.7 {\n     \
    \       letterGrades[i] = \"B+\"\n        } else if grades[i] < 1.0 {\n      \
    \      letterGrades[i] = \"B-\"\n        } else if grades[i] > 1.0 {\n       \
    \     letterGrades[i] = \"B+\"\n        } else if grades[i] < 0.7 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] > 0.7 {\n         \
    \   letterGrades[i] = \"B+\"\n        } else if grades[i] < 0.3 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] > 0.3 {\n           \
    \ letterGrades[i] = \"B+\"\n        } else if grades[i] < 0.1 {\n            letterGrades[i]\
    \ = \"B-\"\n        } else if grades[i] > 0.1 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else {\n            letterGrades[i] = \"A+\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    grades_len := len(grades)\n    letter_grades\
    \ := make([]string, grades_len)\n    \n    for i := 0; i < grades_len; i++ {\n\
    \        if grades[i] >= 4.0 {\n            letter_grades[i] = \"A+\"\n      \
    \  } else if grades[i] >= 3.7 && grades[i] <= 3.0 {\n            letter_grades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] <= 2.7 {\n        \
    \    letter_grades[i] = \"A-\"\n        } else if grades[i] >= 2.3 && grades[i]\
    \ <= 2.0 {\n            letter_grades[i] = \"B+\"\n        } else if grades[i]\
    \ >= 2.7 && grades[i] <= 1.7 {\n            letter_grades[i] = \"B\"\n       \
    \ } else if grades[i] >= 1.3 && grades[i] <= 1.0 {\n            letter_grades[i]\
    \ = \"B-\"\n        } else if grades[i] >= 0.7 && grades[i] <= 0.0 {\n       \
    \     letter_grades[i] = \"C+\"\n        } else if grades[i] >= 0.0 {\n      \
    \      letter_grades[i] = \"C\"\n        } else {\n            letter_grades[i]\
    \ = \"D-\"\n        }\n    }\n    return letter_grades\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    for i := 0;\
    \ i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 2.7 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 {\n            letterGrades[i] =\
    \ \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] <= 1.3 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.1 && grades[i] <=\
    \ 0.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 0.7 && grades[i] <= 0.1 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.0 {\n            letterGrades[i] = \"D\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n\
    \    for i := range gradesSorted {\n        gradesSorted[i] = grades[i]\n    }\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n\
    \    gradesSorted[0] = grades[0]\n    gradesSorted[len(gradesSorted)-1] = grades[len(grades)-1]\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(grade", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    for i := 0; i < gradesLen; i++ {\n       \
    \ if grades[i] < 3.0 {\n            letterGrades[i] = \"E\"\n            continue\n\
    \        }\n        if grades[i] >= 3.0 && grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"D+\"\n            continue\n        }\n        if grades[i] >= 4.0 && grades[i]\
    \ < 5.0 {\n            letterGrades[i] = \"D\"\n            continue\n       \
    \ }\n        if grades[i] >= 5.0 && grades[i] < 6.0 {\n            letterGrades[i]\
    \ = \"C-\"\n            continue\n        }\n        if grades[i] >= 6.0 && grades[i]\
    \ < 7.0 {\n            letterGrades[i] = \"C\"\n            continue\n       \
    \ }\n        if grades[i] >= 7.0 && grades[i] < 8.0 {\n            letterGrades[i]\
    \ = \"B-\"\n            continue\n        }\n        if grades[i] >= 8.0 && grades[i]\
    \ < 9.0 {\n            letterGrades[i] = \"B\"\n            continue\n       \
    \ }\n        if grades[i] >= 9.0 && grades[i] < 10.0 {\n            letterGrades[i]\
    \ = \"A-\"\n            continue\n        }\n        if grades[i] >= 10.0 && grades[i]\
    \ < 11.0 {\n            letterGrades[i] = \"A\"\n            continue\n      \
    \  }\n        if grades[i] >= 11.0 {\n            letterGrades[i] = \"A+\"\n \
    \           continue\n        }\n    }\n    return letterGrades\n}\n", "    var\
    \ result []string\n    var gpas []float64\n    var letter string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            gpas = append(gpas,\
    \ grade)\n        } else {\n            if grade < 3.0 {\n                gpas\
    \ = append(gpas, grade)\n            } else {\n                gpas = append(gpas,\
    \ grade)\n            }\n        }\n    }\n    for _, grade := range gpas {\n\
    \        if grade > 3.0 {\n            letter = \"A+\"\n        } else if grade\
    \ < 3.0 {\n            letter = \"A\"\n        } else if grade == 3.0 {\n    \
    \        letter = \"B+\"\n        } else if grade == 2.7 {\n            letter\
    \ = \"B\"\n        } else if grade == 2.3 {\n            letter = \"B-\"\n   \
    \     } else if grade == 2.0 {\n            letter = \"C+\"\n        } else if\
    \ grade == 1.7 {\n            letter = \"C\"\n        } else if grade == 1.3 {\n\
    \            letter = \"C-\"\n        } else if grade == 1.0 {\n            letter\
    \ = \"D+\"\n        } else if grade == 0.7 {\n            letter = \"D\"\n   \
    \     } else if grade == 0.0 {\n            letter = \"D-\"\n        } else {\n\
    \            letter = \"E\"\n        }\n        result = append(result, letter)\n\
    \    }\n    return result\n}\n", "    grades_string := \"\"\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            grades_string += \"\
    B+\"\n        } else if grade > 2.7 {\n            grades_string += \"B\"\n  \
    \      } else if grade > 2.3 {\n            grades_string += \"B-\"\n        }\
    \ else if grade > 1.3 {\n            grades_string += \"C+\"\n        } else if\
    \ grade > 1.7 {\n            grades_string += \"C\"\n        } else if grade >\
    \ 1.0 {\n            grades_string += \"C-\"\n        } else if grade > 0.7 {\n\
    \            grades_string += \"D+\"\n        } else if grade > 0.3 {\n      \
    \      grades_string += \"D\"\n        } else if grade > 0.0 {\n            grades_string\
    \ += \"D-\"\n        } else {\n            grades_string += \"E\"\n        }\n\
    \    }\n    return []string{grades_string}\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := range grades {\n        if grades[i] >= 3.0 {\n \
    \           result[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     result[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n        \
    \    result[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 1.7\
    \ {\n            result[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n  \
    \          result[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n        \
    \    result[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            result[i]\
    \ = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n\
    \    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    \n    for i := 0; i < gradesLen; i++ {\n        letterGrades[i] = \"\"\
    \n        \n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 3.7 {\n            letterGrades[i] = \"A\"\n\
    \        } else if grades[i] >= 3.3 {\n            letterGrades[i] = \"A-\"\n\
    \        } else if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n \
    \       } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n  \
    \      } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    \n    // The first letter\
    \ grade is always A+\n    letterGrades[0] = \"A+\"\n    \n    // The last letter\
    \ grade is always E\n    letterGrades[gradesLen-1] = \"E\"\n    \n    // The middle\
    \ letter grades are the letter grades using the formula\n    // GPA - 3.7\n  \
    \  for i := 1; i < gradesLen; i++ {\n        letterGrades[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i] - 3.7)\n    }\n    \n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[0] = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1]\
    \ = 0.0\n    gradesSorted[0] = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0]\
    \ = gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] = gradesSorted[len(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    letterGrades[gradesLen-2]\
    \ = \"D-\"\n    letterGrades[gradesLen-3] = \"D\"\n    letterGrades[gradesLen-4]\
    \ = \"C-\"\n    letterGrades[gradesLen-5] = \"C\"\n    letterGrades[gradesLen-6]\
    \ = \"B-\"\n    letterGrades[gradesLen-7] = \"B\"\n    letterGrades[gradesLen-8]\
    \ = \"A-\"\n    letterGrades[gradesLen-9] = \"A\"\n    letterGrades[gradesLen-10]\
    \ = \"A+\"\n    letterGrades[gradesLen-11] = \"B+\"\n    letterGrades[gradesLen-12]\
    \ = \"C+\"\n    letterGrades[gradesLen-13] = \"C\"\n    letterGrades[gradesLen-14]\
    \ = \"D+\"\n    letterGrades[gradesLen-15] = \"D\"\n    letterGrades[gradesLen-16]\
    \ = \"D-\"\n    letterGrades[gradesLen-17] = \"E\"\n    letterGrades[gradesLen-18]\
    \ = \"E\"\n    letterGrades[gradesLen-19] = \"E\"\n    letterGrades[gradesLen-20]\
    \ = \"E\"\n    letterGrades[gradesLen-21] = \"E\"\n    letterGrades[gradesLen-22]\
    \ = \"E\"\n    letterGrades[gradesLen-23] = \"E\"\n    letterGrades[gradesLen-24]\
    \ = \"E\"\n    letterGrades[gradesLen-25] = \"E\"\n    letterGrades[gradesLen-26]\
    \ = \"E\"\n    letterGrades[gradesLen-27] = \"E\"\n    letterGrades[gradesLen-28]\
    \ = \"E\"\n    letterGrades[gradesLen-29] = \"E\"\n    letterGrades[gradesLen-30]\
    \ = \"E\"\n    letterGrades[gradesLen-31] = \"E\"\n    letterGrades[gradesLen-32]\
    \ = \"E\"\n    letterGrades[gradesLen-33] = \"E\"\n    letterGrades[gradesLen-34]\
    \ = \"E\"\n    letterGrades[gradesLen-35] = \"E\"\n    letterGrades[gradesLen-",
  "    var letterGrades []string\n    for _, grade := range grades {\n        if grade\
    \ > 3.0 {\n            letterGrades = append(letterGrades, \"B+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades = append(letterGrades, \"B\"\
    )\n        } else if grade > 2.3 {\n            letterGrades = append(letterGrades,\
    \ \"B-\")\n        } else if grade > 1.3 {\n            letterGrades = append(letterGrades,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            letterGrades = append(letterGrades,\
    \ \"C\")\n        } else if grade > 1.0 {\n            letterGrades = append(letterGrades,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            letterGrades = append(letterGrades,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            letterGrades = append(letterGrades,\
    \ \"D\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"D-\")\n        } else if grade > 0.0 {\n            letterGrades = append(letterGrades,\
    \ \"E\")\n        } else {\n            letterGrades = append(letterGrades, \"\
    A\")\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n \
    \       } else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n  \
    \      } else if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n  \
    \      } else if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n  \
    \      } else if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n   \
    \     } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n   \
    \     } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are the letter grades using\
    \ the formula\n    // GPA * 10 + GPA - 10\n    for i := 1; i < gradesLen; i++\
    \ {\n        letterGrades[i] = fmt.Sprintf(\"%+.2f\", grades[i]*10 + grades[i-1]-10)\n\
    \    }\n    \n    return letterGrades\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] > 3.0 {\n            result[i]\
    \ = \"B+\"\n        } else if grades[i] < 3.0 {\n            result[i] = \"B\"\
    \n        } else if grades[i] < 2.7 {\n            result[i] = \"B-\"\n      \
    \  } else if grades[i] < 2.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] < 1.7 {\n            result[i] = \"C\"\n        } else if grades[i]\
    \ < 1.3 {\n            result[i] = \"C-\"\n        } else if grades[i] < 1.0 {\n\
    \            result[i] = \"D+\"\n        } else if grades[i] < 0.7 {\n       \
    \     result[i] = \"D\"\n        } else if grades[i] < 0.0 {\n            result[i]\
    \ = \"D-\"\n        } else {\n            result[i] = \"E\"\n        }\n    }\n\
    \    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7\
    \ {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n\
    \            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 {\n\
    \            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n \
    \           letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n \
    \           letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n \
    \           letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n  \
    \          letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := range grades {\n        if grades[i] < 3.0 {\n  \
    \          result[i] = \"E\"\n        } else if grades[i] < 3.3 {\n          \
    \  result[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] < 4.0 {\n            result[i] = \"B+\"\
    \n        } else if grades[i] < 4.3 {\n            result[i] = \"B\"\n       \
    \ } else if grades[i] < 4.7 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] < 5.0 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ < 5.3 {\n            result[i] = \"A\"\n        } else if grades[i] < 5.7 {\n\
    \            result[i] = \"A-\"\n        } else if grades[i] < 6.0 {\n       \
    \     result[i] = \"A\"\n        } else if grades[i] < 6.3 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] < 6.7 {\n            result[i] = \"A\"\
    \n        } else if grades[i] < 7.0 {\n            result[i] = \"A+\"\n      \
    \  } else if grades[i] < 7.3 {\n            result[i] = \"A\"\n        } else\
    \ if grades[i] < 7.7 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ < 8.0 {\n            result[i] = \"A\"\n        } else if grades[i] < 8.3 {\n\
    \            result[i] = \"A+\"\n        } else if grades[i] < 8.7 {\n       \
    \     result[i] = \"A\"\n        } else if grades[i] < 9.0 {\n            result[i]\
    \ = \"A+\"\n        } else if grades[i] < 9.3 {\n            result[i] = \"A\"\
    \n        } else if grades[i] < 9.7 {\n            result[i] = \"A+\"\n      \
    \  } else if grades[i] < 10.0 {\n            result[i] = \"A\"\n        } else\
    \ if grades[i] < 10.3 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ < 10.7 {\n            result[i] = \"A\"\n        } else if grades[i] < 11.0\
    \ {\n            result[i] = \"A+\"\n        } else if grades[i] < 11.3 {\n  \
    \          result[i] = \"A\"\n        } else if grades[i] < 11.7 {\n         \
    \   result[i] = \"A+\"\n        } else if grades[i] < 12.0 {\n            result[i]\
    \ = \"A\"\n        } else if grades[i] < 12.3 {\n            result[i] = \"A+\"\
    \n        } else if grades[i] < 12.7 {\n            result[i] = \"A\"\n      \
    \  } else if grades[i] < 13.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] < 13.3 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ < ", "    result := make([]string, len(grades))\n    for i := range grades {\n\
    \        if grades[i] < 3.0 {\n            result[i] = \"E\"\n        } else if\
    \ grades[i] >= 3.0 && grades[i] < 3.7 {\n            result[i] = \"D-\"\n    \
    \    } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            result[i] =\
    \ \"C+\"\n        } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n          \
    \  result[i] = \"B+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.6 {\n\
    \            result[i] = \"B\"\n        } else if grades[i] >= 4.6 && grades[i]\
    \ < 4.9 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 4.9\
    \ && grades[i] < 5.2 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 5.2 && grades[i] < 5.5 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 5.5 && grades[i] < 5.8 {\n            result[i] = \"A\"\n  \
    \      } else if grades[i] >= 5.8 && grades[i] < 6.0 {\n            result[i]\
    \ = \"A-\"\n        } else if grades[i] >= 6.0 && grades[i] < 6.3 {\n        \
    \    result[i] = \"B+\"\n        } else if grades[i] >= 6.3 && grades[i] < 6.6\
    \ {\n            result[i] = \"B\"\n        } else if grades[i] >= 6.6 && grades[i]\
    \ < 6.9 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 6.9\
    \ && grades[i] < 7.2 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 7.2 && grades[i] < 7.5 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 7.5 && grades[i] < 7.8 {\n            result[i] = \"A\"\n  \
    \      } else if grades[i] >= 7.8 && grades[i] < 8.0 {\n            result[i]\
    \ = \"A-\"\n        } else if grades[i] >= 8.0 && grades[i] < 8.3 {\n        \
    \    result[i] = \"B+\"\n        } else if grades[i] >= 8.3 && grades[i] < 8.6\
    \ {\n            result[i] = \"B\"\n        } else if grades[i] >= 8.6 && grades[i]\
    \ < 8.9 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 8.9\
    \ && grades[i] < 9.2 {\n            result[i] = \"A-\"\n        } else if grades[i]\
    \ >= 9.2 && grades[i] < 9.5 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] >= 9.5 && grades[i] < 9.8 {\n            result[i] = \"A\"\n  \
    \      } else if grades[i] >= 9.8 && grades[i] < 10.", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n        }\
    \ else if grades[i] >= 3.0 && grades[i] < 3.7 {\n            letterGrades[i] =\
    \ \"C-\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] >= 4.0 && grades[i] <\
    \ 4.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 4.3 && grades[i] < 4.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 4.7 && grades[i] < 5.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 5.0 && grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 5.7 && grades[i]\
    \ < 6.0 {\n            letterGrades[i] = \"A+\"\n        } else {\n          \
    \  letterGrades[i] = \"A+\"\n        }\n    }\n    return letterGrades\n}\n",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{}, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(grade", "    var grades_string []string\n    var\
    \ total_grade float64\n    var letter string\n    for _, grade := range grades\
    \ {\n        total_grade += grade\n        if total_grade >= 4.0 {\n         \
    \   letter = \"A+\"\n        } else if total_grade >= 3.7 && total_grade <= 4.0\
    \ {\n            letter = \"A\"\n        } else if total_grade >= 3.3 && total_grade\
    \ <= 3.7 {\n            letter = \"A-\"\n        } else if total_grade >= 3.0\
    \ && total_grade <= 3.3 {\n            letter = \"B+\"\n        } else if total_grade\
    \ >= 2.7 && total_grade <= 3.0 {\n            letter = \"B\"\n        } else if\
    \ total_grade >= 2.3 && total_grade <= 2.7 {\n            letter = \"B-\"\n  \
    \      } else if total_grade >= 2.0 && total_grade <= 2.3 {\n            letter\
    \ = \"C+\"\n        } else if total_grade >= 1.7 && total_grade <= 2.0 {\n   \
    \         letter = \"C\"\n        } else if total_grade >= 1.3 && total_grade\
    \ <= 1.7 {\n            letter = \"C-\"\n        } else if total_grade >= 1.0\
    \ && total_grade <= 1.3 {\n            letter = \"D+\"\n        } else if total_grade\
    \ >= 0.7 && total_grade <= 1.0 {\n            letter = \"D\"\n        } else if\
    \ total_grade >= 0.0 {\n            letter = \"D-\"\n        } else {\n      \
    \      letter = \"E\"\n        }\n        grades_string = append(grades_string,\
    \ letter)\n    }\n    return grades_string\n}\n", "    grades := append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]float64{},\
    \ grades...)\n    grades = append([]float64{}, grades...)\n    grades = append([]",
  "    var grades_string []string\n    for _, grade := range grades {\n        if\
    \ grade > 3.0 {\n            grades_string = append(grades_string, \"B+\")\n \
    \       } else if grade > 2.7 {\n            grades_string = append(grades_string,\
    \ \"B\")\n        } else if grade > 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        } else if grade > 2.0 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen :=\
    \ len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen - 1] = \"D-\"\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] < 3.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 4.0 && grades[i]\
    \ < 4.3 {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >=\
    \ 4.3 && grades[i] < 4.7 {\n            letterGrades[i] = \"B+\"\n        } else\
    \ if grades[i] >= 4.7 && grades[i] < 5.0 {\n            letterGrades[i] = \"A+\"\
    \n        } else if grades[i] >= 5.0 && grades[i] < 5.3 {\n            letterGrades[i]\
    \ = \"A+\"\n        } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n        \
    \    letterGrades[i] = \"A\"\n        } else if grades[i] >= 5.7 && grades[i]\
    \ < 6.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 6.0 && grades[i] < 6.3 {\n            letterGrades[i] = \"A\"\n        } else\
    \ if grades[i] >= 6.3 && grades[i] < 6.7 {\n            letterGrades[i] = \"A\"\
    \n        } else if grades[i] >= 6.7 && grades[i] < 7.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 7.0 && grades[i] < 7.3 {\n         \
    \   letterGrades[i] = \"A\"\n        } else if grades[i] >= 7.3 && grades[i] <\
    \ 7.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >= 7.7\
    \ && grades[i] < 8.0 {\n            letterGrades[i] = \"A\"\n        } else if\
    \ grades[i] >= 8.0 {\n            letterGrades[i] = \"A+\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is A+\n    letter_grades[0] = \"A+\"\n  \
    \  \n    // The second letter grade is B\n    letter_grades[1] = \"B\"\n    \n\
    \    // The third letter grade is C- \n    letter_grades[2] = \"C-\"\n    \n \
    \   // The fourth letter grade is C\n    letter_grades[3] = \"C\"\n    \n    //\
    \ The fifth letter grade is A-\n    letter_grades[4] = \"A-\"\n    \n    // The\
    \ sixth letter grade is D+\n    letter_grades[5] = \"D+\"\n    \n    // The seventh\
    \ letter grade is D\n    letter_grades[6] = \"D\"\n    \n    // The eighth letter\
    \ grade is D-\n    letter_grades[7] = \"D-\"\n    \n    // The ninth letter grade\
    \ is E\n    letter_grades[8] = \"E\"\n    \n    // The tenth letter grade is F\n\
    \    letter_grades[9] = \"F\"\n    \n    // The eleventh letter grade is F\n \
    \   letter_grades[10] = \"F\"\n    \n    // The twelfth letter grade is F\n  \
    \  letter_grades[11] = \"F\"\n    \n    // The thirteenth letter grade is F\n\
    \    letter_grades[12] = \"F\"\n    \n    // The fourteenth letter grade is F\n\
    \    letter_grades[13] = \"F\"\n    \n    // The fifteenth letter grade is F\n\
    \    letter_grades[14] = \"F\"\n    \n    // The sixteenth letter grade is F\n\
    \    letter_grades[15] = \"F\"\n    \n    // The seventeenth letter grade is F\n\
    \    letter_grades[16] = \"F\"\n    \n    // The eighteenth letter grade is F\n\
    \    letter_grades[17] = \"F\"\n    \n    // The nineteenth letter grade is F\n\
    \    letter_grades[18] = \"F\"\n    \n    // The twenty letter grade is F\n  \
    \  letter_grades[19] = \"F\"\n    \n    // The twenty-first letter grade is F\n\
    \    letter_grades[20] = \"F\"\n    \n    // The twenty-second letter grade is\
    \ F\n    letter_grades[21] = \"F\"\n    \n    // The twenty-third ", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2]\
    \ = \"D\"\n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4]\
    \ = \"C\"\n    letterGrades[gradesLen-5] = \"B+\"\n    letterGrades[gradesLen-6]\
    \ = \"B\"\n    letterGrades[gradesLen-7] = \"B-\"\n    letterGrades[gradesLen-8]\
    \ = \"B\"\n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10]\
    \ = \"A\"\n    letterGrades[gradesLen-11] = \"A-\"\n    letterGrades[gradesLen-12]\
    \ = \"A\"\n    letterGrades[gradesLen-13] = \"+\"\n    letterGrades[gradesLen-14]\
    \ = \"-\"\n    letterGrades[gradesLen-15] = \"-\"\n    letterGrades[gradesLen-16]\
    \ = \"-\"\n    letterGrades[gradesLen-17] = \"-\"\n    letterGrades[gradesLen-18]\
    \ = \"-\"\n    letterGrades[gradesLen-19] = \"-\"\n    letterGrades[gradesLen-20]\
    \ = \"-\"\n    letterGrades[gradesLen-21] = \"-\"\n    letterGrades[gradesLen-22]\
    \ = \"-\"\n    letterGrades[gradesLen-23] = \"-\"\n    letterGrades[gradesLen-24]\
    \ = \"-\"\n    letterGrades[gradesLen-25] = \"-\"\n    letterGrades[gradesLen-26]\
    \ = \"-\"\n    letterGrades[gradesLen-27] = \"-\"\n    letterGrades[gradesLen-28]\
    \ = \"-\"\n    letterGrades[gradesLen-29] = \"-\"\n    letterGrades[gradesLen-30]\
    \ = \"-\"\n    letterGrades[gradesLen-31] = \"-\"\n    letterGrades[gradesLen-32]\
    \ = \"-\"\n    letterGrades[gradesLen-33] = \"-\"\n    letterGrades[gradesLen-34]\
    \ = \"-\"\n    letterGrades[gradesLen-35] = \"-\"\n    letterGrades[gradesLen-36]\
    \ = \"-\"\n    letterGrades[gradesLen-37] = \"-\"\n    letterGrades[grade", " \
    \   gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n       \
    \     letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n       \
    \     letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 && grades[i]\
    \ < 3.0 {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >=\
    \ 1.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] < 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"E\"\n    \n  \
    \  for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n         \
    \   letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n         \
    \   letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n          \
    \  letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 {\n          \
    \  letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n           \
    \ letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n           \
    \ letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n           \
    \ letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n            letterGrades[i]\
    \ = \"D-\"\n        } else {\n            letterGrades[i] = \"E\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    gradesMax\
    \ := gradesLen - 1\n    gradesMin := 0\n    gradesSum, gradesAvg := 0.0, 0.0\n\
    \    for i := gradesMin; i <= gradesMax; i++ {\n        gradesSum += grades[i]\n\
    \        gradesAvg += grades[i]\n    }\n    gradesAvg /= float64(gradesLen)\n\
    \    gradesSum /= float64(gradesLen)\n    gradesAvg /= float64(gradesMax)\n  \
    \  gradesAvg /= float64(gradesMin)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n\
    \    gradesAvg /= float64(gradesSum)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n\
    \    gradesAvg /= float64(gradesMax)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n\
    \    gradesAvg /= float64(gradesMin)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n\
    \    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)\n    gradesAvg = math.Pow(gradesAvg,\
    \ 2.0)\n    gradesAvg = math.Pow(gradesAvg, 2.0)", "    gradesSorted := make([]float64,\
    \ len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, gradesSorted...)\n    gradesSor",
  "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n\
    \    sort.Float64s(gradesSorted)\n    gradesSorted := gradesSorted[:len(grades)-1]\n\
    \    gradesSorted[0] = gradesSorted[0]\n    gradesSorted[len(gradesSorted)-1]\
    \ = gradesSorted[len(gradesSorted)-1]\n    gradesSorted[len(gradesSorted)-2] =\
    \ gradesSorted[len(gradesSorted)-2]\n    gradesSorted[len(gradesSorted)-3] = gradesSorted[len(gradesSorted)-3]\n\
    \    gradesSorted[len(gradesSorted)-4] = gradesSorted[len(gradesSorted)-4]\n \
    \   gradesSorted[len(gradesSorted)-5] = gradesSorted[len(gradesSorted)-5]\n  \
    \  gradesSorted[len(gradesSorted)-6] = gradesSorted[len(gradesSorted)-6]\n   \
    \ gradesSorted[len(gradesSorted)-7] = gradesSorted[len(gradesSorted)-7]\n    gradesSorted[len(gradesSorted)-8]\
    \ = gradesSorted[len(gradesSorted)-8]\n    gradesSorted[len(gradesSorted)-9] =\
    \ gradesSorted[len(gradesSorted)-9]\n    gradesSorted[len(gradesSorted)-10] =\
    \ gradesSorted[len(gradesSorted)-10]\n    gradesSorted[len(gradesSorted)-11] =\
    \ gradesSorted[len(gradesSorted)-11]\n    gradesSorted[len(gradesSorted)-12] =\
    \ gradesSorted[len(gradesSorted)-12]\n    gradesSorted[len(gradesSorted)-13] =\
    \ gradesSorted[len(gradesSorted)-13]\n    gradesSorted[len(gradesSorted)-14] =\
    \ gradesSorted[len(gradesSorted)-14]\n    gradesSorted[len(gradesSorted)-15] =\
    \ gradesSorted[len(gradesSorted)-15]\n    gradesSorted[len(gradesSorted)-16] =\
    \ gradesSorted[len(gradesSorted)-16]\n    gradesSorted[len(gradesSorted)-17] =\
    \ gradesSorted[len(gradesSorted)-17]\n    gradesSorted[len(gradesSorted)-18] =\
    \ gradesSorted[len(gradesSorted)-18]\n    gradesSorted[len(gradesSorted)-19] =\
    \ gradesSorted[len(gradesSorted)-19]\n    gradesSorted[len(gradesSorted)-20] =\
    \ gradesSorted[len(gradesSorted)-20]\n    gradesSorted[len(gradesSorted)-21] =\
    \ gradesSorted", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    letterGrades[gradesLen-2] = \"D\"\n    letterGrades[gradesLen-3] = \"\
    C-\"\n    letterGrades[gradesLen-4] = \"C\"\n    letterGrades[gradesLen-5] = \"\
    B+\"\n    letterGrades[gradesLen-6] = \"B\"\n    letterGrades[gradesLen-7] = \"\
    A-\"\n    letterGrades[gradesLen-8] = \"A\"\n    letterGrades[gradesLen-9] = \"\
    A+\"\n    letterGrades[gradesLen-10] = \"A-\"\n    letterGrades[gradesLen-11]\
    \ = \"A\"\n    letterGrades[gradesLen-12] = \"B+\"\n    letterGrades[gradesLen-13]\
    \ = \"B\"\n    letterGrades[gradesLen-14] = \"B-\"\n    letterGrades[gradesLen-15]\
    \ = \"B\"\n    letterGrades[gradesLen-16] = \"C+\"\n    letterGrades[gradesLen-17]\
    \ = \"C\"\n    letterGrades[gradesLen-18] = \"C-\"\n    letterGrades[gradesLen-19]\
    \ = \"C\"\n    letterGrades[gradesLen-20] = \"D+\"\n    letterGrades[gradesLen-21]\
    \ = \"D\"\n    letterGrades[gradesLen-22] = \"D-\"\n    letterGrades[gradesLen-23]\
    \ = \"D\"\n    letterGrades[gradesLen-24] = \"D+\"\n    letterGrades[gradesLen-25]\
    \ = \"D\"\n    letterGrades[gradesLen-26] = \"D-\"\n    letterGrades[gradesLen-27]\
    \ = \"D\"\n    letterGrades[gradesLen-28] = \"D+\"\n    letterGrades[gradesLen-29]\
    \ = \"D\"\n    letterGrades[gradesLen-30] = \"D-\"\n    letterGrades[gradesLen-31]\
    \ = \"D\"\n    letterGrades[gradesLen-32] = \"D+\"\n    letterGrades[gradesLen-33]\
    \ = \"D\"\n    letterGrades[gradesLen-34] = \"D-\"\n    letterGrades[gradesLen-35]\
    \ = \"D\"\n    letterGrades[gradesLen-", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n \
    \       if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n        }\
    \ else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        } else\
    \ if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"C\"\
    \n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 {\n            letterGrades[i]\
    \ = \"D+\"\n        } else if grades[i] < 1.0 {\n            letterGrades[i] =\
    \ \"D\"\n        } else {\n            letterGrades[i] = \"D-\"\n        }\n \
    \   }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades\
    \ := make([]string, gradesLen)\n    \n    // The first letter grade is always\
    \ A+\n    letterGrades[0] = \"A+\"\n    \n    // The last letter grade is always\
    \ E\n    letterGrades[gradesLen-1] = \"E\"\n    \n    // The grades are sorted\
    \ in descending order\n    sort.Float64s(grades)\n    \n    // The grades are\
    \ iterated from highest to lowest and grade is appended\n    // to the letter\
    \ grade if the grade is greater than or equal to 3.7\n    // and less than or\
    \ equal to 4.0\n    for i := gradesLen - 1; i >= 0; i-- {\n        if grades[i]\
    \ >= 3.7 && grades[i] <= 4.0 {\n            letterGrades[i] = fmt.Sprintf(\"A+\"\
    , grades[i])\n        }\n    }\n    \n    // The grades are iterated from lowest\
    \ to highest and grade is appended\n    // to the letter grade if the grade is\
    \ greater than or equal to 2.7\n    // and less than or equal to 3.0\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 2.7 && grades[i] <= 3.0\
    \ {\n            letterGrades[i] = fmt.Sprintf(\"B+\", grades[i])\n        }\n\
    \    }\n    \n    // The grades are iterated from lowest to highest and grade\
    \ is appended\n    // to the letter grade if the grade is greater than or equal\
    \ to 1.7\n    // and less than or equal to 2.0\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 1.7 && grades[i] <= 2.0 {\n            letterGrades[i]\
    \ = fmt.Sprintf(\"C+\", grades[i])\n        }\n    }\n    \n    // The grades\
    \ are iterated from lowest to highest and grade is appended\n    // to the letter\
    \ grade if the grade is greater than or equal to 1.0\n    // and less than or\
    \ equal to 1.7\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >=\
    \ 1.0 && grades[i] <= 1.7 {\n            letterGrades[i] = fmt.Sprintf(\"C\",\
    \ grades[i])\n        }\n    }\n    \n    // The grades are iterated from lowest\
    \ to highest and grade is appended\n    // to the letter grade if the grade is\
    \ greater than or equal to 0.7\n    // and less than or equal to 1.0\n    for\
    \ i := 0; i < gradesLen; i++ {\n        if grades[i] >= 0.7 && grades[i] <= 1.0\
    \ {\n            letterGrades[i] = fmt.Sprintf(\"D+\", grades[i])\n        }\n\
    \    }\n    \n    // ", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    for i := 0; i < gradesLen; i++ {\n        if grades[i]\
    \ >= 4.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ >= 3.7 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 {\n            letterGrades[i] = \"A-\"\n        } else if grades[i] >=\
    \ 3.0 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 {\n            letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3\
    \ {\n            letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0\
    \ {\n            letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.7\
    \ {\n            letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 {\n\
    \            letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n\
    \            letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n\
    \            letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.0 {\n \
    \           letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    result := make([]string,\
    \ len(grades))\n    for i := range grades {\n        if grades[i] < 3.0 {\n  \
    \          result[i] = \"E\"\n        } else if grades[i] < 3.3 {\n          \
    \  result[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] < 4.0 {\n            result[i] = \"B-\"\
    \n        } else if grades[i] < 4.3 {\n            result[i] = \"B+\"\n      \
    \  } else if grades[i] < 4.7 {\n            result[i] = \"A-\"\n        } else\
    \ if grades[i] < 5.0 {\n            result[i] = \"A+\"\n        } else if grades[i]\
    \ < 5.3 {\n            result[i] = \"A\"\n        } else if grades[i] < 5.7 {\n\
    \            result[i] = \"A+\"\n        } else if grades[i] < 6.0 {\n       \
    \     result[i] = \"B\"\n        } else if grades[i] < 6.3 {\n            result[i]\
    \ = \"B+\"\n        } else if grades[i] < 6.7 {\n            result[i] = \"B\"\
    \n        } else if grades[i] < 7.0 {\n            result[i] = \"C\"\n       \
    \ } else if grades[i] < 7.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grades[i] < 7.7 {\n            result[i] = \"C\"\n        } else if grades[i]\
    \ < 8.0 {\n            result[i] = \"C-\"\n        } else if grades[i] < 8.3 {\n\
    \            result[i] = \"C-\"\n        } else if grades[i] < 8.7 {\n       \
    \     result[i] = \"C\"\n        } else if grades[i] < 9.0 {\n            result[i]\
    \ = \"D+\"\n        } else if grades[i] < 9.3 {\n            result[i] = \"D\"\
    \n        } else if grades[i] < 9.7 {\n            result[i] = \"D+\"\n      \
    \  } else if grades[i] < 10.0 {\n            result[i] = \"D\"\n        } else\
    \ {\n            result[i] = \"D-\"\n        }\n    }\n    return result\n}\n",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n \
    \           letter_grades[i] = \"E\"\n            continue\n        }\n      \
    \  \n        if grades[i] >= 3.0 && grades[i] < 3.7 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        \n        if grades[i] >=\
    \ 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"A\"\n           \
    \ continue\n        }\n        \n        if grades[i] >= 4.0 && grades[i] < 4.3\
    \ {\n            letter_grades[i] = \"A-\"\n            continue\n        }\n\
    \        \n        if grades[i] >= 4.3 && grades[i] < 4.6 {\n            letter_grades[i]\
    \ = \"B+\"\n            continue\n        }\n        \n        if grades[i] >=\
    \ 4.6 && grades[i] < 4.9 {\n            letter_grades[i] = \"B\"\n           \
    \ continue\n        }\n        \n        if grades[i] >= 4.9 && grades[i] < 5.2\
    \ {\n            letter_grades[i] = \"B-\"\n            continue\n        }\n\
    \        \n        if grades[i] >= 5.2 && grades[i] < 5.5 {\n            letter_grades[i]\
    \ = \"C+\"\n            continue\n        }\n        \n        if grades[i] >=\
    \ 5.5 && grades[i] < 5.8 {\n            letter_grades[i] = \"C\"\n           \
    \ continue\n        }\n        \n        if grades[i] >= 5.8 && grades[i] < 6.1\
    \ {\n            letter_grades[i] = \"C-\"\n            continue\n        }\n\
    \        \n        if grades[i] >= 6.1 && grades[i] < 6.4 {\n            letter_grades[i]\
    \ = \"D+\"\n            continue\n        }\n        \n        if grades[i] >=\
    \ 6.4 && grades[i] < 6.7 {\n            letter_grades[i] = \"D\"\n           \
    \ continue\n        }\n        \n        if grades[i] >= 6.7 && grades[i] < 7\
    \ {\n            letter_grades[i] = \"D-\"\n            continue\n        }\n\
    \        \n        letter_grades[i] = \"E\"\n    }\n    \n    return letter_grades\n\
    }\n", "    grades := make([]float64, len(grades))\n    grades[0] = 4.0\n    grades[1]\
    \ = 3.7\n    grades[2] = 3.3\n    grades[3] = 3.0\n    grades[4] = 2.7\n    grades[5]\
    \ = 2.3\n    grades[6] = 2.0\n    grades[7] = 1.7\n    grades[8] = 1.3\n    grades[9]\
    \ = 1.0\n    grades[10] = 0.7\n    grades[11] = 0.0\n    grades[12] = 0.0\n  \
    \  grades[13] = 0.0\n    grades[14] = 0.0\n    grades[15] = 0.0\n    grades[16]\
    \ = 0.0\n    grades[17] = 0.0\n    grades[18] = 0.0\n    grades[19] = 0.0\n  \
    \  grades[20] = 0.0\n    grades[21] = 0.0\n    grades[22] = 0.0\n    grades[23]\
    \ = 0.0\n    grades[24] = 0.0\n    grades[25] = 0.0\n    grades[26] = 0.0\n  \
    \  grades[27] = 0.0\n    grades[28] = 0.0\n    grades[29] = 0.0\n    grades[30]\
    \ = 0.0\n    grades[31] = 0.0\n    grades[32] = 0.0\n    grades[33] = 0.0\n  \
    \  grades[34] = 0.0\n    grades[35] = 0.0\n    grades[36] = 0.0\n    grades[37]\
    \ = 0.0\n    grades[38] = 0.0\n    grades[39] = 0.0\n    grades[40] = 0.0\n  \
    \  grades[41] = 0.0\n    grades[42] = 0.0\n    grades[43] = 0.0\n    grades[44]\
    \ = 0.0\n    grades[45] = 0.0\n    grades[46] = 0.0\n    grades[47] = 0.0\n  \
    \  grades[48] = 0.0\n    grades[49] = 0.0\n    grades[50] = 0.0\n    grades[51]\
    \ = 0.0\n    grades[52] = 0.0\n    grades[53] = 0.0\n    grades[54] = 0.0\n  \
    \  grades[55] = 0.0\n    grades[56] = 0.0\n    grades[57] = 0.0\n    grades[58]\
    \ = 0.0\n    grades[59] = 0.0\n    grades[60] = 0.0\n    grades[61] = 0.0\n  \
    \  grades[62] = 0.0\n    grades[63] = 0.0\n    grades[64] = 0.0\n    grades[65]\
    \ = 0.0\n    grades[66] = 0.0\n    grades[67] = 0.0\n    grades[68] = 0.0\n  \
    \  grades[69] = 0.0\n    grades[70] = 0.0\n    grades[71]", "    var result []string\n\
    \    for _, grade := range grades {\n        if grade > 3.0 {\n            grade\
    \ = grade - 3.0\n        }\n        if grade < 0.0 {\n            grade = grade\
    \ + 3.0\n        }\n        if grade < 2.0 {\n            grade = grade + 2.0\n\
    \        }\n        if grade < 1.7 {\n            grade = grade + 1.7\n      \
    \  }\n        if grade < 1.0 {\n            grade = grade + 1.0\n        }\n \
    \       if grade < 0.7 {\n            grade = grade + 0.7\n        }\n       \
    \ if grade < 0.3 {\n            grade = grade + 0.3\n        }\n        if grade\
    \ < 0.0 {\n            grade = grade + 0.0\n        }\n        if grade < -3.0\
    \ {\n            grade = grade - 3.0\n        }\n        if grade < -2.0 {\n \
    \           grade = grade - 2.0\n        }\n        if grade < -1.7 {\n      \
    \      grade = grade - 1.7\n        }\n        if grade < -1.0 {\n           \
    \ grade = grade - 1.0\n        }\n        if grade < -0.7 {\n            grade\
    \ = grade - 0.7\n        }\n        if grade < -0.3 {\n            grade = grade\
    \ - 0.3\n        }\n        if grade < 0.0 {\n            grade = grade + 0.0\n\
    \        }\n        if grade < 3.0 {\n            grade = grade + 3.0\n      \
    \  }\n        if grade < 2.0 {\n            grade = grade + 2.0\n        }\n \
    \       if grade < 1.7 {\n            grade = grade + 1.7\n        }\n       \
    \ if grade < 1.0 {\n            grade = grade + 1.0\n        }\n        if grade\
    \ < 0.7 {\n            grade = grade + 0.7\n        }\n        if grade < 0.3\
    \ {\n            grade = grade + 0.3\n        }\n        if grade < 0.0 {\n  \
    \          grade = grade + 0.0\n        }\n        if grade < 3.0 {\n        \
    \    grade = grade + 3.0\n        }\n        if grade < 2.0 {\n            grade\
    \ = grade + 2.0\n        }\n        if grade < 1.7 {\n            grade = grade\
    \ + 1.7\n        }\n        if grade < 1.0 {\n            grade = grade + 1.0\n\
    \        }\n        if grade < 0.7 {\n            grade = grade + 0.7\n      \
    \  }\n        if grade < 0.3 {\n            grade = grade + 0.3\n        }\n \
    \       if grade < 0.0 {\n            grade = grade + 0.0\n        }\n       \
    \ if grade ", "    var result []string\n    for _, grade := range grades {\n \
    \       if grade > 3.0 {\n            result := append(result, fmt.Sprintf(\"\
    A+\"))\n        } else if grade > 2.7 {\n            result := append(result,\
    \ fmt.Sprintf(\"B\"))\n        } else if grade > 2.3 {\n            result :=\
    \ append(result, fmt.Sprintf(\"B-\"))\n        } else if grade > 1.3 {\n     \
    \       result := append(result, fmt.Sprintf(\"C+\"))\n        } else if grade\
    \ > 0.7 {\n            result := append(result, fmt.Sprintf(\"C\"))\n        }\
    \ else if grade > 0.3 {\n            result := append(result, fmt.Sprintf(\"C-\"\
    ))\n        } else if grade > 0.0 {\n            result := append(result, fmt.Sprintf(\"\
    D+\"))\n        } else if grade > -0.3 {\n            result := append(result,\
    \ fmt.Sprintf(\"D\"))\n        } else if grade > -0.7 {\n            result :=\
    \ append(result, fmt.Sprintf(\"D-\"))\n        } else {\n            result :=\
    \ append(result, fmt.Sprintf(\"E\"))\n        }\n    }\n    return result\n}\n",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 2.7 {\n        \
    \    letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n         \
    \   letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.3 {\n         \
    \   letterGrades[i] = \"C+\"\n        } else if grades[i] >= 0.7 {\n         \
    \   letterGrades[i] = \"C\"\n        } else if grades[i] >= 0.3 {\n          \
    \  letterGrades[i] = \"C-\"\n        } else if grades[i] >= 0.0 {\n          \
    \  letterGrades[i] = \"D+\"\n        } else if grades[i] >= -0.3 {\n         \
    \   letterGrades[i] = \"D-\"\n        } else if grades[i] >= -0.7 {\n        \
    \    letterGrades[i] = \"D\"\n        } else if grades[i] >= -1.0 {\n        \
    \    letterGrades[i] = \"D+\"\n        } else if grades[i] >= -1.7 {\n       \
    \     letterGrades[i] = \"E\"\n        } else {\n            letterGrades[i] =\
    \ \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1]] = 0.0\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[1] = 0.0\n    gradesSorted[2] = 0.0\n    gradesSorted[3]\
    \ = 0.0\n    gradesSorted[4] = 0.0\n    gradesSorted[5] = 0.0\n    gradesSorted[6]\
    \ = 0.0\n    gradesSorted[7] = 0.0\n    gradesSorted[8] = 0.0\n    gradesSorted[9]\
    \ = 0.0\n    gradesSorted[10] = 0.0\n    gradesSorted[11] = 0.0\n    gradesSorted[12]\
    \ = 0.0\n    gradesSorted[13] = 0.0\n    gradesSorted[14] = 0.0\n    gradesSorted[15]\
    \ = 0.0\n    gradesSorted[16] = 0.0\n    gradesSorted[17] = 0.0\n    gradesSorted[18]\
    \ = 0.0\n    gradesSorted[19] = 0.0\n    gradesSorted[20] = 0.0\n    gradesSorted[21]\
    \ = 0.0\n    gradesSorted[22] = 0.0\n    gradesSorted[23] = 0.0\n    gradesSorted[24]\
    \ = 0.0\n    gradesSorted[25] = 0.0\n    gradesSorted[26] = 0.0\n    gradesSorted[27]\
    \ = 0.0\n    gradesSorted[28] = 0.0\n    gradesSorted[29] = 0.0\n    gradesSorted[30]\
    \ = 0.0\n    gradesSorted[31] = 0.0\n    gradesSorted[32] = 0.0\n    gradesSorted[33]\
    \ = 0.0\n    gradesSorted[34] = 0.0\n    gradesSorted[35] = 0.0\n    gradesSorted[36]\
    \ = 0.0\n    gradesSorted[37] = 0.0\n    gradesSorted[38] = 0.0\n    gradesSorted[39]\
    \ = 0.0\n    gradesSorted[40] = 0.0\n    gradesSorted[41] = 0.0\n    gradesSorted[42]\
    \ = 0.0\n    gradesSorted[43] = 0.0\n    gradesSorted[44] = 0.0\n    gradesSorted[45]\
    \ = 0.0\n    gradesSorted[46] = 0.0\n    gradesSorted[47] = 0.0\n    gradesSorted[48]\
    \ = 0.0\n    gradesSorted[49] = 0.0\n    gradesSorted[50] = 0.0\n    gradesSorted[51]\
    \ = 0.0\n    gradesSorted[52] = 0.0\n    gradesSorted[53", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // The\
    \ first letter grade is always A+\n    letter_grades[0] = \"A+\"\n    \n    //\
    \ The last letter grade is always E\n    letter_grades[grades_len-1] = \"E\"\n\
    \    \n    // The grades are sorted in descending order\n    sort.Float64s(grades)\n\
    \    \n    // The grades are divided into two groups: those above 3.0 and those\
    \ below 3.0\n    above3_0 := grades[:grades_len-1]\n    below3_0 := grades[grades_len:]\n\
    \    \n    // The letter grades are calculated for each group\n    for _, grade\
    \ := range above3_0 {\n        if grade > 3.0 {\n            letter_grades[grades_len-1]\
    \ = letter_grades[grades_len-1] + \"+\"\n        } else {\n            letter_grades[grades_len-1]\
    \ = letter_grades[grades_len-1] + \"-\"\n        }\n    }\n    for _, grade :=\
    \ range below3_0 {\n        if grade < 3.0 {\n            letter_grades[grades_len-1]\
    \ = letter_grades[grades_len-1] + \"-\"\n        } else {\n            letter_grades[grades_len-1]\
    \ = letter_grades[grades_len-1] + \"+\"\n        }\n    }\n    \n    return letter_grades\n\
    }\n", "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The last letter grade is always D-\n    letter_grades[grades_len-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are the letter grades using\
    \ the formula\n    // GPA * 10 / 100\n    for i := 0; i < grades_len; i++ {\n\
    \        letter_grades[i] = fmt.Sprintf(\"%+.2f\", grades[i]*10/100)\n    }\n\
    \    \n    return letter_grades\n}\n", "    var grades_string []string\n    var\
    \ i int\n    for i = 0; i < len(grades); i++ {\n        if grades[i] >= 3.0 {\n\
    \            grades_string = append(grades_string, \"B+\")\n        }\n      \
    \  if grades[i] >= 2.7 {\n            grades_string = append(grades_string, \"\
    B\")\n        }\n        if grades[i] >= 2.3 {\n            grades_string = append(grades_string,\
    \ \"B-\")\n        }\n        if grades[i] >= 1.3 {\n            grades_string\
    \ = append(grades_string, \"C+\")\n        }\n        if grades[i] >= 1.7 {\n\
    \            grades_string = append(grades_string, \"C\")\n        }\n       \
    \ if grades[i] >= 1.0 {\n            grades_string = append(grades_string, \"\
    C-\")\n        }\n        if grades[i] >= 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        }\n        if grades[i] >= 0.3 {\n            grades_string\
    \ = append(grades_string, \"D\")\n        }\n        if grades[i] >= 0.0 {\n \
    \           grades_string = append(grades_string, \"D-\")\n        }\n       \
    \ if grades[i] >= 0.0 {\n            grades_string = append(grades_string, \"\
    E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 4.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 3.7 && grades[i] < 4.0 {\n            letterGrades[i]\
    \ = \"A\"\n        } else if grades[i] >= 3.3 && grades[i] < 3.7 {\n         \
    \   letterGrades[i] = \"A-\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.3 {\n            letterGrades[i] = \"B+\"\n        } else if grades[i] >=\
    \ 2.7 && grades[i] < 3.0 {\n            letterGrades[i] = \"B\"\n        } else\
    \ if grades[i] >= 2.3 && grades[i] < 2.7 {\n            letterGrades[i] = \"B-\"\
    \n        } else if grades[i] >= 2.0 && grades[i] < 2.3 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 1.7 && grades[i] < 2.0 {\n        \
    \    letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.3 && grades[i]\
    \ < 1.7 {\n            letterGrades[i] = \"C-\"\n        } else if grades[i] >=\
    \ 1.0 && grades[i] < 1.3 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 && grades[i] < 1.0 {\n            letterGrades[i] = \"D\"\
    \n        } else if grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n\
    \        } else {\n            letterGrades[i] = \"E\"\n        }\n    }\n   \
    \ return letterGrades\n}\n", "    grades := append([]float64{}, grades...)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    \n    //\
    \ Loop through the grades\n    for i := 0; i < gradesLen; i++ {\n        // Get\
    \ the GPA of the student\n        grade := grades[i]\n        \n        // If\
    \ the grade is less than or equal to zero\n        if grade <= 0 {\n         \
    \   // Set the letter grade to E\n            letterGrades[i] = \"E\"\n      \
    \  } else {\n            // Get the GPA of the student\n            gpa := grade\n\
    \            \n            // If the GPA is greater than or equal to 3.7\n   \
    \         if gpa >= 3.7 {\n                // Set the letter grade to A+\n   \
    \             letterGrades[i] = \"A+\"\n            } else if gpa >= 3.3 {\n \
    \               // Set the letter grade to A\n                letterGrades[i]\
    \ = \"A\"\n            } else if gpa >= 3 {\n                // Set the letter\
    \ grade to A-\n                letterGrades[i] = \"A-\"\n            } else if\
    \ gpa >= 2.7 {\n                // Set the letter grade to B+\n              \
    \  letterGrades[i] = \"B+\"\n            } else if gpa >= 2.3 {\n            \
    \    // Set the letter grade to B\n                letterGrades[i] = \"B\"\n \
    \           } else if gpa >= 2 {\n                // Set the letter grade to B-\n\
    \                letterGrades[i] = \"B-\"\n            } else if gpa >= 1.7 {\n\
    \                // Set the letter grade to C+\n                letterGrades[i]\
    \ = \"C+\"\n            } else if gpa >= 1.3 {\n                // Set the letter\
    \ grade to C\n                letterGrades[i] = \"C\"\n            } else if gpa\
    \ >= 1 {\n                // Set the letter grade to C-\n                letterGrades[i]\
    \ = \"C-\"\n            } else if gpa >= 0.7 {\n                // Set the letter\
    \ grade to D+\n                letterGrades[i] = \"D+\"\n            } else if\
    \ gpa >= 0.3 {\n                // Set the letter grade to D\n               \
    \ letterGrades[i] = \"D\"\n            } else if gpa >= 0 {\n                //\
    \ Set the letter grade to D-\n                letterGrades[i] = \"D-\"\n     \
    \       } else {\n                // Set the letter grade to E\n             \
    \   letterGrades[i] = \"E\"\n            }\n        }\n    }\n    \n    return\
    \ letterGrades\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    E\"\n    for i := 1; i < gradesLen; i++ {\n        if grades[i-1] > grades[i]\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i-1] < grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        } else if grades[i-1] == grades[i]\
    \ {\n            letterGrades[i] = \"A\"\n        } else {\n            letterGrades[i]\
    \ = \"B+\"\n        }\n    }\n    return letterGrades\n}\n", "    grades_len :=\
    \ len(grades)\n    letter_grades := make([]string, grades_len)\n    \n    // Loop\
    \ through each grade and find the letter grade for that grade\n    for i := 0;\
    \ i < grades_len; i++ {\n        grade := grades[i]\n        \n        // If the\
    \ grade is greater than or equal to 3.7, then it is the letter grade\n       \
    \ if grade >= 3.7 {\n            letter_grades[i] = \"A+\"\n        }\n      \
    \  \n        // If the grade is greater than or equal to 3.3, then it is the letter\
    \ grade\n        if grade >= 3.3 {\n            letter_grades[i] = \"A\"\n   \
    \     }\n        \n        // If the grade is greater than or equal to 3.0, then\
    \ it is the letter grade\n        if grade >= 3.0 {\n            letter_grades[i]\
    \ = \"B+\"\n        }\n        \n        // If the grade is greater than or equal\
    \ to 2.7, then it is the letter grade\n        if grade >= 2.7 {\n           \
    \ letter_grades[i] = \"B\"\n        }\n        \n        // If the grade is greater\
    \ than or equal to 2.3, then it is the letter grade\n        if grade >= 2.3 {\n\
    \            letter_grades[i] = \"B-\"\n        }\n        \n        // If the\
    \ grade is greater than or equal to 2.0, then it is the letter grade\n       \
    \ if grade >= 2.0 {\n            letter_grades[i] = \"C+\"\n        }\n      \
    \  \n        // If the grade is greater than or equal to 1.7, then it is the letter\
    \ grade\n        if grade >= 1.7 {\n            letter_grades[i] = \"C\"\n   \
    \     }\n        \n        // If the grade is greater than or equal to 1.3, then\
    \ it is the letter grade\n        if grade >= 1.3 {\n            letter_grades[i]\
    \ = \"C-\"\n        }\n        \n        // If the grade is greater than or equal\
    \ to 1.0, then it is the letter grade\n        if grade >= 1.0 {\n           \
    \ letter_grades[i] = \"D+\"\n        }\n        \n        // If the grade is greater\
    \ than or equal to 0.7, then it is the letter grade\n        if grade >= 0.7 {\n\
    \            letter_grades[i] = \"D\"\n        }\n        \n        // If the\
    \ grade is greater than or equal to 0.0, then it is the letter grade\n       \
    \ if grade >= 0.0 {\n            letter_grades[i] = \"D-\"\n        }\n      \
    \  \n        // If the grade is less than 0.0, then it is the letter grade\n \
    \       if grade < 0.0 {\n            letter_grades[i] = \"E\"\n        }\n  \
    \  }\n    \n    return letter_grades\n}\n", "    result := make([]string, len(grades))\n\
    \    i := 0\n    for _, grade := range grades {\n        if grade > 3.0 {\n  \
    \          result[i] = \"B+\"\n        } else if grade > 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grade > 2.3 {\n            result[i] = \"B-\"\n \
    \       } else if grade > 1.3 {\n            result[i] = \"C+\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C\"\n        } else if grade > 1.0\
    \ {\n            result[i] = \"C-\"\n        } else if grade > 0.7 {\n       \
    \     result[i] = \"D+\"\n        } else if grade > 0.3 {\n            result[i]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            result[i] = \"D-\"\n \
    \       } else if grade > 0.0 {\n            result[i] = \"E\"\n        } else\
    \ {\n            result[i] = \"A+\"\n        }\n        i++\n    }\n    return\
    \ result\n}\n", "    gradesSorted := make([]float64, len(grades))\n    copy(gradesSorted,\
    \ grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted = append([]float64{},\
    \ gradesSorted...)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted\
    \ = append(gradesSorted, 0)\n    gradesSorted = append(grade", "    grades :=\
    \ append([]float64{}, grades...)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(", "    grades := make([]float64, len(grades))\n    for i\
    \ := 0; i < len(grades); i++ {\n        grades[i] = grades[i]\n    }\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)", "    grades_len := len(grades)\n  \
    \  letter_grades := make([]string, grades_len)\n    \n    for i := 0; i < grades_len;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letter_grades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letter_grades[i] = \"B\"\n\
    \        } else if grades[i] >= 2.3 {\n            letter_grades[i] = \"B-\"\n\
    \        } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letter_grades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n         \
    \   letter_grades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n        \
    \    letter_grades[i] = \"D+\"\n        } else if grades[i] >= 0.7 {\n       \
    \     letter_grades[i] = \"D\"\n        } else if grades[i] < 0.0 {\n        \
    \    letter_grades[i] = \"D-\"\n        } else {\n            letter_grades[i]\
    \ = \"E\"\n        }\n    }\n    return letter_grades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSor",
  "    grades_sum := 0.0\n    grades_count := 0\n    grades_letter := []string{}\n\
    \    for _, grade := range grades {\n        grades_sum += grade\n        grades_count++\n\
    \    }\n    if grades_count == 0 {\n        return grades_letter\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    for _, grade := range grades {\n\
    \        if grade >= grades_avg {\n            grades_letter = append(grades_letter,\
    \ \"A+\")\n        } else if grade < grades_avg {\n            grades_letter =\
    \ append(grades_letter, \"A-\")\n        } else {\n            grades_letter =\
    \ append(grades_letter, \"B+\")\n        }\n    }\n    return grades_letter\n\
    }\n", "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n\
    \    \n    // Loop through the grades and add them to the letter grades array\n\
    \    for i := 0; i < gradesLen; i++ {\n        // If the grade is greater than\
    \ or equal to 3.7\n        if grades[i] >= 3.7 {\n            // Add A+ to the\
    \ letter grades array\n            letterGrades[i] = \"A+\"\n        }\n     \
    \   // If the grade is greater than or equal to 3.3\n        if grades[i] >= 3.3\
    \ {\n            // Add A to the letter grades array\n            letterGrades[i]\
    \ = \"A\"\n        }\n        // If the grade is greater than or equal to 3.0\n\
    \        if grades[i] >= 3.0 {\n            // Add B+ to the letter grades array\n\
    \            letterGrades[i] = \"B+\"\n        }\n        // If the grade is greater\
    \ than or equal to 2.7\n        if grades[i] >= 2.7 {\n            // Add B to\
    \ the letter grades array\n            letterGrades[i] = \"B\"\n        }\n  \
    \      // If the grade is greater than or equal to 2.3\n        if grades[i] >=\
    \ 2.3 {\n            // Add B- to the letter grades array\n            letterGrades[i]\
    \ = \"B-\"\n        }\n        // If the grade is greater than or equal to 2.0\n\
    \        if grades[i] >= 2.0 {\n            // Add C+ to the letter grades array\n\
    \            letterGrades[i] = \"C+\"\n        }\n        // If the grade is greater\
    \ than or equal to 1.7\n        if grades[i] >= 1.7 {\n            // Add C to\
    \ the letter grades array\n            letterGrades[i] = \"C\"\n        }\n  \
    \      // If the grade is greater than or equal to 1.3\n        if grades[i] >=\
    \ 1.3 {\n            // Add C- to the letter grades array\n            letterGrades[i]\
    \ = \"C-\"\n        }\n        // If the grade is greater than or equal to 1.0\n\
    \        if grades[i] >= 1.0 {\n            // Add D+ to the letter grades array\n\
    \            letterGrades[i] = \"D+\"\n        }\n        // If the grade is greater\
    \ than or equal to 0.7\n        if grades[i] >= 0.7 {\n            // Add D to\
    \ the letter grades array\n            letterGrades[i] = \"D\"\n        }\n  \
    \      // If the grade is greater than or equal to 0.0\n        if grades[i] >=\
    \ 0.0 {\n            // Add D- to the letter grades array\n            letterGrades[i]\
    \ = \"D-\"\n        }\n        // If the grade is less than or equal to 0.0\n\
    \        if grades[i] <= 0.0 {\n            // Add E to the letter grades array\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades",
  "    grades_sum := 0.0\n    grades_count := 0\n    for _, grade := range grades\
    \ {\n        grades_sum += grade\n        grades_count++\n    }\n    grades_avg\
    \ := grades_sum / float64(grades_count)\n    grades_diff := grades_avg - float64(grades[0])\n\
    \    grades_diff_abs := math.Abs(grades_diff)\n    grades_diff_sign := grades_diff_abs\
    \ > 0.0 ? 1.0 : -1.0\n    grades_diff_abs *= grades_diff_sign\n    grades_diff_abs\
    \ /= 2.0\n    grades_diff_abs *= grades_count\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_diff_abs *= grades_avg\n    grades_diff_abs /= float64(len(grades))\n\
    \    grades_", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    letterGrades[0] = \"E\"\n    letterGrades[gradesLen-1] = \"\
    D-\"\n    for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 3.0 {\n  \
    \          letterGrades[i] = \"B+\"\n        } else if grades[i] >= 2.7 {\n  \
    \          letterGrades[i] = \"B\"\n        } else if grades[i] >= 2.3 {\n   \
    \         letterGrades[i] = \"B-\"\n        } else if grades[i] >= 1.7 {\n   \
    \         letterGrades[i] = \"C+\"\n        } else if grades[i] >= 1.3 {\n   \
    \         letterGrades[i] = \"C\"\n        } else if grades[i] >= 0.7 {\n    \
    \        letterGrades[i] = \"D\"\n        } else if grades[i] >= 0.3 {\n     \
    \       letterGrades[i] = \"D-\"\n        } else if grades[i] >= 0.0 {\n     \
    \       letterGrades[i] = \"D+\"\n        } else if grades[i] >= -0.3 {\n    \
    \        letterGrades[i] = \"D-\"\n        } else if grades[i] >= -0.7 {\n   \
    \         letterGrades[i] = \"D+\"\n        } else if grades[i] >= -1.0 {\n  \
    \          letterGrades[i] = \"C-\"\n        } else if grades[i] >= -1.7 {\n \
    \           letterGrades[i] = \"C\"\n        } else if grades[i] >= -2.0 {\n \
    \           letterGrades[i] = \"B-\"\n        } else if grades[i] >= -3.0 {\n\
    \            letterGrades[i] = \"B+\"\n        } else if grades[i] >= -3.7 {\n\
    \            letterGrades[i] = \"B\"\n        } else if grades[i] >= -4.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= -4.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= -5.0 {\n\
    \            letterGrades[i] = \"A-\"\n        } else if grades[i] >= -5.7 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= -6.0 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= -6.7 {\n\
    \            letterGrades[i] = \"A-\"\n        } else if grades[i] >= -7.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] >= -7.7 {\n\
    \            letterGrades[i] = \"A\"\n        } else if grades[i] >= -8.0 {\n\
    \            letterGrades[i] = \"A-\"\n        } else if grades[i] >= -8.7 {\n\
    \            letterGra", "    grades := append([]float64{}, grades...)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades\
    \ = append(grades, 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades,\
    \ 0.0)\n    grades = append(grades, 0.0)\n    grades = append(grades, 0.0)\n \
    \   grades = append(grades, 0.0)\n    grades = append(", "    gradesSorted :=\
    \ make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted[gradesSorted[len(gradesSorted)-1]] = 0.0\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] += 0.5\n\
    \    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -= 0.5\n  \
    \  gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ -= 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] +=\
    \ 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n\
    \    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n  \
    \  gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0]\
    \ -= 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] +=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -= 0.5\n\
    \    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] += 0.5\n  \
    \  gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1]\
    \ += 0.5\n    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] -=\
    \ 0.5\n    gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n\
    \    gradesSorted[0] += 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n  \
    \  gradesSorted[0] -= 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0]\
    \ += 0.5\n    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -=\
    \ 0.5\n    gradesSorted[len(gradesSorted)-1] += 0.5\n    gradesSorted[0] += 0.5\n\
    \    gradesSorted[len(gradesSorted)-1] -= 0.5\n    gradesSorted[0] -= 0.5\n  \
    \  gradesSorted[len(gradesSorted)-1] += ", "    gradesLen := len(grades)\n   \
    \ letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n   \
    \ letterGrades[gradesLen - 1] = \"D-\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letterGrades[i] = \"B+\"\n       \
    \ } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letterGrades[i] =\
    \ \"C+\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n          \
    \  letterGrades[i] = \"C\"\n        } else if grades[i] >= 1.0 {\n           \
    \ letterGrades[i] = \"D+\"\n        } else if grades[i] < 1.0 {\n            letterGrades[i]\
    \ = \"D\"\n        } else {\n            letterGrades[i] = \"D-\"\n        }\n\
    \    }\n    return letterGrades\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted\
    \ = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 3.0)\n    gradesSorted = append(gradesSorted,\
    \ 3.7)\n    gradesSorted = append(gradesSorted, 3.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.7)\n    gradesSorted = append(gradesSorted, 2.3)\n    gradesSorted = append(gradesSorted,\
    \ 2.0)\n    gradesSorted = append(gradesSorted, 1.7)\n    gradesSorted = append(gradesSorted,\
    \ 1.3)\n    gradesSorted = append(gradesSorted, 1.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.7)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)", "    var letter string\n\
    \    var gpa, sum float64\n    for _, grade := range grades {\n        gpa = grade\n\
    \        sum += gpa\n    }\n    if sum < 0 {\n        letter = \"E\"\n    } else\
    \ {\n        letter = fmt.Sprintf(\"%+.2f\", sum / float64(len(grades)))\n   \
    \ }\n    letter = strings.Replace(letter, \".\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"-\", \"\", -1)\n    letter = strings.Replace(letter, \"+\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"E\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"D\", \"\", -1)\n    letter = strings.Replace(letter, \"C\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"B\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"A\", \"\", -1)\n    letter = strings.Replace(letter, \"+\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"-\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"*\", \"\", -1)\n    letter = strings.Replace(letter, \"/\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"%\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"=\", \"\", -1)\n    letter = strings.Replace(letter, \"(\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \")\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"[\", \"\", -1)\n    letter = strings.Replace(letter, \"]\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"{\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"}\", \"\", -1)\n    letter = strings.Replace(letter, \";\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \",\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \".\", \"\", -1)\n    letter = strings.Replace(letter, \"-\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"+\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"*\", \"\", -1)\n    letter = strings.Replace(letter, \"/\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"%\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"=\", \"\", -1)\n    letter = strings.Replace(letter, \"(\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \")\", \"\", -1)\n    letter = strings.Replace(letter,\
    \ \"[\", \"\", -1)\n    letter = strings.Replace(letter, \"]\", \"\", -1)\n  \
    \  letter = strings.Replace(letter, \"{\", \"\", -1)\n    letter = strings.Replace(",
  "    grades := append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append(",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is A+\n    letter_grades[0] = \"A+\"\n  \
    \  \n    // The second letter grade is A if the GPA is greater than 3.7\n    //\
    \ and less than 3.3\n    if grades[1] > 3.7 && grades[1] < 3.3 {\n        letter_grades[1]\
    \ = \"A\"\n    }\n    \n    // The third letter grade is A if the GPA is greater\
    \ than 3.3\n    // and less than 3.0\n    if grades[2] > 3.3 && grades[2] < 3.0\
    \ {\n        letter_grades[2] = \"A-\"\n    }\n    \n    // The fourth letter\
    \ grade is B+ if the GPA is greater than 2.7\n    // and less than 2.3\n    if\
    \ grades[3] > 2.7 && grades[3] < 2.3 {\n        letter_grades[3] = \"B+\"\n  \
    \  }\n    \n    // The fifth letter grade is B if the GPA is greater than 2.3\n\
    \    // and less than 2.0\n    if grades[4] > 2.3 && grades[4] < 2.0 {\n     \
    \   letter_grades[4] = \"B\"\n    }\n    \n    // The sixth letter grade is B-\
    \ if the GPA is greater than 2.0\n    // and less than 1.7\n    if grades[5] >\
    \ 2.0 && grades[5] < 1.7 {\n        letter_grades[5] = \"B-\"\n    }\n    \n \
    \   // The seventh letter grade is C+ if the GPA is greater than 1.7\n    // and\
    \ less than 1.3\n    if grades[6] > 1.7 && grades[6] < 1.3 {\n        letter_grades[6]\
    \ = \"C+\"\n    }\n    \n    // The eighth letter grade is C if the GPA is greater\
    \ than 1.3\n    // and less than 1.0\n    if grades[7] > 1.3 && grades[7] < 1.0\
    \ {\n        letter_grades[7] = \"C\"\n    }\n    \n    // The ninth letter grade\
    \ is C-if the GPA is greater than 1.0\n    // and less than 0.7\n    if grades[8]\
    \ > 1.0 && grades[8] < 0.7 {\n        letter_grades[8] = \"C-\"\n    }\n    \n\
    \    // The tenth letter grade is D+ if the GPA is greater than 0.7\n    // and\
    \ less than 0.0\n    if grades[9] > 0.7 && grades[9] < 0.0 {\n        letter_grades[9]\
    \ = \"D+\"\n    }\n    \n    // The eleventh letter grade is D if the GPA is greater\
    \ than 0.0\n    // and less than 0.0\n    if grade", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    for i := 0; i < gradesLen;\
    \ i++ {\n        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n \
    \       } else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n \
    \       } else if grades[i] >= 1.7 && grades[i] < 3.0 {\n            letterGrades[i]\
    \ = \"C\"\n        } else if grades[i] >= 1.3 && grades[i] < 2.7 {\n         \
    \   letterGrades[i] = \"C-\"\n        } else if grades[i] >= 1.0 {\n         \
    \   letterGrades[i] = \"D+\"\n        } else if grades[i] < 1.0 {\n          \
    \  letterGrades[i] = \"D\"\n        } else {\n            letterGrades[i] = \"\
    E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[1] = \"D-\"\n    letterGrades[2] = \"D\"\n    letterGrades[3]\
    \ = \"C-\"\n    letterGrades[4] = \"C\"\n    letterGrades[5] = \"B-\"\n    letterGrades[6]\
    \ = \"B\"\n    letterGrades[7] = \"A-\"\n    letterGrades[8] = \"A\"\n    letterGrades[9]\
    \ = \"A+\"\n    letterGrades[10] = \"B+\"\n    letterGrades[11] = \"C+\"\n   \
    \ letterGrades[12] = \"C\"\n    letterGrades[13] = \"B-\"\n    letterGrades[14]\
    \ = \"B\"\n    letterGrades[15] = \"A-\"\n    letterGrades[16] = \"A\"\n    letterGrades[17]\
    \ = \"A+\"\n    letterGrades[18] = \"B+\"\n    letterGrades[19] = \"C+\"\n   \
    \ letterGrades[20] = \"C\"\n    letterGrades[21] = \"B-\"\n    letterGrades[22]\
    \ = \"B\"\n    letterGrades[23] = \"A-\"\n    letterGrades[24] = \"A\"\n    letterGrades[25]\
    \ = \"A+\"\n    letterGrades[26] = \"B+\"\n    letterGrades[27] = \"C+\"\n   \
    \ letterGrades[28] = \"C\"\n    letterGrades[29] = \"B-\"\n    letterGrades[30]\
    \ = \"B\"\n    letterGrades[31] = \"A-\"\n    letterGrades[32] = \"A\"\n    letterGrades[33]\
    \ = \"A+\"\n    letterGrades[34] = \"B+\"\n    letterGrades[35] = \"C+\"\n   \
    \ letterGrades[36] = \"C\"\n    letterGrades[37] = \"B-\"\n    letterGrades[38]\
    \ = \"B\"\n    letterGrades[39] = \"A-\"\n    letterGrades[40] = \"A\"\n    letterGrades[41]\
    \ = \"A+\"\n    letterGrades[42] = \"B+\"\n    letterGrades[43] = \"C+\"\n   \
    \ letterGrades[44] = \"C\"\n    letterGrades[45] = \"B-\"\n    letterGrades[46]\
    \ = \"B\"\n    letterGrades[47] = \"A-\"\n    letterGrades[48] = \"A", "    gradesLen\
    \ := len(grades)\n    letterGrades := make([]string, gradesLen)\n    letterGrades[0]\
    \ = \"E\"\n    letterGrades[gradesLen-1] = \"D-\"\n    letterGrades[gradesLen-2]\
    \ = \"D\"\n    letterGrades[gradesLen-3] = \"C-\"\n    letterGrades[gradesLen-4]\
    \ = \"C\"\n    letterGrades[gradesLen-5] = \"B+\"\n    letterGrades[gradesLen-6]\
    \ = \"B\"\n    letterGrades[gradesLen-7] = \"B-\"\n    letterGrades[gradesLen-8]\
    \ = \"B\"\n    letterGrades[gradesLen-9] = \"A+\"\n    letterGrades[gradesLen-10]\
    \ = \"A\"\n    letterGrades[gradesLen-11] = \"A-\"\n    letterGrades[gradesLen-12]\
    \ = \"A\"\n    letterGrades[gradesLen-13] = \"A+\"\n    letterGrades[gradesLen-14]\
    \ = \"A\"\n    letterGrades[gradesLen-15] = \"A-\"\n    letterGrades[gradesLen-16]\
    \ = \"A\"\n    letterGrades[gradesLen-17] = \"A+\"\n    letterGrades[gradesLen-18]\
    \ = \"A\"\n    letterGrades[gradesLen-19] = \"A-\"\n    letterGrades[gradesLen-20]\
    \ = \"A\"\n    letterGrades[gradesLen-21] = \"A+\"\n    letterGrades[gradesLen-22]\
    \ = \"A\"\n    letterGrades[gradesLen-23] = \"A-\"\n    letterGrades[gradesLen-24]\
    \ = \"A\"\n    letterGrades[gradesLen-25] = \"A+\"\n    letterGrades[gradesLen-26]\
    \ = \"A\"\n    letterGrades[gradesLen-27] = \"A-\"\n    letterGrades[gradesLen-28]\
    \ = \"A\"\n    letterGrades[gradesLen-29] = \"A+\"\n    letterGrades[gradesLen-30]\
    \ = \"A\"\n    letterGrades[gradesLen-31] = \"A-\"\n    letterGrades[gradesLen-32]\
    \ = \"A\"\n    letterGrades[gradesLen-33] = \"A+\"\n    letterGrades[gradesLen-34]\
    \ = \"A\"\n    letterGrades[gradesLen-35] = \"A-\"\n    letterGrades[gradesLen-",
  "    gradesSorted := make([]float64, len(grades))\n    sort.Float64s(grades)\n \
    \   for i := range grades {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSorted\
    \ := gradesSorted[:len(gradesSorted)-1]\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, gradesSorted[len(gradesSorted)-1])\n\
    \    gradesSorted := append(gradesSorted, 0)\n    gradesSorted := append(gradesSorted,\
    \ gradesSorted[len(gradesSorted)-1])\n    gradesSorted := append(gradesSorted,\
    \ 0)\n    gradesSorted := append(gradesSorted, grade", "    grades_string := []string{}\n\
    \    \n    for _, grade := range grades {\n        if grade > 3.0 {\n        \
    \    grades_string = append(grades_string, \"B+\")\n        } else if grade >\
    \ 2.7 {\n            grades_string = append(grades_string, \"B\")\n        } else\
    \ if grade > 2.3 {\n            grades_string = append(grades_string, \"B-\")\n\
    \        } else if grade > 1.3 {\n            grades_string = append(grades_string,\
    \ \"C+\")\n        } else if grade > 1.7 {\n            grades_string = append(grades_string,\
    \ \"C\")\n        } else if grade > 1.0 {\n            grades_string = append(grades_string,\
    \ \"C-\")\n        } else if grade > 0.7 {\n            grades_string = append(grades_string,\
    \ \"D+\")\n        } else if grade > 0.3 {\n            grades_string = append(grades_string,\
    \ \"D\")\n        } else if grade > 0.0 {\n            grades_string = append(grades_string,\
    \ \"D-\")\n        } else {\n            grades_string = append(grades_string,\
    \ \"E\")\n        }\n    }\n    return grades_string\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(gradesSorted,\
    \ 0.0)\n    gradesSorted = append(gradesSorted, 0.0)\n    gradesSorted = append(grade",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] < 3.0 {\n         \
    \   letterGrades[i] = \"E\"\n        } else if grades[i] < 3.3 {\n           \
    \ letterGrades[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n            letterGrades[i]\
    \ = \"C+\"\n        } else if grades[i] < 4.0 {\n            letterGrades[i] =\
    \ \"B+\"\n        } else if grades[i] < 4.3 {\n            letterGrades[i] = \"\
    B\"\n        } else if grades[i] < 4.7 {\n            letterGrades[i] = \"B-\"\
    \n        } else if grades[i] < 5.0 {\n            letterGrades[i] = \"A+\"\n\
    \        } else if grades[i] < 5.3 {\n            letterGrades[i] = \"A\"\n  \
    \      } else if grades[i] < 5.7 {\n            letterGrades[i] = \"A-\"\n   \
    \     } else if grades[i] < 6.0 {\n            letterGrades[i] = \"A\"\n     \
    \   } else if grades[i] < 6.3 {\n            letterGrades[i] = \"A+\"\n      \
    \  } else if grades[i] < 6.7 {\n            letterGrades[i] = \"A\"\n        }\
    \ else if grades[i] < 7.0 {\n            letterGrades[i] = \"A+\"\n        } else\
    \ if grades[i] < 7.3 {\n            letterGrades[i] = \"A+\"\n        } else if\
    \ grades[i] < 7.7 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i]\
    \ < 8.0 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] <\
    \ 8.3 {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] < 8.7\
    \ {\n            letterGrades[i] = \"A+\"\n        } else if grades[i] < 9.0 {\n\
    \            letterGrades[i] = \"A+\"\n        } else if grades[i] < 9.3 {\n \
    \           letterGrades[i] = \"A+\"\n        } else if grades[i] < 9.7 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] < 10.0 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] < 10.3 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] < 10.7 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] < 11.0 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else if grades[i] < 11.3 {\n  \
    \          letterGrades[i] = \"A+\"\n        } else ", "    grades := append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades := append([]float64{0.0}, grades...)\n\
    \    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append([]float64{0.0}, grades...)\n    grades = append([]float64{0.0},\
    \ grades...)\n    grades = append(", "    grades_count := len(grades)\n    letter_grades\
    \ := make([]string, grades_count)\n    \n    // The first letter grade is always\
    \ A+\n    letter_grades[0] = \"A+\"\n    \n    // The second letter grade is always\
    \ B\n    letter_grades[1] = \"B\"\n    \n    // The third letter grade is always\
    \ C\n    letter_grades[2] = \"C\"\n    \n    // The fourth letter grade is always\
    \ D\n    letter_grades[3] = \"D\"\n    \n    // The fifth letter grade is always\
    \ E\n    letter_grades[4] = \"E\"\n    \n    // The sixth letter grade is always\
    \ F\n    letter_grades[5] = \"F\"\n    \n    // The seventh letter grade is always\
    \ G\n    letter_grades[6] = \"G\"\n    \n    // The eighth letter grade is always\
    \ H\n    letter_grades[7] = \"H\"\n    \n    // The ninth letter grade is always\
    \ I\n    letter_grades[8] = \"I\"\n    \n    // The tenth letter grade is always\
    \ J\n    letter_grades[9] = \"J\"\n    \n    // The eleventh letter grade is always\
    \ K\n    letter_grades[10] = \"K\"\n    \n    // The twelfth letter grade is always\
    \ L\n    letter_grades[11] = \"L\"\n    \n    // The thirteenth letter grade is\
    \ always M\n    letter_grades[12] = \"M\"\n    \n    // The fourteenth letter\
    \ grade is always N\n    letter_grades[13] = \"N\"\n    \n    // The fifteenth\
    \ letter grade is always O\n    letter_grades[14] = \"O\"\n    \n    // The sixteenth\
    \ letter grade is always P\n    letter_grades[15] = \"P\"\n    \n    // The seventeenth\
    \ letter grade is always Q\n    letter_grades[16] = \"Q\"\n    \n    // The eighteenth\
    \ letter grade is always R\n    letter_grades[17] = \"R\"\n    \n    // The nineteenth\
    \ letter grade is always S\n    letter_grades[18] = \"S\"\n    \n    // The twentieth\
    \ letter grade is always T\n    letter_grades[19] = \"T\"\n    \n    // The twenty-first\
    \ letter grade is always U\n    letter_grades[20] = \"U\"\n    \n    // The twenty-second\
    \ letter grade is always ", "    result := make([]string, len(grades))\n    for\
    \ i := 0; i < len(grades); i++ {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n        } else if grades[i] >= 3.0 && grades[i] < 3.7 {\n         \
    \   result[i] = \"D-\"\n        } else if grades[i] >= 3.7 && grades[i] < 4.0\
    \ {\n            result[i] = \"C+\"\n        } else if grades[i] >= 4.0 && grades[i]\
    \ < 4.3 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 4.3\
    \ && grades[i] < 4.7 {\n            result[i] = \"B+\"\n        } else if grades[i]\
    \ >= 4.7 && grades[i] < 5.0 {\n            result[i] = \"A-\"\n        } else\
    \ if grades[i] >= 5.0 && grades[i] < 5.3 {\n            result[i] = \"A+\"\n \
    \       } else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            result[i]\
    \ = \"A\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n         \
    \   result[i] = \"A+\"\n        } else if grades[i] >= 6.0 {\n            result[i]\
    \ = \"A\"\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
