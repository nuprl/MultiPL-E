name: HumanEval_81_numerical_letter_grade
language: go_test.go
prompt: "package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"\
  fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the\
  \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
  // The only problem is, she has lost the code she used for grading.\n// She has\
  \ given you a list of GPAs for some students and you have to write \n// a function\
  \ that can output a list of letter grades using the following table:\n// GPA   \
  \    |    Letter grade\n// 4.0                A+\n// > 3.7                A \n//\
  \ > 3.3                A- \n// > 3.0                B+\n// > 2.7               \
  \ B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7         \
  \       C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7   \
  \             D \n// > 0.0                D-\n// 0.0                E\n// Example:\n\
  // >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string\
  \ {\n"
tests: "func TestNumerical_Letter_Grade(t *testing.T) {\n  candidate := numerical_letter_grade\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{4.0, 3, 1.7, 2, 3.5}),\
  \ expected: []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"} },\n     { actual: candidate([]float64{1.2}),\
  \ expected: []string{\"D+\"} },\n     { actual: candidate([]float64{0.5}), expected:\
  \ []string{\"D-\"} },\n     { actual: candidate([]float64{0.0}), expected: []string{\"\
  E\"} },\n     { actual: candidate([]float64{1.0, 0.3, 1.5, 2.8, 3.3}), expected:\
  \ []string{\"D\", \"D-\", \"C-\", \"B\", \"B+\"} },\n     { actual: candidate([]float64{0.0,\
  \ 0.7}), expected: []string{\"E\", \"D-\"} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    gradesLen := len(grades)\n    gradesMax := grades[gradesLen-1]\n\
    \    gradesMin := grades[0]\n    gradesAvg := grades[gradesLen-1] / float64(gradesLen)\n\
    \n    gradesGrade := []string{}\n    for i := 0; i < gradesLen; i++ {\n      \
    \  gradesGrade = append(gradesGrade, fmt.Sprintf(\"%+.2f\", grades[i]))\n    }\n\
    \n    gradesGrade = append(gradesGrade, \"E\")\n\n    gradesGrade = append(gradesGrade,\
    \ fmt.Sprintf(\"%+.2f\", gradesAvg))\n\n    if gradesAvg > gradesMax {\n     \
    \   gradesGrade = append(gradesGrade, \"D+\")\n    } else if gradesAvg < gradesMin\
    \ {\n        gradesGrade = append(gradesGrade, \"D-\")\n    } else {\n       \
    \ gradesGrade = append(gradesGrade, \"D\")\n    }\n\n    if gradesAvg > gradesMax\
    \ {\n        gradesGrade = append(gradesGrade, \"C+\")\n    } else if gradesAvg\
    \ < gradesMin {\n        gradesGrade = append(gradesGrade, \"C\")\n    } else\
    \ {\n        gradesGrade = append(gradesGrade, \"C-\")\n    }\n\n    if gradesAvg\
    \ > gradesMax {\n        gradesGrade = append(gradesGrade, \"B+\")\n    } else\
    \ if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade, \"B\"\
    )\n    } else {\n        gradesGrade = append(gradesGrade, \"B-\")\n    }\n\n\
    \    if gradesAvg > gradesMax {\n        gradesGrade = append(gradesGrade, \"\
    A+\")\n    } else if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade,\
    \ \"A\")\n    } else {\n        gradesGrade = append(gradesGrade, \"A-\")\n  \
    \  }\n\n    if gradesAvg > gradesMax {\n        gradesGrade = append(gradesGrade,\
    \ \"A\")\n    } else if gradesAvg < gradesMin {\n        gradesGrade = append(gradesGrade,\
    \ \"A+\")\n    } else {\n        gradesGrade = append(gradesGrade, \"A+\")\n \
    \   }\n\n    return gradesGrade\n}\n", "    result := make([]string, len(grades))\n\
    \    for i := range grades {\n        if grades[i] < 3.0 {\n            result[i]\
    \ = \"E\"\n        } else if grades[i] >= 3.0 && grades[i] < 4.0 {\n         \
    \   result[i] = \"D-\"\n        } else if grades[i] >= 4.0 && grades[i] < 5.0\
    \ {\n            result[i] = \"B-\"\n        } else if grades[i] >= 5.0 && grades[i]\
    \ < 6.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 6.0\
    \ && grades[i] < 7.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 7.0 && grades[i] < 8.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 8.0 && grades[i] < 9.0 {\n            result[i] = \"B-\"\n \
    \       } else if grades[i] >= 9.0 && grades[i] < 10.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 10.0 && grades[i] < 11.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 11.0 && grades[i] <\
    \ 12.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 12.0\
    \ && grades[i] < 13.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 13.0 && grades[i] < 14.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 14.0 && grades[i] < 15.0 {\n            result[i] = \"B-\"\n\
    \        } else if grades[i] >= 15.0 && grades[i] < 16.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 16.0 && grades[i] < 17.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 17.0 && grades[i] <\
    \ 18.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 18.0\
    \ && grades[i] < 19.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 19.0 && grades[i] < 20.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 20.0 && grades[i] < 21.0 {\n            result[i] = \"B-\"\n\
    \        } else if grades[i] >= 21.0 && grades[i] < 22.0 {\n            result[i]\
    \ = \"B-\"\n        } else if grades[i] >= 22.0 && grades[i] < 23.0 {\n      \
    \      result[i] = \"B-\"\n        } else if grades[i] >= 23.0 && grades[i] <\
    \ 24.0 {\n            result[i] = \"B-\"\n        } else if grades[i] >= 24.0\
    \ && grades[i] < 25.0 {\n            result[i] = \"B-\"\n        } else if grades[i]\
    \ >= 25.0 && grades[i] < 26.0 {\n            result[i] = \"B-\"\n        } else\
    \ if grades[i] >= 26.0 && grades[i] < 27.0 {\n            result[i] = \"B-\"\n\
    \        ", "    grades_len := len(grades)\n    letter_grades := make([]string,\
    \ grades_len)\n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0\
    \ {\n            letter_grades[i] = \"E\"\n            continue\n        }\n \
    \       if grades[i] < 3.3 {\n            letter_grades[i] = \"D-\"\n        \
    \    continue\n        }\n        if grades[i] < 3.7 {\n            letter_grades[i]\
    \ = \"C+\"\n            continue\n        }\n        if grades[i] < 4.0 {\n  \
    \          letter_grades[i] = \"B-\"\n            continue\n        }\n      \
    \  if grades[i] < 4.3 {\n            letter_grades[i] = \"B+\"\n            continue\n\
    \        }\n        if grades[i] < 4.7 {\n            letter_grades[i] = \"A-\"\
    \n            continue\n        }\n        if grades[i] < 5.0 {\n            letter_grades[i]\
    \ = \"A+\"\n            continue\n        }\n        if grades[i] < 5.3 {\n  \
    \          letter_grades[i] = \"A\"\n            continue\n        }\n       \
    \ if grades[i] < 5.7 {\n            letter_grades[i] = \"A+\"\n            continue\n\
    \        }\n        if grades[i] < 6.0 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 6.3 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 6.7 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 7.0 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 7.3 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 7.7 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 8.0 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 8.3 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 8.7 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 9.0 {\n            letter_grades[i]\
    \ = \"A\"\n            continue\n        }\n        if grades[i] < 9.3 {\n   \
    \         letter_grades[i] = \"A\"\n            continue\n        }\n        if\
    \ grades[i] < 9.7 {\n            letter_grades[i] = \"A\"\n            continue\n\
    \        }\n        if grades[i] < 10.0 {\n            letter_grades[i] = \"A\"\
    \n            continue\n        }\n        if grades[i] < 10.3 {\n           \
    \ letter_grades[i] = \"A\"\n            continue\n        }\n        if grades[i]\
    \ < 10.7 {\n            letter_grades[i] = \"A\"\n            continue\n     \
    \   }\n        if grades[i] < 11.0 {\n            letter_grades[i] = \"A\"", " \
    \   grades_len := len(grades)\n    result := make([]string, grades_len)\n    \n\
    \    // The first grade is always A+\n    result[0] = fmt.Sprintf(\"A+\", grades[0])\n\
    \    \n    // The second grade is always B\n    if grades[1] > 3.7 { \n      \
    \  result[1] = fmt.Sprintf(\"B\", grades[1])\n    } else if grades[1] > 3.3 {\
    \ \n        result[1] = fmt.Sprintf(\"B-\", grades[1])\n    } else if grades[1]\
    \ > 3.0 { \n        result[1] = fmt.Sprintf(\"C+\", grades[1])\n    } else if\
    \ grades[1] > 2.7 { \n        result[1] = fmt.Sprintf(\"C\", grades[1])\n    }\
    \ else if grades[1] > 2.3 { \n        result[1] = fmt.Sprintf(\"C-\", grades[1])\n\
    \    } else if grades[1] > 2.0 { \n        result[1] = fmt.Sprintf(\"D+\", grades[1])\n\
    \    } else if grades[1] > 1.7 { \n        result[1] = fmt.Sprintf(\"D\", grades[1])\n\
    \    } else if grades[1] > 1.3 { \n        result[1] = fmt.Sprintf(\"D-\", grades[1])\n\
    \    } else if grades[1] > 1.0 { \n        result[1] = fmt.Sprintf(\"E\", grades[1])\n\
    \    }\n    \n    // The third grade is always C\n    if grades[2] > 3.7 { \n\
    \        result[2] = fmt.Sprintf(\"C\", grades[2])\n    } else if grades[2] >\
    \ 3.3 { \n        result[2] = fmt.Sprintf(\"C-\", grades[2])\n    } else if grades[2]\
    \ > 3.0 { \n        result[2] = fmt.Sprintf(\"C+\", grades[2])\n    } else if\
    \ grades[2] > 2.7 { \n        result[2] = fmt.Sprintf(\"C\", grades[2])\n    }\
    \ else if grades[2] > 2.3 { \n        result[2] = fmt.Sprintf(\"C-\", grades[2])\n\
    \    } else if grades[2] > 2.0 { \n        result[2] = fmt.Sprintf(\"D+\", grades[2])\n\
    \    } else if grades[2] > 1.7 { \n        result[2] = fmt.Sprintf(\"D\", grades[2])\n\
    \    } else if grades[2] > 1.3 { \n        result[2] = fmt.Sprintf(\"D-\", grades[2])\n\
    \    } else if grades[2] > 1.0 { \n        result[2] = fmt.Sprintf(\"E\", grades[2])\n\
    \    }\n    \n    // The fourth grade is always A-\n    if grades[3] > 3.7 { \n\
    \        result[3] = fmt.Sprintf(\"A-\", grades[3])\n    } else if grades[3] >\
    \ 3.3 { \n        result[3] = fmt.Sprintf(\"A+\", grades[3])\n    } else if grades[3]\
    \ > 3.0 { \n        result[3] = fmt.S", "    var result []string\n    for _, grade\
    \ := range grades {\n        if grade > 3.0 {\n            result = append(result,\
    \ \"B+\")\n        } else if grade > 2.7 {\n            result = append(result,\
    \ \"B\")\n        } else if grade > 2.3 {\n            result = append(result,\
    \ \"B-\")\n        } else if grade > 1.7 && grade < 2.0 {\n            result\
    \ = append(result, \"C+\")\n        } else if grade > 1.3 && grade < 1.7 {\n \
    \           result = append(result, \"C\")\n        } else if grade > 1.0 {\n\
    \            result = append(result, \"C-\")\n        } else if grade > 0.7 {\n\
    \            result = append(result, \"D+\")\n        } else if grade > 0.3 {\n\
    \            result = append(result, \"D\")\n        } else if grade > 0.0 {\n\
    \            result = append(result, \"D-\")\n        } else {\n            result\
    \ = append(result, \"E\")\n        }\n    }\n    return result\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n\
    \    gradesSorted = append([]float64{}, gradesSorted...)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(gradesSorted,\
    \ 0)\n    gradesSorted = append(gradesSorted, 0)\n    gradesSorted = append(grade",
  "    grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    // The first letter grade is always A+\n    letter_grades[0] = \"A+\"\
    \n    \n    // The second letter grade is always B\n    letter_grades[1] = \"\
    B\"\n    \n    // The third letter grade is always C\n    letter_grades[2] = \"\
    C\"\n    \n    // The fourth letter grade is always C\n    letter_grades[3] =\
    \ \"C\"\n    \n    // The fifth letter grade is always C\n    letter_grades[4]\
    \ = \"C\"\n    \n    // The sixth letter grade is always C\n    letter_grades[5]\
    \ = \"C\"\n    \n    // The seventh letter grade is always C\n    letter_grades[6]\
    \ = \"C\"\n    \n    // The eighth letter grade is always C\n    letter_grades[7]\
    \ = \"C\"\n    \n    // The ninth letter grade is always C\n    letter_grades[8]\
    \ = \"C\"\n    \n    // The tenth letter grade is always C\n    letter_grades[9]\
    \ = \"C\"\n    \n    // The eleventh letter grade is always C\n    letter_grades[10]\
    \ = \"C\"\n    \n    // The twelfth letter grade is always C\n    letter_grades[11]\
    \ = \"C\"\n    \n    // The thirteenth letter grade is always C\n    letter_grades[12]\
    \ = \"C\"\n    \n    // The fourteenth letter grade is always C\n    letter_grades[13]\
    \ = \"C\"\n    \n    // The fifteenth letter grade is always C\n    letter_grades[14]\
    \ = \"C\"\n    \n    // The sixteenth letter grade is always C\n    letter_grades[15]\
    \ = \"C\"\n    \n    // The seventeenth letter grade is always C\n    letter_grades[16]\
    \ = \"C\"\n    \n    // The eighteenth letter grade is always C\n    letter_grades[17]\
    \ = \"C\"\n    \n    // The nineteenth letter grade is always C\n    letter_grades[18]\
    \ = \"C\"\n    \n    // The twentieth letter grade is always C\n    letter_grades[19]\
    \ = \"C\"\n    \n    // The twenty-first letter grade is always C\n    letter_grades[20]\
    \ = \"C\"\n    \n    // The twenty-second letter grade is always ", "    result\
    \ := make([]string, len(grades))\n    \n    // The first letter grade is always\
    \ A+\n    result[0] = \"A+\"\n    \n    // The second letter grade is always B\n\
    \    for i := 1; i < len(grades); i++ {\n        if grades[i] > 3.7 && grades[i]\
    \ < 3.3 {\n            result[i] = \"B+\"\n        } else if grades[i] > 3.3 &&\
    \ grades[i] < 3.0 {\n            result[i] = \"B\"\n        } else if grades[i]\
    \ > 3.0 && grades[i] < 2.7 {\n            result[i] = \"B-\"\n        } else if\
    \ grades[i] > 2.7 && grades[i] < 2.3 {\n            result[i] = \"B\"\n      \
    \  } else if grades[i] > 2.3 && grades[i] < 2.0 {\n            result[i] = \"\
    B-\"\n        } else if grades[i] > 2.0 && grades[i] < 1.7 {\n            result[i]\
    \ = \"C+\"\n        } else if grades[i] > 1.7 && grades[i] < 1.3 {\n         \
    \   result[i] = \"C\"\n        } else if grades[i] > 1.3 && grades[i] < 1.0 {\n\
    \            result[i] = \"C-\"\n        } else if grades[i] > 1.0 && grades[i]\
    \ < 0.7 {\n            result[i] = \"C\"\n        } else if grades[i] > 0.7 &&\
    \ grades[i] < 0.0 {\n            result[i] = \"C-\"\n        } else {\n      \
    \      result[i] = \"E\"\n        }\n    }\n    \n    return result\n}\n", " \
    \   grades_len := len(grades)\n    letter_grades := make([]string, grades_len)\n\
    \    \n    for i := 0; i < grades_len; i++ {\n        if grades[i] < 3.0 {\n \
    \           letter_grades[i] = \"E\"\n        } else if grades[i] >= 3.0 && grades[i]\
    \ < 3.7 {\n            letter_grades[i] = \"D+\"\n        } else if grades[i]\
    \ >= 3.7 && grades[i] < 4.0 {\n            letter_grades[i] = \"D-\"\n       \
    \ } else if grades[i] >= 4.0 && grades[i] < 4.3 {\n            letter_grades[i]\
    \ = \"C+\"\n        } else if grades[i] >= 4.3 && grades[i] < 4.7 {\n        \
    \    letter_grades[i] = \"C\"\n        } else if grades[i] >= 4.7 && grades[i]\
    \ < 5.0 {\n            letter_grades[i] = \"B-\"\n        } else if grades[i]\
    \ >= 5.0 && grades[i] < 5.3 {\n            letter_grades[i] = \"B\"\n        }\
    \ else if grades[i] >= 5.3 && grades[i] < 5.7 {\n            letter_grades[i]\
    \ = \"A-\"\n        } else if grades[i] >= 5.7 && grades[i] < 6.0 {\n        \
    \    letter_grades[i] = \"A\"\n        } else if grades[i] >= 6.0 {\n        \
    \    letter_grades[i] = \"A+\"\n        }\n    }\n    return letter_grades\n}\n",
  "    var result []string\n    for _, grade := range grades {\n        if grade >\
    \ 3.0 {\n            result = append(result, fmt.Sprintf(\"A+\"))\n        } else\
    \ if grade > 2.7 {\n            result = append(result, fmt.Sprintf(\"B\"))\n\
    \        } else if grade > 2.3 {\n            result = append(result, fmt.Sprintf(\"\
    B-\"))\n        } else if grade > 1.3 {\n            result = append(result, fmt.Sprintf(\"\
    C+\"))\n        } else if grade > 0.7 {\n            result = append(result, fmt.Sprintf(\"\
    C\"))\n        } else if grade > 0.3 {\n            result = append(result, fmt.Sprintf(\"\
    C-\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D+\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D\"))\n        } else if grade > 0.0 {\n            result = append(result, fmt.Sprintf(\"\
    D-\"))\n        } else {\n            result = append(result, fmt.Sprintf(\"E\"\
    ))\n        }\n    }\n    return result\n}\n", "    gradesLen := len(grades)\n\
    \    gradesMax := gradesLen - 1\n    gradesMin := 0\n    gradesSum, gradesProduct,\
    \ gradesAvg := 0, 0, 0\n    for i := 0; i < gradesLen; i++ {\n        gradesSum\
    \ += grades[i]\n        gradesProduct *= grades[i]\n        gradesAvg += grades[i]\n\
    \    }\n    gradesAvg /= float64(gradesLen)\n    gradesSum /= float64(gradesLen)\n\
    \    gradesProduct /= float64(gradesLen)\n    gradesMin = math.Max(gradesMin,\
    \ grades[0])\n    gradesMax = math.Min(gradesMax, grades[gradesLen-1])\n    gradesSum\
    \ = math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct, 0)\n \
    \   gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n\
    \    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg = math.Min(gradesAvg,\
    \ gradesSum)\n    gradesSum = math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct,\
    \ 0)\n    gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum,\
    \ gradesMax)\n    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg\
    \ = math.Min(gradesAvg, gradesSum)\n    gradesSum = math.Max(gradesSum, 0)\n \
    \   gradesProduct = math.Max(gradesProduct, 0)\n    gradesAvg = math.Max(gradesAvg,\
    \ 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n    gradesProduct = math.Min(gradesProduct,\
    \ gradesMin)\n    gradesAvg = math.Min(gradesAvg, gradesSum)\n    gradesSum =\
    \ math.Max(gradesSum, 0)\n    gradesProduct = math.Max(gradesProduct, 0)\n   \
    \ gradesAvg = math.Max(gradesAvg, 0)\n    gradesSum = math.Min(gradesSum, gradesMax)\n\
    \    gradesProduct = math.Min(gradesProduct, gradesMin)\n    gradesAvg = math.Min(gradesAv",
  "    gradesLen := len(grades)\n    letterGrades := make([]string, gradesLen)\n \
    \   for i := 0; i < gradesLen; i++ {\n        if grades[i] >= 4.0 {\n        \
    \    letterGrades[i] = \"A+\"\n        } else if grades[i] >= 3.7 && grades[i]\
    \ <= 4.0 {\n            letterGrades[i] = \"A\"\n        } else if grades[i] >=\
    \ 3.3 && grades[i] <= 3.7 {\n            letterGrades[i] = \"A-\"\n        } else\
    \ if grades[i] >= 3.0 && grades[i] <= 3.3 {\n            letterGrades[i] = \"\
    B+\"\n        } else if grades[i] >= 2.7 && grades[i] <= 3.0 {\n            letterGrades[i]\
    \ = \"B\"\n        } else if grades[i] >= 2.3 && grades[i] <= 2.7 {\n        \
    \    letterGrades[i] = \"B-\"\n        } else if grades[i] >= 2.0 && grades[i]\
    \ <= 2.3 {\n            letterGrades[i] = \"C+\"\n        } else if grades[i]\
    \ >= 1.7 && grades[i] <= 2.0 {\n            letterGrades[i] = \"C\"\n        }\
    \ else if grades[i] >= 1.3 && grades[i] <= 1.7 {\n            letterGrades[i]\
    \ = \"C-\"\n        } else if grades[i] >= 1.0 && grades[i] <= 1.3 {\n       \
    \     letterGrades[i] = \"D+\"\n        } else if grades[i] >= 0.7 && grades[i]\
    \ <= 1.0 {\n            letterGrades[i] = \"D\"\n        } else if grades[i] >=\
    \ 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n            letterGrades[i]\
    \ = \"E\"\n        }\n    }\n    return letterGrades\n}\n", "    gradesSorted\
    \ := make([]float64, len(grades))\n    sort.Float64s(grades)\n    for i := 0;\
    \ i < len(grades); i++ {\n        gradesSorted[i] = grades[i]\n    }\n    gradesSortedSorted\
    \ := make([]float64, len(gradesSorted))\n    sort.Float64s(gradesSorted)\n   \
    \ gradesSortedSorted2 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted2)\n\
    \    gradesSortedSorted3 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted3)\n\
    \    gradesSortedSorted4 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted4)\n\
    \    gradesSortedSorted5 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted5)\n\
    \    gradesSortedSorted6 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted6)\n\
    \    gradesSortedSorted7 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted7)\n\
    \    gradesSortedSorted8 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted8)\n\
    \    gradesSortedSorted9 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted9)\n\
    \    gradesSortedSorted10 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted10)\n\
    \    gradesSortedSorted11 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted11)\n\
    \    gradesSortedSorted12 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted12)\n\
    \    gradesSortedSorted13 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted13)\n\
    \    gradesSortedSorted14 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted14)\n\
    \    gradesSortedSorted15 := make([]float64, len(gradesSortedSorted))\n    sort.Float64s(gradesSortedSorted15)\n\
    \    grades", "    var letter []string\n    var sum float64\n    var i int\n \
    \   for i = 0; i < len(grades); i++ {\n        sum += grades[i]\n        if sum\
    \ > 4.0 {\n            letter = append(letter, \"A+\")\n            sum += 4.0\
    \ - sum\n        } else if sum > 3.7 {\n            letter = append(letter, \"\
    A\")\n            sum += 3.7 - sum\n        } else if sum > 3.3 {\n          \
    \  letter = append(letter, \"A-\")\n            sum += 3.3 - sum\n        } else\
    \ if sum > 3.0 {\n            letter = append(letter, \"B+\")\n            sum\
    \ += 3.0 - sum\n        } else if sum > 2.7 {\n            letter = append(letter,\
    \ \"B\")\n            sum += 2.7 - sum\n        } else if sum > 2.3 {\n      \
    \      letter = append(letter, \"B-\")\n            sum += 2.3 - sum\n       \
    \ } else if sum > 2.0 {\n            letter = append(letter, \"C+\")\n       \
    \     sum += 2.0 - sum\n        } else if sum > 1.7 {\n            letter = append(letter,\
    \ \"C\")\n            sum += 1.7 - sum\n        } else if sum > 1.3 {\n      \
    \      letter = append(letter, \"C-\")\n            sum += 1.3 - sum\n       \
    \ } else if sum > 1.0 {\n            letter = append(letter, \"D+\")\n       \
    \     sum += 1.0 - sum\n        } else if sum > 0.7 {\n            letter = append(letter,\
    \ \"D\")\n            sum += 0.7 - sum\n        } else if sum > 0.0 {\n      \
    \      letter = append(letter, \"D-\")\n            sum += 0.0 - sum\n       \
    \ } else {\n            letter = append(letter, \"E\")\n        }\n    }\n   \
    \ return letter\n}\n", "    result := make([]string, len(grades))\n    \n    //\
    \ Loop through each grade and see if it is greater than the GPA \n    // of the\
    \ next grade and if so, add it to the result array\n    for i := 0; i < len(grades)-1;\
    \ i++ {\n        if grades[i] > grades[i+1] {\n            result[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i]+grades[i+1]/2)\n        } else {\n            result[i] = fmt.Sprintf(\"\
    %+.2f\", grades[i])\n        }\n    }\n    \n    // Add the last grade to the\
    \ result array if it is not greater than the \n    // GPA of the next grade\n\
    \    if grades[len(grades)-1] > grades[len(grades)-2]+grades[len(grades)-1]/2\
    \ {\n        result[len(grades)-1] = fmt.Sprintf(\"%+.2f\", grades[len(grades)-1]+grades[len(grades)-2]/2)\n\
    \    }\n    \n    return result\n}\n", "    gradesSorted := make([]float64, len(grades))\n\
    \    copy(gradesSorted, grades)\n    sort.Float64s(gradesSorted)\n    gradesSorted[0]\
    \ = 0.0\n    gradesSorted[len(gradesSorted)-1] = 0.0\n    gradesSorted[0] -= gradesSorted[1]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-2]\n\
    \    gradesSorted[0] -= gradesSorted[2]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-3]\n    gradesSorted[0] -= gradesSorted[3]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-4]\n\
    \    gradesSorted[0] -= gradesSorted[4]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-5]\n    gradesSorted[0] -= gradesSorted[5]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-6]\n\
    \    gradesSorted[0] -= gradesSorted[6]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-7]\n    gradesSorted[0] -= gradesSorted[7]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-8]\n\
    \    gradesSorted[0] -= gradesSorted[8]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-9]\n    gradesSorted[0] -= gradesSorted[9]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-10]\n\
    \    gradesSorted[0] -= gradesSorted[10]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-11]\n    gradesSorted[0] -= gradesSorted[11]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-12]\n\
    \    gradesSorted[0] -= gradesSorted[12]\n    gradesSorted[len(gradesSorted)-1]\
    \ -= gradesSorted[len(gradesSorted)-13]\n    gradesSorted[0] -= gradesSorted[13]\n\
    \    gradesSorted[len(gradesSorted)-1] -= gradesSorted[len(gradesSorted)-14]\n\
    \    gradesSorted[0] -= gradesSorted[14]\n    gradesSorted[len(grades", "    result\
    \ := make([]string, len(grades))\n    for i := range grades {\n        if grades[i]\
    \ < 3.0 {\n            result[i] = \"E\"\n        } else if grades[i] < 3.3 {\n\
    \            result[i] = \"D-\"\n        } else if grades[i] < 3.7 {\n       \
    \     result[i] = \"C+\"\n        } else if grades[i] < 4.0 {\n            result[i]\
    \ = \"B+\"\n        } else if grades[i] < 4.3 {\n            result[i] = \"B-\"\
    \n        } else if grades[i] < 4.7 {\n            result[i] = \"B\"\n       \
    \ } else if grades[i] < 5.0 {\n            result[i] = \"A+\"\n        } else\
    \ if grades[i] < 5.3 {\n            result[i] = \"A\"\n        } else if grades[i]\
    \ < 5.7 {\n            result[i] = \"A-\"\n        } else if grades[i] < 6.0 {\n\
    \            result[i] = \"A\"\n        } else {\n            result[i] = \"A+\"\
    \n        }\n    }\n    return result\n}\n", "    result := make([]string, len(grades))\n\
    \    i := 0\n    for _, grade := range grades {\n        if grade > 3.0 {\n  \
    \          result[i] = \"B+\"\n        } else if grade > 2.7 {\n            result[i]\
    \ = \"B\"\n        } else if grade > 2.3 {\n            result[i] = \"B-\"\n \
    \       } else if grade > 2.0 {\n            result[i] = \"C+\"\n        } else\
    \ if grade > 1.7 {\n            result[i] = \"C\"\n        } else if grade > 1.3\
    \ {\n            result[i] = \"C-\"\n        } else if grade > 1.0 {\n       \
    \     result[i] = \"D+\"\n        } else if grade > 0.7 {\n            result[i]\
    \ = \"D\"\n        } else if grade > 0.0 {\n            result[i] = \"D-\"\n \
    \       } else {\n            result[i] = \"E\"\n        }\n        i++\n    }\n\
    \    return result\n}\n", "    gradesLen := len(grades)\n    letterGrades := make([]string,\
    \ gradesLen)\n    \n    // The first letter grade is always A+\n    letterGrades[0]\
    \ = \"A+\"\n    \n    // The last letter grade is always D-\n    letterGrades[gradesLen-1]\
    \ = \"D-\"\n    \n    // The middle letter grades are calculated using the formula:\n\
    \    // GPA * 10 / 100\n    // The formula is valid for GPA between 3.0 and 3.7\n\
    \    // The formula is valid for GPA between 2.0 and 2.7\n    // The formula is\
    \ valid for GPA between 1.7 and 2.0\n    // The formula is valid for GPA between\
    \ 1.0 and 0.7\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid for\
    \ GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and\
    \ 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The formula\
    \ is valid for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between\
    \ 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid for\
    \ GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and\
    \ 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The formula\
    \ is valid for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between\
    \ 0.0 and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    //\
    \ The formula is valid for GPA between 0.0 and 0.0\n    // The formula is valid\
    \ for GPA between 0.0 and 0.0\n    // The formula is valid for GPA between 0.0\
    \ and 0.0\n    // The formula is valid for GPA between 0.0 and 0.0\n    // The\
    \ formula is valid for GPA between 0.0 and 0.0\n    // ", "    gradesLen := len(grades)\n\
    \    letterGrades := make([]string, gradesLen)\n    letterGrades[0] = \"E\"\n\
    \    letterGrades[gradesLen-1] = \"E\"\n    for i := 0; i < gradesLen; i++ {\n\
    \        if grades[i] >= 3.0 {\n            letterGrades[i] = \"A+\"\n       \
    \ } else if grades[i] >= 2.7 {\n            letterGrades[i] = \"B\"\n        }\
    \ else if grades[i] >= 2.3 {\n            letterGrades[i] = \"B-\"\n        }\
    \ else if grades[i] >= 2.0 {\n            letterGrades[i] = \"C+\"\n        }\
    \ else if grades[i] >= 1.7 {\n            letterGrades[i] = \"C\"\n        } else\
    \ if grades[i] >= 1.3 {\n            letterGrades[i] = \"C-\"\n        } else\
    \ if grades[i] >= 1.0 {\n            letterGrades[i] = \"D+\"\n        } else\
    \ if grades[i] >= 0.7 {\n            letterGrades[i] = \"D\"\n        } else if\
    \ grades[i] >= 0.0 {\n            letterGrades[i] = \"D-\"\n        } else {\n\
    \            letterGrades[i] = \"E\"\n        }\n    }\n    return letterGrades\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
