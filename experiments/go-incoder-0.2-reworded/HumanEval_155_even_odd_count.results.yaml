language: go_test.go
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    \n    for\
    \ i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    \n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmphicmesp7_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmphicmesp7_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmphicmesp7_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even,\
    \ odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4uwr9_zm_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp4uwr9_zm_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4uwr9_zm_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even,\
    \ odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpk1qpr6v2_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpk1qpr6v2_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpk1qpr6v2_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, i)\n\
    \        num /= 10\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpwrdmjg1u_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmpwrdmjg1u_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmpwrdmjg1u_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpwrdmjg1u_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwrdmjg1u_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpwrdmjg1u_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpwrdmjg1u_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwrdmjg1u_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n     \
    \       evenCount++\n        } else {\n            oddCount++\n        }\n   \
    \ }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvybjscev_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for num > 0 {\n        digit, num := num % 10, num\
    \ / 10\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n        result = append(result, digit)\n \
    \   }\n    return append(result,\n        evenCount,\n        oddCount,\n    )\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp32a_f5y8_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for i := 0;\
    \ i < 10; i++ {\n        if num%10 == 0 {\n            evenCount++\n        }\
    \ else {\n            oddCount++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_rb5xjjn_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for i := 0;\
    \ i < 10; i++ {\n        if num % 10 == 0 {\n            evenCount++\n       \
    \ } else {\n            oddCount++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm6f2lbue_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhmr48t8_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4r3fudgg_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.13s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmxa7i5r6_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpmxa7i5r6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpmxa7i5r6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount, oddCount)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgtyjnane_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b6i5u_e_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    \n    num /= 10\n    \n    for i := 0; i < num; i++ {\n        if num%2\
    \ == 0 {\n            evens = append(evens, i)\n        } else {\n           \
    \ odds = append(odds, i)\n        }\n        num /= 10\n    }\n    \n    return\
    \ evens\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpjyik6u7v_test.go:52: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpjyik6u7v_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpjyik6u7v_test.go:52: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n \
    \       tmpjyik6u7v_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=1)\
    \ %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n\
    \        tmpjyik6u7v_test.go:52: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpjyik6u7v_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpjyik6u7v_test.go:52: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpjyik6u7v_test.go:52:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        num /= 10\n        even++\n    }\n    for num > 0\
    \ {\n        num /= 10\n        odd++\n    }\n    result = append(result, even)\n\
    \    result = append(result, odd)\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num = num / 10\n    }\n\
    \    result = append(result, even)\n    result = append(result, odd)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        result = append(result, digit)\n    }\n    return append(result,\
    \ even, odd)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpel6lcaa2_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        if num%2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        num /= 10\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigit :=\
    \ 0\n    oddDigit := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            evenDigit++\n        } else {\n    \
    \        oddDigit++\n        }\n        result = append(result, digit)\n    }\n\
    \    return append(result, evenDigit, oddDigit)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6s1c1q42_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n     \
    \       evenCount++\n        } else {\n            oddCount++\n        }\n   \
    \ }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvybjscev_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    \n    for i\
    \ := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evenCount++\n    \
    \    } else {\n            oddCount++\n        }\n        \n        num /= 10\n\
    \    }\n    \n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpusj85ypq_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        if num%2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        num /= 10\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5zkmbsap_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    count := 0\n \
    \   for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            list = append(list, digit)\n            count++\n  \
    \      }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8q3wltlp_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        result = append(result, digit)\n    }\n    return append(result, even,\
    \ odd)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5e2uzaa3_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.13s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmxa7i5r6_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpmxa7i5r6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpmxa7i5r6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n     \
    \       evenCount++\n        } else {\n            oddCount++\n        }\n   \
    \ }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvybjscev_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        result = append(result, digit)\n    }\n    return append(result,\
    \ even, odd)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpel6lcaa2_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    \n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n           \
    \ evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n    }\n    \n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9nllh843_test.go:26:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    count := 0\n    for num > 0 {\n        digit, num := num % 10, num / 10\n\
    \        if digit % 2 == 0 {\n            evens = append(evens, digit)\n     \
    \       count++\n        } else {\n            odds = append(odds, digit)\n  \
    \          count++\n        }\n    }\n    return []interface{}{count, count}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpi7ljbkl4_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    \n    if num < 0 {\n        return even\n    }\n    \n    num /= 10\n   \
    \ \n    for i := 0; i < len(strconv.Itoa(num)); i++ {\n        if num%2 == 0 {\n\
    \            even = append(even, strconv.Itoa(i))\n        } else {\n        \
    \    odd = append(odd, strconv.Itoa(i))\n        }\n        num /= 10\n    }\n\
    \    \n    return even\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwupjkri_test.go:24:25: undefined: strconv

    /tmp/tmpgwupjkri_test.go:26:33: undefined: strconv

    /tmp/tmpgwupjkri_test.go:28:31: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.32s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpylrg8o2w_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    evenDigit := 0\n\
    \    oddDigit := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            evenDigit++\n        } else {\n    \
    \        oddDigit++\n        }\n        list = append(list, digit)\n    }\n  \
    \  return []interface{}{evenDigit, oddDigit}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4b71ozr0_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n         \
    \   evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n        num /= 10\n    }\n    \n    return evens, odds\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2pog91ck_test.go:27:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even =\
    \ append(even, i)\n        } else {\n            odd = append(odd, i)\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.21s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpumazoqmb_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpumazoqmb_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpumazoqmb_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        if num%2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        num /= 10\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpeux8g1rr_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5zkmbsap_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    even, odd := 0,\
    \ 1\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp83ga5lfd_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    count := 0\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            count = count + 1\n        }\n        if digit % 2 != 0\
    \ {\n            result = append(result, count)\n            count = 0\n     \
    \   }\n    }\n    if count > 0 {\n        result = append(result, count)\n   \
    \ }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77xs_zre_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    even, odd :=\
    \ 0, 1\n    for num > 0 {\n        num /= 10\n        if num%2 == 0 {\n      \
    \      even++\n        } else {\n            odd++\n        }\n        result\
    \ = append(result, even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmps17vdwdb_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmps17vdwdb_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmps17vdwdb_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmps17vdwdb_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmps17vdwdb_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmps17vdwdb_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmps17vdwdb_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmps17vdwdb_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    count := 0\n \
    \   for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            list = append(list, digit)\n            count++\n      \
    \  }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n \
    \ candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkp71g3np_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    count := 0\n \
    \   for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            list = append(list, digit)\n            count++\n  \
    \      }\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8q3wltlp_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    count := 0\n    for num\
    \ > 0 {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n \
    \           list = append(list, digit)\n            count++\n        }\n    }\n\
    \    if count > 0 {\n        list = append(list, count)\n    }\n    return list\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6n6kl2of_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    evenDigit := 0\n\
    \    oddDigit := 0\n    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n\
    \            evenDigit++\n        } else {\n            oddDigit++\n        }\n\
    \        list = append(list, i)\n        num /= 10\n    }\n    list = append(list,\
    \ evenDigit, oddDigit)\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpb5770mpk_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!"
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, i)\n\
    \        num = num / 10\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpqa702rpd_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    \n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n           \
    \ evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n    }\n    \n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9nllh843_test.go:26:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074381
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    count := 0\n\
    \    for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            count = count + 1\n        } else {\n            count\
    \ = count - 1\n        }\n        result = append(result, count)\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpordck3t1_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigits :=\
    \ 0\n    oddDigits := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            evenDigits++\n        } else {\n   \
    \         oddDigits++\n        }\n        result = append(result, digit)\n   \
    \ }\n    return append(result, evenDigits, oddDigits)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpajps64j7_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_cp7_26w_test.go:25:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: null
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    digits, i := 0,\
    \ num\n    for i < 10 {\n        if num%10 == 0 {\n            list = append(list,\
    \ digits)\n            digits = 0\n        }\n        digits++\n        i /= 10\n\
    \    }\n    if digits > 0 {\n        list = append(list, digits)\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660074395
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num % 10, num / 10\n        if\
    \ digit % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        list = append(list, digit)\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrfk_qcu_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return []interface{}{even,\
    \ odd}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpog281xy4_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    evenCount := 0\n  \
    \  oddCount := 0\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n\
    \            evenCount++\n        } else {\n            oddCount++\n        }\n\
    \    }\n    result = append(result, evenCount)\n    result = append(result, oddCount)\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpwkw9j5qr_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        result = append(result, digit)\n    }\n\
    \    return append(result, evenCount, oddCount)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgkl9teec_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    result = append(result,\
    \ evenCount)\n    result = append(result, oddCount)\n    return result\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    \n    for\
    \ i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    \n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmphicmesp7_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmphicmesp7_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmphicmesp7_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    count := 0\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            count = count + 1\n        }\n        if digit % 2 != 0\
    \ {\n            result = append(result, count)\n            count = 0\n     \
    \   }\n    }\n    if count > 0 {\n        result = append(result, count)\n   \
    \ }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp77xs_zre_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n    result = append(result, evenCount)\n    result = append(result, oddCount)\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4vf2roj1_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    count := 0\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            count++\n        }\n        if digit % 2 != 0 {\n      \
    \      result = append(result, count)\n            count = 0\n        }\n    }\n\
    \    if count > 0 {\n        result = append(result, count)\n    }\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpte3ytvzc_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    count := 0\n \
    \   for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            list = append(list, digit)\n            count++\n  \
    \      }\n    }\n    return []interface{}{count, count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmvvdilx5_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num%2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpcrc97lad_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    even_count := 0\n \
    \   odd_count := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            even_count++\n        } else {\n   \
    \         odd_count++\n        }\n        result = append(result, digit)\n   \
    \ }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppiwp_30e_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp8dbh_yql_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmp8dbh_yql_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8dbh_yql_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074385
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        even++\n    }\n    for num > 0 {\n        num /= 10\n       \
    \ odd++\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < 10; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.13s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmxa7i5r6_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpmxa7i5r6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpmxa7i5r6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        even++\n    }\n    for num > 0 {\n        num /= 10\n       \
    \ odd++\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, i)\n\
    \        num /= 10\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp3gd2c92t_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num % 10 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n    result = append(result, evenCount)\n    result = append(result, oddCount)\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp00xjvxnw_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    \n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            even\
    \ = append(even, i)\n        } else {\n            odd = append(odd, i)\n    \
    \    }\n        \n        num /= 10\n    }\n    \n    return even, odd\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprei07_d_test.go:28:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num = num / 10\n    }\n\
    \    result = append(result, even)\n    result = append(result, odd)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigit :=\
    \ true\n    oddDigit := true\n    for i := 0; i < 10; i++ {\n        if num%10\
    \ == 0 {\n            if evenDigit {\n                evenDigit = false\n    \
    \        } else {\n                oddDigit = false\n            }\n        }\
    \ else {\n            if evenDigit {\n                evenDigit = true\n     \
    \       } else {\n                oddDigit = true\n            }\n        }\n\
    \        result = append(result, num)\n        num /= 10\n    }\n    return append(result,\
    \ num)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsdknsd81_test.go:17:5: oddDigit declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmptc6m11iw_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmptc6m11iw_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmptc6m11iw_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074385
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    result = append(result,\
    \ evenCount)\n    result = append(result, oddCount)\n    return result\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        if num%2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpvkwma8mj_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpvkwma8mj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpvkwma8mj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpvkwma8mj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpvkwma8mj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074385
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        result = append(result, digit)\n    }\n\
    \    return append([]interface{}{evenCount, oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3hjts8iy_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := make([]interface{},\
    \ 0)\n    for num > 0 {\n        num /= 10\n        if num%2 == 0 {\n        \
    \    even++\n        } else {\n            odd++\n        }\n        result =\
    \ append(result, num)\n    }\n    return append(result, even, odd)\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=34) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp6lwirusn_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=34621) %!s(int=3462) %!s(int=346)\
    \ %!s(int=34) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp6lwirusn_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.32s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpylrg8o2w_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []interface{}{}\n    odds := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpac7kmxcl_test.go:24:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074385
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        if num%2 == 0 {\n            even++\n        } else\
    \ {\n            odd++\n        }\n        list = append(list, even)\n       \
    \ list = append(list, odd)\n        num /= 10\n    }\n    return list\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpp86yvced_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpp86yvced_test.go:50:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpp86yvced_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=2)\
    \ %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpp86yvced_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpp86yvced_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpp86yvced_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpp86yvced_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount, oddCount)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgtyjnane_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for num > 0 {\n        digit, num := num % 10, num\
    \ / 10\n        if digit % 2 == 0 {\n            evenCount++\n        } else {\n\
    \            oddCount++\n        }\n        result = append(result, digit)\n \
    \   }\n    return append(result, evenCount, oddCount)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphrjniz2b_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkq0tvdx5_test.go:24:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    i := 0\n    for num > 0 {\n        digit, num := num % 10, num / 10\n\
    \        if digit % 2 == 0 {\n            evens = append(evens, digit)\n     \
    \   } else {\n            odds = append(odds, digit)\n        }\n    }\n    return\
    \ append(evens, odds)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr32rh75c_test.go:17:5: i declared but not used

    /tmp/tmpr32rh75c_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    count := 0\n\
    \    for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            count = count + 1\n        }\n        if digit % 2 !=\
    \ 0 {\n            result = append(result, count)\n            count = 0\n   \
    \     }\n    }\n    return append(result, count)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt_ya_uev_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdxu2wqf1_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        even++\n    }\n    for num > 0 {\n        num /= 10\n       \
    \ odd++\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    num /= 10\n\
    \    for num > 0 {\n        if num%2 == 0 {\n            result = append(result,\
    \ 1)\n        } else {\n            result = append(result, 2)\n        }\n  \
    \      num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpcx5dpvtx_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpcx5dpvtx_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpcx5dpvtx_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpcx5dpvtx_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpcx5dpvtx_test.go:48: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpcx5dpvtx_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpcx5dpvtx_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpcx5dpvtx_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    evenDigit := 0\n  \
    \  oddDigit := 0\n    for num > 0 {\n        digit, num := num % 10, num / 10\n\
    \        if digit % 2 == 0 {\n            evenDigit++\n        } else {\n    \
    \        oddDigit++\n        }\n        result = append(result, digit)\n    }\n\
    \    return append(result, evenDigit, oddDigit)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjikfrv7j_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    num /= 10\n    for\
    \ num > 0 {\n        if num%2 == 0 {\n            result = append(result, 1)\n\
    \        } else {\n            result = append(result, 2)\n        }\n       \
    \ num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp4z32_6tc_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp4z32_6tc_test.go:48: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp4z32_6tc_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num%10, num/10\n        if digit % 2 == 0 {\n     \
    \       evenCount++\n        } else {\n            oddCount++\n        }\n   \
    \ }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvybjscev_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp5zkmbsap_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp5zkmbsap_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8v60kp9x_test.go:24:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b6i5u_e_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    \n    for i\
    \ := 0; i < 10; i++ {\n        if num % 2 == 0 {\n            evenCount++\n  \
    \      } else {\n            oddCount++\n        }\n        \n        num /= 10\n\
    \    }\n    \n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=7) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpmxf6coai_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n \
    \   return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0zxw7g17_test.go:24:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append(result,\
    \ evenCount, oddCount)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg9idf_vg_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    num /= 10\n    for num\
    \ > 0 {\n        list = append(list, num)\n        num /= 10\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=34) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=34621) %!s(int=3462) %!s(int=346) %!s(int=34) %!s(int=3)]'\n \
    \   --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := make([]interface{},\
    \ 0)\n    for num > 0 {\n        num /= 10\n        even++\n    }\n    for num\
    \ > 0 {\n        num /= 10\n        odd++\n    }\n    result = append(result,\
    \ even)\n    result = append(result, odd)\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpplzp0128_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074387
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < 10; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp1bcbbg_2_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhmr48t8_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, even)\n\
    \        list = append(list, odd)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.32s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpylrg8o2w_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpylrg8o2w_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074382
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num % 10, num / 10\n        if digit % 2 == 0 {\n \
    \           evenCount++\n        } else {\n            oddCount++\n        }\n\
    \    }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohn0gkez_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    \n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        \n        num /= 10\n    }\n    \n    return []interface{}{evens,\
    \ odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpf69ck4f4_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    result = append(result,\
    \ evenCount)\n    result = append(result, oddCount)\n    return result\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    even, odd :=\
    \ 0, 0\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n          \
    \  even++\n        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.33s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpb98eqsoh_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpb98eqsoh_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpb98eqsoh_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmp_n3z826k_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmp_n3z826k_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        digit, num := num % 10, num / 10\n        if digit % 2 == 0 {\n \
    \           evenCount++\n        } else {\n            oddCount++\n        }\n\
    \    }\n    return []interface{}{evenCount, oddCount}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpohn0gkez_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.14s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp8dbh_yql_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmp8dbh_yql_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp8dbh_yql_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074385
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    odd_count :=\
    \ 0\n    even_count := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            even_count++\n        } else {\n   \
    \         odd_count++\n        }\n        result = append(result, digit)\n   \
    \ }\n    return []interface{}{even_count, odd_count}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzkl3iwm4_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount)\n        result = append(result, oddCount)\n    }\n    return result\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp8ypnre1i_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp8ypnre1i_test.go:50:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp8ypnre1i_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_cp7_26w_test.go:25:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        num /= 10\n        if num%2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ num)\n    }\n    return append(result, even, odd)\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=34) %!s(int=3) %!s(int=0) %!s(int=2) %!s(int=2)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpn52bhcov_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=34621) %!s(int=3462) %!s(int=346)\
    \ %!s(int=34) %!s(int=3) %!s(int=0) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpn52bhcov_test.go:49: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := []interface{}{}\n    num /= 10\n    for\
    \ num > 0 {\n        if num%2 == 0 {\n            result = append(result, 1)\n\
    \        } else {\n            result = append(result, 2)\n        }\n       \
    \ num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp4z32_6tc_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp4z32_6tc_test.go:48: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp4z32_6tc_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4z32_6tc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074387
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount, oddCount)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpgtyjnane_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpgtyjnane_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    odd_count :=\
    \ 0\n    even_count := 0\n    for num > 0 {\n        digit, num := num%10, num/10\n\
    \        if digit % 2 == 0 {\n            even_count++\n        } else {\n   \
    \         odd_count++\n        }\n        result = append(result, digit)\n   \
    \ }\n    return append(result,\n        even_count,\n        odd_count)\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmbl_eg39_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigit :=\
    \ false\n    oddDigit := false\n    for i := 0; i < 10; i++ {\n        if num%10\
    \ == 0 {\n            if evenDigit {\n                evenDigit = false\n    \
    \            oddDigit = true\n            } else {\n                evenDigit\
    \ = true\n                oddDigit = false\n            }\n        } else {\n\
    \            if evenDigit {\n                evenDigit = false\n            }\
    \ else {\n                evenDigit = true\n            }\n        }\n       \
    \ result = append(result, i)\n    }\n    return append(result, oddDigit)\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpq9dgkwdm_test.go:59: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) "
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        list = append(list, digit)\n    }\n    return []interface{}{even, odd}\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmph1beu4ff_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        num = num / 10\n\
    \    }\n    result = append(result, evenCount)\n    result = append(result, oddCount)\n\
    \    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpa0vafv5p_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < num; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp99px5yag_test.go:24:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num % 10, num / 10\n        if\
    \ digit % 2 == 0 {\n            even++\n        } else {\n            odd++\n\
    \        }\n        list = append(list, digit)\n    }\n    return list\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ak2ldq4_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0pz4o0n_test.go:25:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074379
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        list = append(list, fmt.Sprintf(\"\
    %d\", num%10))\n        num /= 10\n    }\n    list = append(list, fmt.Sprintf(\"\
    %d\", even))\n    list = append(list, fmt.Sprintf(\"%d\", odd))\n    return list\n\
    }\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[7 0 0 0 0 0 0 0 0 0 9 1]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[-8 -7 0 0 0 0 0 0 0 0 8 2]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[2 5 4 3 0 0 0 0 0 0 6 4]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[1 1 2 6 4 3 0 0 0 0 4 6]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[-1 -2 -8 -5 -4 -3 0 0 0 0 4 6]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[-2 0 0 0 0 0 0 0 0 0 9 1]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[-7 -4 -3 -5 -4 0 0 0 0 0 5 5]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpuuxt0g5f_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[0 0 0 0 0 0 0 0 0 0 10 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    count := 0\n \
    \   for num > 0 {\n        digit, num := num % 10, num / 10\n        if digit\
    \ % 2 == 0 {\n            list = append(list, digit)\n            count++\n  \
    \      }\n    }\n    return []interface{}{count, list}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbukx8dvt_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n      \
    \      evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n    }\n    \n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2x05rjdx_test.go:26:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n        result = append(result,\
    \ evenCount, oddCount)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.35s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp218imyl6_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp218imyl6_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp218imyl6_test.go:49: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    for num > 0\
    \ {\n        if num%2 == 0 {\n            evenCount++\n        } else {\n    \
    \        oddCount++\n        }\n        num = num / 10\n    }\n    return []interface{}{evenCount,\
    \ oddCount}\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpt5rw8h1m_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpt5rw8h1m_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpt5rw8h1m_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpt5rw8h1m_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpt5rw8h1m_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        if num%2 == 0 {\n            even++\n        } else {\n     \
    \       odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmps32gj_dz_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpbffonrnw_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        num /= 10\n        even++\n    }\n    for num > 0\
    \ {\n        num /= 10\n        odd++\n    }\n    result = append(result, even)\n\
    \    result = append(result, odd)\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpi6w7lmtp_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm4iih7c6_test.go:24:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074389
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    i := 0\n   \
    \ for num > 0 {\n        if num%2 == 0 {\n            result = append(result,\
    \ 1)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \      num /= 10\n        i++\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpuw06j0ud_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n \
    \       tmpuw06j0ud_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpuw06j0ud_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=0) %!s(int=1) %!s(int=0)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmpuw06j0ud_test.go:49:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=1)\
    \ %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n\
    \        tmpuw06j0ud_test.go:49: expected '[%!s(int=3) %!s(int=3)]', got '[]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmpuw06j0ud_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpuw06j0ud_test.go:49: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpuw06j0ud_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    list := append(list,\
    \ num)\n    list := append(list, num%10)\n    list := append(list, num%100)\n\
    \    list := append(list, num%1000)\n    list := append(list, num%10000)\n   \
    \ list := append(list, num%100000)\n    list := append(list, num%1000000)\n  \
    \  list := append(list, num%10000000)\n    list := append(list, num%100000000)\n\
    \    list := append(list, num%1000000000)\n    list := append(list, num%10000000000)\n\
    \    list := append(list, num%100000000000)\n    list := append(list, num%1000000000000)\n\
    \    list := append(list, num%1000000000000)\n    list := append(list, num%100000000000000)\n\
    \    list := append(list, num%1000000000000000)\n    list := append(list, num%1000000000000000)\n\
    \    list := append(list, num%10000000000000000)\n    list := append(list, num%10000000000000000)\n\
    \    list := append(list, num%100000000000000000)\n    list := append(list, num%100000000000000000)\n\
    \    list := append(list, num%1000000000000000000)\n    list := append(list, num%1000000000000000000)\n\
    \    list := append(list, num%10000000000000000000)\n    list := append(list,\
    \ num%10000000000000000000)\n    list := append(list, num%100000000000000000000)\n\
    \    list := append(list, num%100000000000000000000)\n    list := append(list,\
    \ num%10000000000000000000000)\n    list := append(list, num%10000000000000000000000)\n\
    \    list := append(list, num%1000000000000000000000000)\n    list := append(list,\
    \ num%1000000000000000000000000)\n    list := append(list, num%10000000000000000000000000)\n\
    \    list := append(list, num%10000000000000000000000000)\n    list := append(list,\
    \ num%100000000000000000000000000)\n    list := append(list, num%100000000000000000000000000)\n\
    \    list := append(list, num%1000000000000000000000000000)\n    list := append(list,\
    \ num%1000000000000000000000000000)\n    list := append(list, num%10000000000000000000000000000)\n\
    \    list := append(list, num%10000000000000000000000000000)\n    list := append(list,\
    \ num%1000000000000000000000000000000)\n    list := append(list, num%1000000000000000000000000000000)\n\
    \    list := append(list, num%100000000000000000000000000000000)\n    list :=\
    \ append(list, num%100000000000000000000000000000000)\n    list := append(list,\
    \ num%1000000000000000000000000000000000)\n    list := append(list, num%100\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpj7jbyrfo_test.go:60:33: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074389
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.13s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpmxa7i5r6_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpmxa7i5r6_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpmxa7i5r6_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    num /= 10\n  \
    \  for num > 0 {\n        list = append(list, num)\n        num /= 10\n    }\n\
    \    return list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate :=\
    \ even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp0apt0c00_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp0apt0c00_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp0apt0c00_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=34) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp0apt0c00_test.go:44: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=34621) %!s(int=3462) %!s(int=346) %!s(int=34) %!s(int=3)]'\n \
    \   --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp0apt0c00_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp0apt0c00_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp0apt0c00_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp0apt0c00_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigit :=\
    \ false\n    oddDigit := false\n    for i := 0; i < 10; i++ {\n        if num%10\
    \ == 0 {\n            if evenDigit {\n                evenDigit = false\n    \
    \            oddDigit = true\n            } else {\n                evenDigit\
    \ = true\n                oddDigit = false\n            }\n        } else {\n\
    \            if evenDigit {\n                evenDigit = false\n            }\
    \ else {\n                evenDigit = true\n            }\n        }\n       \
    \ result = append(result, i)\n        num = num / 10\n    }\n    return append(result,\
    \ oddDigit, evenDigit)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpan71jlhn_test.go:60: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpan71jlhn_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true)\
    \ %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n  \
    \      tmpan71jlhn_test.go:60: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpan71jlhn_test.go:60: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpan71jlhn_test.go:60: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true)\
    \ %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n  \
    \      tmpan71jlhn_test.go:60: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpan71jlhn_test.go:60: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__7 (0.00s)\n        tmpan71jlhn_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=0)]', "
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even =\
    \ append(even, i)\n        } else {\n            odd = append(odd, i)\n      \
    \  }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.21s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpumazoqmb_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmpumazoqmb_test.go:47: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmpumazoqmb_test.go:47:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenDigit :=\
    \ false\n    oddDigit := false\n    for i := 0; i < 10; i++ {\n        if num%10\
    \ == 0 {\n            if evenDigit {\n                evenDigit = false\n    \
    \            oddDigit = true\n            } else {\n                evenDigit\
    \ = true\n                oddDigit = false\n            }\n        } else {\n\
    \            if evenDigit {\n                evenDigit = false\n            }\
    \ else {\n                evenDigit = true\n            }\n        }\n       \
    \ result = append(result, i)\n        num /= 10\n    }\n    return append(result,\
    \ oddDigit, evenDigit)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmps3qky5qi_test.go:60: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__1 (0.00s)\n        tmps3qky5qi_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true)\
    \ %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n  \
    \      tmps3qky5qi_test.go:60: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmps3qky5qi_test.go:60: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmps3qky5qi_test.go:60: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true)\
    \ %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n  \
    \      tmps3qky5qi_test.go:60: expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmps3qky5qi_test.go:60: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9) %!s(bool=true) %!s(bool=false)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__7 (0.00s)\n        tmps3qky5qi_test.go:60: expected\
    \ '[%!s(int=1) %!s(int=0)]', "
  timestamp: 1660074389
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            evens =\
    \ append(evens, i)\n        } else {\n            odds = append(odds, i)\n   \
    \     }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_ei2nk_8_test.go:24:19:\
    \ too many return values\n\thave ([]int, []int)\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        if num%2 == 0 {\n            evenCount++\n       \
    \ } else {\n            oddCount++\n        }\n        num /= 10\n    }\n    result\
    \ = append(result, evenCount)\n    result = append(result, oddCount)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpin23s78r_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpin23s78r_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpin23s78r_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpin23s78r_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpin23s78r_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < 10; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n        num /= 10\n    }\n    return evens\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n\
    \        tmp_n3z826k_test.go:48: expected '[%!s(int=1) %!s(int=1)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n       \
    \ tmp_n3z826k_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0)\
    \ %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__3 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__5 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    ---\
    \ FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp_n3z826k_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp_n3z826k_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074388
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    \n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n           \
    \ evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n    }\n    \n    return []interface{}{evens, odds}\n}\n\nfunc\
    \ TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.24s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp6zjbctzp_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmp6zjbctzp_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp6zjbctzp_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074390
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n \
    \   return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0zxw7g17_test.go:24:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n        num\
    \ /= 10\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmprmbzldjc_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evenCount++\n\
    \        } else {\n            oddCount++\n        }\n    }\n    result = append(result,\
    \ evenCount)\n    result = append(result, oddCount)\n    return result\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpm0inlb09_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    \n    for\
    \ i := 0; i < num; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n    }\n\
    \    \n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.19s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp0ca7_m02_test.go:49: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[] [%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)\
    \ %!s(int=6)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n      \
    \  tmp0ca7_m02_test.go:49: expected '[%!s(int=1) %!s(int=1)]', got '[[] []]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__2 (0.00s)\n        tmp0ca7_m02_test.go:49:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[[%!s(int=0) %!s(int=1) %!s(int=2)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)\
    \ %!s(int=10) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)\
    \ %!s(int=17) %!s(int=18) %!s(int=19) %!s(int=20) %!s(int=21) %!s(int=22) %!s(int=23)\
    \ %!s(int=24) %!s(int=25) %!s(int=26) %!s(int=27) %!s(int=28) %!s(int=29) %!s(int=30)\
    \ %!s(int=31) %!s(int=32) %!s(int=33) %!s(int=34) %!s(int=35) %!s(int=36) %!s(int=37)\
    \ %!s(int=38) %!s(int=39) %!s(int=40) %!s(int=41) %!s(int=42) %!s(int=43) %!s(int=44)\
    \ %!s(int=45) %!s(int=46) %!s(int=47) %!s(int=48) %!s(int=49) %!s(int=50) %!s(int=51)\
    \ %!s(int=52) %!s(int=53) %!s(int=54) %!s(int=55) %!s(int=56) %!s(int=57) %!s(int=58)\
    \ %!s(int=59) %!s(int=60) %!s(int=61) %!s(int=62) %!s(int=63) %!s(int=64) %!s(int=65)\
    \ %!s(int=66) %!s(int=67) %!s(int=68) %!s(int=69) %!s(int=70) %!s(int=71) %!s(int=72)\
    \ %!s(int=73) %!s(int=74) %!s(int=75) %!s(int=76) %!s(int=77) %!s(int=78) %!s(int=79)\
    \ %!s(int=80) %!s(int=81) %!s(int=82) %!s(int=83) %!s(int=84) %!s(int=85) %!s(int=86)\
    \ %!s(int=87) %!s(int=88) %!s(int=89) %!s(int=90) %!s(int=91) %!s(int=92) %!s(int=93)\
    \ %!s(int=94) %!s(int=95) %!s(int=96) %!s(int=97) %!s(int=98) %!s(int=99) %!s(int=100)\
    \ %!s(int=101) %!s(int=102) %!s(int=103) %!s(int=104) %!s(int=105) %!s(int=106)\
    \ %!s(int=107) %!s(int=108) %!s(int=109) %!s(int=110) %!s(int=111) %!s(int=112)\
    \ %!s(int=113) %!s(int=114) %!s(int=115) %!s(int=116) %!s(int=117) %!s(int=118)\
    \ %!s(int=119) %!s(int=120) %!s(int=121) %!s(int=122) %!s(int=123) %!s(int=124)\
    \ %!s(int=125) %!s(int=1"
  timestamp: 1660074390
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    evenCount :=\
    \ 0\n    oddCount := 0\n    for num > 0 {\n        if num%2 == 0 {\n         \
    \   evenCount++\n        } else {\n            oddCount++\n        }\n       \
    \ num /= 10\n    }\n    result = append(result, evenCount)\n    result = append(result,\
    \ oddCount)\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n\
    \  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpx1e636qi_test.go:51: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpx1e636qi_test.go:51: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpx1e636qi_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpx1e636qi_test.go:51: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpx1e636qi_test.go:51: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    result := make([]interface{}, 0)\n    num /= 10\n\
    \    for num > 0 {\n        if num%2 == 0 {\n            result = append(result,\
    \ 1)\n        } else {\n            result = append(result, 0)\n        }\n  \
    \      num /= 10\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpv9mq7dm7_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpv9mq7dm7_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpv9mq7dm7_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpv9mq7dm7_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=0)]'\n    --- FAIL:\
    \ TestEven_Odd_Count/test_num__4 (0.00s)\n        tmpv9mq7dm7_test.go:48: expected\
    \ '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpv9mq7dm7_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmpv9mq7dm7_test.go:48:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpv9mq7dm7_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    var even = []interface{}{}\n    var odd = []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num%2 == 0 {\n            even = append(even,\
    \ i)\n        } else {\n            odd = append(odd, i)\n        }\n    }\n \
    \   return even, odd\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0zxw7g17_test.go:24:18:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := []interface{}{}\n \
    \   for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            even++\n        } else {\n            odd++\n        }\n\
    \        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6b6i5u_e_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evenCount := 0\n    oddCount := 0\n    result := []interface{}{}\n\
    \    for num > 0 {\n        digit, num := num%10, num/10\n        if digit % 2\
    \ == 0 {\n            evenCount++\n        } else {\n            oddCount++\n\
    \        }\n        result = append(result, digit)\n    }\n    return append([]interface{}{evenCount,\
    \ oddCount}, result...)\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate\
    \ := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected:\
    \ []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyhmr48t8_test.go:19:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            evens\
    \ = append(evens, i)\n        } else {\n            odds = append(odds, i)\n \
    \       }\n    }\n    return evens, odds\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8v60kp9x_test.go:24:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074386
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for num > 0 {\n        num\
    \ /= 10\n        even++\n    }\n    for num > 0 {\n        num /= 10\n       \
    \ odd++\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=1) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=4) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=6) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp4qgsw6xj_test.go:47: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074384
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    list := make([]interface{},\
    \ 0)\n    for num > 0 {\n        digit, num := num%10, num/10\n        if digit\
    \ % 2 == 0 {\n            even++\n        } else {\n            odd++\n      \
    \  }\n        list = append(list, digit)\n    }\n    return list\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0xr1nt_r_test.go:18:16: num declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < 10; i++ {\n        if num%10 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        num = num / 10\n    }\n\
    \    result = append(result, even)\n    result = append(result, odd)\n    return\
    \ result\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=8) %!s(int=2)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=4)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=4) %!s(int=6)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=9) %!s(int=1)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmpfn4czxac_test.go:50: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=10) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 2
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := make([]interface{}, 0)\n    odds := make([]interface{},\
    \ 0)\n    \n    for i := 0; i < 10; i++ {\n        if num%2 == 0 {\n         \
    \   evens = append(evens, i)\n        } else {\n            odds = append(odds,\
    \ i)\n        }\n        num /= 10\n    }\n    \n    return evens, odds\n}\n\n\
    func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
    \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
    \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
    \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2pog91ck_test.go:27:19:\
    \ too many return values\n\thave ([]interface{}, []interface{})\n\twant ([]interface{})\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074382
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    result := []interface{}{}\n\
    \    for i := 0; i < num; i++ {\n        if num % 2 == 0 {\n            even++\n\
    \        } else {\n            odd++\n        }\n        result = append(result,\
    \ even, odd)\n    }\n    return result\n}\n\nfunc TestEven_Odd_Count(t *testing.T)\
    \ {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7),\
    \ expected: []interface{}{0, 1} },\n     { actual: candidate(-78), expected: []interface{}{1,\
    \ 1} },\n     { actual: candidate(3452), expected: []interface{}{2, 2} },\n  \
    \   { actual: candidate(346211), expected: []interface{}{3, 3} },\n     { actual:\
    \ candidate(-345821), expected: []interface{}{3, 3} },\n     { actual: candidate(-2),\
    \ expected: []interface{}{1, 0} },\n     { actual: candidate(-45347), expected:\
    \ []interface{}{2, 3} },\n     { actual: candidate(0), expected: []interface{}{1,\
    \ 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.34s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4) %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7)]'\n\
    \    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmpkoklu_pk_test.go:48:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmpkoklu_pk_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=4)\
    \ %!s(int=0) %!s(int=5) %!s(int=0) %!s(int=6) %!s(int=0) %!s(int=7) %!s(int=0)\
    \ %!s(int=8) %!s(int=0) %!s(int=9) %!s(int=0) %!s(int=10) %!s(int=0) %!s(int=11)\
    \ %!s(int=0) %!s(int=12) %!s(int=0) %!s(int=13) %!s(int=0) %!s(int=14) %!s(int=0)\
    \ %!s(int=15) %!s(int=0) %!s(int=16) %!s(int=0) %!s(int=17) %!s(int=0) %!s(int=18)\
    \ %!s(int=0) %!s(int=19) %!s(int=0) %!s(int=20) %!s(int=0) %!s(int=21) %!s(int=0)\
    \ %!s(int=22) %!s(int=0) %!s(int=23) %!s(int=0) %!s(int=24) %!s(int=0) %!s(int=25)\
    \ %!s(int=0) %!s(int=26) %!s(int=0) %!s(int=27) %!s(int=0) %!s(int=28) %!s(int=0)\
    \ %!s(int=29) %!s(int=0) %!s(int=30) %!s(int=0) %!s(int=31) %!s(int=0) %!s(int=32)\
    \ %!s(int=0) %!s(int=33) %!s(int=0) %!s(int=34) %!s(int=0) %!s(int=35) %!s(int=0)\
    \ %!s(int=36) %!s(int=0) %!s(int=37) %!s(int=0) %!s(int=38) %!s(int=0) %!s(int=39)\
    \ %!s(int=0) %!s(int=40) %!s(int=0) %!s(int=41) %!s(int=0) %!s(int=42) %!s(int=0)\
    \ %!s(int=43) %!s(int=0) %!s(int=44) %!s(int=0) %!s(int=45) %!s(int=0) %!s(int=46)\
    \ %!s(int=0) %!s(int=47) %!s(int=0) %!s(int=48) %!s(int=0) %!s(int=49) %!s(int=0)\
    \ %!s(int=50) %!s(int=0) %!s(int=51) %!s(int=0) %!s(int=52) %!s(int=0) %!s(int=53)\
    \ %!s(int=0) %!s(int=54) %!s(int=0) %!s(int=55) %!s(int=0) %!s(int=56) %!s(int=0)\
    \ %!s(int=57) %!s(int=0) %!s(int=58) %!s(int=0) %!s(int=59) %!s(int=0) %!s(int=60)\
    \ %!s(int=0) %!s(int=61) %!s(int=0) %!s(int=62) %!s(int=0) %!s(int=63) %!s(int=0)\
    \ %!s(int=64) %!s(int=0) %!s(int="
  timestamp: 1660074383
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    evens := []int{}\n    odds := []int{}\n    for i :=\
    \ 0; i < 10; i++ {\n        if num%2 == 0 {\n            evens = append(evens,\
    \ i)\n        } else {\n            odds = append(odds, i)\n        }\n      \
    \  num /= 10\n    }\n    return []interface{}{evens, odds}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=0)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)\
    \ %!s(int=8) %!s(int=9)] [%!s(int=1)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[[%!s(int=0) %!s(int=2) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)\
    \ %!s(int=9)] [%!s(int=1) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=1) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=3) %!s(int=5)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[[%!s(int=1) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]\
    \ [%!s(int=0) %!s(int=2) %!s(int=3)]]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmprfr6j6o0_test.go:48: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)\
    \ %!s(int=7) %!s(int=8) %!s(int=9)] []]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := make([]interface{}, 0)\n    list := append(list,\
    \ num)\n    list := append(list, num%10)\n    list := append(list, num%10)\n \
    \   list := append(list, num%10)\n    list := append(list, num%10)\n    list :=\
    \ append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n    list := append(list,\
    \ num%10)\n    list := append(list, num%10)\n    list := append(list, num%10)\n\
    \    list := append(list, num%10)\n    list := append(list, num%10)\n    list\
    \ := append(list, num%10)\n    list := append(list, num%10)\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvwvzign0_test.go:73:6: expected ''('', found TestEven_Odd_Count

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074389
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    even, odd := 0, 0\n    for i := 0; i < num; i++ {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n    }\n    return []interface{}{even, odd}\n}\n\nfunc TestEven_Odd_Count(t\
    \ *testing.T) {\n  candidate := even_odd_count\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(7), expected: []interface{}{0, 1} },\n     { actual: candidate(-78),\
    \ expected: []interface{}{1, 1} },\n     { actual: candidate(3452), expected:\
    \ []interface{}{2, 2} },\n     { actual: candidate(346211), expected: []interface{}{3,\
    \ 3} },\n     { actual: candidate(-345821), expected: []interface{}{3, 3} },\n\
    \     { actual: candidate(-2), expected: []interface{}{1, 0} },\n     { actual:\
    \ candidate(-45347), expected: []interface{}{2, 3} },\n     { actual: candidate(0),\
    \ expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=7)]'\n    --- FAIL: TestEven_Odd_Count/test_num__1\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=1)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3452) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=346211)]'\n    --- FAIL: TestEven_Odd_Count/test_num__4\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__6\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp26obkfw9_test.go:46: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[%!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074380
- exit_code: 1
  program: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an integer. return a list that has the number of even and odd digits\
    \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1,\
    \ 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num\
    \ int) []interface{} {\n    list := []interface{}{}\n    num /= 10\n    for num\
    \ > 0 {\n        list = append(list, num)\n        num /= 10\n    }\n    return\
    \ list\n}\n\nfunc TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(7), expected: []interface{}{0,\
    \ 1} },\n     { actual: candidate(-78), expected: []interface{}{1, 1} },\n   \
    \  { actual: candidate(3452), expected: []interface{}{2, 2} },\n     { actual:\
    \ candidate(346211), expected: []interface{}{3, 3} },\n     { actual: candidate(-345821),\
    \ expected: []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
    \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n\
    \     { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEven_Odd_Count (0.00s)\n    --- FAIL: TestEven_Odd_Count/test_num__0\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=0) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__1 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=1) %!s(int=1)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__2\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=345) %!s(int=34) %!s(int=3)]'\n    --- FAIL: TestEven_Odd_Count/test_num__3\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=3) %!s(int=3)]',\
    \ got '[%!s(int=34621) %!s(int=3462) %!s(int=346) %!s(int=34) %!s(int=3)]'\n \
    \   --- FAIL: TestEven_Odd_Count/test_num__4 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=3) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__5\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__6 (0.00s)\n        tmp28qhuwnk_test.go:44:\
    \ expected '[%!s(int=2) %!s(int=3)]', got '[]'\n    --- FAIL: TestEven_Odd_Count/test_num__7\
    \ (0.00s)\n        tmp28qhuwnk_test.go:44: expected '[%!s(int=1) %!s(int=0)]',\
    \ got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074387
